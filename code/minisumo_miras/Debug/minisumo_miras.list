
minisumo_miras.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010994  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001654  08010b38  08010b38  00020b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801218c  0801218c  000304a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801218c  0801218c  0002218c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012194  08012194  000304a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012194  08012194  00022194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012198  08012198  00022198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  0801219c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de0  200004a0  0801263c  000304a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001280  0801263c  00031280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edb1  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003840  00000000  00000000  0004f281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00052ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  00054240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb17  00000000  00000000  00055828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d55c  00000000  00000000  0007133f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a59a0  00000000  00000000  0008e89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013423b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007940  00000000  00000000  0013428c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a0 	.word	0x200004a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010b1c 	.word	0x08010b1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	08010b1c 	.word	0x08010b1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <calculateBatteryVoltage>:
 * @brief calculates battery voltage based on the averaged out value from the ADC
 *
 * @param battery
 * @return float calculated voltage
 */
float calculateBatteryVoltage(Battery* battery){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	calculateAverage(&(battery->adc_average), battery->adc_reading);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f103 020c 	add.w	r2, r3, #12
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f001 fa8d 	bl	800253c <calculateAverage>
	battery->voltage = battery->adc_average.average * U_REF / RESOLUTION * (R7 + R8) / R8;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa84 	bl	8000534 <__aeabi_i2d>
 800102c:	a31d      	add	r3, pc, #116	; (adr r3, 80010a4 <calculateBatteryVoltage+0x9c>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fae9 	bl	8000608 <__aeabi_dmul>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <calculateBatteryVoltage+0x98>)
 8001044:	f7ff fc0a 	bl	800085c <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	a30f      	add	r3, pc, #60	; (adr r3, 8001090 <calculateBatteryVoltage+0x88>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff fad7 	bl	8000608 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	a30d      	add	r3, pc, #52	; (adr r3, 8001098 <calculateBatteryVoltage+0x90>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fbf8 	bl	800085c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fdc0 	bl	8000bf8 <__aeabi_d2f>
 8001078:	4602      	mov	r2, r0
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]
	return battery->voltage;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	ee07 3a90 	vmov	s15, r3
}
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	00000000 	.word	0x00000000
 8001094:	40c9fa00 	.word	0x40c9fa00
 8001098:	00000000 	.word	0x00000000
 800109c:	40a9c800 	.word	0x40a9c800
 80010a0:	40b00000 	.word	0x40b00000
 80010a4:	66666666 	.word	0x66666666
 80010a8:	400a6666 	.word	0x400a6666

080010ac <write_cmd>:

extern I2C_HandleTypeDef hi2c2;

static uint8_t buffer[DISPLAY_WIDTH*DISPLAY_HEIGHT/8] = {0};

static inline void write_cmd(const uint8_t byte) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af04      	add	r7, sp, #16
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, DISPLAY_ADDRESS << 1, 0x00, 1, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2200      	movs	r2, #0
 80010c8:	2178      	movs	r1, #120	; 0x78
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <write_cmd+0x2c>)
 80010cc:	f003 fdcc 	bl	8004c68 <HAL_I2C_Mem_Write>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200009b8 	.word	0x200009b8

080010dc <write_buffer>:

static inline void write_buffer(const void *src, const uint32_t size) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c2, DISPLAY_ADDRESS << 1, 0x40, 1, (uint8_t *) src, size, HAL_MAX_DELAY);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	f04f 32ff 	mov.w	r2, #4294967295
 80010ee:	9202      	str	r2, [sp, #8]
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	2240      	movs	r2, #64	; 0x40
 80010fa:	2178      	movs	r1, #120	; 0x78
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <write_buffer+0x30>)
 80010fe:	f003 fdb3 	bl	8004c68 <HAL_I2C_Mem_Write>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200009b8 	.word	0x200009b8

08001110 <set>:

static void set(int16_t x, int16_t y, const display_color_t color) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	460b      	mov	r3, r1
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	70fb      	strb	r3, [r7, #3]
	if(x<0 || x>=DISPLAY_WIDTH || y<0 || y>=DISPLAY_HEIGHT)
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db60      	blt.n	80011ec <set+0xdc>
 800112a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112e:	2b7f      	cmp	r3, #127	; 0x7f
 8001130:	dc5c      	bgt.n	80011ec <set+0xdc>
 8001132:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db58      	blt.n	80011ec <set+0xdc>
 800113a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800113e:	2b3f      	cmp	r3, #63	; 0x3f
 8001140:	dc54      	bgt.n	80011ec <set+0xdc>
	#ifdef DISPLAY_FLIP
		x = DISPLAY_WIDTH - x - 1;
		y = DISPLAY_HEIGHT - y - 1;
	#endif

	if(color) {
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d027      	beq.n	8001198 <set+0x88>
		buffer[x + (y/8)*DISPLAY_WIDTH] |=(1<<(y%8));
 8001148:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800114c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	da00      	bge.n	8001156 <set+0x46>
 8001154:	3307      	adds	r3, #7
 8001156:	10db      	asrs	r3, r3, #3
 8001158:	b218      	sxth	r0, r3
 800115a:	4603      	mov	r3, r0
 800115c:	01db      	lsls	r3, r3, #7
 800115e:	4413      	add	r3, r2
 8001160:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <set+0xe8>)
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	b25a      	sxtb	r2, r3
 8001166:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800116a:	4259      	negs	r1, r3
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	f001 0107 	and.w	r1, r1, #7
 8001174:	bf58      	it	pl
 8001176:	424b      	negpl	r3, r1
 8001178:	b21b      	sxth	r3, r3
 800117a:	4619      	mov	r1, r3
 800117c:	2301      	movs	r3, #1
 800117e:	408b      	lsls	r3, r1
 8001180:	b25b      	sxtb	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b259      	sxtb	r1, r3
 8001186:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800118a:	4603      	mov	r3, r0
 800118c:	01db      	lsls	r3, r3, #7
 800118e:	4413      	add	r3, r2
 8001190:	b2c9      	uxtb	r1, r1
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <set+0xe8>)
 8001194:	54d1      	strb	r1, [r2, r3]
 8001196:	e02a      	b.n	80011ee <set+0xde>
	} else {
		buffer[x + (y/8)*DISPLAY_WIDTH] &=~(1<<(y%8));
 8001198:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800119c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da00      	bge.n	80011a6 <set+0x96>
 80011a4:	3307      	adds	r3, #7
 80011a6:	10db      	asrs	r3, r3, #3
 80011a8:	b218      	sxth	r0, r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	01db      	lsls	r3, r3, #7
 80011ae:	4413      	add	r3, r2
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <set+0xe8>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	b25a      	sxtb	r2, r3
 80011b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ba:	4259      	negs	r1, r3
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	f001 0107 	and.w	r1, r1, #7
 80011c4:	bf58      	it	pl
 80011c6:	424b      	negpl	r3, r1
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	2301      	movs	r3, #1
 80011ce:	408b      	lsls	r3, r1
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	4013      	ands	r3, r2
 80011d8:	b259      	sxtb	r1, r3
 80011da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011de:	4603      	mov	r3, r0
 80011e0:	01db      	lsls	r3, r3, #7
 80011e2:	4413      	add	r3, r2
 80011e4:	b2c9      	uxtb	r1, r1
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <set+0xe8>)
 80011e8:	54d1      	strb	r1, [r2, r3]
 80011ea:	e000      	b.n	80011ee <set+0xde>
		return;
 80011ec:	bf00      	nop
	}
}
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	200004bc 	.word	0x200004bc

080011fc <display_init>:
	#endif

	return ((buffer[x + (y/8)*DISPLAY_WIDTH] & (1<<(y%8)))>0);
}

void display_init() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

	write_cmd(0xAE);	// display off
 8001200:	20ae      	movs	r0, #174	; 0xae
 8001202:	f7ff ff53 	bl	80010ac <write_cmd>
	write_cmd(0x20);	// set memory addressing mode
 8001206:	2020      	movs	r0, #32
 8001208:	f7ff ff50 	bl	80010ac <write_cmd>
	write_cmd(0x00);	// horizontal addressing mode
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff ff4d 	bl	80010ac <write_cmd>
	write_cmd(0xB0);	// set page start address for page addressing mode
 8001212:	20b0      	movs	r0, #176	; 0xb0
 8001214:	f7ff ff4a 	bl	80010ac <write_cmd>
	//write_cmd(0xC0);	// mirror vertically
	write_cmd(0xC8);	// set COM output scan direction mode
 8001218:	20c8      	movs	r0, #200	; 0xc8
 800121a:	f7ff ff47 	bl	80010ac <write_cmd>
	write_cmd(0x00);	// set low column address
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff ff44 	bl	80010ac <write_cmd>
	write_cmd(0x10);	// set high column address
 8001224:	2010      	movs	r0, #16
 8001226:	f7ff ff41 	bl	80010ac <write_cmd>
	write_cmd(0x40);	// set start line address
 800122a:	2040      	movs	r0, #64	; 0x40
 800122c:	f7ff ff3e 	bl	80010ac <write_cmd>
	write_cmd(0x81);	// set contrast
 8001230:	2081      	movs	r0, #129	; 0x81
 8001232:	f7ff ff3b 	bl	80010ac <write_cmd>
	write_cmd(0xFF);	//
 8001236:	20ff      	movs	r0, #255	; 0xff
 8001238:	f7ff ff38 	bl	80010ac <write_cmd>
	//write_cmd(0xA0);	// mirror horizontally
	write_cmd(0xA1);	// set segment remap 0 to 127
 800123c:	20a1      	movs	r0, #161	; 0xa1
 800123e:	f7ff ff35 	bl	80010ac <write_cmd>
	//write_cmd(0xA7);	// inverse colors
	write_cmd(0xA6);	// set normal color
 8001242:	20a6      	movs	r0, #166	; 0xa6
 8001244:	f7ff ff32 	bl	80010ac <write_cmd>
	write_cmd(0xA8);	// set multiplex ratio 1 to 64
 8001248:	20a8      	movs	r0, #168	; 0xa8
 800124a:	f7ff ff2f 	bl	80010ac <write_cmd>
	write_cmd(0x3F);	//
 800124e:	203f      	movs	r0, #63	; 0x3f
 8001250:	f7ff ff2c 	bl	80010ac <write_cmd>
	write_cmd(0xA4);	// output follows RAM content
 8001254:	20a4      	movs	r0, #164	; 0xa4
 8001256:	f7ff ff29 	bl	80010ac <write_cmd>
	write_cmd(0xD3);	// set display offset
 800125a:	20d3      	movs	r0, #211	; 0xd3
 800125c:	f7ff ff26 	bl	80010ac <write_cmd>
	write_cmd(0x00);	//
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ff23 	bl	80010ac <write_cmd>
	write_cmd(0xD5);	// set display clock divide ratio
 8001266:	20d5      	movs	r0, #213	; 0xd5
 8001268:	f7ff ff20 	bl	80010ac <write_cmd>
	write_cmd(0xF0);	//
 800126c:	20f0      	movs	r0, #240	; 0xf0
 800126e:	f7ff ff1d 	bl	80010ac <write_cmd>
	write_cmd(0xD9);	// set pre-charge period
 8001272:	20d9      	movs	r0, #217	; 0xd9
 8001274:	f7ff ff1a 	bl	80010ac <write_cmd>
	write_cmd(0x22);	//
 8001278:	2022      	movs	r0, #34	; 0x22
 800127a:	f7ff ff17 	bl	80010ac <write_cmd>
	write_cmd(0xDA);	// set COM pins hardware configuration
 800127e:	20da      	movs	r0, #218	; 0xda
 8001280:	f7ff ff14 	bl	80010ac <write_cmd>
	write_cmd(0x12);	//
 8001284:	2012      	movs	r0, #18
 8001286:	f7ff ff11 	bl	80010ac <write_cmd>
	write_cmd(0xDB);	// set VCOMH
 800128a:	20db      	movs	r0, #219	; 0xdb
 800128c:	f7ff ff0e 	bl	80010ac <write_cmd>
	write_cmd(0x20);	//
 8001290:	2020      	movs	r0, #32
 8001292:	f7ff ff0b 	bl	80010ac <write_cmd>
	write_cmd(0x8D);	// set DC-DC enable
 8001296:	208d      	movs	r0, #141	; 0x8d
 8001298:	f7ff ff08 	bl	80010ac <write_cmd>
	write_cmd(0x14);	//
 800129c:	2014      	movs	r0, #20
 800129e:	f7ff ff05 	bl	80010ac <write_cmd>
	write_cmd(0xAF);	// set display on
 80012a2:	20af      	movs	r0, #175	; 0xaf
 80012a4:	f7ff ff02 	bl	80010ac <write_cmd>

	display_fill(DISPLAY_COLOR_BLACK);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 f803 	bl	80012b4 <display_fill>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <display_fill>:

void display_fill(const display_color_t color) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	if(color)
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <display_fill+0x1e>
		memset(buffer, 0xFF, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
 80012c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c8:	21ff      	movs	r1, #255	; 0xff
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <display_fill+0x34>)
 80012cc:	f00a ff36 	bl	800c13c <memset>
	else
		memset(buffer, 0x00, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
}
 80012d0:	e005      	b.n	80012de <display_fill+0x2a>
		memset(buffer, 0x00, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
 80012d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d6:	2100      	movs	r1, #0
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <display_fill+0x34>)
 80012da:	f00a ff2f 	bl	800c13c <memset>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200004bc 	.word	0x200004bc

080012ec <display_render>:

void display_render() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<DISPLAY_HEIGHT/8; i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	e016      	b.n	8001326 <display_render+0x3a>
		write_cmd(0xB0 + i);	// set current RAM page address
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3b50      	subs	r3, #80	; 0x50
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fed4 	bl	80010ac <write_cmd>
		write_cmd(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fed1 	bl	80010ac <write_cmd>
		write_cmd(0x10);
 800130a:	2010      	movs	r0, #16
 800130c:	f7ff fece 	bl	80010ac <write_cmd>
		write_buffer(&buffer[DISPLAY_WIDTH*i], DISPLAY_WIDTH);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	01db      	lsls	r3, r3, #7
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <display_render+0x4c>)
 8001316:	4413      	add	r3, r2
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fede 	bl	80010dc <write_buffer>
	for(uint8_t i=0; i<DISPLAY_HEIGHT/8; i++) {
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3301      	adds	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b07      	cmp	r3, #7
 800132a:	d9e5      	bls.n	80012f8 <display_render+0xc>
	}
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200004bc 	.word	0x200004bc

0800133c <display_bitmap>:
			set(i + x, j + y, !get(i + x, j + y));
		}
	}
}

void display_bitmap(const int16_t x, const int16_t y, const display_color_t color, const void *src, const int16_t w, const int16_t h) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	4603      	mov	r3, r0
 8001346:	81fb      	strh	r3, [r7, #14]
 8001348:	460b      	mov	r3, r1
 800134a:	81bb      	strh	r3, [r7, #12]
 800134c:	4613      	mov	r3, r2
 800134e:	72fb      	strb	r3, [r7, #11]
	const uint16_t byte_per_row = ceilf((float)w/8.f);
 8001350:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001360:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001364:	eeb0 0a47 	vmov.f32	s0, s14
 8001368:	f00f fb96 	bl	8010a98 <ceilf>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001374:	ee17 3a90 	vmov	r3, s15
 8001378:	827b      	strh	r3, [r7, #18]

	for(int16_t i=0; i<h; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	82fb      	strh	r3, [r7, #22]
 800137e:	e05a      	b.n	8001436 <display_bitmap+0xfa>
		for(int16_t j=0; j<w; j++) {
 8001380:	2300      	movs	r3, #0
 8001382:	82bb      	strh	r3, [r7, #20]
 8001384:	e04b      	b.n	800141e <display_bitmap+0xe2>

			if(((uint8_t *)src)[i*byte_per_row + j/8] & (1<<(7 - j%8)))
 8001386:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800138a:	8a7a      	ldrh	r2, [r7, #18]
 800138c:	fb03 f202 	mul.w	r2, r3, r2
 8001390:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001394:	2b00      	cmp	r3, #0
 8001396:	da00      	bge.n	800139a <display_bitmap+0x5e>
 8001398:	3307      	adds	r3, #7
 800139a:	10db      	asrs	r3, r3, #3
 800139c:	b21b      	sxth	r3, r3
 800139e:	4413      	add	r3, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ae:	425a      	negs	r2, r3
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	f002 0207 	and.w	r2, r2, #7
 80013b8:	bf58      	it	pl
 80013ba:	4253      	negpl	r3, r2
 80013bc:	b21b      	sxth	r3, r3
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	fa41 f303 	asr.w	r3, r1, r3
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00e      	beq.n	80013ec <display_bitmap+0xb0>
				set(j + x, i + y, color);
 80013ce:	8aba      	ldrh	r2, [r7, #20]
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	4413      	add	r3, r2
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b218      	sxth	r0, r3
 80013d8:	8afa      	ldrh	r2, [r7, #22]
 80013da:	89bb      	ldrh	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	7afa      	ldrb	r2, [r7, #11]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fe93 	bl	8001110 <set>
 80013ea:	e012      	b.n	8001412 <display_bitmap+0xd6>
			else
				set(j + x, i + y, !color);
 80013ec:	8aba      	ldrh	r2, [r7, #20]
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b218      	sxth	r0, r3
 80013f6:	8afa      	ldrh	r2, [r7, #22]
 80013f8:	89bb      	ldrh	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b219      	sxth	r1, r3
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf0c      	ite	eq
 8001406:	2301      	moveq	r3, #1
 8001408:	2300      	movne	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	f7ff fe7f 	bl	8001110 <set>
		for(int16_t j=0; j<w; j++) {
 8001412:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001416:	b29b      	uxth	r3, r3
 8001418:	3301      	adds	r3, #1
 800141a:	b29b      	uxth	r3, r3
 800141c:	82bb      	strh	r3, [r7, #20]
 800141e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001422:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbad      	blt.n	8001386 <display_bitmap+0x4a>
	for(int16_t i=0; i<h; i++) {
 800142a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800142e:	b29b      	uxth	r3, r3
 8001430:	3301      	adds	r3, #1
 8001432:	b29b      	uxth	r3, r3
 8001434:	82fb      	strh	r3, [r7, #22]
 8001436:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800143a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800143e:	429a      	cmp	r2, r3
 8001440:	db9e      	blt.n	8001380 <display_bitmap+0x44>
		}
	}
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <character>:

static void character(const int16_t x, const int16_t y, const display_color_t color, const display_font_t font, const char c) {
 800144c:	b082      	sub	sp, #8
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
 800145a:	460b      	mov	r3, r1
 800145c:	80bb      	strh	r3, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	70fb      	strb	r3, [r7, #3]
	const void *src = &font.data[(c - ' ')*font.height];
 8001462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001464:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001468:	3b20      	subs	r3, #32
 800146a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800146e:	fb01 f303 	mul.w	r3, r1, r3
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
	const uint16_t byte_per_row = ceilf((float)font.width/16.f);
 8001478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001488:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800148c:	eeb0 0a47 	vmov.f32	s0, s14
 8001490:	f00f fb02 	bl	8010a98 <ceilf>
 8001494:	eef0 7a40 	vmov.f32	s15, s0
 8001498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800149c:	ee17 3a90 	vmov	r3, s15
 80014a0:	81fb      	strh	r3, [r7, #14]

	for(int16_t i=0; i<font.height; i++) {
 80014a2:	2300      	movs	r3, #0
 80014a4:	82fb      	strh	r3, [r7, #22]
 80014a6:	e05a      	b.n	800155e <character+0x112>
		for(int16_t j=0; j<font.width; j++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	82bb      	strh	r3, [r7, #20]
 80014ac:	e04b      	b.n	8001546 <character+0xfa>

			if(((uint16_t *)src)[i*byte_per_row + j/16] & (1<<(15 - j%16)))
 80014ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b2:	89fa      	ldrh	r2, [r7, #14]
 80014b4:	fb03 f202 	mul.w	r2, r3, r2
 80014b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da00      	bge.n	80014c2 <character+0x76>
 80014c0:	330f      	adds	r3, #15
 80014c2:	111b      	asrs	r3, r3, #4
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4413      	add	r3, r2
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014d6:	425a      	negs	r2, r3
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	f002 020f 	and.w	r2, r2, #15
 80014e0:	bf58      	it	pl
 80014e2:	4253      	negpl	r3, r2
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	f1c3 030f 	rsb	r3, r3, #15
 80014ea:	fa41 f303 	asr.w	r3, r1, r3
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00e      	beq.n	8001514 <character+0xc8>
				set(j + x, i + y, color);
 80014f6:	8aba      	ldrh	r2, [r7, #20]
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4413      	add	r3, r2
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b218      	sxth	r0, r3
 8001500:	8afa      	ldrh	r2, [r7, #22]
 8001502:	88bb      	ldrh	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21b      	sxth	r3, r3
 800150a:	78fa      	ldrb	r2, [r7, #3]
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fdff 	bl	8001110 <set>
 8001512:	e012      	b.n	800153a <character+0xee>
			else
				set(j + x, i + y, !color);
 8001514:	8aba      	ldrh	r2, [r7, #20]
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	4413      	add	r3, r2
 800151a:	b29b      	uxth	r3, r3
 800151c:	b218      	sxth	r0, r3
 800151e:	8afa      	ldrh	r2, [r7, #22]
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	b29b      	uxth	r3, r3
 8001526:	b219      	sxth	r1, r3
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf0c      	ite	eq
 800152e:	2301      	moveq	r3, #1
 8001530:	2300      	movne	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	f7ff fdeb 	bl	8001110 <set>
		for(int16_t j=0; j<font.width; j++) {
 800153a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800153e:	b29b      	uxth	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	b29b      	uxth	r3, r3
 8001544:	82bb      	strh	r3, [r7, #20]
 8001546:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800154a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800154e:	4293      	cmp	r3, r2
 8001550:	dbad      	blt.n	80014ae <character+0x62>
	for(int16_t i=0; i<font.height; i++) {
 8001552:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001556:	b29b      	uxth	r3, r3
 8001558:	3301      	adds	r3, #1
 800155a:	b29b      	uxth	r3, r3
 800155c:	82fb      	strh	r3, [r7, #22]
 800155e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001562:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001566:	4293      	cmp	r3, r2
 8001568:	db9e      	blt.n	80014a8 <character+0x5c>
		}
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001576:	b002      	add	sp, #8
 8001578:	4770      	bx	lr

0800157a <display_printf>:

void display_printf(const int16_t x, const int16_t y, const display_color_t color, const display_font_t font, const char *format, ...) {
 800157a:	b40c      	push	{r2, r3}
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af02      	add	r7, sp, #8
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001584:	4603      	mov	r3, r0
 8001586:	80fb      	strh	r3, [r7, #6]
 8001588:	460b      	mov	r3, r1
 800158a:	80bb      	strh	r3, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	70fb      	strb	r3, [r7, #3]
	va_list valist;
	va_start(valist, format);
 8001590:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001594:	627b      	str	r3, [r7, #36]	; 0x24

	char buffer[22] = {0};
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	821a      	strh	r2, [r3, #16]
	vsnprintf(buffer, 22, format, valist);
 80015aa:	f107 000c 	add.w	r0, r7, #12
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015b2:	2116      	movs	r1, #22
 80015b4:	f00c fb4c 	bl	800dc50 <vsniprintf>

	const size_t n = strlen(buffer);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe0f 	bl	80001e0 <strlen>
 80015c2:	62b8      	str	r0, [r7, #40]	; 0x28

	for(size_t i=0; i<n; i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c8:	e01c      	b.n	8001604 <display_printf+0x8a>
		character(x + i*font.width, y, color, font, buffer[i]);
 80015ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	fb12 f303 	smulbb	r3, r2, r3
 80015d8:	b29a      	uxth	r2, r3
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	4413      	add	r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b218      	sxth	r0, r3
 80015e2:	f107 020c 	add.w	r2, r7, #12
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015fa:	f7ff ff27 	bl	800144c <character>
	for(size_t i=0; i<n; i++) {
 80015fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001600:	3301      	adds	r3, #1
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	429a      	cmp	r2, r3
 800160a:	d3de      	bcc.n	80015ca <display_printf+0x50>
	}
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001618:	b002      	add	sp, #8
 800161a:	4770      	bx	lr

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f001 fbe9 	bl	8002df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f8cf 	bl	80017c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162a:	f000 fb7b 	bl	8001d24 <MX_GPIO_Init>
  MX_DMA_Init();
 800162e:	f000 fb59 	bl	8001ce4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001632:	f000 f9ad 	bl	8001990 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001636:	f000 fa07 	bl	8001a48 <MX_I2C3_Init>
  MX_ADC1_Init();
 800163a:	f000 f92d 	bl	8001898 <MX_ADC1_Init>
  MX_I2C2_Init();
 800163e:	f000 f9d5 	bl	80019ec <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001642:	f000 fb25 	bl	8001c90 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001646:	f000 fa2d 	bl	8001aa4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800164a:	f000 faa1 	bl	8001b90 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800164e:	2100      	movs	r1, #0
 8001650:	4846      	ldr	r0, [pc, #280]	; (800176c <main+0x150>)
 8001652:	f004 fd07 	bl	8006064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001656:	2100      	movs	r1, #0
 8001658:	4845      	ldr	r0, [pc, #276]	; (8001770 <main+0x154>)
 800165a:	f004 fd03 	bl	8006064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800165e:	2104      	movs	r1, #4
 8001660:	4843      	ldr	r0, [pc, #268]	; (8001770 <main+0x154>)
 8001662:	f004 fcff 	bl	8006064 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, values_adc, 4);
 8001666:	2204      	movs	r2, #4
 8001668:	4942      	ldr	r1, [pc, #264]	; (8001774 <main+0x158>)
 800166a:	4843      	ldr	r0, [pc, #268]	; (8001778 <main+0x15c>)
 800166c:	f001 fc9e 	bl	8002fac <HAL_ADC_Start_DMA>

  TOF2.vl53l0x_c.I2cHandle = &hi2c3;
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <main+0x160>)
 8001672:	4a43      	ldr	r2, [pc, #268]	; (8001780 <main+0x164>)
 8001674:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  TOF2.vl53l0x_c.I2cDevAddr = 0x52;
 8001678:	4b40      	ldr	r3, [pc, #256]	; (800177c <main+0x160>)
 800167a:	2252      	movs	r2, #82	; 0x52
 800167c:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

  TOF3.vl53l0x_c.I2cHandle = &hi2c1;
 8001680:	4b40      	ldr	r3, [pc, #256]	; (8001784 <main+0x168>)
 8001682:	4a41      	ldr	r2, [pc, #260]	; (8001788 <main+0x16c>)
 8001684:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  TOF3.vl53l0x_c.I2cDevAddr = 0x52;
 8001688:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <main+0x168>)
 800168a:	2252      	movs	r2, #82	; 0x52
 800168c:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

  TOF4.vl53l0x_c.I2cHandle = &hi2c3;
 8001690:	4b3e      	ldr	r3, [pc, #248]	; (800178c <main+0x170>)
 8001692:	4a3b      	ldr	r2, [pc, #236]	; (8001780 <main+0x164>)
 8001694:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  TOF4.vl53l0x_c.I2cDevAddr = 0x52;
 8001698:	4b3c      	ldr	r3, [pc, #240]	; (800178c <main+0x170>)
 800169a:	2252      	movs	r2, #82	; 0x52
 800169c:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

  TOF5.vl53l0x_c.I2cHandle = &hi2c3;
 80016a0:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <main+0x174>)
 80016a2:	4a37      	ldr	r2, [pc, #220]	; (8001780 <main+0x164>)
 80016a4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  TOF5.vl53l0x_c.I2cDevAddr = 0x52;
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <main+0x174>)
 80016aa:	2252      	movs	r2, #82	; 0x52
 80016ac:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

  HAL_GPIO_WritePin(TOF_X2_GPIO_Port, TOF_X2_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b6:	4837      	ldr	r0, [pc, #220]	; (8001794 <main+0x178>)
 80016b8:	f002 fe54 	bl	8004364 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOF_X3_GPIO_Port, TOF_X3_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c2:	4834      	ldr	r0, [pc, #208]	; (8001794 <main+0x178>)
 80016c4:	f002 fe4e 	bl	8004364 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOF_X4_GPIO_Port, TOF_X4_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ce:	4832      	ldr	r0, [pc, #200]	; (8001798 <main+0x17c>)
 80016d0:	f002 fe48 	bl	8004364 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOF_X5_GPIO_Port, TOF_X5_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016da:	4830      	ldr	r0, [pc, #192]	; (800179c <main+0x180>)
 80016dc:	f002 fe42 	bl	8004364 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80016e0:	2014      	movs	r0, #20
 80016e2:	f001 fbfb 	bl	8002edc <HAL_Delay>

  //HAL_GPIO_WritePin(TOF_X5_GPIO_Port, TOF_X5_Pin, GPIO_PIN_SET); // Enable XSHUT
  //VL53L0X_SetDeviceAddress(&(TOF5.vl53l0x_c), 0x62);
  //TOF5.vl53l0x_c.I2cDevAddr = 0x62;

  HAL_GPIO_WritePin(TOF_X2_GPIO_Port, TOF_X2_Pin, GPIO_PIN_SET); // Enable XSHUT
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ec:	4829      	ldr	r0, [pc, #164]	; (8001794 <main+0x178>)
 80016ee:	f002 fe39 	bl	8004364 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TOF_X3_GPIO_Port, TOF_X3_Pin, GPIO_PIN_SET); // Enable XSHUT
  HAL_GPIO_WritePin(TOF_X4_GPIO_Port, TOF_X4_Pin, GPIO_PIN_SET); // Enable XSHUT
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f8:	4827      	ldr	r0, [pc, #156]	; (8001798 <main+0x17c>)
 80016fa:	f002 fe33 	bl	8004364 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TOF_X5_GPIO_Port, TOF_X5_Pin, GPIO_PIN_SET); // Enable XSHUT

  tof_vl53l0_init(&TOF3.vl53l0x_c, &VhvSettings , &PhaseCal, &refSpadCount, &isApertureSpads);
 80016fe:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <main+0x184>)
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <main+0x188>)
 8001704:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <main+0x18c>)
 8001706:	4929      	ldr	r1, [pc, #164]	; (80017ac <main+0x190>)
 8001708:	4829      	ldr	r0, [pc, #164]	; (80017b0 <main+0x194>)
 800170a:	f001 fb03 	bl	8002d14 <tof_vl53l0_init>
  tof_vl53l0_init(&TOF4.vl53l0x_c, &VhvSettings , &PhaseCal, &refSpadCount, &isApertureSpads);
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <main+0x184>)
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <main+0x188>)
 8001714:	4a24      	ldr	r2, [pc, #144]	; (80017a8 <main+0x18c>)
 8001716:	4925      	ldr	r1, [pc, #148]	; (80017ac <main+0x190>)
 8001718:	4826      	ldr	r0, [pc, #152]	; (80017b4 <main+0x198>)
 800171a:	f001 fafb 	bl	8002d14 <tof_vl53l0_init>
  //tof_vl53l0_init(&TOF5.vl53l0x_c, &VhvSettings , &PhaseCal, &refSpadCount, &isApertureSpads);

  display_init();
 800171e:	f7ff fd6d 	bl	80011fc <display_init>
  display_printf(15, 20, DISPLAY_COLOR_WHITE, display_font_7x10, "Miras minisumo");
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <main+0x19c>)
 8001724:	4a25      	ldr	r2, [pc, #148]	; (80017bc <main+0x1a0>)
 8001726:	9201      	str	r2, [sp, #4]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	9200      	str	r2, [sp, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	2114      	movs	r1, #20
 8001732:	200f      	movs	r0, #15
 8001734:	f7ff ff21 	bl	800157a <display_printf>
  display_render();
 8001738:	f7ff fdd8 	bl	80012ec <display_render>
  battery.adc_reading = values_adc[0];
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <main+0x158>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	b29a      	uxth	r2, r3
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <main+0x1a4>)
 8001744:	801a      	strh	r2, [r3, #0]
  initAverage(& (battery.adc_average), battery.adc_reading);
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <main+0x1a4>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	481d      	ldr	r0, [pc, #116]	; (80017c4 <main+0x1a8>)
 800174e:	f000 fecd 	bl	80024ec <initAverage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1)
 8001752:	2110      	movs	r1, #16
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <main+0x178>)
 8001756:	f002 fded 	bl	8004334 <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d102      	bne.n	8001766 <main+0x14a>
		wait_for_fight_start();
 8001760:	f000 fc4a 	bl	8001ff8 <wait_for_fight_start>
 8001764:	e7f5      	b.n	8001752 <main+0x136>
	else
		debug_screen();
 8001766:	f000 fb97 	bl	8001e98 <debug_screen>
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1)
 800176a:	e7f2      	b.n	8001752 <main+0x136>
 800176c:	20000a60 	.word	0x20000a60
 8001770:	20000aa8 	.word	0x20000aa8
 8001774:	20000b60 	.word	0x20000b60
 8001778:	200008bc 	.word	0x200008bc
 800177c:	20000b70 	.word	0x20000b70
 8001780:	20000a0c 	.word	0x20000a0c
 8001784:	20000d1c 	.word	0x20000d1c
 8001788:	20000964 	.word	0x20000964
 800178c:	20000ec8 	.word	0x20000ec8
 8001790:	20001074 	.word	0x20001074
 8001794:	40020800 	.word	0x40020800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400
 80017a0:	20001224 	.word	0x20001224
 80017a4:	20001220 	.word	0x20001220
 80017a8:	20001226 	.word	0x20001226
 80017ac:	20001225 	.word	0x20001225
 80017b0:	20000d38 	.word	0x20000d38
 80017b4:	20000ee4 	.word	0x20000ee4
 80017b8:	080118bc 	.word	0x080118bc
 80017bc:	08010b38 	.word	0x08010b38
 80017c0:	20000b34 	.word	0x20000b34
 80017c4:	20000b40 	.word	0x20000b40

080017c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b094      	sub	sp, #80	; 0x50
 80017cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ce:	f107 0320 	add.w	r3, r7, #32
 80017d2:	2230      	movs	r2, #48	; 0x30
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00a fcb0 	bl	800c13c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <SystemClock_Config+0xc8>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	4a26      	ldr	r2, [pc, #152]	; (8001890 <SystemClock_Config+0xc8>)
 80017f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fa:	6413      	str	r3, [r2, #64]	; 0x40
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <SystemClock_Config+0xc8>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <SystemClock_Config+0xcc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a20      	ldr	r2, [pc, #128]	; (8001894 <SystemClock_Config+0xcc>)
 8001812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <SystemClock_Config+0xcc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001824:	2301      	movs	r3, #1
 8001826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182e:	2302      	movs	r3, #2
 8001830:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001838:	2304      	movs	r3, #4
 800183a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800183c:	2364      	movs	r3, #100	; 0x64
 800183e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001840:	2302      	movs	r3, #2
 8001842:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001844:	2304      	movs	r3, #4
 8001846:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fec9 	bl	80055e4 <HAL_RCC_OscConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001858:	f000 fb18 	bl	8001e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185c:	230f      	movs	r3, #15
 800185e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001860:	2302      	movs	r3, #2
 8001862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	2103      	movs	r1, #3
 8001878:	4618      	mov	r0, r3
 800187a:	f004 f92b 	bl	8005ad4 <HAL_RCC_ClockConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001884:	f000 fb02 	bl	8001e8c <Error_Handler>
  }
}
 8001888:	bf00      	nop
 800188a:	3750      	adds	r7, #80	; 0x50
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000

08001898 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800189e:	463b      	mov	r3, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018aa:	4b36      	ldr	r3, [pc, #216]	; (8001984 <MX_ADC1_Init+0xec>)
 80018ac:	4a36      	ldr	r2, [pc, #216]	; (8001988 <MX_ADC1_Init+0xf0>)
 80018ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018b0:	4b34      	ldr	r3, [pc, #208]	; (8001984 <MX_ADC1_Init+0xec>)
 80018b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018b8:	4b32      	ldr	r3, [pc, #200]	; (8001984 <MX_ADC1_Init+0xec>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <MX_ADC1_Init+0xec>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <MX_ADC1_Init+0xec>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <MX_ADC1_Init+0xec>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <MX_ADC1_Init+0xec>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <MX_ADC1_Init+0xec>)
 80018da:	4a2c      	ldr	r2, [pc, #176]	; (800198c <MX_ADC1_Init+0xf4>)
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <MX_ADC1_Init+0xec>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <MX_ADC1_Init+0xec>)
 80018e6:	2204      	movs	r2, #4
 80018e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <MX_ADC1_Init+0xec>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <MX_ADC1_Init+0xec>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f8:	4822      	ldr	r0, [pc, #136]	; (8001984 <MX_ADC1_Init+0xec>)
 80018fa:	f001 fb13 	bl	8002f24 <HAL_ADC_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001904:	f000 fac2 	bl	8001e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001908:	2309      	movs	r3, #9
 800190a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001910:	2307      	movs	r3, #7
 8001912:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	481a      	ldr	r0, [pc, #104]	; (8001984 <MX_ADC1_Init+0xec>)
 800191a:	f001 fc55 	bl	80031c8 <HAL_ADC_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001924:	f000 fab2 	bl	8001e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001928:	230b      	movs	r3, #11
 800192a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800192c:	2302      	movs	r3, #2
 800192e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4813      	ldr	r0, [pc, #76]	; (8001984 <MX_ADC1_Init+0xec>)
 8001936:	f001 fc47 	bl	80031c8 <HAL_ADC_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001940:	f000 faa4 	bl	8001e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001944:	230c      	movs	r3, #12
 8001946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001948:	2303      	movs	r3, #3
 800194a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800194c:	463b      	mov	r3, r7
 800194e:	4619      	mov	r1, r3
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <MX_ADC1_Init+0xec>)
 8001952:	f001 fc39 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800195c:	f000 fa96 	bl	8001e8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001960:	230d      	movs	r3, #13
 8001962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001964:	2304      	movs	r3, #4
 8001966:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_ADC1_Init+0xec>)
 800196e:	f001 fc2b 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001978:	f000 fa88 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200008bc 	.word	0x200008bc
 8001988:	40012000 	.word	0x40012000
 800198c:	0f000001 	.word	0x0f000001

08001990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_I2C1_Init+0x50>)
 8001996:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <MX_I2C1_Init+0x54>)
 8001998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_I2C1_Init+0x50>)
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <MX_I2C1_Init+0x58>)
 800199e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019ce:	f002 fce3 	bl	8004398 <HAL_I2C_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019d8:	f000 fa58 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000964 	.word	0x20000964
 80019e4:	40005400 	.word	0x40005400
 80019e8:	000186a0 	.word	0x000186a0

080019ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <MX_I2C2_Init+0x50>)
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <MX_I2C2_Init+0x54>)
 80019f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_I2C2_Init+0x50>)
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <MX_I2C2_Init+0x58>)
 80019fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_I2C2_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_I2C2_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_I2C2_Init+0x50>)
 8001a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <MX_I2C2_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_I2C2_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <MX_I2C2_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_I2C2_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <MX_I2C2_Init+0x50>)
 8001a2a:	f002 fcb5 	bl	8004398 <HAL_I2C_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a34:	f000 fa2a 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200009b8 	.word	0x200009b8
 8001a40:	40005800 	.word	0x40005800
 8001a44:	000186a0 	.word	0x000186a0

08001a48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_I2C3_Init+0x50>)
 8001a4e:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <MX_I2C3_Init+0x54>)
 8001a50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_I2C3_Init+0x50>)
 8001a54:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <MX_I2C3_Init+0x58>)
 8001a56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_I2C3_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_I2C3_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_I2C3_Init+0x50>)
 8001a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a6a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_I2C3_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_I2C3_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_I2C3_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_I2C3_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_I2C3_Init+0x50>)
 8001a86:	f002 fc87 	bl	8004398 <HAL_I2C_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a90:	f000 f9fc 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000a0c 	.word	0x20000a0c
 8001a9c:	40005c00 	.word	0x40005c00
 8001aa0:	000186a0 	.word	0x000186a0

08001aa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	; 0x38
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	f107 0320 	add.w	r3, r7, #32
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
 8001ad0:	615a      	str	r2, [r3, #20]
 8001ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001ad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001ade:	220f      	movs	r2, #15
 8001ae0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001aea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001aee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afc:	4823      	ldr	r0, [pc, #140]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001afe:	f004 fa09 	bl	8005f14 <HAL_TIM_Base_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b08:	f000 f9c0 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b16:	4619      	mov	r1, r3
 8001b18:	481c      	ldr	r0, [pc, #112]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001b1a:	f004 fc15 	bl	8006348 <HAL_TIM_ConfigClockSource>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b24:	f000 f9b2 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b28:	4818      	ldr	r0, [pc, #96]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001b2a:	f004 fa42 	bl	8005fb2 <HAL_TIM_PWM_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b34:	f000 f9aa 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b40:	f107 0320 	add.w	r3, r7, #32
 8001b44:	4619      	mov	r1, r3
 8001b46:	4811      	ldr	r0, [pc, #68]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001b48:	f004 ff92 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001b52:	f000 f99b 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b56:	2360      	movs	r3, #96	; 0x60
 8001b58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4807      	ldr	r0, [pc, #28]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001b6e:	f004 fb29 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001b78:	f000 f988 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <MX_TIM2_Init+0xe8>)
 8001b7e:	f000 fef7 	bl	8002970 <HAL_TIM_MspPostInit>

}
 8001b82:	bf00      	nop
 8001b84:	3738      	adds	r7, #56	; 0x38
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000a60 	.word	0x20000a60

08001b90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08e      	sub	sp, #56	; 0x38
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	f107 0320 	add.w	r3, r7, #32
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]
 8001bbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bc0:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001bc2:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <MX_TIM3_Init+0xfc>)
 8001bc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001bd4:	2263      	movs	r2, #99	; 0x63
 8001bd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be4:	4828      	ldr	r0, [pc, #160]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001be6:	f004 f995 	bl	8005f14 <HAL_TIM_Base_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001bf0:	f000 f94c 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4821      	ldr	r0, [pc, #132]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001c02:	f004 fba1 	bl	8006348 <HAL_TIM_ConfigClockSource>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001c0c:	f000 f93e 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c10:	481d      	ldr	r0, [pc, #116]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001c12:	f004 f9ce 	bl	8005fb2 <HAL_TIM_PWM_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001c1c:	f000 f936 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c28:	f107 0320 	add.w	r3, r7, #32
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4816      	ldr	r0, [pc, #88]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001c30:	f004 ff1e 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001c3a:	f000 f927 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3e:	2360      	movs	r3, #96	; 0x60
 8001c40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2200      	movs	r2, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	480c      	ldr	r0, [pc, #48]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001c56:	f004 fab5 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001c60:	f000 f914 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2204      	movs	r2, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4807      	ldr	r0, [pc, #28]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001c6c:	f004 faaa 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001c76:	f000 f909 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <MX_TIM3_Init+0xf8>)
 8001c7c:	f000 fe78 	bl	8002970 <HAL_TIM_MspPostInit>

}
 8001c80:	bf00      	nop
 8001c82:	3738      	adds	r7, #56	; 0x38
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000aa8 	.word	0x20000aa8
 8001c8c:	40000400 	.word	0x40000400

08001c90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <MX_USART2_UART_Init+0x4c>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <MX_USART2_UART_Init+0x50>)
 8001c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <MX_USART2_UART_Init+0x4c>)
 8001c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <MX_USART2_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_USART2_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <MX_USART2_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_USART2_UART_Init+0x4c>)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <MX_USART2_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <MX_USART2_UART_Init+0x4c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_USART2_UART_Init+0x4c>)
 8001cc8:	f004 ff40 	bl	8006b4c <HAL_UART_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cd2:	f000 f8db 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000af0 	.word	0x20000af0
 8001ce0:	40004400 	.word	0x40004400

08001ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_DMA_Init+0x3c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <MX_DMA_Init+0x3c>)
 8001cf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_DMA_Init+0x3c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2038      	movs	r0, #56	; 0x38
 8001d0c:	f001 fde7 	bl	80038de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d10:	2038      	movs	r0, #56	; 0x38
 8001d12:	f001 fe00 	bl	8003916 <HAL_NVIC_EnableIRQ>

}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a4e      	ldr	r2, [pc, #312]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a40      	ldr	r2, [pc, #256]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a39      	ldr	r2, [pc, #228]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <MX_GPIO_Init+0x158>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_X3_Pin|TOF_X2_Pin|TOF_X1_Pin|TOF_X6_Pin
 8001daa:	2200      	movs	r2, #0
 8001dac:	f64e 0120 	movw	r1, #59424	; 0xe820
 8001db0:	4833      	ldr	r0, [pc, #204]	; (8001e80 <MX_GPIO_Init+0x15c>)
 8001db2:	f002 fad7 	bl	8004364 <HAL_GPIO_WritePin>
                          |LS_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motor_R_DIR_2_Pin|motor_R_DIR_1_Pin|user_LED_Pin|TOF_X5_Pin
 8001db6:	2200      	movs	r2, #0
 8001db8:	f246 3105 	movw	r1, #25349	; 0x6305
 8001dbc:	4831      	ldr	r0, [pc, #196]	; (8001e84 <MX_GPIO_Init+0x160>)
 8001dbe:	f002 fad1 	bl	8004364 <HAL_GPIO_WritePin>
                          |motor_L_DIR_1_Pin|motor_L_DIR_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_X4_GPIO_Port, TOF_X4_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc8:	482f      	ldr	r0, [pc, #188]	; (8001e88 <MX_GPIO_Init+0x164>)
 8001dca:	f002 facb 	bl	8004364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOF_X3_Pin TOF_X2_Pin TOF_X1_Pin TOF_X6_Pin
                           LS_ON_Pin */
  GPIO_InitStruct.Pin = TOF_X3_Pin|TOF_X2_Pin|TOF_X1_Pin|TOF_X6_Pin
 8001dce:	f64e 0320 	movw	r3, #59424	; 0xe820
 8001dd2:	617b      	str	r3, [r7, #20]
                          |LS_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	4826      	ldr	r0, [pc, #152]	; (8001e80 <MX_GPIO_Init+0x15c>)
 8001de8:	f002 f920 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW4_Pin SW3_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 8001dec:	23b0      	movs	r3, #176	; 0xb0
 8001dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4822      	ldr	r0, [pc, #136]	; (8001e88 <MX_GPIO_Init+0x164>)
 8001e00:	f002 f914 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001e04:	2310      	movs	r3, #16
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	481a      	ldr	r0, [pc, #104]	; (8001e80 <MX_GPIO_Init+0x15c>)
 8001e18:	f002 f908 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_R_DIR_2_Pin motor_R_DIR_1_Pin user_LED_Pin TOF_X5_Pin
                           motor_L_DIR_1_Pin motor_L_DIR_2_Pin */
  GPIO_InitStruct.Pin = motor_R_DIR_2_Pin|motor_R_DIR_1_Pin|user_LED_Pin|TOF_X5_Pin
 8001e1c:	f246 3305 	movw	r3, #25349	; 0x6305
 8001e20:	617b      	str	r3, [r7, #20]
                          |motor_L_DIR_1_Pin|motor_L_DIR_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4813      	ldr	r0, [pc, #76]	; (8001e84 <MX_GPIO_Init+0x160>)
 8001e36:	f002 f8f9 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : starter_Pin */
  GPIO_InitStruct.Pin = starter_Pin;
 8001e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(starter_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480d      	ldr	r0, [pc, #52]	; (8001e84 <MX_GPIO_Init+0x160>)
 8001e50:	f002 f8ec 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_X4_Pin */
  GPIO_InitStruct.Pin = TOF_X4_Pin;
 8001e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_X4_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4806      	ldr	r0, [pc, #24]	; (8001e88 <MX_GPIO_Init+0x164>)
 8001e6e:	f002 f8dd 	bl	800402c <HAL_GPIO_Init>

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020800 	.word	0x40020800
 8001e84:	40020400 	.word	0x40020400
 8001e88:	40020000 	.word	0x40020000

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <Error_Handler+0x8>
	...

08001e98 <debug_screen>:
#define BACKING_UP_TIME 100		//ms
#define MAX_SPEED		 80		//0 - 100

#include "modes_of_operation.h"

void debug_screen(){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af04      	add	r7, sp, #16
	while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0){
 8001e9e:	e087      	b.n	8001fb0 <debug_screen+0x118>
		if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1 )
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	4849      	ldr	r0, [pc, #292]	; (8001fc8 <debug_screen+0x130>)
 8001ea4:	f002 fa46 	bl	8004334 <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d106      	bne.n	8001ebc <debug_screen+0x24>
			HAL_GPIO_WritePin(LS_ON_GPIO_Port, LS_ON_Pin, GPIO_PIN_SET);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb4:	4845      	ldr	r0, [pc, #276]	; (8001fcc <debug_screen+0x134>)
 8001eb6:	f002 fa55 	bl	8004364 <HAL_GPIO_WritePin>
 8001eba:	e005      	b.n	8001ec8 <debug_screen+0x30>
		else
			HAL_GPIO_WritePin(LS_ON_GPIO_Port, LS_ON_Pin, GPIO_PIN_RESET);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec2:	4842      	ldr	r0, [pc, #264]	; (8001fcc <debug_screen+0x134>)
 8001ec4:	f002 fa4e 	bl	8004364 <HAL_GPIO_WritePin>

		battery.adc_reading = values_adc[0];
 8001ec8:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <debug_screen+0x138>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <debug_screen+0x13c>)
 8001ed0:	801a      	strh	r2, [r3, #0]
		display_fill(DISPLAY_COLOR_BLACK);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff f9ee 	bl	80012b4 <display_fill>
		display_printf(50, 0, DISPLAY_COLOR_WHITE, display_font_6x8, "%.2fV", calculateBatteryVoltage(& battery));
 8001ed8:	483e      	ldr	r0, [pc, #248]	; (8001fd4 <debug_screen+0x13c>)
 8001eda:	f7ff f895 	bl	8001008 <calculateBatteryVoltage>
 8001ede:	ee10 3a10 	vmov	r3, s0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb38 	bl	8000558 <__aeabi_f2d>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	493a      	ldr	r1, [pc, #232]	; (8001fd8 <debug_screen+0x140>)
 8001eee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <debug_screen+0x144>)
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	684b      	ldr	r3, [r1, #4]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	680b      	ldr	r3, [r1, #0]
 8001efc:	2201      	movs	r2, #1
 8001efe:	2100      	movs	r1, #0
 8001f00:	2032      	movs	r0, #50	; 0x32
 8001f02:	f7ff fb3a 	bl	800157a <display_printf>
		display_printf(0, 0, DISPLAY_COLOR_WHITE, display_font_6x8, "%d", (int) values_adc[KTIR_FRONT_LEFT]);
 8001f06:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <debug_screen+0x138>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <debug_screen+0x140>)
 8001f0e:	9202      	str	r2, [sp, #8]
 8001f10:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <debug_screen+0x148>)
 8001f12:	9201      	str	r2, [sp, #4]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff fb2b 	bl	800157a <display_printf>
		display_printf(104, 00, DISPLAY_COLOR_WHITE, display_font_6x8, "%d", (int) values_adc[KTIR_FRONT_RIGHT]);
 8001f24:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <debug_screen+0x138>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <debug_screen+0x140>)
 8001f2c:	9202      	str	r2, [sp, #8]
 8001f2e:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <debug_screen+0x148>)
 8001f30:	9201      	str	r2, [sp, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	9200      	str	r2, [sp, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2068      	movs	r0, #104	; 0x68
 8001f3e:	f7ff fb1c 	bl	800157a <display_printf>
		display_printf(54, 56, DISPLAY_COLOR_WHITE, display_font_6x8, "%d", (int) values_adc[KTIR_BACK]);
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <debug_screen+0x138>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <debug_screen+0x140>)
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <debug_screen+0x148>)
 8001f4e:	9201      	str	r2, [sp, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	9200      	str	r2, [sp, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	2138      	movs	r1, #56	; 0x38
 8001f5a:	2036      	movs	r0, #54	; 0x36
 8001f5c:	f7ff fb0d 	bl	800157a <display_printf>

		VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 8001f60:	4920      	ldr	r1, [pc, #128]	; (8001fe4 <debug_screen+0x14c>)
 8001f62:	4821      	ldr	r0, [pc, #132]	; (8001fe8 <debug_screen+0x150>)
 8001f64:	f006 fb70 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
		//if(TOF3.RangingData.RangeStatus == 0){
			display_printf(32, 20, DISPLAY_COLOR_WHITE, display_font_6x8, "%i", TOF3.RangingData.RangeMilliMeter);
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <debug_screen+0x14c>)
 8001f6a:	891b      	ldrh	r3, [r3, #8]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <debug_screen+0x140>)
 8001f70:	9202      	str	r2, [sp, #8]
 8001f72:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <debug_screen+0x154>)
 8001f74:	9201      	str	r2, [sp, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	9200      	str	r2, [sp, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2114      	movs	r1, #20
 8001f80:	2020      	movs	r0, #32
 8001f82:	f7ff fafa 	bl	800157a <display_printf>
		//}

		VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 8001f86:	491a      	ldr	r1, [pc, #104]	; (8001ff0 <debug_screen+0x158>)
 8001f88:	481a      	ldr	r0, [pc, #104]	; (8001ff4 <debug_screen+0x15c>)
 8001f8a:	f006 fb5d 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
		//if(TOF4.RangingData.RangeStatus == 0){
			display_printf(72, 20, DISPLAY_COLOR_WHITE, display_font_6x8, "%i", TOF4.RangingData.RangeMilliMeter);
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <debug_screen+0x158>)
 8001f90:	891b      	ldrh	r3, [r3, #8]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <debug_screen+0x140>)
 8001f96:	9202      	str	r2, [sp, #8]
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <debug_screen+0x154>)
 8001f9a:	9201      	str	r2, [sp, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	9200      	str	r2, [sp, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2114      	movs	r1, #20
 8001fa6:	2048      	movs	r0, #72	; 0x48
 8001fa8:	f7ff fae7 	bl	800157a <display_printf>
		//VL53L0X_PerformSingleRangingMeasurement(&(TOF5.vl53l0x_c), &(TOF5.RangingData));
		//if(TOF5.RangingData.RangeStatus == 0){
				//display_printf(100, 30, DISPLAY_COLOR_WHITE, display_font_6x8, "%i", TOF5.RangingData.RangeMilliMeter);
		//}

		display_render();
 8001fac:	f7ff f99e 	bl	80012ec <display_render>
	while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0){
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <debug_screen+0x134>)
 8001fb4:	f002 f9be 	bl	8004334 <HAL_GPIO_ReadPin>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f43f af70 	beq.w	8001ea0 <debug_screen+0x8>
	}
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	20000b60 	.word	0x20000b60
 8001fd4:	20000b34 	.word	0x20000b34
 8001fd8:	080118b4 	.word	0x080118b4
 8001fdc:	08010b48 	.word	0x08010b48
 8001fe0:	08010b50 	.word	0x08010b50
 8001fe4:	20000d1c 	.word	0x20000d1c
 8001fe8:	20000d38 	.word	0x20000d38
 8001fec:	08010b54 	.word	0x08010b54
 8001ff0:	20000ec8 	.word	0x20000ec8
 8001ff4:	20000ee4 	.word	0x20000ee4

08001ff8 <wait_for_fight_start>:

void wait_for_fight_start(){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af02      	add	r7, sp, #8
	display_fill(DISPLAY_COLOR_BLACK);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff f958 	bl	80012b4 <display_fill>
	display_bitmap(0, 0, DISPLAY_COLOR_WHITE, bitmap_konar_vertical_128_64, 128, 64);
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <wait_for_fight_start+0x54>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2240      	movs	r2, #64	; 0x40
 800200a:	9201      	str	r2, [sp, #4]
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	9200      	str	r2, [sp, #0]
 8002010:	2201      	movs	r2, #1
 8002012:	2100      	movs	r1, #0
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff f991 	bl	800133c <display_bitmap>
	display_render();
 800201a:	f7ff f967 	bl	80012ec <display_render>

	while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1){
 800201e:	e009      	b.n	8002034 <wait_for_fight_start+0x3c>
		if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin))
 8002020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002024:	480a      	ldr	r0, [pc, #40]	; (8002050 <wait_for_fight_start+0x58>)
 8002026:	f002 f985 	bl	8004334 <HAL_GPIO_ReadPin>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <wait_for_fight_start+0x3c>
			fight();
 8002030:	f000 f812 	bl	8002058 <fight>
	while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1){
 8002034:	2110      	movs	r1, #16
 8002036:	4807      	ldr	r0, [pc, #28]	; (8002054 <wait_for_fight_start+0x5c>)
 8002038:	f002 f97c 	bl	8004334 <HAL_GPIO_ReadPin>
 800203c:	4603      	mov	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d0ee      	beq.n	8002020 <wait_for_fight_start+0x28>
	}
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000000 	.word	0x20000000
 8002050:	40020400 	.word	0x40020400
 8002054:	40020800 	.word	0x40020800

08002058 <fight>:

void fight(){
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
	servo_set_eangle(20);
 800205e:	2014      	movs	r0, #20
 8002060:	f000 fa28 	bl	80024b4 <servo_set_eangle>
	HAL_GPIO_WritePin(LS_ON_GPIO_Port, LS_ON_Pin, GPIO_PIN_SET);
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800206a:	48a9      	ldr	r0, [pc, #676]	; (8002310 <fight+0x2b8>)
 800206c:	f002 f97a 	bl	8004364 <HAL_GPIO_WritePin>

	int8_t speed_diff = 50;
 8002070:	2332      	movs	r3, #50	; 0x32
 8002072:	75fb      	strb	r3, [r7, #23]

	motor_L_set_direction(FORWARD);
 8002074:	2000      	movs	r0, #0
 8002076:	f000 f9c9 	bl	800240c <motor_L_set_direction>
	motor_R_set_direction(FORWARD);
 800207a:	2000      	movs	r0, #0
 800207c:	f000 f9f2 	bl	8002464 <motor_R_set_direction>

	if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin))
 8002080:	2120      	movs	r1, #32
 8002082:	48a4      	ldr	r0, [pc, #656]	; (8002314 <fight+0x2bc>)
 8002084:	f002 f956 	bl	8004334 <HAL_GPIO_ReadPin>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <fight+0x3a>
		speed_diff = -50;
 800208e:	23ce      	movs	r3, #206	; 0xce
 8002090:	75fb      	strb	r3, [r7, #23]

	motor_L_set_speed(50 + speed_diff);
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	3332      	adds	r3, #50	; 0x32
 8002096:	b2db      	uxtb	r3, r3
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f98b 	bl	80023b4 <motor_L_set_speed>
	motor_R_set_speed(50 - speed_diff);
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f99a 	bl	80023e0 <motor_R_set_speed>
	VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 80020ac:	499a      	ldr	r1, [pc, #616]	; (8002318 <fight+0x2c0>)
 80020ae:	489b      	ldr	r0, [pc, #620]	; (800231c <fight+0x2c4>)
 80020b0:	f006 faca 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
	VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 80020b4:	499a      	ldr	r1, [pc, #616]	; (8002320 <fight+0x2c8>)
 80020b6:	489b      	ldr	r0, [pc, #620]	; (8002324 <fight+0x2cc>)
 80020b8:	f006 fac6 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
	while((TOF3.RangingData.RangeMilliMeter > SENSING_DISTANCE) && (TOF4.RangingData.RangeMilliMeter > SENSING_DISTANCE)){
 80020bc:	e00f      	b.n	80020de <fight+0x86>
		if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 0)
 80020be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c2:	4899      	ldr	r0, [pc, #612]	; (8002328 <fight+0x2d0>)
 80020c4:	f002 f936 	bl	8004334 <HAL_GPIO_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d012      	beq.n	80020f4 <fight+0x9c>
			break;
		VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 80020ce:	4992      	ldr	r1, [pc, #584]	; (8002318 <fight+0x2c0>)
 80020d0:	4892      	ldr	r0, [pc, #584]	; (800231c <fight+0x2c4>)
 80020d2:	f006 fab9 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
		VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 80020d6:	4992      	ldr	r1, [pc, #584]	; (8002320 <fight+0x2c8>)
 80020d8:	4892      	ldr	r0, [pc, #584]	; (8002324 <fight+0x2cc>)
 80020da:	f006 fab5 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
	while((TOF3.RangingData.RangeMilliMeter > SENSING_DISTANCE) && (TOF4.RangingData.RangeMilliMeter > SENSING_DISTANCE)){
 80020de:	4b8e      	ldr	r3, [pc, #568]	; (8002318 <fight+0x2c0>)
 80020e0:	891b      	ldrh	r3, [r3, #8]
 80020e2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80020e6:	d906      	bls.n	80020f6 <fight+0x9e>
 80020e8:	4b8d      	ldr	r3, [pc, #564]	; (8002320 <fight+0x2c8>)
 80020ea:	891b      	ldrh	r3, [r3, #8]
 80020ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80020f0:	d8e5      	bhi.n	80020be <fight+0x66>
 80020f2:	e000      	b.n	80020f6 <fight+0x9e>
			break;
 80020f4:	bf00      	nop
	}

	motor_L_set_speed(100);
 80020f6:	2064      	movs	r0, #100	; 0x64
 80020f8:	f000 f95c 	bl	80023b4 <motor_L_set_speed>
	motor_R_set_speed(100);
 80020fc:	2064      	movs	r0, #100	; 0x64
 80020fe:	f000 f96f 	bl	80023e0 <motor_R_set_speed>

	while(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 1){
 8002102:	e131      	b.n	8002368 <fight+0x310>
		motor_L_set_direction(FORWARD);
 8002104:	2000      	movs	r0, #0
 8002106:	f000 f981 	bl	800240c <motor_L_set_direction>
		motor_R_set_direction(FORWARD);
 800210a:	2000      	movs	r0, #0
 800210c:	f000 f9aa 	bl	8002464 <motor_R_set_direction>
		VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 8002110:	4981      	ldr	r1, [pc, #516]	; (8002318 <fight+0x2c0>)
 8002112:	4882      	ldr	r0, [pc, #520]	; (800231c <fight+0x2c4>)
 8002114:	f006 fa98 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
		VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 8002118:	4981      	ldr	r1, [pc, #516]	; (8002320 <fight+0x2c8>)
 800211a:	4882      	ldr	r0, [pc, #520]	; (8002324 <fight+0x2cc>)
 800211c:	f006 fa94 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>

		//both are detecting
		if((TOF3.RangingData.RangeMilliMeter < SENSING_DISTANCE) && (TOF4.RangingData.RangeMilliMeter < SENSING_DISTANCE)){
 8002120:	4b7d      	ldr	r3, [pc, #500]	; (8002318 <fight+0x2c0>)
 8002122:	891b      	ldrh	r3, [r3, #8]
 8002124:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002128:	d211      	bcs.n	800214e <fight+0xf6>
 800212a:	4b7d      	ldr	r3, [pc, #500]	; (8002320 <fight+0x2c8>)
 800212c:	891b      	ldrh	r3, [r3, #8]
 800212e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002132:	d20c      	bcs.n	800214e <fight+0xf6>
			motor_L_set_speed(100);
 8002134:	2064      	movs	r0, #100	; 0x64
 8002136:	f000 f93d 	bl	80023b4 <motor_L_set_speed>
			motor_R_set_speed(100);
 800213a:	2064      	movs	r0, #100	; 0x64
 800213c:	f000 f950 	bl	80023e0 <motor_R_set_speed>
			HAL_GPIO_WritePin(user_LED_GPIO_Port, user_LED_Pin, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002146:	4878      	ldr	r0, [pc, #480]	; (8002328 <fight+0x2d0>)
 8002148:	f002 f90c 	bl	8004364 <HAL_GPIO_WritePin>
 800214c:	e10c      	b.n	8002368 <fight+0x310>
		}
		//left is detecting
		else if(TOF3.RangingData.RangeMilliMeter < SENSING_DISTANCE){
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <fight+0x2c0>)
 8002150:	891b      	ldrh	r3, [r3, #8]
 8002152:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002156:	d211      	bcs.n	800217c <fight+0x124>
			motor_L_set_speed(TOF3.RangingData.RangeMilliMeter / (SENSING_DISTANCE/100));
 8002158:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <fight+0x2c0>)
 800215a:	891b      	ldrh	r3, [r3, #8]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	b29b      	uxth	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f926 	bl	80023b4 <motor_L_set_speed>
			motor_R_set_speed(100);
 8002168:	2064      	movs	r0, #100	; 0x64
 800216a:	f000 f939 	bl	80023e0 <motor_R_set_speed>
			HAL_GPIO_WritePin(user_LED_GPIO_Port, user_LED_Pin, GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002174:	486c      	ldr	r0, [pc, #432]	; (8002328 <fight+0x2d0>)
 8002176:	f002 f8f5 	bl	8004364 <HAL_GPIO_WritePin>
 800217a:	e0f5      	b.n	8002368 <fight+0x310>
		}
		//right is detecting
		else if(TOF4.RangingData.RangeMilliMeter < SENSING_DISTANCE){
 800217c:	4b68      	ldr	r3, [pc, #416]	; (8002320 <fight+0x2c8>)
 800217e:	891b      	ldrh	r3, [r3, #8]
 8002180:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002184:	d211      	bcs.n	80021aa <fight+0x152>
			motor_L_set_speed(100);
 8002186:	2064      	movs	r0, #100	; 0x64
 8002188:	f000 f914 	bl	80023b4 <motor_L_set_speed>
			motor_R_set_speed(TOF4.RangingData.RangeMilliMeter / (SENSING_DISTANCE/100));
 800218c:	4b64      	ldr	r3, [pc, #400]	; (8002320 <fight+0x2c8>)
 800218e:	891b      	ldrh	r3, [r3, #8]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f922 	bl	80023e0 <motor_R_set_speed>
			HAL_GPIO_WritePin(user_LED_GPIO_Port, user_LED_Pin, GPIO_PIN_SET);
 800219c:	2201      	movs	r2, #1
 800219e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a2:	4861      	ldr	r0, [pc, #388]	; (8002328 <fight+0x2d0>)
 80021a4:	f002 f8de 	bl	8004364 <HAL_GPIO_WritePin>
 80021a8:	e0de      	b.n	8002368 <fight+0x310>
		}
		//none are detecting
		else if((TOF3.RangingData.RangeMilliMeter > SENSING_DISTANCE) && (TOF4.RangingData.RangeMilliMeter > SENSING_DISTANCE)){
 80021aa:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <fight+0x2c0>)
 80021ac:	891b      	ldrh	r3, [r3, #8]
 80021ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80021b2:	f240 80d9 	bls.w	8002368 <fight+0x310>
 80021b6:	4b5a      	ldr	r3, [pc, #360]	; (8002320 <fight+0x2c8>)
 80021b8:	891b      	ldrh	r3, [r3, #8]
 80021ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80021be:	f240 80d3 	bls.w	8002368 <fight+0x310>
			motor_L_set_speed(90);
 80021c2:	205a      	movs	r0, #90	; 0x5a
 80021c4:	f000 f8f6 	bl	80023b4 <motor_L_set_speed>
			motor_R_set_speed(90);
 80021c8:	205a      	movs	r0, #90	; 0x5a
 80021ca:	f000 f909 	bl	80023e0 <motor_R_set_speed>
			HAL_GPIO_WritePin(user_LED_GPIO_Port, user_LED_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d4:	4854      	ldr	r0, [pc, #336]	; (8002328 <fight+0x2d0>)
 80021d6:	f002 f8c5 	bl	8004364 <HAL_GPIO_WritePin>

			if(values_adc[KTIR_FRONT_LEFT] < LINE_BORDER){
 80021da:	4b54      	ldr	r3, [pc, #336]	; (800232c <fight+0x2d4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f640 726d 	movw	r2, #3949	; 0xf6d
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d855      	bhi.n	8002292 <fight+0x23a>
				motor_L_set_direction(BACKWARD);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f000 f910 	bl	800240c <motor_L_set_direction>
				motor_R_set_direction(BACKWARD);
 80021ec:	2001      	movs	r0, #1
 80021ee:	f000 f939 	bl	8002464 <motor_R_set_direction>
				motor_L_set_speed(100);
 80021f2:	2064      	movs	r0, #100	; 0x64
 80021f4:	f000 f8de 	bl	80023b4 <motor_L_set_speed>
				motor_R_set_speed(100);
 80021f8:	2064      	movs	r0, #100	; 0x64
 80021fa:	f000 f8f1 	bl	80023e0 <motor_R_set_speed>
				for(int i = 0; i < BACKING_UP_TIME; ++i){
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	e013      	b.n	800222c <fight+0x1d4>
					if(values_adc[KTIR_BACK] < LINE_BORDER)
 8002204:	4b49      	ldr	r3, [pc, #292]	; (800232c <fight+0x2d4>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f640 726d 	movw	r2, #3949	; 0xf6d
 800220c:	4293      	cmp	r3, r2
 800220e:	d911      	bls.n	8002234 <fight+0x1dc>
						break;
					if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 0)
 8002210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002214:	4844      	ldr	r0, [pc, #272]	; (8002328 <fight+0x2d0>)
 8002216:	f002 f88d 	bl	8004334 <HAL_GPIO_ReadPin>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <fight+0x1e0>
						break;
					HAL_Delay(1);
 8002220:	2001      	movs	r0, #1
 8002222:	f000 fe5b 	bl	8002edc <HAL_Delay>
				for(int i = 0; i < BACKING_UP_TIME; ++i){
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	3301      	adds	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b63      	cmp	r3, #99	; 0x63
 8002230:	dde8      	ble.n	8002204 <fight+0x1ac>
 8002232:	e002      	b.n	800223a <fight+0x1e2>
						break;
 8002234:	bf00      	nop
 8002236:	e000      	b.n	800223a <fight+0x1e2>
						break;
 8002238:	bf00      	nop
				}
				motor_L_set_direction(FORWARD);
 800223a:	2000      	movs	r0, #0
 800223c:	f000 f8e6 	bl	800240c <motor_L_set_direction>
				for(int i = 0; i < TURNING_TIME; ++i){
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e01f      	b.n	8002286 <fight+0x22e>
					if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 0)
 8002246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224a:	4837      	ldr	r0, [pc, #220]	; (8002328 <fight+0x2d0>)
 800224c:	f002 f872 	bl	8004334 <HAL_GPIO_ReadPin>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01c      	beq.n	8002290 <fight+0x238>
						break;
					VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 8002256:	4930      	ldr	r1, [pc, #192]	; (8002318 <fight+0x2c0>)
 8002258:	4830      	ldr	r0, [pc, #192]	; (800231c <fight+0x2c4>)
 800225a:	f006 f9f5 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
					VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 800225e:	4930      	ldr	r1, [pc, #192]	; (8002320 <fight+0x2c8>)
 8002260:	4830      	ldr	r0, [pc, #192]	; (8002324 <fight+0x2cc>)
 8002262:	f006 f9f1 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
					if((TOF3.RangingData.RangeMilliMeter < SENSING_DISTANCE) || (TOF4.RangingData.RangeMilliMeter < SENSING_DISTANCE))
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <fight+0x2c0>)
 8002268:	891b      	ldrh	r3, [r3, #8]
 800226a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800226e:	d310      	bcc.n	8002292 <fight+0x23a>
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <fight+0x2c8>)
 8002272:	891b      	ldrh	r3, [r3, #8]
 8002274:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002278:	d30b      	bcc.n	8002292 <fight+0x23a>
						break;
					HAL_Delay(1);
 800227a:	2001      	movs	r0, #1
 800227c:	f000 fe2e 	bl	8002edc <HAL_Delay>
				for(int i = 0; i < TURNING_TIME; ++i){
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800228c:	dbdb      	blt.n	8002246 <fight+0x1ee>
 800228e:	e000      	b.n	8002292 <fight+0x23a>
						break;
 8002290:	bf00      	nop
				}
			}
			if(values_adc[KTIR_FRONT_RIGHT] < LINE_BORDER){
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <fight+0x2d4>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f640 726d 	movw	r2, #3949	; 0xf6d
 800229a:	4293      	cmp	r3, r2
 800229c:	d864      	bhi.n	8002368 <fight+0x310>
				motor_L_set_direction(BACKWARD);
 800229e:	2001      	movs	r0, #1
 80022a0:	f000 f8b4 	bl	800240c <motor_L_set_direction>
				motor_R_set_direction(BACKWARD);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f000 f8dd 	bl	8002464 <motor_R_set_direction>
				motor_L_set_speed(100);
 80022aa:	2064      	movs	r0, #100	; 0x64
 80022ac:	f000 f882 	bl	80023b4 <motor_L_set_speed>
				motor_R_set_speed(100);
 80022b0:	2064      	movs	r0, #100	; 0x64
 80022b2:	f000 f895 	bl	80023e0 <motor_R_set_speed>
				for(int i = 0; i < BACKING_UP_TIME; ++i){
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	e013      	b.n	80022e4 <fight+0x28c>
					if(values_adc[KTIR_BACK] < LINE_BORDER)
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <fight+0x2d4>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f640 726d 	movw	r2, #3949	; 0xf6d
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d911      	bls.n	80022ec <fight+0x294>
						break;
					if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 0)
 80022c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022cc:	4816      	ldr	r0, [pc, #88]	; (8002328 <fight+0x2d0>)
 80022ce:	f002 f831 	bl	8004334 <HAL_GPIO_ReadPin>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00b      	beq.n	80022f0 <fight+0x298>
						break;
					HAL_Delay(1);
 80022d8:	2001      	movs	r0, #1
 80022da:	f000 fdff 	bl	8002edc <HAL_Delay>
				for(int i = 0; i < BACKING_UP_TIME; ++i){
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b63      	cmp	r3, #99	; 0x63
 80022e8:	dde8      	ble.n	80022bc <fight+0x264>
 80022ea:	e002      	b.n	80022f2 <fight+0x29a>
						break;
 80022ec:	bf00      	nop
 80022ee:	e000      	b.n	80022f2 <fight+0x29a>
						break;
 80022f0:	bf00      	nop
				}
				motor_R_set_direction(FORWARD);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f000 f8b6 	bl	8002464 <motor_R_set_direction>
				for(int i = 0; i < TURNING_TIME; ++i){
 80022f8:	2300      	movs	r3, #0
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	e030      	b.n	8002360 <fight+0x308>
					if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 0)
 80022fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002302:	4809      	ldr	r0, [pc, #36]	; (8002328 <fight+0x2d0>)
 8002304:	f002 f816 	bl	8004334 <HAL_GPIO_ReadPin>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d110      	bne.n	8002330 <fight+0x2d8>
						break;
 800230e:	e02b      	b.n	8002368 <fight+0x310>
 8002310:	40020800 	.word	0x40020800
 8002314:	40020000 	.word	0x40020000
 8002318:	20000d1c 	.word	0x20000d1c
 800231c:	20000d38 	.word	0x20000d38
 8002320:	20000ec8 	.word	0x20000ec8
 8002324:	20000ee4 	.word	0x20000ee4
 8002328:	40020400 	.word	0x40020400
 800232c:	20000b60 	.word	0x20000b60
					VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 8002330:	491a      	ldr	r1, [pc, #104]	; (800239c <fight+0x344>)
 8002332:	481b      	ldr	r0, [pc, #108]	; (80023a0 <fight+0x348>)
 8002334:	f006 f988 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
					VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 8002338:	491a      	ldr	r1, [pc, #104]	; (80023a4 <fight+0x34c>)
 800233a:	481b      	ldr	r0, [pc, #108]	; (80023a8 <fight+0x350>)
 800233c:	f006 f984 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
					if((TOF3.RangingData.RangeMilliMeter < SENSING_DISTANCE) || (TOF4.RangingData.RangeMilliMeter < SENSING_DISTANCE))
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <fight+0x344>)
 8002342:	891b      	ldrh	r3, [r3, #8]
 8002344:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002348:	d30e      	bcc.n	8002368 <fight+0x310>
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <fight+0x34c>)
 800234c:	891b      	ldrh	r3, [r3, #8]
 800234e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002352:	d309      	bcc.n	8002368 <fight+0x310>
						break;
					HAL_Delay(1);
 8002354:	2001      	movs	r0, #1
 8002356:	f000 fdc1 	bl	8002edc <HAL_Delay>
				for(int i = 0; i < TURNING_TIME; ++i){
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3301      	adds	r3, #1
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002366:	dbca      	blt.n	80022fe <fight+0x2a6>
	while(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 1){
 8002368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800236c:	480f      	ldr	r0, [pc, #60]	; (80023ac <fight+0x354>)
 800236e:	f001 ffe1 	bl	8004334 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	2b01      	cmp	r3, #1
 8002376:	f43f aec5 	beq.w	8002104 <fight+0xac>
				}
			}
		}
	}

	motor_L_set_speed(0);
 800237a:	2000      	movs	r0, #0
 800237c:	f000 f81a 	bl	80023b4 <motor_L_set_speed>
	motor_R_set_speed(0);
 8002380:	2000      	movs	r0, #0
 8002382:	f000 f82d 	bl	80023e0 <motor_R_set_speed>
	HAL_GPIO_WritePin(LS_ON_GPIO_Port, LS_ON_Pin, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800238c:	4808      	ldr	r0, [pc, #32]	; (80023b0 <fight+0x358>)
 800238e:	f001 ffe9 	bl	8004364 <HAL_GPIO_WritePin>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000d1c 	.word	0x20000d1c
 80023a0:	20000d38 	.word	0x20000d38
 80023a4:	20000ec8 	.word	0x20000ec8
 80023a8:	20000ee4 	.word	0x20000ee4
 80023ac:	40020400 	.word	0x40020400
 80023b0:	40020800 	.word	0x40020800

080023b4 <motor_L_set_speed>:
/**
 * @brief
 *
 * @param speed 0-100
 */
void motor_L_set_speed(uint8_t speed){
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
	if(speed < 0)
		speed = 0;
	else if(speed > 100)
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	2b64      	cmp	r3, #100	; 0x64
 80023c2:	d901      	bls.n	80023c8 <motor_L_set_speed+0x14>
		speed = 100;
 80023c4:	2364      	movs	r3, #100	; 0x64
 80023c6:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <motor_L_set_speed+0x28>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	79fa      	ldrb	r2, [r7, #7]
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	20000aa8 	.word	0x20000aa8

080023e0 <motor_R_set_speed>:
/**
 * @brief
 *
 * @param speed 0-100
 */
void motor_R_set_speed(uint8_t speed){
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
	if(speed < 0)
		speed = 0;
	else if(speed > 100)
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <motor_R_set_speed+0x14>
		speed = 100;
 80023f0:	2364      	movs	r3, #100	; 0x64
 80023f2:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <motor_R_set_speed+0x28>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	79fa      	ldrb	r2, [r7, #7]
 80023fa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	20000aa8 	.word	0x20000aa8

0800240c <motor_L_set_direction>:

void motor_L_set_direction(motor_direction direction){
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <motor_L_set_direction+0x16>
 800241c:	2b01      	cmp	r3, #1
 800241e:	d00d      	beq.n	800243c <motor_L_set_direction+0x30>
		case BACKWARD:
			HAL_GPIO_WritePin(motor_L_DIR_1_GPIO_Port, motor_L_DIR_1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(motor_L_DIR_2_GPIO_Port, motor_L_DIR_2_Pin, GPIO_PIN_SET);
			break;
	}
}
 8002420:	e019      	b.n	8002456 <motor_L_set_direction+0x4a>
			HAL_GPIO_WritePin(motor_L_DIR_1_GPIO_Port, motor_L_DIR_1_Pin, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <motor_L_set_direction+0x54>)
 800242a:	f001 ff9b 	bl	8004364 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor_L_DIR_2_GPIO_Port, motor_L_DIR_2_Pin, GPIO_PIN_RESET);
 800242e:	2200      	movs	r2, #0
 8002430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002434:	480a      	ldr	r0, [pc, #40]	; (8002460 <motor_L_set_direction+0x54>)
 8002436:	f001 ff95 	bl	8004364 <HAL_GPIO_WritePin>
			break;
 800243a:	e00c      	b.n	8002456 <motor_L_set_direction+0x4a>
			HAL_GPIO_WritePin(motor_L_DIR_1_GPIO_Port, motor_L_DIR_1_Pin, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002442:	4807      	ldr	r0, [pc, #28]	; (8002460 <motor_L_set_direction+0x54>)
 8002444:	f001 ff8e 	bl	8004364 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor_L_DIR_2_GPIO_Port, motor_L_DIR_2_Pin, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800244e:	4804      	ldr	r0, [pc, #16]	; (8002460 <motor_L_set_direction+0x54>)
 8002450:	f001 ff88 	bl	8004364 <HAL_GPIO_WritePin>
			break;
 8002454:	bf00      	nop
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40020400 	.word	0x40020400

08002464 <motor_R_set_direction>:

void motor_R_set_direction(motor_direction direction){
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <motor_R_set_direction+0x16>
 8002474:	2b01      	cmp	r3, #1
 8002476:	d00b      	beq.n	8002490 <motor_R_set_direction+0x2c>
		case BACKWARD:
			HAL_GPIO_WritePin(motor_R_DIR_1_GPIO_Port, motor_R_DIR_1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(motor_R_DIR_2_GPIO_Port, motor_R_DIR_2_Pin, GPIO_PIN_RESET);
			break;
	}
}
 8002478:	e015      	b.n	80024a6 <motor_R_set_direction+0x42>
			HAL_GPIO_WritePin(motor_R_DIR_1_GPIO_Port, motor_R_DIR_1_Pin, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	2104      	movs	r1, #4
 800247e:	480c      	ldr	r0, [pc, #48]	; (80024b0 <motor_R_set_direction+0x4c>)
 8002480:	f001 ff70 	bl	8004364 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor_R_DIR_2_GPIO_Port, motor_R_DIR_2_Pin, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	2101      	movs	r1, #1
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <motor_R_set_direction+0x4c>)
 800248a:	f001 ff6b 	bl	8004364 <HAL_GPIO_WritePin>
			break;
 800248e:	e00a      	b.n	80024a6 <motor_R_set_direction+0x42>
			HAL_GPIO_WritePin(motor_R_DIR_1_GPIO_Port, motor_R_DIR_1_Pin, GPIO_PIN_SET);
 8002490:	2201      	movs	r2, #1
 8002492:	2104      	movs	r1, #4
 8002494:	4806      	ldr	r0, [pc, #24]	; (80024b0 <motor_R_set_direction+0x4c>)
 8002496:	f001 ff65 	bl	8004364 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor_R_DIR_2_GPIO_Port, motor_R_DIR_2_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	2101      	movs	r1, #1
 800249e:	4804      	ldr	r0, [pc, #16]	; (80024b0 <motor_R_set_direction+0x4c>)
 80024a0:	f001 ff60 	bl	8004364 <HAL_GPIO_WritePin>
			break;
 80024a4:	bf00      	nop
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40020400 	.word	0x40020400

080024b4 <servo_set_eangle>:
/**
 * @brief
 *
 * @param eangle 0-180
 */
void servo_set_eangle(uint8_t eangle){
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse_duration;

	pulse_duration = MIN_PULSE_SERVO + ((eangle * STEP) / 1000);
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	441a      	add	r2, r3
 80024c8:	0052      	lsls	r2, r2, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80024d2:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_duration);
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <servo_set_eangle+0x34>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	89fa      	ldrh	r2, [r7, #14]
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	20000a60 	.word	0x20000a60

080024ec <initAverage>:
 * @brief initializes the filter, this function must be called before using the filter
 *
 * @param mvngAverage
 * @param initialValue is the average value at the beginning
 */
void initAverage(MovingAverage* mvngAverage, uint16_t initialValue){
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < NUM_OF_READINGS; ++i)
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e007      	b.n	800250e <initAverage+0x22>
		mvngAverage->readings[i] = initialValue;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	8879      	ldrh	r1, [r7, #2]
 8002504:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < NUM_OF_READINGS; ++i)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3301      	adds	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b09      	cmp	r3, #9
 8002512:	ddf4      	ble.n	80024fe <initAverage+0x12>
	mvngAverage->readIndex = 0;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	751a      	strb	r2, [r3, #20]
	mvngAverage->average = initialValue;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	887a      	ldrh	r2, [r7, #2]
 800251e:	839a      	strh	r2, [r3, #28]
	mvngAverage->total = initialValue * NUM_OF_READINGS;
 8002520:	887a      	ldrh	r2, [r7, #2]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	461a      	mov	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <calculateAverage>:
 *
 * @param mvngAverage
 * @param reading value that is being averaged out
 * @return uint16_t averaged value
 */
uint16_t calculateAverage(MovingAverage * mvngAverage, uint16_t reading){
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
	mvngAverage->total -= mvngAverage->readings[mvngAverage->readIndex];    //subtract the last reading:
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	7d12      	ldrb	r2, [r2, #20]
 8002550:	4611      	mov	r1, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002558:	1a9a      	subs	r2, r3, r2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	619a      	str	r2, [r3, #24]
	mvngAverage->readings[mvngAverage->readIndex] = reading;      			//read from the sensor:
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7d1b      	ldrb	r3, [r3, #20]
 8002562:	4619      	mov	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	mvngAverage->total += mvngAverage->readings[mvngAverage->readIndex];    //add the reading to the total:
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	7d12      	ldrb	r2, [r2, #20]
 8002574:	4611      	mov	r1, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800257c:	441a      	add	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	619a      	str	r2, [r3, #24]
	++mvngAverage->readIndex;                        						//advance to the next position in the array:
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	7d1b      	ldrb	r3, [r3, #20]
 8002586:	3301      	adds	r3, #1
 8002588:	b2da      	uxtb	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	751a      	strb	r2, [r3, #20]
	if (mvngAverage->readIndex >= NUM_OF_READINGS)   						//if we're at the end of the array...
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7d1b      	ldrb	r3, [r3, #20]
 8002592:	2b09      	cmp	r3, #9
 8002594:	d902      	bls.n	800259c <calculateAverage+0x60>
		mvngAverage->readIndex = 0;                   						//...wrap around to the beginning:
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	751a      	strb	r2, [r3, #20]
	mvngAverage->average = mvngAverage->total / NUM_OF_READINGS;  			//calculate the average:
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <calculateAverage+0x84>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	839a      	strh	r2, [r3, #28]
	return mvngAverage->average;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	8b9b      	ldrh	r3, [r3, #28]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	cccccccd 	.word	0xcccccccd

080025c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_MspInit+0x4c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <HAL_MspInit+0x4c>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_MspInit+0x4c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_MspInit+0x4c>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <HAL_MspInit+0x4c>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_MspInit+0x4c>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800

08002614 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a3c      	ldr	r2, [pc, #240]	; (8002724 <HAL_ADC_MspInit+0x110>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d171      	bne.n	800271a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_ADC_MspInit+0x114>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <HAL_ADC_MspInit+0x114>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b38      	ldr	r3, [pc, #224]	; (8002728 <HAL_ADC_MspInit+0x114>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b34      	ldr	r3, [pc, #208]	; (8002728 <HAL_ADC_MspInit+0x114>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a33      	ldr	r2, [pc, #204]	; (8002728 <HAL_ADC_MspInit+0x114>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_ADC_MspInit+0x114>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_ADC_MspInit+0x114>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a2c      	ldr	r2, [pc, #176]	; (8002728 <HAL_ADC_MspInit+0x114>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_ADC_MspInit+0x114>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = adc_line_sensor1_Pin|adc_line_sensor2_Pin|adc_line_sensor3_Pin;
 800268a:	230e      	movs	r3, #14
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800268e:	2303      	movs	r3, #3
 8002690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	4619      	mov	r1, r3
 800269c:	4823      	ldr	r0, [pc, #140]	; (800272c <HAL_ADC_MspInit+0x118>)
 800269e:	f001 fcc5 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = adc_bat_meas_Pin;
 80026a2:	2302      	movs	r3, #2
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a6:	2303      	movs	r3, #3
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(adc_bat_meas_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	481e      	ldr	r0, [pc, #120]	; (8002730 <HAL_ADC_MspInit+0x11c>)
 80026b6:	f001 fcb9 	bl	800402c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026ba:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <HAL_ADC_MspInit+0x120>)
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_ADC_MspInit+0x124>)
 80026be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026c0:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <HAL_ADC_MspInit+0x120>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_ADC_MspInit+0x120>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_ADC_MspInit+0x120>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_ADC_MspInit+0x120>)
 80026d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026da:	4b16      	ldr	r3, [pc, #88]	; (8002734 <HAL_ADC_MspInit+0x120>)
 80026dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_ADC_MspInit+0x120>)
 80026e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_ADC_MspInit+0x120>)
 80026ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_ADC_MspInit+0x120>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_ADC_MspInit+0x120>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026fe:	480d      	ldr	r0, [pc, #52]	; (8002734 <HAL_ADC_MspInit+0x120>)
 8002700:	f001 f924 	bl	800394c <HAL_DMA_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800270a:	f7ff fbbf 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_ADC_MspInit+0x120>)
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_ADC_MspInit+0x120>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800271a:	bf00      	nop
 800271c:	3728      	adds	r7, #40	; 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40012000 	.word	0x40012000
 8002728:	40023800 	.word	0x40023800
 800272c:	40020800 	.word	0x40020800
 8002730:	40020400 	.word	0x40020400
 8002734:	20000904 	.word	0x20000904
 8002738:	40026410 	.word	0x40026410

0800273c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08e      	sub	sp, #56	; 0x38
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a63      	ldr	r2, [pc, #396]	; (80028e8 <HAL_I2C_MspInit+0x1ac>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d12c      	bne.n	80027b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	4b62      	ldr	r3, [pc, #392]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a61      	ldr	r2, [pc, #388]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b5f      	ldr	r3, [pc, #380]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	623b      	str	r3, [r7, #32]
 8002778:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800277a:	23c0      	movs	r3, #192	; 0xc0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277e:	2312      	movs	r3, #18
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800278a:	2304      	movs	r3, #4
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002792:	4619      	mov	r1, r3
 8002794:	4856      	ldr	r0, [pc, #344]	; (80028f0 <HAL_I2C_MspInit+0x1b4>)
 8002796:	f001 fc49 	bl	800402c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 80027a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80027b6:	e093      	b.n	80028e0 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a4d      	ldr	r2, [pc, #308]	; (80028f4 <HAL_I2C_MspInit+0x1b8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d13d      	bne.n	800283e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	4b49      	ldr	r3, [pc, #292]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a48      	ldr	r2, [pc, #288]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b46      	ldr	r3, [pc, #280]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e4:	2312      	movs	r3, #18
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027f0:	2304      	movs	r3, #4
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f8:	4619      	mov	r1, r3
 80027fa:	483d      	ldr	r0, [pc, #244]	; (80028f0 <HAL_I2C_MspInit+0x1b4>)
 80027fc:	f001 fc16 	bl	800402c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002800:	2308      	movs	r3, #8
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002804:	2312      	movs	r3, #18
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280c:	2303      	movs	r3, #3
 800280e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002810:	2309      	movs	r3, #9
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002818:	4619      	mov	r1, r3
 800281a:	4835      	ldr	r0, [pc, #212]	; (80028f0 <HAL_I2C_MspInit+0x1b4>)
 800281c:	f001 fc06 	bl	800402c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	4a30      	ldr	r2, [pc, #192]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 800282a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800282e:	6413      	str	r3, [r2, #64]	; 0x40
 8002830:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697b      	ldr	r3, [r7, #20]
}
 800283c:	e050      	b.n	80028e0 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2d      	ldr	r2, [pc, #180]	; (80028f8 <HAL_I2C_MspInit+0x1bc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d14b      	bne.n	80028e0 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	6313      	str	r3, [r2, #48]	; 0x30
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6313      	str	r3, [r2, #48]	; 0x30
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002886:	2312      	movs	r3, #18
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002892:	2304      	movs	r3, #4
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289a:	4619      	mov	r1, r3
 800289c:	4817      	ldr	r0, [pc, #92]	; (80028fc <HAL_I2C_MspInit+0x1c0>)
 800289e:	f001 fbc5 	bl	800402c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a8:	2312      	movs	r3, #18
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028b4:	2304      	movs	r3, #4
 80028b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028bc:	4619      	mov	r1, r3
 80028be:	4810      	ldr	r0, [pc, #64]	; (8002900 <HAL_I2C_MspInit+0x1c4>)
 80028c0:	f001 fbb4 	bl	800402c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	4a07      	ldr	r2, [pc, #28]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 80028ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028d2:	6413      	str	r3, [r2, #64]	; 0x40
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_I2C_MspInit+0x1b0>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
}
 80028e0:	bf00      	nop
 80028e2:	3738      	adds	r7, #56	; 0x38
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40005400 	.word	0x40005400
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40005800 	.word	0x40005800
 80028f8:	40005c00 	.word	0x40005c00
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020000 	.word	0x40020000

08002904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_TIM_Base_MspInit+0x64>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a12      	ldr	r2, [pc, #72]	; (8002968 <HAL_TIM_Base_MspInit+0x64>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_TIM_Base_MspInit+0x64>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002932:	e012      	b.n	800295a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0c      	ldr	r2, [pc, #48]	; (800296c <HAL_TIM_Base_MspInit+0x68>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d10d      	bne.n	800295a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <HAL_TIM_Base_MspInit+0x64>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a08      	ldr	r2, [pc, #32]	; (8002968 <HAL_TIM_Base_MspInit+0x64>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_TIM_Base_MspInit+0x64>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	40000400 	.word	0x40000400

08002970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002990:	d11f      	bne.n	80029d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_TIM_MspPostInit+0xec>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <HAL_TIM_MspPostInit+0xec>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_TIM_MspPostInit+0xec>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = servo_Pin;
 80029ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029c0:	2301      	movs	r3, #1
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4619      	mov	r1, r3
 80029ca:	4825      	ldr	r0, [pc, #148]	; (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 80029cc:	f001 fb2e 	bl	800402c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029d0:	e040      	b.n	8002a54 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a23      	ldr	r2, [pc, #140]	; (8002a64 <HAL_TIM_MspPostInit+0xf4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d13b      	bne.n	8002a54 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_TIM_MspPostInit+0xec>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_TIM_MspPostInit+0xec>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_TIM_MspPostInit+0xec>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_TIM_MspPostInit+0xec>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_TIM_MspPostInit+0xec>)
 8002a02:	f043 0302 	orr.w	r3, r3, #2
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_TIM_MspPostInit+0xec>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = motor_R_PWM_Pin;
 8002a14:	2340      	movs	r3, #64	; 0x40
 8002a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a24:	2302      	movs	r3, #2
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor_R_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480c      	ldr	r0, [pc, #48]	; (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 8002a30:	f001 fafc 	bl	800402c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = motor_L_PWM_Pin;
 8002a34:	2320      	movs	r3, #32
 8002a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a44:	2302      	movs	r3, #2
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor_L_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <HAL_TIM_MspPostInit+0xf8>)
 8002a50:	f001 faec 	bl	800402c <HAL_GPIO_Init>
}
 8002a54:	bf00      	nop
 8002a56:	3728      	adds	r7, #40	; 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40000400 	.word	0x40000400
 8002a68:	40020400 	.word	0x40020400

08002a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <HAL_UART_MspInit+0x84>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d12b      	bne.n	8002ae6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <HAL_UART_MspInit+0x88>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <HAL_UART_MspInit+0x88>)
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_UART_MspInit+0x88>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_UART_MspInit+0x88>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <HAL_UART_MspInit+0x88>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_UART_MspInit+0x88>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ad6:	2307      	movs	r3, #7
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4805      	ldr	r0, [pc, #20]	; (8002af8 <HAL_UART_MspInit+0x8c>)
 8002ae2:	f001 faa3 	bl	800402c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ae6:	bf00      	nop
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40004400 	.word	0x40004400
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40020000 	.word	0x40020000

08002afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <NMI_Handler+0x4>

08002b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b06:	e7fe      	b.n	8002b06 <HardFault_Handler+0x4>

08002b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <MemManage_Handler+0x4>

08002b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <BusFault_Handler+0x4>

08002b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <UsageFault_Handler+0x4>

08002b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b48:	f000 f9a8 	bl	8002e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <DMA2_Stream0_IRQHandler+0x10>)
 8002b56:	f000 ffff 	bl	8003b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000904 	.word	0x20000904

08002b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return 1;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_kill>:

int _kill(int pid, int sig)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b7e:	f009 faa5 	bl	800c0cc <__errno>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2216      	movs	r2, #22
 8002b86:	601a      	str	r2, [r3, #0]
  return -1;
 8002b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_exit>:

void _exit (int status)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ffe7 	bl	8002b74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ba6:	e7fe      	b.n	8002ba6 <_exit+0x12>

08002ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e00a      	b.n	8002bd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bba:	f3af 8000 	nop.w
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	60ba      	str	r2, [r7, #8]
 8002bc6:	b2ca      	uxtb	r2, r1
 8002bc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dbf0      	blt.n	8002bba <_read+0x12>
  }

  return len;
 8002bd8:	687b      	ldr	r3, [r7, #4]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	e009      	b.n	8002c08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	60ba      	str	r2, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3301      	adds	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	dbf1      	blt.n	8002bf4 <_write+0x12>
  }
  return len;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_close>:

int _close(int file)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c42:	605a      	str	r2, [r3, #4]
  return 0;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <_isatty>:

int _isatty(int file)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c5a:	2301      	movs	r3, #1
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <_sbrk+0x5c>)
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <_sbrk+0x60>)
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <_sbrk+0x64>)
 8002ca2:	4a12      	ldr	r2, [pc, #72]	; (8002cec <_sbrk+0x68>)
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <_sbrk+0x64>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d207      	bcs.n	8002cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb4:	f009 fa0a 	bl	800c0cc <__errno>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	220c      	movs	r2, #12
 8002cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e009      	b.n	8002cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <_sbrk+0x64>)
 8002cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20020000 	.word	0x20020000
 8002ce4:	00000400 	.word	0x00000400
 8002ce8:	20001228 	.word	0x20001228
 8002cec:	20001280 	.word	0x20001280

08002cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <SystemInit+0x20>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <SystemInit+0x20>)
 8002cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <tof_vl53l0_init>:
 * @param pVhvSettings
 * @param pPhaseCal
 * @param refSpadCount
 * @param isApertureSpads
 */
void tof_vl53l0_init(VL53L0X_Dev_t * Dev, uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint32_t *refSpadCount, uint8_t *isApertureSpads){
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
  //
  // VL53L0X init for Single Measurement
  //
  VL53L0X_WaitDeviceBooted(Dev);
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f004 fcce 	bl	80076c4 <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit(Dev);
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f004 f9e5 	bl	80070f8 <VL53L0X_DataInit>
  VL53L0X_StaticInit(Dev);
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f004 fb46 	bl	80073c0 <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, pVhvSettings, pPhaseCal);
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f005 f9e3 	bl	8008104 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, refSpadCount, isApertureSpads);
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	6839      	ldr	r1, [r7, #0]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f005 fe6c 	bl	8008a20 <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f004 fd58 	bl	8007800 <VL53L0X_SetDeviceMode>
  //
  // Enable/Disable Sigma and Signal check
  //
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002d50:	2201      	movs	r2, #1
 8002d52:	2100      	movs	r1, #0
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f004 ffcf 	bl	8007cf8 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f004 ffca 	bl	8007cf8 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002d64:	f641 1299 	movw	r2, #6553	; 0x1999
 8002d68:	2101      	movs	r1, #1
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f005 f874 	bl	8007e58 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002d70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d74:	2100      	movs	r1, #0
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f005 f86e 	bl	8007e58 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8002d7c:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f004 fd9b 	bl	80078bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002d86:	2212      	movs	r2, #18
 8002d88:	2100      	movs	r1, #0
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f004 fdbc 	bl	8007908 <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002d90:	220e      	movs	r2, #14
 8002d92:	2101      	movs	r1, #1
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f004 fdb7 	bl	8007908 <VL53L0X_SetVcselPulsePeriod>

}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ddc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002da8:	480d      	ldr	r0, [pc, #52]	; (8002de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002daa:	490e      	ldr	r1, [pc, #56]	; (8002de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dac:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db0:	e002      	b.n	8002db8 <LoopCopyDataInit>

08002db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db6:	3304      	adds	r3, #4

08002db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dbc:	d3f9      	bcc.n	8002db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dc0:	4c0b      	ldr	r4, [pc, #44]	; (8002df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc4:	e001      	b.n	8002dca <LoopFillZerobss>

08002dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc8:	3204      	adds	r2, #4

08002dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dcc:	d3fb      	bcc.n	8002dc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dce:	f7ff ff8f 	bl	8002cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dd2:	f009 f981 	bl	800c0d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dd6:	f7fe fc21 	bl	800161c <main>
  bx  lr    
 8002dda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de4:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 8002de8:	0801219c 	.word	0x0801219c
  ldr r2, =_sbss
 8002dec:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 8002df0:	20001280 	.word	0x20001280

08002df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df4:	e7fe      	b.n	8002df4 <ADC_IRQHandler>
	...

08002df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <HAL_Init+0x40>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <HAL_Init+0x40>)
 8002e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_Init+0x40>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <HAL_Init+0x40>)
 8002e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_Init+0x40>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_Init+0x40>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e20:	2003      	movs	r0, #3
 8002e22:	f000 fd51 	bl	80038c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e26:	200f      	movs	r0, #15
 8002e28:	f000 f808 	bl	8002e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e2c:	f7ff fbca 	bl	80025c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023c00 	.word	0x40023c00

08002e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_InitTick+0x54>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_InitTick+0x58>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fd69 	bl	8003932 <HAL_SYSTICK_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00e      	b.n	8002e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d80a      	bhi.n	8002e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e70:	2200      	movs	r2, #0
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	f000 fd31 	bl	80038de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e7c:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <HAL_InitTick+0x5c>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000004 	.word	0x20000004
 8002e94:	2000000c 	.word	0x2000000c
 8002e98:	20000008 	.word	0x20000008

08002e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_IncTick+0x20>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_IncTick+0x24>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <HAL_IncTick+0x24>)
 8002eae:	6013      	str	r3, [r2, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	2000000c 	.word	0x2000000c
 8002ec0:	2000122c 	.word	0x2000122c

08002ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <HAL_GetTick+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	2000122c 	.word	0x2000122c

08002edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee4:	f7ff ffee 	bl	8002ec4 <HAL_GetTick>
 8002ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d005      	beq.n	8002f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_Delay+0x44>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f02:	bf00      	nop
 8002f04:	f7ff ffde 	bl	8002ec4 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d8f7      	bhi.n	8002f04 <HAL_Delay+0x28>
  {
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	2000000c 	.word	0x2000000c

08002f24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e033      	b.n	8002fa2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fb66 	bl	8002614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d118      	bne.n	8002f94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f6a:	f023 0302 	bic.w	r3, r3, #2
 8002f6e:	f043 0202 	orr.w	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa58 	bl	800342c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f023 0303 	bic.w	r3, r3, #3
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
 8002f92:	e001      	b.n	8002f98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_Start_DMA+0x1e>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e0ce      	b.n	8003168 <HAL_ADC_Start_DMA+0x1bc>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d018      	beq.n	8003012 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ff0:	4b5f      	ldr	r3, [pc, #380]	; (8003170 <HAL_ADC_Start_DMA+0x1c4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5f      	ldr	r2, [pc, #380]	; (8003174 <HAL_ADC_Start_DMA+0x1c8>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9a      	lsrs	r2, r3, #18
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003004:	e002      	b.n	800300c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	3b01      	subs	r3, #1
 800300a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f9      	bne.n	8003006 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003020:	d107      	bne.n	8003032 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003030:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	f040 8086 	bne.w	800314e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800306c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003080:	d106      	bne.n	8003090 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f023 0206 	bic.w	r2, r3, #6
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
 800308e:	e002      	b.n	8003096 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800309e:	4b36      	ldr	r3, [pc, #216]	; (8003178 <HAL_ADC_Start_DMA+0x1cc>)
 80030a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a6:	4a35      	ldr	r2, [pc, #212]	; (800317c <HAL_ADC_Start_DMA+0x1d0>)
 80030a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	4a34      	ldr	r2, [pc, #208]	; (8003180 <HAL_ADC_Start_DMA+0x1d4>)
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <HAL_ADC_Start_DMA+0x1d8>)
 80030b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80030d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	334c      	adds	r3, #76	; 0x4c
 80030ee:	4619      	mov	r1, r3
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f000 fcd8 	bl	8003aa8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10f      	bne.n	8003124 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d129      	bne.n	8003166 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	e020      	b.n	8003166 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a17      	ldr	r2, [pc, #92]	; (8003188 <HAL_ADC_Start_DMA+0x1dc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d11b      	bne.n	8003166 <HAL_ADC_Start_DMA+0x1ba>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d114      	bne.n	8003166 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	e00b      	b.n	8003166 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f043 0210 	orr.w	r2, r3, #16
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000004 	.word	0x20000004
 8003174:	431bde83 	.word	0x431bde83
 8003178:	40012300 	.word	0x40012300
 800317c:	08003625 	.word	0x08003625
 8003180:	080036df 	.word	0x080036df
 8003184:	080036fb 	.word	0x080036fb
 8003188:	40012000 	.word	0x40012000

0800318c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1c>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e113      	b.n	800340c <HAL_ADC_ConfigChannel+0x244>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	d925      	bls.n	8003240 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68d9      	ldr	r1, [r3, #12]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	3b1e      	subs	r3, #30
 800320a:	2207      	movs	r2, #7
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43da      	mvns	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	400a      	ands	r2, r1
 8003218:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68d9      	ldr	r1, [r3, #12]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	4618      	mov	r0, r3
 800322c:	4603      	mov	r3, r0
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4403      	add	r3, r0
 8003232:	3b1e      	subs	r3, #30
 8003234:	409a      	lsls	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	e022      	b.n	8003286 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6919      	ldr	r1, [r3, #16]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	2207      	movs	r2, #7
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43da      	mvns	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	400a      	ands	r2, r1
 8003262:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6919      	ldr	r1, [r3, #16]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	4618      	mov	r0, r3
 8003276:	4603      	mov	r3, r0
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4403      	add	r3, r0
 800327c:	409a      	lsls	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b06      	cmp	r3, #6
 800328c:	d824      	bhi.n	80032d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	3b05      	subs	r3, #5
 80032a0:	221f      	movs	r2, #31
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	400a      	ands	r2, r1
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	3b05      	subs	r3, #5
 80032ca:	fa00 f203 	lsl.w	r2, r0, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34
 80032d6:	e04c      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d824      	bhi.n	800332a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	3b23      	subs	r3, #35	; 0x23
 80032f2:	221f      	movs	r2, #31
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43da      	mvns	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	400a      	ands	r2, r1
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	4618      	mov	r0, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	3b23      	subs	r3, #35	; 0x23
 800331c:	fa00 f203 	lsl.w	r2, r0, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
 8003328:	e023      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	3b41      	subs	r3, #65	; 0x41
 800333c:	221f      	movs	r2, #31
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	400a      	ands	r2, r1
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	3b41      	subs	r3, #65	; 0x41
 8003366:	fa00 f203 	lsl.w	r2, r0, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003372:	4b29      	ldr	r3, [pc, #164]	; (8003418 <HAL_ADC_ConfigChannel+0x250>)
 8003374:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a28      	ldr	r2, [pc, #160]	; (800341c <HAL_ADC_ConfigChannel+0x254>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10f      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x1d8>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b12      	cmp	r3, #18
 8003386:	d10b      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_ADC_ConfigChannel+0x254>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d12b      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x23a>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <HAL_ADC_ConfigChannel+0x258>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <HAL_ADC_ConfigChannel+0x1f4>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b11      	cmp	r3, #17
 80033ba:	d122      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a11      	ldr	r2, [pc, #68]	; (8003420 <HAL_ADC_ConfigChannel+0x258>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d111      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_ADC_ConfigChannel+0x25c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a11      	ldr	r2, [pc, #68]	; (8003428 <HAL_ADC_ConfigChannel+0x260>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	0c9a      	lsrs	r2, r3, #18
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033f4:	e002      	b.n	80033fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f9      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40012300 	.word	0x40012300
 800341c:	40012000 	.word	0x40012000
 8003420:	10000012 	.word	0x10000012
 8003424:	20000004 	.word	0x20000004
 8003428:	431bde83 	.word	0x431bde83

0800342c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003434:	4b79      	ldr	r3, [pc, #484]	; (800361c <ADC_Init+0x1f0>)
 8003436:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	431a      	orrs	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	021a      	lsls	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6859      	ldr	r1, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6899      	ldr	r1, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	4a58      	ldr	r2, [pc, #352]	; (8003620 <ADC_Init+0x1f4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6899      	ldr	r1, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6899      	ldr	r1, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	e00f      	b.n	800352a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003528:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0202 	bic.w	r2, r2, #2
 8003538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6899      	ldr	r1, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7e1b      	ldrb	r3, [r3, #24]
 8003544:	005a      	lsls	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01b      	beq.n	8003590 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003566:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003576:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	3b01      	subs	r3, #1
 8003584:	035a      	lsls	r2, r3, #13
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	e007      	b.n	80035a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	051a      	lsls	r2, r3, #20
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6899      	ldr	r1, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035e2:	025a      	lsls	r2, r3, #9
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6899      	ldr	r1, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	029a      	lsls	r2, r3, #10
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40012300 	.word	0x40012300
 8003620:	0f000001 	.word	0x0f000001

08003624 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800363a:	2b00      	cmp	r3, #0
 800363c:	d13c      	bne.n	80036b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d12b      	bne.n	80036b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800365c:	2b00      	cmp	r3, #0
 800365e:	d127      	bne.n	80036b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800366a:	2b00      	cmp	r3, #0
 800366c:	d006      	beq.n	800367c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003678:	2b00      	cmp	r3, #0
 800367a:	d119      	bne.n	80036b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0220 	bic.w	r2, r2, #32
 800368a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff fd6b 	bl	800318c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036b6:	e00e      	b.n	80036d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff fd75 	bl	80031b4 <HAL_ADC_ErrorCallback>
}
 80036ca:	e004      	b.n	80036d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff fd57 	bl	80031a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f043 0204 	orr.w	r2, r3, #4
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fd4a 	bl	80031b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <__NVIC_SetPriorityGrouping+0x44>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003744:	4013      	ands	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375a:	4a04      	ldr	r2, [pc, #16]	; (800376c <__NVIC_SetPriorityGrouping+0x44>)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	60d3      	str	r3, [r2, #12]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <__NVIC_GetPriorityGrouping+0x18>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	f003 0307 	and.w	r3, r3, #7
}
 800377e:	4618      	mov	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	2b00      	cmp	r3, #0
 800379c:	db0b      	blt.n	80037b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	f003 021f 	and.w	r2, r3, #31
 80037a4:	4907      	ldr	r1, [pc, #28]	; (80037c4 <__NVIC_EnableIRQ+0x38>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2001      	movs	r0, #1
 80037ae:	fa00 f202 	lsl.w	r2, r0, r2
 80037b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000e100 	.word	0xe000e100

080037c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	6039      	str	r1, [r7, #0]
 80037d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	db0a      	blt.n	80037f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	490c      	ldr	r1, [pc, #48]	; (8003814 <__NVIC_SetPriority+0x4c>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	0112      	lsls	r2, r2, #4
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	440b      	add	r3, r1
 80037ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f0:	e00a      	b.n	8003808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4908      	ldr	r1, [pc, #32]	; (8003818 <__NVIC_SetPriority+0x50>)
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3b04      	subs	r3, #4
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	440b      	add	r3, r1
 8003806:	761a      	strb	r2, [r3, #24]
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000e100 	.word	0xe000e100
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f1c3 0307 	rsb	r3, r3, #7
 8003836:	2b04      	cmp	r3, #4
 8003838:	bf28      	it	cs
 800383a:	2304      	movcs	r3, #4
 800383c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3304      	adds	r3, #4
 8003842:	2b06      	cmp	r3, #6
 8003844:	d902      	bls.n	800384c <NVIC_EncodePriority+0x30>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3b03      	subs	r3, #3
 800384a:	e000      	b.n	800384e <NVIC_EncodePriority+0x32>
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003850:	f04f 32ff 	mov.w	r2, #4294967295
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	401a      	ands	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003864:	f04f 31ff 	mov.w	r1, #4294967295
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	43d9      	mvns	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003874:	4313      	orrs	r3, r2
         );
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	; 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003894:	d301      	bcc.n	800389a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003896:	2301      	movs	r3, #1
 8003898:	e00f      	b.n	80038ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <SysTick_Config+0x40>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3b01      	subs	r3, #1
 80038a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038a2:	210f      	movs	r1, #15
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295
 80038a8:	f7ff ff8e 	bl	80037c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <SysTick_Config+0x40>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <SysTick_Config+0x40>)
 80038b4:	2207      	movs	r2, #7
 80038b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	e000e010 	.word	0xe000e010

080038c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff29 	bl	8003728 <__NVIC_SetPriorityGrouping>
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038de:	b580      	push	{r7, lr}
 80038e0:	b086      	sub	sp, #24
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f0:	f7ff ff3e 	bl	8003770 <__NVIC_GetPriorityGrouping>
 80038f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	6978      	ldr	r0, [r7, #20]
 80038fc:	f7ff ff8e 	bl	800381c <NVIC_EncodePriority>
 8003900:	4602      	mov	r2, r0
 8003902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ff5d 	bl	80037c8 <__NVIC_SetPriority>
}
 800390e:	bf00      	nop
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	4603      	mov	r3, r0
 800391e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff31 	bl	800378c <__NVIC_EnableIRQ>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff ffa2 	bl	8003884 <SysTick_Config>
 8003940:	4603      	mov	r3, r0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003958:	f7ff fab4 	bl	8002ec4 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e099      	b.n	8003a9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003988:	e00f      	b.n	80039aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800398a:	f7ff fa9b 	bl	8002ec4 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b05      	cmp	r3, #5
 8003996:	d908      	bls.n	80039aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2203      	movs	r2, #3
 80039a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e078      	b.n	8003a9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e8      	bne.n	800398a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <HAL_DMA_Init+0x158>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d107      	bne.n	8003a14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d117      	bne.n	8003a6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00e      	beq.n	8003a6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa6f 	bl	8003f34 <DMA_CheckFifoParam>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2240      	movs	r2, #64	; 0x40
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e016      	b.n	8003a9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa26 	bl	8003ec8 <DMA_CalcBaseAndBitshift>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	223f      	movs	r2, #63	; 0x3f
 8003a86:	409a      	lsls	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	f010803f 	.word	0xf010803f

08003aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_DMA_Start_IT+0x26>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e040      	b.n	8003b50 <HAL_DMA_Start_IT+0xa8>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d12f      	bne.n	8003b42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f9b8 	bl	8003e6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	223f      	movs	r2, #63	; 0x3f
 8003b02:	409a      	lsls	r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0216 	orr.w	r2, r2, #22
 8003b16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0208 	orr.w	r2, r2, #8
 8003b2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e005      	b.n	8003b4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b64:	4b8e      	ldr	r3, [pc, #568]	; (8003da0 <HAL_DMA_IRQHandler+0x248>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a8e      	ldr	r2, [pc, #568]	; (8003da4 <HAL_DMA_IRQHandler+0x24c>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	0a9b      	lsrs	r3, r3, #10
 8003b70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	2208      	movs	r2, #8
 8003b84:	409a      	lsls	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01a      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0204 	bic.w	r2, r2, #4
 8003baa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	2201      	movs	r2, #1
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d012      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	2201      	movs	r2, #1
 8003be8:	409a      	lsls	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	f043 0202 	orr.w	r2, r3, #2
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	2204      	movs	r2, #4
 8003c00:	409a      	lsls	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d012      	beq.n	8003c30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f043 0204 	orr.w	r2, r3, #4
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	2210      	movs	r2, #16
 8003c36:	409a      	lsls	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d043      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d03c      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c52:	2210      	movs	r2, #16
 8003c54:	409a      	lsls	r2, r3
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d018      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d108      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d024      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
 8003c86:	e01f      	b.n	8003cc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01b      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
 8003c98:	e016      	b.n	8003cc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d107      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0208 	bic.w	r2, r2, #8
 8003cb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	2220      	movs	r2, #32
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 808f 	beq.w	8003df8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8087 	beq.w	8003df8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cee:	2220      	movs	r2, #32
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d136      	bne.n	8003d70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0216 	bic.w	r2, r2, #22
 8003d10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <HAL_DMA_IRQHandler+0x1da>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0208 	bic.w	r2, r2, #8
 8003d40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	223f      	movs	r2, #63	; 0x3f
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d07e      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
        }
        return;
 8003d6e:	e079      	b.n	8003e64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01d      	beq.n	8003dba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10d      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d031      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
 8003d9c:	e02c      	b.n	8003df8 <HAL_DMA_IRQHandler+0x2a0>
 8003d9e:	bf00      	nop
 8003da0:	20000004 	.word	0x20000004
 8003da4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d023      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
 8003db8:	e01e      	b.n	8003df8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10f      	bne.n	8003de8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0210 	bic.w	r2, r2, #16
 8003dd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d032      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d022      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2205      	movs	r2, #5
 8003e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d307      	bcc.n	8003e40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f2      	bne.n	8003e24 <HAL_DMA_IRQHandler+0x2cc>
 8003e3e:	e000      	b.n	8003e42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
 8003e62:	e000      	b.n	8003e66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e64:	bf00      	nop
    }
  }
}
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d108      	bne.n	8003eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003eaa:	e007      	b.n	8003ebc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	3b10      	subs	r3, #16
 8003ed8:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <DMA_CalcBaseAndBitshift+0x64>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ee2:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <DMA_CalcBaseAndBitshift+0x68>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d909      	bls.n	8003f0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	1d1a      	adds	r2, r3, #4
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	659a      	str	r2, [r3, #88]	; 0x58
 8003f08:	e007      	b.n	8003f1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	aaaaaaab 	.word	0xaaaaaaab
 8003f30:	08011cdc 	.word	0x08011cdc

08003f34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11f      	bne.n	8003f8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d856      	bhi.n	8004002 <DMA_CheckFifoParam+0xce>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <DMA_CheckFifoParam+0x28>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f6d 	.word	0x08003f6d
 8003f60:	08003f7f 	.word	0x08003f7f
 8003f64:	08003f6d 	.word	0x08003f6d
 8003f68:	08004003 	.word	0x08004003
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d046      	beq.n	8004006 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f7c:	e043      	b.n	8004006 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f86:	d140      	bne.n	800400a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f8c:	e03d      	b.n	800400a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f96:	d121      	bne.n	8003fdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d837      	bhi.n	800400e <DMA_CheckFifoParam+0xda>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <DMA_CheckFifoParam+0x70>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fb5 	.word	0x08003fb5
 8003fa8:	08003fbb 	.word	0x08003fbb
 8003fac:	08003fb5 	.word	0x08003fb5
 8003fb0:	08003fcd 	.word	0x08003fcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb8:	e030      	b.n	800401c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d025      	beq.n	8004012 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fca:	e022      	b.n	8004012 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fd4:	d11f      	bne.n	8004016 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fda:	e01c      	b.n	8004016 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d903      	bls.n	8003fea <DMA_CheckFifoParam+0xb6>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d003      	beq.n	8003ff0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fe8:	e018      	b.n	800401c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
      break;
 8003fee:	e015      	b.n	800401c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00e      	beq.n	800401a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8004000:	e00b      	b.n	800401a <DMA_CheckFifoParam+0xe6>
      break;
 8004002:	bf00      	nop
 8004004:	e00a      	b.n	800401c <DMA_CheckFifoParam+0xe8>
      break;
 8004006:	bf00      	nop
 8004008:	e008      	b.n	800401c <DMA_CheckFifoParam+0xe8>
      break;
 800400a:	bf00      	nop
 800400c:	e006      	b.n	800401c <DMA_CheckFifoParam+0xe8>
      break;
 800400e:	bf00      	nop
 8004010:	e004      	b.n	800401c <DMA_CheckFifoParam+0xe8>
      break;
 8004012:	bf00      	nop
 8004014:	e002      	b.n	800401c <DMA_CheckFifoParam+0xe8>
      break;   
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <DMA_CheckFifoParam+0xe8>
      break;
 800401a:	bf00      	nop
    }
  } 
  
  return status; 
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop

0800402c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e159      	b.n	80042fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004048:	2201      	movs	r2, #1
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	429a      	cmp	r2, r3
 8004062:	f040 8148 	bne.w	80042f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d005      	beq.n	800407e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800407a:	2b02      	cmp	r3, #2
 800407c:	d130      	bne.n	80040e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	2203      	movs	r2, #3
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040b4:	2201      	movs	r2, #1
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 0201 	and.w	r2, r3, #1
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d017      	beq.n	800411c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	2203      	movs	r2, #3
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	43db      	mvns	r3, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4013      	ands	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d123      	bne.n	8004170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	08da      	lsrs	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3208      	adds	r2, #8
 8004130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	220f      	movs	r2, #15
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	08da      	lsrs	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3208      	adds	r2, #8
 800416a:	69b9      	ldr	r1, [r7, #24]
 800416c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	2203      	movs	r2, #3
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0203 	and.w	r2, r3, #3
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80a2 	beq.w	80042f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	4b57      	ldr	r3, [pc, #348]	; (8004314 <HAL_GPIO_Init+0x2e8>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	4a56      	ldr	r2, [pc, #344]	; (8004314 <HAL_GPIO_Init+0x2e8>)
 80041bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041c0:	6453      	str	r3, [r2, #68]	; 0x44
 80041c2:	4b54      	ldr	r3, [pc, #336]	; (8004314 <HAL_GPIO_Init+0x2e8>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041ce:	4a52      	ldr	r2, [pc, #328]	; (8004318 <HAL_GPIO_Init+0x2ec>)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	3302      	adds	r3, #2
 80041d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	220f      	movs	r2, #15
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4013      	ands	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a49      	ldr	r2, [pc, #292]	; (800431c <HAL_GPIO_Init+0x2f0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d019      	beq.n	800422e <HAL_GPIO_Init+0x202>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a48      	ldr	r2, [pc, #288]	; (8004320 <HAL_GPIO_Init+0x2f4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <HAL_GPIO_Init+0x1fe>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a47      	ldr	r2, [pc, #284]	; (8004324 <HAL_GPIO_Init+0x2f8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00d      	beq.n	8004226 <HAL_GPIO_Init+0x1fa>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a46      	ldr	r2, [pc, #280]	; (8004328 <HAL_GPIO_Init+0x2fc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <HAL_GPIO_Init+0x1f6>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a45      	ldr	r2, [pc, #276]	; (800432c <HAL_GPIO_Init+0x300>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <HAL_GPIO_Init+0x1f2>
 800421a:	2304      	movs	r3, #4
 800421c:	e008      	b.n	8004230 <HAL_GPIO_Init+0x204>
 800421e:	2307      	movs	r3, #7
 8004220:	e006      	b.n	8004230 <HAL_GPIO_Init+0x204>
 8004222:	2303      	movs	r3, #3
 8004224:	e004      	b.n	8004230 <HAL_GPIO_Init+0x204>
 8004226:	2302      	movs	r3, #2
 8004228:	e002      	b.n	8004230 <HAL_GPIO_Init+0x204>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_GPIO_Init+0x204>
 800422e:	2300      	movs	r3, #0
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	f002 0203 	and.w	r2, r2, #3
 8004236:	0092      	lsls	r2, r2, #2
 8004238:	4093      	lsls	r3, r2
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004240:	4935      	ldr	r1, [pc, #212]	; (8004318 <HAL_GPIO_Init+0x2ec>)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	3302      	adds	r3, #2
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800424e:	4b38      	ldr	r3, [pc, #224]	; (8004330 <HAL_GPIO_Init+0x304>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004272:	4a2f      	ldr	r2, [pc, #188]	; (8004330 <HAL_GPIO_Init+0x304>)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004278:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <HAL_GPIO_Init+0x304>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	43db      	mvns	r3, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800429c:	4a24      	ldr	r2, [pc, #144]	; (8004330 <HAL_GPIO_Init+0x304>)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042a2:	4b23      	ldr	r3, [pc, #140]	; (8004330 <HAL_GPIO_Init+0x304>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042c6:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <HAL_GPIO_Init+0x304>)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042cc:	4b18      	ldr	r3, [pc, #96]	; (8004330 <HAL_GPIO_Init+0x304>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042f0:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <HAL_GPIO_Init+0x304>)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3301      	adds	r3, #1
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b0f      	cmp	r3, #15
 8004300:	f67f aea2 	bls.w	8004048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop
 8004308:	3724      	adds	r7, #36	; 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800
 8004318:	40013800 	.word	0x40013800
 800431c:	40020000 	.word	0x40020000
 8004320:	40020400 	.word	0x40020400
 8004324:	40020800 	.word	0x40020800
 8004328:	40020c00 	.word	0x40020c00
 800432c:	40021000 	.word	0x40021000
 8004330:	40013c00 	.word	0x40013c00

08004334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	887b      	ldrh	r3, [r7, #2]
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
 8004350:	e001      	b.n	8004356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004356:	7bfb      	ldrb	r3, [r7, #15]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	807b      	strh	r3, [r7, #2]
 8004370:	4613      	mov	r3, r2
 8004372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004374:	787b      	ldrb	r3, [r7, #1]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800437a:	887a      	ldrh	r2, [r7, #2]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004380:	e003      	b.n	800438a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004382:	887b      	ldrh	r3, [r7, #2]
 8004384:	041a      	lsls	r2, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	619a      	str	r2, [r3, #24]
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e12b      	b.n	8004602 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fe f9bc 	bl	800273c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2224      	movs	r2, #36	; 0x24
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043fc:	f001 fd62 	bl	8005ec4 <HAL_RCC_GetPCLK1Freq>
 8004400:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4a81      	ldr	r2, [pc, #516]	; (800460c <HAL_I2C_Init+0x274>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d807      	bhi.n	800441c <HAL_I2C_Init+0x84>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a80      	ldr	r2, [pc, #512]	; (8004610 <HAL_I2C_Init+0x278>)
 8004410:	4293      	cmp	r3, r2
 8004412:	bf94      	ite	ls
 8004414:	2301      	movls	r3, #1
 8004416:	2300      	movhi	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e006      	b.n	800442a <HAL_I2C_Init+0x92>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a7d      	ldr	r2, [pc, #500]	; (8004614 <HAL_I2C_Init+0x27c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	bf94      	ite	ls
 8004424:	2301      	movls	r3, #1
 8004426:	2300      	movhi	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e0e7      	b.n	8004602 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a78      	ldr	r2, [pc, #480]	; (8004618 <HAL_I2C_Init+0x280>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0c9b      	lsrs	r3, r3, #18
 800443c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4a6a      	ldr	r2, [pc, #424]	; (800460c <HAL_I2C_Init+0x274>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d802      	bhi.n	800446c <HAL_I2C_Init+0xd4>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	3301      	adds	r3, #1
 800446a:	e009      	b.n	8004480 <HAL_I2C_Init+0xe8>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	4a69      	ldr	r2, [pc, #420]	; (800461c <HAL_I2C_Init+0x284>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	099b      	lsrs	r3, r3, #6
 800447e:	3301      	adds	r3, #1
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	430b      	orrs	r3, r1
 8004486:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004492:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	495c      	ldr	r1, [pc, #368]	; (800460c <HAL_I2C_Init+0x274>)
 800449c:	428b      	cmp	r3, r1
 800449e:	d819      	bhi.n	80044d4 <HAL_I2C_Init+0x13c>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1e59      	subs	r1, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80044ae:	1c59      	adds	r1, r3, #1
 80044b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044b4:	400b      	ands	r3, r1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_I2C_Init+0x138>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1e59      	subs	r1, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80044c8:	3301      	adds	r3, #1
 80044ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ce:	e051      	b.n	8004574 <HAL_I2C_Init+0x1dc>
 80044d0:	2304      	movs	r3, #4
 80044d2:	e04f      	b.n	8004574 <HAL_I2C_Init+0x1dc>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d111      	bne.n	8004500 <HAL_I2C_Init+0x168>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1e58      	subs	r0, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6859      	ldr	r1, [r3, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	440b      	add	r3, r1
 80044ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ee:	3301      	adds	r3, #1
 80044f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e012      	b.n	8004526 <HAL_I2C_Init+0x18e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1e58      	subs	r0, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	0099      	lsls	r1, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	fbb0 f3f3 	udiv	r3, r0, r3
 8004516:	3301      	adds	r3, #1
 8004518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_I2C_Init+0x196>
 800452a:	2301      	movs	r3, #1
 800452c:	e022      	b.n	8004574 <HAL_I2C_Init+0x1dc>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10e      	bne.n	8004554 <HAL_I2C_Init+0x1bc>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1e58      	subs	r0, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6859      	ldr	r1, [r3, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	440b      	add	r3, r1
 8004544:	fbb0 f3f3 	udiv	r3, r0, r3
 8004548:	3301      	adds	r3, #1
 800454a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004552:	e00f      	b.n	8004574 <HAL_I2C_Init+0x1dc>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1e58      	subs	r0, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	0099      	lsls	r1, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	fbb0 f3f3 	udiv	r3, r0, r3
 800456a:	3301      	adds	r3, #1
 800456c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	6809      	ldr	r1, [r1, #0]
 8004578:	4313      	orrs	r3, r2
 800457a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6911      	ldr	r1, [r2, #16]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68d2      	ldr	r2, [r2, #12]
 80045ae:	4311      	orrs	r1, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	000186a0 	.word	0x000186a0
 8004610:	001e847f 	.word	0x001e847f
 8004614:	003d08ff 	.word	0x003d08ff
 8004618:	431bde83 	.word	0x431bde83
 800461c:	10624dd3 	.word	0x10624dd3

08004620 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	461a      	mov	r2, r3
 800462c:	460b      	mov	r3, r1
 800462e:	817b      	strh	r3, [r7, #10]
 8004630:	4613      	mov	r3, r2
 8004632:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004634:	f7fe fc46 	bl	8002ec4 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b20      	cmp	r3, #32
 8004644:	f040 80e0 	bne.w	8004808 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2319      	movs	r3, #25
 800464e:	2201      	movs	r2, #1
 8004650:	4970      	ldr	r1, [pc, #448]	; (8004814 <HAL_I2C_Master_Transmit+0x1f4>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fde8 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
 8004660:	e0d3      	b.n	800480a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_I2C_Master_Transmit+0x50>
 800466c:	2302      	movs	r3, #2
 800466e:	e0cc      	b.n	800480a <HAL_I2C_Master_Transmit+0x1ea>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b01      	cmp	r3, #1
 8004684:	d007      	beq.n	8004696 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2221      	movs	r2, #33	; 0x21
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2210      	movs	r2, #16
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	893a      	ldrh	r2, [r7, #8]
 80046c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a50      	ldr	r2, [pc, #320]	; (8004818 <HAL_I2C_Master_Transmit+0x1f8>)
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046d8:	8979      	ldrh	r1, [r7, #10]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	6a3a      	ldr	r2, [r7, #32]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 fbbc 	bl	8004e5c <I2C_MasterRequestWrite>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e08d      	b.n	800480a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004704:	e066      	b.n	80047d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	6a39      	ldr	r1, [r7, #32]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fe62 	bl	80053d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b04      	cmp	r3, #4
 800471c:	d107      	bne.n	800472e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e06b      	b.n	800480a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d11b      	bne.n	80047a8 <HAL_I2C_Master_Transmit+0x188>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	6a39      	ldr	r1, [r7, #32]
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fe52 	bl	8005456 <I2C_WaitOnBTFFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00d      	beq.n	80047d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d107      	bne.n	80047d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e01a      	b.n	800480a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d194      	bne.n	8004706 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	00100002 	.word	0x00100002
 8004818:	ffff0000 	.word	0xffff0000

0800481c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	607a      	str	r2, [r7, #4]
 8004826:	461a      	mov	r2, r3
 8004828:	460b      	mov	r3, r1
 800482a:	817b      	strh	r3, [r7, #10]
 800482c:	4613      	mov	r3, r2
 800482e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004830:	f7fe fb48 	bl	8002ec4 <HAL_GetTick>
 8004834:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	f040 820b 	bne.w	8004c5a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2319      	movs	r3, #25
 800484a:	2201      	movs	r2, #1
 800484c:	497c      	ldr	r1, [pc, #496]	; (8004a40 <HAL_I2C_Master_Receive+0x224>)
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fcea 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
 800485c:	e1fe      	b.n	8004c5c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_I2C_Master_Receive+0x50>
 8004868:	2302      	movs	r3, #2
 800486a:	e1f7      	b.n	8004c5c <HAL_I2C_Master_Receive+0x440>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d007      	beq.n	8004892 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2222      	movs	r2, #34	; 0x22
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2210      	movs	r2, #16
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	893a      	ldrh	r2, [r7, #8]
 80048c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4a5c      	ldr	r2, [pc, #368]	; (8004a44 <HAL_I2C_Master_Receive+0x228>)
 80048d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048d4:	8979      	ldrh	r1, [r7, #10]
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fb40 	bl	8004f60 <I2C_MasterRequestRead>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e1b8      	b.n	8004c5c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d113      	bne.n	800491a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	623b      	str	r3, [r7, #32]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	623b      	str	r3, [r7, #32]
 8004906:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e18c      	b.n	8004c34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491e:	2b01      	cmp	r3, #1
 8004920:	d11b      	bne.n	800495a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004930:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	61fb      	str	r3, [r7, #28]
 8004946:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e16c      	b.n	8004c34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	2b02      	cmp	r3, #2
 8004960:	d11b      	bne.n	800499a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004970:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004980:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	e14c      	b.n	8004c34 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049c0:	e138      	b.n	8004c34 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	f200 80f1 	bhi.w	8004bae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d123      	bne.n	8004a1c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fd7d 	bl	80054d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e139      	b.n	8004c5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a1a:	e10b      	b.n	8004c34 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d14e      	bne.n	8004ac2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	4906      	ldr	r1, [pc, #24]	; (8004a48 <HAL_I2C_Master_Receive+0x22c>)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fbfa 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e10e      	b.n	8004c5c <HAL_I2C_Master_Receive+0x440>
 8004a3e:	bf00      	nop
 8004a40:	00100002 	.word	0x00100002
 8004a44:	ffff0000 	.word	0xffff0000
 8004a48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ac0:	e0b8      	b.n	8004c34 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4966      	ldr	r1, [pc, #408]	; (8004c64 <HAL_I2C_Master_Receive+0x448>)
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fbab 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0bf      	b.n	8004c5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	2200      	movs	r2, #0
 8004b26:	494f      	ldr	r1, [pc, #316]	; (8004c64 <HAL_I2C_Master_Receive+0x448>)
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fb7d 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e091      	b.n	8004c5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bac:	e042      	b.n	8004c34 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fc90 	bl	80054d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e04c      	b.n	8004c5c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d118      	bne.n	8004c34 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f47f aec2 	bne.w	80049c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e000      	b.n	8004c5c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
  }
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3728      	adds	r7, #40	; 0x28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	00010004 	.word	0x00010004

08004c68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	817b      	strh	r3, [r7, #10]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	813b      	strh	r3, [r7, #8]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c82:	f7fe f91f 	bl	8002ec4 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	f040 80d9 	bne.w	8004e48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2319      	movs	r3, #25
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	496d      	ldr	r1, [pc, #436]	; (8004e54 <HAL_I2C_Mem_Write+0x1ec>)
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fac1 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cac:	2302      	movs	r3, #2
 8004cae:	e0cc      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_I2C_Mem_Write+0x56>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e0c5      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d007      	beq.n	8004ce4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2221      	movs	r2, #33	; 0x21
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a3a      	ldr	r2, [r7, #32]
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a4d      	ldr	r2, [pc, #308]	; (8004e58 <HAL_I2C_Mem_Write+0x1f0>)
 8004d24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d26:	88f8      	ldrh	r0, [r7, #6]
 8004d28:	893a      	ldrh	r2, [r7, #8]
 8004d2a:	8979      	ldrh	r1, [r7, #10]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	4603      	mov	r3, r0
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f9e0 	bl	80050fc <I2C_RequestMemoryWrite>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d052      	beq.n	8004de8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e081      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fb42 	bl	80053d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00d      	beq.n	8004d72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d107      	bne.n	8004d6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e06b      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	781a      	ldrb	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d11b      	bne.n	8004de8 <HAL_I2C_Mem_Write+0x180>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d017      	beq.n	8004de8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	781a      	ldrb	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1aa      	bne.n	8004d46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fb2e 	bl	8005456 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00d      	beq.n	8004e1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d107      	bne.n	8004e18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e016      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	e000      	b.n	8004e4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	00100002 	.word	0x00100002
 8004e58:	ffff0000 	.word	0xffff0000

08004e5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d006      	beq.n	8004e86 <I2C_MasterRequestWrite+0x2a>
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d003      	beq.n	8004e86 <I2C_MasterRequestWrite+0x2a>
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e84:	d108      	bne.n	8004e98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e00b      	b.n	8004eb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	2b12      	cmp	r3, #18
 8004e9e:	d107      	bne.n	8004eb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f9b3 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00d      	beq.n	8004ee4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed6:	d103      	bne.n	8004ee0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e035      	b.n	8004f50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eec:	d108      	bne.n	8004f00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eee:	897b      	ldrh	r3, [r7, #10]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004efc:	611a      	str	r2, [r3, #16]
 8004efe:	e01b      	b.n	8004f38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f00:	897b      	ldrh	r3, [r7, #10]
 8004f02:	11db      	asrs	r3, r3, #7
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 0306 	and.w	r3, r3, #6
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f063 030f 	orn	r3, r3, #15
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	490e      	ldr	r1, [pc, #56]	; (8004f58 <I2C_MasterRequestWrite+0xfc>)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f9d9 	bl	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e010      	b.n	8004f50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f2e:	897b      	ldrh	r3, [r7, #10]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	4907      	ldr	r1, [pc, #28]	; (8004f5c <I2C_MasterRequestWrite+0x100>)
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f9c9 	bl	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	00010008 	.word	0x00010008
 8004f5c:	00010002 	.word	0x00010002

08004f60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d006      	beq.n	8004f9a <I2C_MasterRequestRead+0x3a>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d003      	beq.n	8004f9a <I2C_MasterRequestRead+0x3a>
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f98:	d108      	bne.n	8004fac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e00b      	b.n	8004fc4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	2b11      	cmp	r3, #17
 8004fb2:	d107      	bne.n	8004fc4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f929 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00d      	beq.n	8004ff8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d103      	bne.n	8004ff4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e079      	b.n	80050ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005000:	d108      	bne.n	8005014 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005002:	897b      	ldrh	r3, [r7, #10]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	b2da      	uxtb	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	611a      	str	r2, [r3, #16]
 8005012:	e05f      	b.n	80050d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005014:	897b      	ldrh	r3, [r7, #10]
 8005016:	11db      	asrs	r3, r3, #7
 8005018:	b2db      	uxtb	r3, r3
 800501a:	f003 0306 	and.w	r3, r3, #6
 800501e:	b2db      	uxtb	r3, r3
 8005020:	f063 030f 	orn	r3, r3, #15
 8005024:	b2da      	uxtb	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4930      	ldr	r1, [pc, #192]	; (80050f4 <I2C_MasterRequestRead+0x194>)
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f94f 	bl	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e054      	b.n	80050ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005042:	897b      	ldrh	r3, [r7, #10]
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4929      	ldr	r1, [pc, #164]	; (80050f8 <I2C_MasterRequestRead+0x198>)
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f93f 	bl	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e044      	b.n	80050ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005086:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f8c7 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00d      	beq.n	80050bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ae:	d103      	bne.n	80050b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e017      	b.n	80050ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80050bc:	897b      	ldrh	r3, [r7, #10]
 80050be:	11db      	asrs	r3, r3, #7
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 0306 	and.w	r3, r3, #6
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f063 030e 	orn	r3, r3, #14
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	4907      	ldr	r1, [pc, #28]	; (80050f8 <I2C_MasterRequestRead+0x198>)
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f8fb 	bl	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	00010008 	.word	0x00010008
 80050f8:	00010002 	.word	0x00010002

080050fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	4608      	mov	r0, r1
 8005106:	4611      	mov	r1, r2
 8005108:	461a      	mov	r2, r3
 800510a:	4603      	mov	r3, r0
 800510c:	817b      	strh	r3, [r7, #10]
 800510e:	460b      	mov	r3, r1
 8005110:	813b      	strh	r3, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	2200      	movs	r2, #0
 800512e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f878 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514c:	d103      	bne.n	8005156 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005154:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e05f      	b.n	800521a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800515a:	897b      	ldrh	r3, [r7, #10]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005168:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	6a3a      	ldr	r2, [r7, #32]
 800516e:	492d      	ldr	r1, [pc, #180]	; (8005224 <I2C_RequestMemoryWrite+0x128>)
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f8b0 	bl	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e04c      	b.n	800521a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005198:	6a39      	ldr	r1, [r7, #32]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f91a 	bl	80053d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d107      	bne.n	80051be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e02b      	b.n	800521a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d105      	bne.n	80051d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c8:	893b      	ldrh	r3, [r7, #8]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	611a      	str	r2, [r3, #16]
 80051d2:	e021      	b.n	8005218 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051d4:	893b      	ldrh	r3, [r7, #8]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	b29b      	uxth	r3, r3
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e4:	6a39      	ldr	r1, [r7, #32]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f8f4 	bl	80053d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d107      	bne.n	800520a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005208:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e005      	b.n	800521a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800520e:	893b      	ldrh	r3, [r7, #8]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	00010002 	.word	0x00010002

08005228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005238:	e025      	b.n	8005286 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d021      	beq.n	8005286 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fd fe3f 	bl	8002ec4 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d116      	bne.n	8005286 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e023      	b.n	80052ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d10d      	bne.n	80052ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	43da      	mvns	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bf0c      	ite	eq
 80052a2:	2301      	moveq	r3, #1
 80052a4:	2300      	movne	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	e00c      	b.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	43da      	mvns	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4013      	ands	r3, r2
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	bf0c      	ite	eq
 80052be:	2301      	moveq	r3, #1
 80052c0:	2300      	movne	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d0b6      	beq.n	800523a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052e4:	e051      	b.n	800538a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f4:	d123      	bne.n	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005304:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800530e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f043 0204 	orr.w	r2, r3, #4
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e046      	b.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d021      	beq.n	800538a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005346:	f7fd fdbd 	bl	8002ec4 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	429a      	cmp	r2, r3
 8005354:	d302      	bcc.n	800535c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d116      	bne.n	800538a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f043 0220 	orr.w	r2, r3, #32
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e020      	b.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	d10c      	bne.n	80053ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	43da      	mvns	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4013      	ands	r3, r2
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf14      	ite	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	2300      	moveq	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	e00b      	b.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	43da      	mvns	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4013      	ands	r3, r2
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d18d      	bne.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053e0:	e02d      	b.n	800543e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f8ce 	bl	8005584 <I2C_IsAcknowledgeFailed>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e02d      	b.n	800544e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d021      	beq.n	800543e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fa:	f7fd fd63 	bl	8002ec4 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	429a      	cmp	r2, r3
 8005408:	d302      	bcc.n	8005410 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d116      	bne.n	800543e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e007      	b.n	800544e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b80      	cmp	r3, #128	; 0x80
 800544a:	d1ca      	bne.n	80053e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005462:	e02d      	b.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f88d 	bl	8005584 <I2C_IsAcknowledgeFailed>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e02d      	b.n	80054d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d021      	beq.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547c:	f7fd fd22 	bl	8002ec4 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d116      	bne.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e007      	b.n	80054d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d1ca      	bne.n	8005464 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054e4:	e042      	b.n	800556c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d119      	bne.n	8005528 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0210 	mvn.w	r2, #16
 80054fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e029      	b.n	800557c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005528:	f7fd fccc 	bl	8002ec4 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	429a      	cmp	r2, r3
 8005536:	d302      	bcc.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d116      	bne.n	800556c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	f043 0220 	orr.w	r2, r3, #32
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e007      	b.n	800557c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d1b5      	bne.n	80054e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559a:	d11b      	bne.n	80055d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	f043 0204 	orr.w	r2, r3, #4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e267      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d075      	beq.n	80056ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005602:	4b88      	ldr	r3, [pc, #544]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	2b04      	cmp	r3, #4
 800560c:	d00c      	beq.n	8005628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800560e:	4b85      	ldr	r3, [pc, #532]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005616:	2b08      	cmp	r3, #8
 8005618:	d112      	bne.n	8005640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800561a:	4b82      	ldr	r3, [pc, #520]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005626:	d10b      	bne.n	8005640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005628:	4b7e      	ldr	r3, [pc, #504]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d05b      	beq.n	80056ec <HAL_RCC_OscConfig+0x108>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d157      	bne.n	80056ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e242      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005648:	d106      	bne.n	8005658 <HAL_RCC_OscConfig+0x74>
 800564a:	4b76      	ldr	r3, [pc, #472]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a75      	ldr	r2, [pc, #468]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e01d      	b.n	8005694 <HAL_RCC_OscConfig+0xb0>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005660:	d10c      	bne.n	800567c <HAL_RCC_OscConfig+0x98>
 8005662:	4b70      	ldr	r3, [pc, #448]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a6f      	ldr	r2, [pc, #444]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4b6d      	ldr	r3, [pc, #436]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6c      	ldr	r2, [pc, #432]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e00b      	b.n	8005694 <HAL_RCC_OscConfig+0xb0>
 800567c:	4b69      	ldr	r3, [pc, #420]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a68      	ldr	r2, [pc, #416]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	4b66      	ldr	r3, [pc, #408]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a65      	ldr	r2, [pc, #404]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 800568e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d013      	beq.n	80056c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569c:	f7fd fc12 	bl	8002ec4 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056a4:	f7fd fc0e 	bl	8002ec4 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	; 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e207      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b6:	4b5b      	ldr	r3, [pc, #364]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0xc0>
 80056c2:	e014      	b.n	80056ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c4:	f7fd fbfe 	bl	8002ec4 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056cc:	f7fd fbfa 	bl	8002ec4 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b64      	cmp	r3, #100	; 0x64
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e1f3      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056de:	4b51      	ldr	r3, [pc, #324]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0xe8>
 80056ea:	e000      	b.n	80056ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d063      	beq.n	80057c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056fa:	4b4a      	ldr	r3, [pc, #296]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005706:	4b47      	ldr	r3, [pc, #284]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800570e:	2b08      	cmp	r3, #8
 8005710:	d11c      	bne.n	800574c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005712:	4b44      	ldr	r3, [pc, #272]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d116      	bne.n	800574c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571e:	4b41      	ldr	r3, [pc, #260]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_RCC_OscConfig+0x152>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d001      	beq.n	8005736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e1c7      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005736:	4b3b      	ldr	r3, [pc, #236]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4937      	ldr	r1, [pc, #220]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005746:	4313      	orrs	r3, r2
 8005748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574a:	e03a      	b.n	80057c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d020      	beq.n	8005796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005754:	4b34      	ldr	r3, [pc, #208]	; (8005828 <HAL_RCC_OscConfig+0x244>)
 8005756:	2201      	movs	r2, #1
 8005758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575a:	f7fd fbb3 	bl	8002ec4 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005762:	f7fd fbaf 	bl	8002ec4 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e1a8      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005774:	4b2b      	ldr	r3, [pc, #172]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005780:	4b28      	ldr	r3, [pc, #160]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	4925      	ldr	r1, [pc, #148]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 8005790:	4313      	orrs	r3, r2
 8005792:	600b      	str	r3, [r1, #0]
 8005794:	e015      	b.n	80057c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <HAL_RCC_OscConfig+0x244>)
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fd fb92 	bl	8002ec4 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057a4:	f7fd fb8e 	bl	8002ec4 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e187      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d036      	beq.n	800583c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d6:	4b15      	ldr	r3, [pc, #84]	; (800582c <HAL_RCC_OscConfig+0x248>)
 80057d8:	2201      	movs	r2, #1
 80057da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057dc:	f7fd fb72 	bl	8002ec4 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e4:	f7fd fb6e 	bl	8002ec4 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e167      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057f6:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <HAL_RCC_OscConfig+0x240>)
 80057f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCC_OscConfig+0x200>
 8005802:	e01b      	b.n	800583c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005804:	4b09      	ldr	r3, [pc, #36]	; (800582c <HAL_RCC_OscConfig+0x248>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800580a:	f7fd fb5b 	bl	8002ec4 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005810:	e00e      	b.n	8005830 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005812:	f7fd fb57 	bl	8002ec4 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d907      	bls.n	8005830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e150      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
 8005824:	40023800 	.word	0x40023800
 8005828:	42470000 	.word	0x42470000
 800582c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005830:	4b88      	ldr	r3, [pc, #544]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 8005832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ea      	bne.n	8005812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 8097 	beq.w	8005978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800584a:	2300      	movs	r3, #0
 800584c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800584e:	4b81      	ldr	r3, [pc, #516]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10f      	bne.n	800587a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	4b7d      	ldr	r3, [pc, #500]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	4a7c      	ldr	r2, [pc, #496]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005868:	6413      	str	r3, [r2, #64]	; 0x40
 800586a:	4b7a      	ldr	r3, [pc, #488]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005872:	60bb      	str	r3, [r7, #8]
 8005874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005876:	2301      	movs	r3, #1
 8005878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587a:	4b77      	ldr	r3, [pc, #476]	; (8005a58 <HAL_RCC_OscConfig+0x474>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005882:	2b00      	cmp	r3, #0
 8005884:	d118      	bne.n	80058b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005886:	4b74      	ldr	r3, [pc, #464]	; (8005a58 <HAL_RCC_OscConfig+0x474>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a73      	ldr	r2, [pc, #460]	; (8005a58 <HAL_RCC_OscConfig+0x474>)
 800588c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005892:	f7fd fb17 	bl	8002ec4 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800589a:	f7fd fb13 	bl	8002ec4 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e10c      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ac:	4b6a      	ldr	r3, [pc, #424]	; (8005a58 <HAL_RCC_OscConfig+0x474>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d106      	bne.n	80058ce <HAL_RCC_OscConfig+0x2ea>
 80058c0:	4b64      	ldr	r3, [pc, #400]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	4a63      	ldr	r2, [pc, #396]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	6713      	str	r3, [r2, #112]	; 0x70
 80058cc:	e01c      	b.n	8005908 <HAL_RCC_OscConfig+0x324>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2b05      	cmp	r3, #5
 80058d4:	d10c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x30c>
 80058d6:	4b5f      	ldr	r3, [pc, #380]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	4a5e      	ldr	r2, [pc, #376]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80058dc:	f043 0304 	orr.w	r3, r3, #4
 80058e0:	6713      	str	r3, [r2, #112]	; 0x70
 80058e2:	4b5c      	ldr	r3, [pc, #368]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	4a5b      	ldr	r2, [pc, #364]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80058e8:	f043 0301 	orr.w	r3, r3, #1
 80058ec:	6713      	str	r3, [r2, #112]	; 0x70
 80058ee:	e00b      	b.n	8005908 <HAL_RCC_OscConfig+0x324>
 80058f0:	4b58      	ldr	r3, [pc, #352]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f4:	4a57      	ldr	r2, [pc, #348]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	6713      	str	r3, [r2, #112]	; 0x70
 80058fc:	4b55      	ldr	r3, [pc, #340]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	4a54      	ldr	r2, [pc, #336]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 8005902:	f023 0304 	bic.w	r3, r3, #4
 8005906:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d015      	beq.n	800593c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005910:	f7fd fad8 	bl	8002ec4 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005916:	e00a      	b.n	800592e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005918:	f7fd fad4 	bl	8002ec4 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	; 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e0cb      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592e:	4b49      	ldr	r3, [pc, #292]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0ee      	beq.n	8005918 <HAL_RCC_OscConfig+0x334>
 800593a:	e014      	b.n	8005966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800593c:	f7fd fac2 	bl	8002ec4 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005942:	e00a      	b.n	800595a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005944:	f7fd fabe 	bl	8002ec4 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e0b5      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800595a:	4b3e      	ldr	r3, [pc, #248]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1ee      	bne.n	8005944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005966:	7dfb      	ldrb	r3, [r7, #23]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d105      	bne.n	8005978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800596c:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	4a38      	ldr	r2, [pc, #224]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 8005972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005976:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80a1 	beq.w	8005ac4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005982:	4b34      	ldr	r3, [pc, #208]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	2b08      	cmp	r3, #8
 800598c:	d05c      	beq.n	8005a48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d141      	bne.n	8005a1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005996:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <HAL_RCC_OscConfig+0x478>)
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599c:	f7fd fa92 	bl	8002ec4 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a4:	f7fd fa8e 	bl	8002ec4 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e087      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059b6:	4b27      	ldr	r3, [pc, #156]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f0      	bne.n	80059a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69da      	ldr	r2, [r3, #28]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	3b01      	subs	r3, #1
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	061b      	lsls	r3, r3, #24
 80059e6:	491b      	ldr	r1, [pc, #108]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ec:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <HAL_RCC_OscConfig+0x478>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f2:	f7fd fa67 	bl	8002ec4 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fa:	f7fd fa63 	bl	8002ec4 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e05c      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0c:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x416>
 8005a18:	e054      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <HAL_RCC_OscConfig+0x478>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a20:	f7fd fa50 	bl	8002ec4 <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a28:	f7fd fa4c 	bl	8002ec4 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e045      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_RCC_OscConfig+0x470>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f0      	bne.n	8005a28 <HAL_RCC_OscConfig+0x444>
 8005a46:	e03d      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e038      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
 8005a54:	40023800 	.word	0x40023800
 8005a58:	40007000 	.word	0x40007000
 8005a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a60:	4b1b      	ldr	r3, [pc, #108]	; (8005ad0 <HAL_RCC_OscConfig+0x4ec>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d028      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d121      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d11a      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a90:	4013      	ands	r3, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d111      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	085b      	lsrs	r3, r3, #1
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d107      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40023800 	.word	0x40023800

08005ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e0cc      	b.n	8005c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae8:	4b68      	ldr	r3, [pc, #416]	; (8005c8c <HAL_RCC_ClockConfig+0x1b8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d90c      	bls.n	8005b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af6:	4b65      	ldr	r3, [pc, #404]	; (8005c8c <HAL_RCC_ClockConfig+0x1b8>)
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afe:	4b63      	ldr	r3, [pc, #396]	; (8005c8c <HAL_RCC_ClockConfig+0x1b8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0b8      	b.n	8005c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d020      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b28:	4b59      	ldr	r3, [pc, #356]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	4a58      	ldr	r2, [pc, #352]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b40:	4b53      	ldr	r3, [pc, #332]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	4a52      	ldr	r2, [pc, #328]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b4c:	4b50      	ldr	r3, [pc, #320]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	494d      	ldr	r1, [pc, #308]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d044      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d107      	bne.n	8005b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b72:	4b47      	ldr	r3, [pc, #284]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d119      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e07f      	b.n	8005c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d003      	beq.n	8005b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d107      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b92:	4b3f      	ldr	r3, [pc, #252]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d109      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e06f      	b.n	8005c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba2:	4b3b      	ldr	r3, [pc, #236]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e067      	b.n	8005c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bb2:	4b37      	ldr	r3, [pc, #220]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f023 0203 	bic.w	r2, r3, #3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	4934      	ldr	r1, [pc, #208]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bc4:	f7fd f97e 	bl	8002ec4 <HAL_GetTick>
 8005bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bca:	e00a      	b.n	8005be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bcc:	f7fd f97a 	bl	8002ec4 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e04f      	b.n	8005c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be2:	4b2b      	ldr	r3, [pc, #172]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 020c 	and.w	r2, r3, #12
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d1eb      	bne.n	8005bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf4:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <HAL_RCC_ClockConfig+0x1b8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d20c      	bcs.n	8005c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c02:	4b22      	ldr	r3, [pc, #136]	; (8005c8c <HAL_RCC_ClockConfig+0x1b8>)
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0a:	4b20      	ldr	r3, [pc, #128]	; (8005c8c <HAL_RCC_ClockConfig+0x1b8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d001      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e032      	b.n	8005c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c28:	4b19      	ldr	r3, [pc, #100]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	4916      	ldr	r1, [pc, #88]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d009      	beq.n	8005c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c46:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	490e      	ldr	r1, [pc, #56]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c5a:	f000 f821 	bl	8005ca0 <HAL_RCC_GetSysClockFreq>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	091b      	lsrs	r3, r3, #4
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	490a      	ldr	r1, [pc, #40]	; (8005c94 <HAL_RCC_ClockConfig+0x1c0>)
 8005c6c:	5ccb      	ldrb	r3, [r1, r3]
 8005c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c72:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c76:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fd f8de 	bl	8002e3c <HAL_InitTick>

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40023c00 	.word	0x40023c00
 8005c90:	40023800 	.word	0x40023800
 8005c94:	08011cc4 	.word	0x08011cc4
 8005c98:	20000004 	.word	0x20000004
 8005c9c:	20000008 	.word	0x20000008

08005ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca4:	b094      	sub	sp, #80	; 0x50
 8005ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	647b      	str	r3, [r7, #68]	; 0x44
 8005cac:	2300      	movs	r3, #0
 8005cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cb8:	4b79      	ldr	r3, [pc, #484]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 030c 	and.w	r3, r3, #12
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d00d      	beq.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	f200 80e1 	bhi.w	8005e8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d003      	beq.n	8005cda <HAL_RCC_GetSysClockFreq+0x3a>
 8005cd2:	e0db      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cd4:	4b73      	ldr	r3, [pc, #460]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005cd8:	e0db      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cda:	4b73      	ldr	r3, [pc, #460]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cde:	e0d8      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ce0:	4b6f      	ldr	r3, [pc, #444]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cea:	4b6d      	ldr	r3, [pc, #436]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d063      	beq.n	8005dbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cf6:	4b6a      	ldr	r3, [pc, #424]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	099b      	lsrs	r3, r3, #6
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d08:	633b      	str	r3, [r7, #48]	; 0x30
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d12:	4622      	mov	r2, r4
 8005d14:	462b      	mov	r3, r5
 8005d16:	f04f 0000 	mov.w	r0, #0
 8005d1a:	f04f 0100 	mov.w	r1, #0
 8005d1e:	0159      	lsls	r1, r3, #5
 8005d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d24:	0150      	lsls	r0, r2, #5
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	1a51      	subs	r1, r2, r1
 8005d2e:	6139      	str	r1, [r7, #16]
 8005d30:	4629      	mov	r1, r5
 8005d32:	eb63 0301 	sbc.w	r3, r3, r1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d44:	4659      	mov	r1, fp
 8005d46:	018b      	lsls	r3, r1, #6
 8005d48:	4651      	mov	r1, sl
 8005d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d4e:	4651      	mov	r1, sl
 8005d50:	018a      	lsls	r2, r1, #6
 8005d52:	4651      	mov	r1, sl
 8005d54:	ebb2 0801 	subs.w	r8, r2, r1
 8005d58:	4659      	mov	r1, fp
 8005d5a:	eb63 0901 	sbc.w	r9, r3, r1
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d72:	4690      	mov	r8, r2
 8005d74:	4699      	mov	r9, r3
 8005d76:	4623      	mov	r3, r4
 8005d78:	eb18 0303 	adds.w	r3, r8, r3
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	462b      	mov	r3, r5
 8005d80:	eb49 0303 	adc.w	r3, r9, r3
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d92:	4629      	mov	r1, r5
 8005d94:	024b      	lsls	r3, r1, #9
 8005d96:	4621      	mov	r1, r4
 8005d98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	024a      	lsls	r2, r1, #9
 8005da0:	4610      	mov	r0, r2
 8005da2:	4619      	mov	r1, r3
 8005da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da6:	2200      	movs	r2, #0
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005db0:	f7fa ff72 	bl	8000c98 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4613      	mov	r3, r2
 8005dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dbc:	e058      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dbe:	4b38      	ldr	r3, [pc, #224]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	099b      	lsrs	r3, r3, #6
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	4611      	mov	r1, r2
 8005dca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dce:	623b      	str	r3, [r7, #32]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005dd8:	4642      	mov	r2, r8
 8005dda:	464b      	mov	r3, r9
 8005ddc:	f04f 0000 	mov.w	r0, #0
 8005de0:	f04f 0100 	mov.w	r1, #0
 8005de4:	0159      	lsls	r1, r3, #5
 8005de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dea:	0150      	lsls	r0, r2, #5
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4641      	mov	r1, r8
 8005df2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005df6:	4649      	mov	r1, r9
 8005df8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e10:	ebb2 040a 	subs.w	r4, r2, sl
 8005e14:	eb63 050b 	sbc.w	r5, r3, fp
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	00eb      	lsls	r3, r5, #3
 8005e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e26:	00e2      	lsls	r2, r4, #3
 8005e28:	4614      	mov	r4, r2
 8005e2a:	461d      	mov	r5, r3
 8005e2c:	4643      	mov	r3, r8
 8005e2e:	18e3      	adds	r3, r4, r3
 8005e30:	603b      	str	r3, [r7, #0]
 8005e32:	464b      	mov	r3, r9
 8005e34:	eb45 0303 	adc.w	r3, r5, r3
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e46:	4629      	mov	r1, r5
 8005e48:	028b      	lsls	r3, r1, #10
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e50:	4621      	mov	r1, r4
 8005e52:	028a      	lsls	r2, r1, #10
 8005e54:	4610      	mov	r0, r2
 8005e56:	4619      	mov	r1, r3
 8005e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	61fa      	str	r2, [r7, #28]
 8005e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e64:	f7fa ff18 	bl	8000c98 <__aeabi_uldivmod>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	0c1b      	lsrs	r3, r3, #16
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e8a:	e002      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3750      	adds	r7, #80	; 0x50
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	00f42400 	.word	0x00f42400
 8005ea8:	007a1200 	.word	0x007a1200

08005eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eb0:	4b03      	ldr	r3, [pc, #12]	; (8005ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20000004 	.word	0x20000004

08005ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ec8:	f7ff fff0 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	0a9b      	lsrs	r3, r3, #10
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	4903      	ldr	r1, [pc, #12]	; (8005ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eda:	5ccb      	ldrb	r3, [r1, r3]
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	08011cd4 	.word	0x08011cd4

08005eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ef0:	f7ff ffdc 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	0b5b      	lsrs	r3, r3, #13
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4903      	ldr	r1, [pc, #12]	; (8005f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f02:	5ccb      	ldrb	r3, [r1, r3]
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	08011cd4 	.word	0x08011cd4

08005f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e041      	b.n	8005faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fc fce2 	bl	8002904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f000 fac0 	bl	80064d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e041      	b.n	8006048 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d106      	bne.n	8005fde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f839 	bl	8006050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f000 fa71 	bl	80064d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d109      	bne.n	8006088 <HAL_TIM_PWM_Start+0x24>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	bf14      	ite	ne
 8006080:	2301      	movne	r3, #1
 8006082:	2300      	moveq	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	e022      	b.n	80060ce <HAL_TIM_PWM_Start+0x6a>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b04      	cmp	r3, #4
 800608c:	d109      	bne.n	80060a2 <HAL_TIM_PWM_Start+0x3e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b01      	cmp	r3, #1
 8006098:	bf14      	ite	ne
 800609a:	2301      	movne	r3, #1
 800609c:	2300      	moveq	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	e015      	b.n	80060ce <HAL_TIM_PWM_Start+0x6a>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d109      	bne.n	80060bc <HAL_TIM_PWM_Start+0x58>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	e008      	b.n	80060ce <HAL_TIM_PWM_Start+0x6a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	bf14      	ite	ne
 80060c8:	2301      	movne	r3, #1
 80060ca:	2300      	moveq	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e068      	b.n	80061a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d104      	bne.n	80060e6 <HAL_TIM_PWM_Start+0x82>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e4:	e013      	b.n	800610e <HAL_TIM_PWM_Start+0xaa>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d104      	bne.n	80060f6 <HAL_TIM_PWM_Start+0x92>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060f4:	e00b      	b.n	800610e <HAL_TIM_PWM_Start+0xaa>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d104      	bne.n	8006106 <HAL_TIM_PWM_Start+0xa2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006104:	e003      	b.n	800610e <HAL_TIM_PWM_Start+0xaa>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2201      	movs	r2, #1
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fc84 	bl	8006a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a23      	ldr	r2, [pc, #140]	; (80061b0 <HAL_TIM_PWM_Start+0x14c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d107      	bne.n	8006136 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1d      	ldr	r2, [pc, #116]	; (80061b0 <HAL_TIM_PWM_Start+0x14c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d018      	beq.n	8006172 <HAL_TIM_PWM_Start+0x10e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d013      	beq.n	8006172 <HAL_TIM_PWM_Start+0x10e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a19      	ldr	r2, [pc, #100]	; (80061b4 <HAL_TIM_PWM_Start+0x150>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00e      	beq.n	8006172 <HAL_TIM_PWM_Start+0x10e>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <HAL_TIM_PWM_Start+0x154>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_TIM_PWM_Start+0x10e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a16      	ldr	r2, [pc, #88]	; (80061bc <HAL_TIM_PWM_Start+0x158>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d004      	beq.n	8006172 <HAL_TIM_PWM_Start+0x10e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <HAL_TIM_PWM_Start+0x15c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d111      	bne.n	8006196 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b06      	cmp	r3, #6
 8006182:	d010      	beq.n	80061a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0201 	orr.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006194:	e007      	b.n	80061a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0201 	orr.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40000400 	.word	0x40000400
 80061b8:	40000800 	.word	0x40000800
 80061bc:	40000c00 	.word	0x40000c00
 80061c0:	40014000 	.word	0x40014000

080061c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061de:	2302      	movs	r3, #2
 80061e0:	e0ae      	b.n	8006340 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	f200 809f 	bhi.w	8006330 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061f2:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	0800622d 	.word	0x0800622d
 80061fc:	08006331 	.word	0x08006331
 8006200:	08006331 	.word	0x08006331
 8006204:	08006331 	.word	0x08006331
 8006208:	0800626d 	.word	0x0800626d
 800620c:	08006331 	.word	0x08006331
 8006210:	08006331 	.word	0x08006331
 8006214:	08006331 	.word	0x08006331
 8006218:	080062af 	.word	0x080062af
 800621c:	08006331 	.word	0x08006331
 8006220:	08006331 	.word	0x08006331
 8006224:	08006331 	.word	0x08006331
 8006228:	080062ef 	.word	0x080062ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 f9d0 	bl	80065d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0208 	orr.w	r2, r2, #8
 8006246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0204 	bic.w	r2, r2, #4
 8006256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6999      	ldr	r1, [r3, #24]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	619a      	str	r2, [r3, #24]
      break;
 800626a:	e064      	b.n	8006336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fa16 	bl	80066a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6999      	ldr	r1, [r3, #24]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	021a      	lsls	r2, r3, #8
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	619a      	str	r2, [r3, #24]
      break;
 80062ac:	e043      	b.n	8006336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fa61 	bl	800677c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0208 	orr.w	r2, r2, #8
 80062c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0204 	bic.w	r2, r2, #4
 80062d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69d9      	ldr	r1, [r3, #28]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	61da      	str	r2, [r3, #28]
      break;
 80062ec:	e023      	b.n	8006336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 faab 	bl	8006850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69d9      	ldr	r1, [r3, #28]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	021a      	lsls	r2, r3, #8
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	61da      	str	r2, [r3, #28]
      break;
 800632e:	e002      	b.n	8006336 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	75fb      	strb	r3, [r7, #23]
      break;
 8006334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800633e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_TIM_ConfigClockSource+0x1c>
 8006360:	2302      	movs	r3, #2
 8006362:	e0b4      	b.n	80064ce <HAL_TIM_ConfigClockSource+0x186>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800638a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639c:	d03e      	beq.n	800641c <HAL_TIM_ConfigClockSource+0xd4>
 800639e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a2:	f200 8087 	bhi.w	80064b4 <HAL_TIM_ConfigClockSource+0x16c>
 80063a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063aa:	f000 8086 	beq.w	80064ba <HAL_TIM_ConfigClockSource+0x172>
 80063ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b2:	d87f      	bhi.n	80064b4 <HAL_TIM_ConfigClockSource+0x16c>
 80063b4:	2b70      	cmp	r3, #112	; 0x70
 80063b6:	d01a      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0xa6>
 80063b8:	2b70      	cmp	r3, #112	; 0x70
 80063ba:	d87b      	bhi.n	80064b4 <HAL_TIM_ConfigClockSource+0x16c>
 80063bc:	2b60      	cmp	r3, #96	; 0x60
 80063be:	d050      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0x11a>
 80063c0:	2b60      	cmp	r3, #96	; 0x60
 80063c2:	d877      	bhi.n	80064b4 <HAL_TIM_ConfigClockSource+0x16c>
 80063c4:	2b50      	cmp	r3, #80	; 0x50
 80063c6:	d03c      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0xfa>
 80063c8:	2b50      	cmp	r3, #80	; 0x50
 80063ca:	d873      	bhi.n	80064b4 <HAL_TIM_ConfigClockSource+0x16c>
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d058      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0x13a>
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d86f      	bhi.n	80064b4 <HAL_TIM_ConfigClockSource+0x16c>
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	d064      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0x15a>
 80063d8:	2b30      	cmp	r3, #48	; 0x30
 80063da:	d86b      	bhi.n	80064b4 <HAL_TIM_ConfigClockSource+0x16c>
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d060      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0x15a>
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d867      	bhi.n	80064b4 <HAL_TIM_ConfigClockSource+0x16c>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d05c      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0x15a>
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d05a      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0x15a>
 80063ec:	e062      	b.n	80064b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6899      	ldr	r1, [r3, #8]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f000 faf1 	bl	80069e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	609a      	str	r2, [r3, #8]
      break;
 800641a:	e04f      	b.n	80064bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	6899      	ldr	r1, [r3, #8]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f000 fada 	bl	80069e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800643e:	609a      	str	r2, [r3, #8]
      break;
 8006440:	e03c      	b.n	80064bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	6859      	ldr	r1, [r3, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	461a      	mov	r2, r3
 8006450:	f000 fa4e 	bl	80068f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2150      	movs	r1, #80	; 0x50
 800645a:	4618      	mov	r0, r3
 800645c:	f000 faa7 	bl	80069ae <TIM_ITRx_SetConfig>
      break;
 8006460:	e02c      	b.n	80064bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	6859      	ldr	r1, [r3, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	461a      	mov	r2, r3
 8006470:	f000 fa6d 	bl	800694e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2160      	movs	r1, #96	; 0x60
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fa97 	bl	80069ae <TIM_ITRx_SetConfig>
      break;
 8006480:	e01c      	b.n	80064bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	461a      	mov	r2, r3
 8006490:	f000 fa2e 	bl	80068f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2140      	movs	r1, #64	; 0x40
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fa87 	bl	80069ae <TIM_ITRx_SetConfig>
      break;
 80064a0:	e00c      	b.n	80064bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4619      	mov	r1, r3
 80064ac:	4610      	mov	r0, r2
 80064ae:	f000 fa7e 	bl	80069ae <TIM_ITRx_SetConfig>
      break;
 80064b2:	e003      	b.n	80064bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
      break;
 80064b8:	e000      	b.n	80064bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a34      	ldr	r2, [pc, #208]	; (80065bc <TIM_Base_SetConfig+0xe4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00f      	beq.n	8006510 <TIM_Base_SetConfig+0x38>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f6:	d00b      	beq.n	8006510 <TIM_Base_SetConfig+0x38>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a31      	ldr	r2, [pc, #196]	; (80065c0 <TIM_Base_SetConfig+0xe8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_Base_SetConfig+0x38>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a30      	ldr	r2, [pc, #192]	; (80065c4 <TIM_Base_SetConfig+0xec>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_Base_SetConfig+0x38>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a2f      	ldr	r2, [pc, #188]	; (80065c8 <TIM_Base_SetConfig+0xf0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d108      	bne.n	8006522 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a25      	ldr	r2, [pc, #148]	; (80065bc <TIM_Base_SetConfig+0xe4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01b      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006530:	d017      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a22      	ldr	r2, [pc, #136]	; (80065c0 <TIM_Base_SetConfig+0xe8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a21      	ldr	r2, [pc, #132]	; (80065c4 <TIM_Base_SetConfig+0xec>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00f      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a20      	ldr	r2, [pc, #128]	; (80065c8 <TIM_Base_SetConfig+0xf0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00b      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <TIM_Base_SetConfig+0xf4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d007      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a1e      	ldr	r2, [pc, #120]	; (80065d0 <TIM_Base_SetConfig+0xf8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d003      	beq.n	8006562 <TIM_Base_SetConfig+0x8a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <TIM_Base_SetConfig+0xfc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d108      	bne.n	8006574 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a08      	ldr	r2, [pc, #32]	; (80065bc <TIM_Base_SetConfig+0xe4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d103      	bne.n	80065a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	615a      	str	r2, [r3, #20]
}
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	40010000 	.word	0x40010000
 80065c0:	40000400 	.word	0x40000400
 80065c4:	40000800 	.word	0x40000800
 80065c8:	40000c00 	.word	0x40000c00
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40014400 	.word	0x40014400
 80065d4:	40014800 	.word	0x40014800

080065d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	f023 0201 	bic.w	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0303 	bic.w	r3, r3, #3
 800660e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f023 0302 	bic.w	r3, r3, #2
 8006620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a1c      	ldr	r2, [pc, #112]	; (80066a0 <TIM_OC1_SetConfig+0xc8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d10c      	bne.n	800664e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0308 	bic.w	r3, r3, #8
 800663a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 0304 	bic.w	r3, r3, #4
 800664c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a13      	ldr	r2, [pc, #76]	; (80066a0 <TIM_OC1_SetConfig+0xc8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d111      	bne.n	800667a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800665c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	621a      	str	r2, [r3, #32]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40010000 	.word	0x40010000

080066a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f023 0210 	bic.w	r2, r3, #16
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f023 0320 	bic.w	r3, r3, #32
 80066ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a1e      	ldr	r2, [pc, #120]	; (8006778 <TIM_OC2_SetConfig+0xd4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d10d      	bne.n	8006720 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800670a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a15      	ldr	r2, [pc, #84]	; (8006778 <TIM_OC2_SetConfig+0xd4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d113      	bne.n	8006750 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800672e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40010000 	.word	0x40010000

0800677c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1d      	ldr	r2, [pc, #116]	; (800684c <TIM_OC3_SetConfig+0xd0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d10d      	bne.n	80067f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a14      	ldr	r2, [pc, #80]	; (800684c <TIM_OC3_SetConfig+0xd0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d113      	bne.n	8006826 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	621a      	str	r2, [r3, #32]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40010000 	.word	0x40010000

08006850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800689a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	031b      	lsls	r3, r3, #12
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a10      	ldr	r2, [pc, #64]	; (80068ec <TIM_OC4_SetConfig+0x9c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d109      	bne.n	80068c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	019b      	lsls	r3, r3, #6
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40010000 	.word	0x40010000

080068f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f023 0201 	bic.w	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800691a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f023 030a 	bic.w	r3, r3, #10
 800692c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	621a      	str	r2, [r3, #32]
}
 8006942:	bf00      	nop
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800694e:	b480      	push	{r7}
 8006950:	b087      	sub	sp, #28
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f023 0210 	bic.w	r2, r3, #16
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	031b      	lsls	r3, r3, #12
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800698a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f043 0307 	orr.w	r3, r3, #7
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	609a      	str	r2, [r3, #8]
}
 80069d8:	bf00      	nop
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	021a      	lsls	r2, r3, #8
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	609a      	str	r2, [r3, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	2201      	movs	r2, #1
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1a      	ldr	r2, [r3, #32]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	43db      	mvns	r3, r3
 8006a46:	401a      	ands	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a1a      	ldr	r2, [r3, #32]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	621a      	str	r2, [r3, #32]
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
	...

08006a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e050      	b.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a1c      	ldr	r2, [pc, #112]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d018      	beq.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad4:	d013      	beq.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a18      	ldr	r2, [pc, #96]	; (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00e      	beq.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d009      	beq.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a15      	ldr	r2, [pc, #84]	; (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d10c      	bne.n	8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40010000 	.word	0x40010000
 8006b3c:	40000400 	.word	0x40000400
 8006b40:	40000800 	.word	0x40000800
 8006b44:	40000c00 	.word	0x40000c00
 8006b48:	40014000 	.word	0x40014000

08006b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e03f      	b.n	8006bde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fb ff7a 	bl	8002a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2224      	movs	r2, #36	; 0x24
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f829 	bl	8006be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	695a      	ldr	r2, [r3, #20]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68da      	ldr	r2, [r3, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bec:	b0c0      	sub	sp, #256	; 0x100
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c04:	68d9      	ldr	r1, [r3, #12]
 8006c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	ea40 0301 	orr.w	r3, r0, r1
 8006c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c40:	f021 010c 	bic.w	r1, r1, #12
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c62:	6999      	ldr	r1, [r3, #24]
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	ea40 0301 	orr.w	r3, r0, r1
 8006c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	4b8f      	ldr	r3, [pc, #572]	; (8006eb4 <UART_SetConfig+0x2cc>)
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d005      	beq.n	8006c88 <UART_SetConfig+0xa0>
 8006c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b8d      	ldr	r3, [pc, #564]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d104      	bne.n	8006c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c88:	f7ff f930 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 8006c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c90:	e003      	b.n	8006c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c92:	f7ff f917 	bl	8005ec4 <HAL_RCC_GetPCLK1Freq>
 8006c96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca4:	f040 810c 	bne.w	8006ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cba:	4622      	mov	r2, r4
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	1891      	adds	r1, r2, r2
 8006cc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cc2:	415b      	adcs	r3, r3
 8006cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cca:	4621      	mov	r1, r4
 8006ccc:	eb12 0801 	adds.w	r8, r2, r1
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	eb43 0901 	adc.w	r9, r3, r1
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cea:	4690      	mov	r8, r2
 8006cec:	4699      	mov	r9, r3
 8006cee:	4623      	mov	r3, r4
 8006cf0:	eb18 0303 	adds.w	r3, r8, r3
 8006cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	eb49 0303 	adc.w	r3, r9, r3
 8006cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d16:	460b      	mov	r3, r1
 8006d18:	18db      	adds	r3, r3, r3
 8006d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	eb42 0303 	adc.w	r3, r2, r3
 8006d22:	657b      	str	r3, [r7, #84]	; 0x54
 8006d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d2c:	f7f9 ffb4 	bl	8000c98 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4b61      	ldr	r3, [pc, #388]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006d36:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	011c      	lsls	r4, r3, #4
 8006d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d50:	4642      	mov	r2, r8
 8006d52:	464b      	mov	r3, r9
 8006d54:	1891      	adds	r1, r2, r2
 8006d56:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d58:	415b      	adcs	r3, r3
 8006d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d60:	4641      	mov	r1, r8
 8006d62:	eb12 0a01 	adds.w	sl, r2, r1
 8006d66:	4649      	mov	r1, r9
 8006d68:	eb43 0b01 	adc.w	fp, r3, r1
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d80:	4692      	mov	sl, r2
 8006d82:	469b      	mov	fp, r3
 8006d84:	4643      	mov	r3, r8
 8006d86:	eb1a 0303 	adds.w	r3, sl, r3
 8006d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d8e:	464b      	mov	r3, r9
 8006d90:	eb4b 0303 	adc.w	r3, fp, r3
 8006d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006da4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dac:	460b      	mov	r3, r1
 8006dae:	18db      	adds	r3, r3, r3
 8006db0:	643b      	str	r3, [r7, #64]	; 0x40
 8006db2:	4613      	mov	r3, r2
 8006db4:	eb42 0303 	adc.w	r3, r2, r3
 8006db8:	647b      	str	r3, [r7, #68]	; 0x44
 8006dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dc2:	f7f9 ff69 	bl	8000c98 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	4b3b      	ldr	r3, [pc, #236]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006dce:	fba3 2301 	umull	r2, r3, r3, r1
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	2264      	movs	r2, #100	; 0x64
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	1acb      	subs	r3, r1, r3
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006de2:	4b36      	ldr	r3, [pc, #216]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006de4:	fba3 2302 	umull	r2, r3, r3, r2
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006df0:	441c      	add	r4, r3
 8006df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	1891      	adds	r1, r2, r2
 8006e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e0c:	415b      	adcs	r3, r3
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e14:	4641      	mov	r1, r8
 8006e16:	1851      	adds	r1, r2, r1
 8006e18:	6339      	str	r1, [r7, #48]	; 0x30
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	414b      	adcs	r3, r1
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	00cb      	lsls	r3, r1, #3
 8006e30:	4651      	mov	r1, sl
 8006e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e36:	4651      	mov	r1, sl
 8006e38:	00ca      	lsls	r2, r1, #3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4642      	mov	r2, r8
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e48:	464b      	mov	r3, r9
 8006e4a:	460a      	mov	r2, r1
 8006e4c:	eb42 0303 	adc.w	r3, r2, r3
 8006e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e68:	460b      	mov	r3, r1
 8006e6a:	18db      	adds	r3, r3, r3
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6e:	4613      	mov	r3, r2
 8006e70:	eb42 0303 	adc.w	r3, r2, r3
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e7e:	f7f9 ff0b 	bl	8000c98 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006e88:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	2164      	movs	r1, #100	; 0x64
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	3332      	adds	r3, #50	; 0x32
 8006e9a:	4a08      	ldr	r2, [pc, #32]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	f003 0207 	and.w	r2, r3, #7
 8006ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4422      	add	r2, r4
 8006eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eb0:	e105      	b.n	80070be <UART_SetConfig+0x4d6>
 8006eb2:	bf00      	nop
 8006eb4:	40011000 	.word	0x40011000
 8006eb8:	40011400 	.word	0x40011400
 8006ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006eca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	1891      	adds	r1, r2, r2
 8006ed8:	6239      	str	r1, [r7, #32]
 8006eda:	415b      	adcs	r3, r3
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ee2:	4641      	mov	r1, r8
 8006ee4:	1854      	adds	r4, r2, r1
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	eb43 0501 	adc.w	r5, r3, r1
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	00eb      	lsls	r3, r5, #3
 8006ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006efa:	00e2      	lsls	r2, r4, #3
 8006efc:	4614      	mov	r4, r2
 8006efe:	461d      	mov	r5, r3
 8006f00:	4643      	mov	r3, r8
 8006f02:	18e3      	adds	r3, r4, r3
 8006f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f08:	464b      	mov	r3, r9
 8006f0a:	eb45 0303 	adc.w	r3, r5, r3
 8006f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f2e:	4629      	mov	r1, r5
 8006f30:	008b      	lsls	r3, r1, #2
 8006f32:	4621      	mov	r1, r4
 8006f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f38:	4621      	mov	r1, r4
 8006f3a:	008a      	lsls	r2, r1, #2
 8006f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f40:	f7f9 feaa 	bl	8000c98 <__aeabi_uldivmod>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4b60      	ldr	r3, [pc, #384]	; (80070cc <UART_SetConfig+0x4e4>)
 8006f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	011c      	lsls	r4, r3, #4
 8006f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	1891      	adds	r1, r2, r2
 8006f6a:	61b9      	str	r1, [r7, #24]
 8006f6c:	415b      	adcs	r3, r3
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f74:	4641      	mov	r1, r8
 8006f76:	1851      	adds	r1, r2, r1
 8006f78:	6139      	str	r1, [r7, #16]
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	414b      	adcs	r3, r1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f8c:	4659      	mov	r1, fp
 8006f8e:	00cb      	lsls	r3, r1, #3
 8006f90:	4651      	mov	r1, sl
 8006f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f96:	4651      	mov	r1, sl
 8006f98:	00ca      	lsls	r2, r1, #3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fa8:	464b      	mov	r3, r9
 8006faa:	460a      	mov	r2, r1
 8006fac:	eb42 0303 	adc.w	r3, r2, r3
 8006fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fcc:	4649      	mov	r1, r9
 8006fce:	008b      	lsls	r3, r1, #2
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	008a      	lsls	r2, r1, #2
 8006fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fde:	f7f9 fe5b 	bl	8000c98 <__aeabi_uldivmod>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4b39      	ldr	r3, [pc, #228]	; (80070cc <UART_SetConfig+0x4e4>)
 8006fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	2164      	movs	r1, #100	; 0x64
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	3332      	adds	r3, #50	; 0x32
 8006ffa:	4a34      	ldr	r2, [pc, #208]	; (80070cc <UART_SetConfig+0x4e4>)
 8006ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007006:	441c      	add	r4, r3
 8007008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800700c:	2200      	movs	r2, #0
 800700e:	673b      	str	r3, [r7, #112]	; 0x70
 8007010:	677a      	str	r2, [r7, #116]	; 0x74
 8007012:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007016:	4642      	mov	r2, r8
 8007018:	464b      	mov	r3, r9
 800701a:	1891      	adds	r1, r2, r2
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	415b      	adcs	r3, r3
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007026:	4641      	mov	r1, r8
 8007028:	1851      	adds	r1, r2, r1
 800702a:	6039      	str	r1, [r7, #0]
 800702c:	4649      	mov	r1, r9
 800702e:	414b      	adcs	r3, r1
 8007030:	607b      	str	r3, [r7, #4]
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	f04f 0300 	mov.w	r3, #0
 800703a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800703e:	4659      	mov	r1, fp
 8007040:	00cb      	lsls	r3, r1, #3
 8007042:	4651      	mov	r1, sl
 8007044:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007048:	4651      	mov	r1, sl
 800704a:	00ca      	lsls	r2, r1, #3
 800704c:	4610      	mov	r0, r2
 800704e:	4619      	mov	r1, r3
 8007050:	4603      	mov	r3, r0
 8007052:	4642      	mov	r2, r8
 8007054:	189b      	adds	r3, r3, r2
 8007056:	66bb      	str	r3, [r7, #104]	; 0x68
 8007058:	464b      	mov	r3, r9
 800705a:	460a      	mov	r2, r1
 800705c:	eb42 0303 	adc.w	r3, r2, r3
 8007060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	663b      	str	r3, [r7, #96]	; 0x60
 800706c:	667a      	str	r2, [r7, #100]	; 0x64
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800707a:	4649      	mov	r1, r9
 800707c:	008b      	lsls	r3, r1, #2
 800707e:	4641      	mov	r1, r8
 8007080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007084:	4641      	mov	r1, r8
 8007086:	008a      	lsls	r2, r1, #2
 8007088:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800708c:	f7f9 fe04 	bl	8000c98 <__aeabi_uldivmod>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <UART_SetConfig+0x4e4>)
 8007096:	fba3 1302 	umull	r1, r3, r3, r2
 800709a:	095b      	lsrs	r3, r3, #5
 800709c:	2164      	movs	r1, #100	; 0x64
 800709e:	fb01 f303 	mul.w	r3, r1, r3
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	3332      	adds	r3, #50	; 0x32
 80070a8:	4a08      	ldr	r2, [pc, #32]	; (80070cc <UART_SetConfig+0x4e4>)
 80070aa:	fba2 2303 	umull	r2, r3, r2, r3
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4422      	add	r2, r4
 80070bc:	609a      	str	r2, [r3, #8]
}
 80070be:	bf00      	nop
 80070c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070c4:	46bd      	mov	sp, r7
 80070c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ca:	bf00      	nop
 80070cc:	51eb851f 	.word	0x51eb851f

080070d0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fcb2 	bl	8008a4a <VL53L0X_get_offset_calibration_data_micro_meter>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80070ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80070f8:	b5b0      	push	{r4, r5, r7, lr}
 80070fa:	b096      	sub	sp, #88	; 0x58
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007100:	2300      	movs	r3, #0
 8007102:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007106:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800710a:	2b00      	cmp	r3, #0
 800710c:	d107      	bne.n	800711e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800710e:	2200      	movs	r2, #0
 8007110:	2188      	movs	r1, #136	; 0x88
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f004 feaa 	bl	800be6c <VL53L0X_WrByte>
 8007118:	4603      	mov	r3, r0
 800711a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800712c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007136:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a9e      	ldr	r2, [pc, #632]	; (80073b8 <VL53L0X_DataInit+0x2c0>)
 800713e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a9d      	ldr	r2, [pc, #628]	; (80073bc <VL53L0X_DataInit+0x2c4>)
 8007146:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007150:	f107 0310 	add.w	r3, r7, #16
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fac2 	bl	80076e0 <VL53L0X_GetDeviceParameters>
 800715c:	4603      	mov	r3, r0
 800715e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007162:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007166:	2b00      	cmp	r3, #0
 8007168:	d112      	bne.n	8007190 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800716a:	2300      	movs	r3, #0
 800716c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800716e:	2300      	movs	r3, #0
 8007170:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f103 0410 	add.w	r4, r3, #16
 8007178:	f107 0510 	add.w	r5, r7, #16
 800717c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800717e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007188:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800718c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2264      	movs	r2, #100	; 0x64
 8007194:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800719e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80071a8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80071b2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80071be:	2201      	movs	r2, #1
 80071c0:	2180      	movs	r1, #128	; 0x80
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f004 fe52 	bl	800be6c <VL53L0X_WrByte>
 80071c8:	4603      	mov	r3, r0
 80071ca:	461a      	mov	r2, r3
 80071cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071d0:	4313      	orrs	r3, r2
 80071d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80071d6:	2201      	movs	r2, #1
 80071d8:	21ff      	movs	r1, #255	; 0xff
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f004 fe46 	bl	800be6c <VL53L0X_WrByte>
 80071e0:	4603      	mov	r3, r0
 80071e2:	461a      	mov	r2, r3
 80071e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80071ee:	2200      	movs	r2, #0
 80071f0:	2100      	movs	r1, #0
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f004 fe3a 	bl	800be6c <VL53L0X_WrByte>
 80071f8:	4603      	mov	r3, r0
 80071fa:	461a      	mov	r2, r3
 80071fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007200:	4313      	orrs	r3, r2
 8007202:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8007206:	f107 030f 	add.w	r3, r7, #15
 800720a:	461a      	mov	r2, r3
 800720c:	2191      	movs	r1, #145	; 0x91
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f004 feae 	bl	800bf70 <VL53L0X_RdByte>
 8007214:	4603      	mov	r3, r0
 8007216:	461a      	mov	r2, r3
 8007218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800721c:	4313      	orrs	r3, r2
 800721e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8007222:	7bfa      	ldrb	r2, [r7, #15]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800722a:	2201      	movs	r2, #1
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f004 fe1c 	bl	800be6c <VL53L0X_WrByte>
 8007234:	4603      	mov	r3, r0
 8007236:	461a      	mov	r2, r3
 8007238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800723c:	4313      	orrs	r3, r2
 800723e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007242:	2200      	movs	r2, #0
 8007244:	21ff      	movs	r1, #255	; 0xff
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f004 fe10 	bl	800be6c <VL53L0X_WrByte>
 800724c:	4603      	mov	r3, r0
 800724e:	461a      	mov	r2, r3
 8007250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007254:	4313      	orrs	r3, r2
 8007256:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800725a:	2200      	movs	r2, #0
 800725c:	2180      	movs	r1, #128	; 0x80
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f004 fe04 	bl	800be6c <VL53L0X_WrByte>
 8007264:	4603      	mov	r3, r0
 8007266:	461a      	mov	r2, r3
 8007268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800726c:	4313      	orrs	r3, r2
 800726e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007272:	2300      	movs	r3, #0
 8007274:	653b      	str	r3, [r7, #80]	; 0x50
 8007276:	e014      	b.n	80072a2 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8007278:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800727c:	2b00      	cmp	r3, #0
 800727e:	d114      	bne.n	80072aa <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007282:	b29b      	uxth	r3, r3
 8007284:	2201      	movs	r2, #1
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fd35 	bl	8007cf8 <VL53L0X_SetLimitCheckEnable>
 800728e:	4603      	mov	r3, r0
 8007290:	461a      	mov	r2, r3
 8007292:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007296:	4313      	orrs	r3, r2
 8007298:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800729c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800729e:	3301      	adds	r3, #1
 80072a0:	653b      	str	r3, [r7, #80]	; 0x50
 80072a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a4:	2b05      	cmp	r3, #5
 80072a6:	dde7      	ble.n	8007278 <VL53L0X_DataInit+0x180>
 80072a8:	e000      	b.n	80072ac <VL53L0X_DataInit+0x1b4>
		else
			break;
 80072aa:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80072ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d107      	bne.n	80072c4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80072b4:	2200      	movs	r2, #0
 80072b6:	2102      	movs	r1, #2
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fd1d 	bl	8007cf8 <VL53L0X_SetLimitCheckEnable>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80072c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d107      	bne.n	80072dc <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80072cc:	2200      	movs	r2, #0
 80072ce:	2103      	movs	r1, #3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fd11 	bl	8007cf8 <VL53L0X_SetLimitCheckEnable>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80072dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d107      	bne.n	80072f4 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80072e4:	2200      	movs	r2, #0
 80072e6:	2104      	movs	r1, #4
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fd05 	bl	8007cf8 <VL53L0X_SetLimitCheckEnable>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80072f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d107      	bne.n	800730c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80072fc:	2200      	movs	r2, #0
 80072fe:	2105      	movs	r1, #5
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fcf9 	bl	8007cf8 <VL53L0X_SetLimitCheckEnable>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800730c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007310:	2b00      	cmp	r3, #0
 8007312:	d108      	bne.n	8007326 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007314:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8007318:	2100      	movs	r1, #0
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fd9c 	bl	8007e58 <VL53L0X_SetLimitCheckValue>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007326:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800732a:	2b00      	cmp	r3, #0
 800732c:	d108      	bne.n	8007340 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800732e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007332:	2101      	movs	r1, #1
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fd8f 	bl	8007e58 <VL53L0X_SetLimitCheckValue>
 800733a:	4603      	mov	r3, r0
 800733c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007340:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007344:	2b00      	cmp	r3, #0
 8007346:	d108      	bne.n	800735a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007348:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800734c:	2102      	movs	r1, #2
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fd82 	bl	8007e58 <VL53L0X_SetLimitCheckValue>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800735a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800735e:	2b00      	cmp	r3, #0
 8007360:	d107      	bne.n	8007372 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007362:	2200      	movs	r2, #0
 8007364:	2103      	movs	r1, #3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fd76 	bl	8007e58 <VL53L0X_SetLimitCheckValue>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007372:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10f      	bne.n	800739a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	22ff      	movs	r2, #255	; 0xff
 800737e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007382:	22ff      	movs	r2, #255	; 0xff
 8007384:	2101      	movs	r1, #1
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f004 fd70 	bl	800be6c <VL53L0X_WrByte>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800739a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d103      	bne.n	80073aa <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80073aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3758      	adds	r7, #88	; 0x58
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bdb0      	pop	{r4, r5, r7, pc}
 80073b6:	bf00      	nop
 80073b8:	00016b85 	.word	0x00016b85
 80073bc:	000970a4 	.word	0x000970a4

080073c0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80073c0:	b5b0      	push	{r4, r5, r7, lr}
 80073c2:	b09e      	sub	sp, #120	; 0x78
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80073ce:	f107 031c 	add.w	r3, r7, #28
 80073d2:	2240      	movs	r2, #64	; 0x40
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f004 feb0 	bl	800c13c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80073fc:	2101      	movs	r1, #1
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f002 fa79 	bl	80098f6 <VL53L0X_get_info_from_device>
 8007404:	4603      	mov	r3, r0
 8007406:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8007410:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8007418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800741c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007420:	2b01      	cmp	r3, #1
 8007422:	d80d      	bhi.n	8007440 <VL53L0X_StaticInit+0x80>
 8007424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007428:	2b01      	cmp	r3, #1
 800742a:	d102      	bne.n	8007432 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800742c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800742e:	2b20      	cmp	r3, #32
 8007430:	d806      	bhi.n	8007440 <VL53L0X_StaticInit+0x80>
 8007432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10e      	bne.n	8007458 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800743a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800743c:	2b0c      	cmp	r3, #12
 800743e:	d90b      	bls.n	8007458 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8007440:	f107 0218 	add.w	r2, r7, #24
 8007444:	f107 0314 	add.w	r3, r7, #20
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 fcf8 	bl	8008e40 <VL53L0X_perform_ref_spad_management>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007456:	e009      	b.n	800746c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800745c:	461a      	mov	r2, r3
 800745e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 fef9 	bl	8009258 <VL53L0X_set_reference_spads>
 8007466:	4603      	mov	r3, r0
 8007468:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800746c:	4b94      	ldr	r3, [pc, #592]	; (80076c0 <VL53L0X_StaticInit+0x300>)
 800746e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007470:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10f      	bne.n	8007498 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800747e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007482:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007486:	2b00      	cmp	r3, #0
 8007488:	d104      	bne.n	8007494 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007490:	66bb      	str	r3, [r7, #104]	; 0x68
 8007492:	e001      	b.n	8007498 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007494:	4b8a      	ldr	r3, [pc, #552]	; (80076c0 <VL53L0X_StaticInit+0x300>)
 8007496:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007498:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80074a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f003 fdcc 	bl	800b040 <VL53L0X_load_tuning_settings>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80074ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80074b6:	2300      	movs	r3, #0
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	2304      	movs	r3, #4
 80074bc:	2200      	movs	r2, #0
 80074be:	2100      	movs	r1, #0
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f8f1 	bl	80086a8 <VL53L0X_SetGpioConfig>
 80074c6:	4603      	mov	r3, r0
 80074c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d121      	bne.n	8007518 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80074d4:	2201      	movs	r2, #1
 80074d6:	21ff      	movs	r1, #255	; 0xff
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f004 fcc7 	bl	800be6c <VL53L0X_WrByte>
 80074de:	4603      	mov	r3, r0
 80074e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80074e4:	f107 031a 	add.w	r3, r7, #26
 80074e8:	461a      	mov	r2, r3
 80074ea:	2184      	movs	r1, #132	; 0x84
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f004 fd69 	bl	800bfc4 <VL53L0X_RdWord>
 80074f2:	4603      	mov	r3, r0
 80074f4:	461a      	mov	r2, r3
 80074f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007500:	2200      	movs	r2, #0
 8007502:	21ff      	movs	r1, #255	; 0xff
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f004 fcb1 	bl	800be6c <VL53L0X_WrByte>
 800750a:	4603      	mov	r3, r0
 800750c:	461a      	mov	r2, r3
 800750e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007512:	4313      	orrs	r3, r2
 8007514:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007518:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800751c:	2b00      	cmp	r3, #0
 800751e:	d105      	bne.n	800752c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8007520:	8b7b      	ldrh	r3, [r7, #26]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	461a      	mov	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800752c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007530:	2b00      	cmp	r3, #0
 8007532:	d108      	bne.n	8007546 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007534:	f107 031c 	add.w	r3, r7, #28
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f8d0 	bl	80076e0 <VL53L0X_GetDeviceParameters>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007546:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800754a:	2b00      	cmp	r3, #0
 800754c:	d110      	bne.n	8007570 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800754e:	f107 0319 	add.w	r3, r7, #25
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f992 	bl	800787e <VL53L0X_GetFractionEnable>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007560:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007564:	2b00      	cmp	r3, #0
 8007566:	d103      	bne.n	8007570 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007568:	7e7a      	ldrb	r2, [r7, #25]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007570:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10e      	bne.n	8007596 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f103 0410 	add.w	r4, r3, #16
 800757e:	f107 051c 	add.w	r5, r7, #28
 8007582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800758a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800758c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800758e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007592:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007596:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800759a:	2b00      	cmp	r3, #0
 800759c:	d111      	bne.n	80075c2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800759e:	f107 0319 	add.w	r3, r7, #25
 80075a2:	461a      	mov	r2, r3
 80075a4:	2101      	movs	r1, #1
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f004 fce2 	bl	800bf70 <VL53L0X_RdByte>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80075b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d103      	bne.n	80075c2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80075ba:	7e7a      	ldrb	r2, [r7, #25]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80075c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d107      	bne.n	80075da <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80075ca:	2200      	movs	r2, #0
 80075cc:	2100      	movs	r1, #0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f9ca 	bl	8007968 <VL53L0X_SetSequenceStepEnable>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80075da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d107      	bne.n	80075f2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80075e2:	2200      	movs	r2, #0
 80075e4:	2102      	movs	r1, #2
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f9be 	bl	8007968 <VL53L0X_SetSequenceStepEnable>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80075f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2203      	movs	r2, #3
 80075fe:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007602:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800760a:	f107 0313 	add.w	r3, r7, #19
 800760e:	461a      	mov	r2, r3
 8007610:	2100      	movs	r1, #0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f990 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 8007618:	4603      	mov	r3, r0
 800761a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800761e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007622:	2b00      	cmp	r3, #0
 8007624:	d103      	bne.n	800762e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007626:	7cfa      	ldrb	r2, [r7, #19]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800762e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007636:	f107 0313 	add.w	r3, r7, #19
 800763a:	461a      	mov	r2, r3
 800763c:	2101      	movs	r1, #1
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f97a 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 8007644:	4603      	mov	r3, r0
 8007646:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800764a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800764e:	2b00      	cmp	r3, #0
 8007650:	d103      	bne.n	800765a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007652:	7cfa      	ldrb	r2, [r7, #19]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800765a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800765e:	2b00      	cmp	r3, #0
 8007660:	d109      	bne.n	8007676 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8007662:	f107 030c 	add.w	r3, r7, #12
 8007666:	461a      	mov	r2, r3
 8007668:	2103      	movs	r1, #3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f002 fec4 	bl	800a3f8 <get_sequence_step_timeout>
 8007670:	4603      	mov	r3, r0
 8007672:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007676:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007686:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800768e:	f107 030c 	add.w	r3, r7, #12
 8007692:	461a      	mov	r2, r3
 8007694:	2104      	movs	r1, #4
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f002 feae 	bl	800a3f8 <get_sequence_step_timeout>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d103      	bne.n	80076b2 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80076b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3770      	adds	r7, #112	; 0x70
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bdb0      	pop	{r4, r5, r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000010 	.word	0x20000010

080076c4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80076cc:	239d      	movs	r3, #157	; 0x9d
 80076ce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80076d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076ea:	2300      	movs	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f8b0 	bl	8007858 <VL53L0X_GetDeviceMode>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80076fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d107      	bne.n	8007714 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	3308      	adds	r3, #8
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa78 	bl	8007c00 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d102      	bne.n	8007722 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2200      	movs	r2, #0
 8007720:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d107      	bne.n	800773a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	3310      	adds	r3, #16
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 faae 	bl	8007c92 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007736:	4603      	mov	r3, r0
 8007738:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800773a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d107      	bne.n	8007752 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	3314      	adds	r3, #20
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff fcc1 	bl	80070d0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800774e:	4603      	mov	r3, r0
 8007750:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d134      	bne.n	80077c4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800775a:	2300      	movs	r3, #0
 800775c:	60bb      	str	r3, [r7, #8]
 800775e:	e02a      	b.n	80077b6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d12a      	bne.n	80077be <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	b299      	uxth	r1, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	3308      	adds	r3, #8
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	4413      	add	r3, r2
 8007776:	3304      	adds	r3, #4
 8007778:	461a      	mov	r2, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fbce 	bl	8007f1c <VL53L0X_GetLimitCheckValue>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	4313      	orrs	r3, r2
 8007788:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800778a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d117      	bne.n	80077c2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	b299      	uxth	r1, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	3318      	adds	r3, #24
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	4413      	add	r3, r2
 800779e:	461a      	mov	r2, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fb35 	bl	8007e10 <VL53L0X_GetLimitCheckEnable>
 80077a6:	4603      	mov	r3, r0
 80077a8:	461a      	mov	r2, r3
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	3301      	adds	r3, #1
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b05      	cmp	r3, #5
 80077ba:	ddd1      	ble.n	8007760 <VL53L0X_GetDeviceParameters+0x80>
 80077bc:	e002      	b.n	80077c4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80077be:	bf00      	nop
 80077c0:	e000      	b.n	80077c4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80077c2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80077c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d107      	bne.n	80077dc <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	333c      	adds	r3, #60	; 0x3c
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fc30 	bl	8008038 <VL53L0X_GetWrapAroundCheckEnable>
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80077dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d107      	bne.n	80077f4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f879 	bl	80078e2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80077f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	2b15      	cmp	r3, #21
 8007814:	bf8c      	ite	hi
 8007816:	2201      	movhi	r2, #1
 8007818:	2200      	movls	r2, #0
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	2a00      	cmp	r2, #0
 800781e:	d10e      	bne.n	800783e <VL53L0X_SetDeviceMode+0x3e>
 8007820:	2201      	movs	r2, #1
 8007822:	409a      	lsls	r2, r3
 8007824:	4b0b      	ldr	r3, [pc, #44]	; (8007854 <VL53L0X_SetDeviceMode+0x54>)
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	bf14      	ite	ne
 800782c:	2301      	movne	r3, #1
 800782e:	2300      	moveq	r3, #0
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	78fa      	ldrb	r2, [r7, #3]
 800783a:	741a      	strb	r2, [r3, #16]
		break;
 800783c:	e001      	b.n	8007842 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800783e:	23f8      	movs	r3, #248	; 0xf8
 8007840:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007842:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	0030000b 	.word	0x0030000b

08007858 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7c1a      	ldrb	r2, [r3, #16]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800786e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007888:	2300      	movs	r3, #0
 800788a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	2109      	movs	r1, #9
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f004 fb6d 	bl	800bf70 <VL53L0X_RdByte>
 8007896:	4603      	mov	r3, r0
 8007898:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800789a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80078b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f003 fa26 	bl	800ad1e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80078d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f003 faf3 	bl	800aede <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80078fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
 8007914:	4613      	mov	r3, r2
 8007916:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800791c:	78ba      	ldrb	r2, [r7, #2]
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f002 ff3b 	bl	800a79e <VL53L0X_set_vcsel_pulse_period>
 8007928:	4603      	mov	r3, r0
 800792a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800792c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	460b      	mov	r3, r1
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007946:	2300      	movs	r3, #0
 8007948:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	4619      	mov	r1, r3
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f003 f9ad 	bl	800acb0 <VL53L0X_get_vcsel_pulse_period>
 8007956:	4603      	mov	r3, r0
 8007958:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800795a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
 8007974:	4613      	mov	r3, r2
 8007976:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007978:	2300      	movs	r3, #0
 800797a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007984:	f107 030f 	add.w	r3, r7, #15
 8007988:	461a      	mov	r2, r3
 800798a:	2101      	movs	r1, #1
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f004 faef 	bl	800bf70 <VL53L0X_RdByte>
 8007992:	4603      	mov	r3, r0
 8007994:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800799a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d15a      	bne.n	8007a58 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80079a2:	78bb      	ldrb	r3, [r7, #2]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d12b      	bne.n	8007a00 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d825      	bhi.n	80079fa <VL53L0X_SetSequenceStepEnable+0x92>
 80079ae:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	080079c9 	.word	0x080079c9
 80079b8:	080079d3 	.word	0x080079d3
 80079bc:	080079dd 	.word	0x080079dd
 80079c0:	080079e7 	.word	0x080079e7
 80079c4:	080079f1 	.word	0x080079f1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80079c8:	7dbb      	ldrb	r3, [r7, #22]
 80079ca:	f043 0310 	orr.w	r3, r3, #16
 80079ce:	75bb      	strb	r3, [r7, #22]
				break;
 80079d0:	e043      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80079d2:	7dbb      	ldrb	r3, [r7, #22]
 80079d4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80079d8:	75bb      	strb	r3, [r7, #22]
				break;
 80079da:	e03e      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80079dc:	7dbb      	ldrb	r3, [r7, #22]
 80079de:	f043 0304 	orr.w	r3, r3, #4
 80079e2:	75bb      	strb	r3, [r7, #22]
				break;
 80079e4:	e039      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80079e6:	7dbb      	ldrb	r3, [r7, #22]
 80079e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ec:	75bb      	strb	r3, [r7, #22]
				break;
 80079ee:	e034      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80079f0:	7dbb      	ldrb	r3, [r7, #22]
 80079f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079f6:	75bb      	strb	r3, [r7, #22]
				break;
 80079f8:	e02f      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079fa:	23fc      	movs	r3, #252	; 0xfc
 80079fc:	75fb      	strb	r3, [r7, #23]
 80079fe:	e02c      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d825      	bhi.n	8007a52 <VL53L0X_SetSequenceStepEnable+0xea>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a21 	.word	0x08007a21
 8007a10:	08007a2b 	.word	0x08007a2b
 8007a14:	08007a35 	.word	0x08007a35
 8007a18:	08007a3f 	.word	0x08007a3f
 8007a1c:	08007a49 	.word	0x08007a49
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007a20:	7dbb      	ldrb	r3, [r7, #22]
 8007a22:	f023 0310 	bic.w	r3, r3, #16
 8007a26:	75bb      	strb	r3, [r7, #22]
				break;
 8007a28:	e017      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007a2a:	7dbb      	ldrb	r3, [r7, #22]
 8007a2c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007a30:	75bb      	strb	r3, [r7, #22]
				break;
 8007a32:	e012      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007a34:	7dbb      	ldrb	r3, [r7, #22]
 8007a36:	f023 0304 	bic.w	r3, r3, #4
 8007a3a:	75bb      	strb	r3, [r7, #22]
				break;
 8007a3c:	e00d      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007a3e:	7dbb      	ldrb	r3, [r7, #22]
 8007a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a44:	75bb      	strb	r3, [r7, #22]
				break;
 8007a46:	e008      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007a48:	7dbb      	ldrb	r3, [r7, #22]
 8007a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4e:	75bb      	strb	r3, [r7, #22]
				break;
 8007a50:	e003      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a52:	23fc      	movs	r3, #252	; 0xfc
 8007a54:	75fb      	strb	r3, [r7, #23]
 8007a56:	e000      	b.n	8007a5a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007a58:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	7dba      	ldrb	r2, [r7, #22]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d01e      	beq.n	8007aa0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d107      	bne.n	8007a7a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007a6a:	7dbb      	ldrb	r3, [r7, #22]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2101      	movs	r1, #1
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f004 f9fb 	bl	800be6c <VL53L0X_WrByte>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	7dba      	ldrb	r2, [r7, #22]
 8007a86:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007a98:	6939      	ldr	r1, [r7, #16]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff ff0e 	bl	80078bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	72fb      	strb	r3, [r7, #11]
 8007aba:	4613      	mov	r3, r2
 8007abc:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d836      	bhi.n	8007b3c <sequence_step_enabled+0x90>
 8007ace:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <sequence_step_enabled+0x28>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007ae9 	.word	0x08007ae9
 8007ad8:	08007afb 	.word	0x08007afb
 8007adc:	08007b0d 	.word	0x08007b0d
 8007ae0:	08007b1f 	.word	0x08007b1f
 8007ae4:	08007b31 	.word	0x08007b31
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007ae8:	7abb      	ldrb	r3, [r7, #10]
 8007aea:	111b      	asrs	r3, r3, #4
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	701a      	strb	r2, [r3, #0]
		break;
 8007af8:	e022      	b.n	8007b40 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007afa:	7abb      	ldrb	r3, [r7, #10]
 8007afc:	10db      	asrs	r3, r3, #3
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	701a      	strb	r2, [r3, #0]
		break;
 8007b0a:	e019      	b.n	8007b40 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007b0c:	7abb      	ldrb	r3, [r7, #10]
 8007b0e:	109b      	asrs	r3, r3, #2
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	701a      	strb	r2, [r3, #0]
		break;
 8007b1c:	e010      	b.n	8007b40 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007b1e:	7abb      	ldrb	r3, [r7, #10]
 8007b20:	119b      	asrs	r3, r3, #6
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	701a      	strb	r2, [r3, #0]
		break;
 8007b2e:	e007      	b.n	8007b40 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007b30:	7abb      	ldrb	r3, [r7, #10]
 8007b32:	09db      	lsrs	r3, r3, #7
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	701a      	strb	r2, [r3, #0]
		break;
 8007b3a:	e001      	b.n	8007b40 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b3c:	23fc      	movs	r3, #252	; 0xfc
 8007b3e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007b62:	f107 030e 	add.w	r3, r7, #14
 8007b66:	461a      	mov	r2, r3
 8007b68:	2101      	movs	r1, #1
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f004 fa00 	bl	800bf70 <VL53L0X_RdByte>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d107      	bne.n	8007b8c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007b7c:	7bba      	ldrb	r2, [r7, #14]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2100      	movs	r1, #0
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff ff92 	bl	8007aac <sequence_step_enabled>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d108      	bne.n	8007ba6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007b94:	7bba      	ldrb	r2, [r7, #14]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	3302      	adds	r3, #2
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff ff85 	bl	8007aac <sequence_step_enabled>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d108      	bne.n	8007bc0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007bae:	7bba      	ldrb	r2, [r7, #14]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff ff78 	bl	8007aac <sequence_step_enabled>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d108      	bne.n	8007bda <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007bc8:	7bba      	ldrb	r2, [r7, #14]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	3303      	adds	r3, #3
 8007bce:	2103      	movs	r1, #3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f7ff ff6b 	bl	8007aac <sequence_step_enabled>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d108      	bne.n	8007bf4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007be2:	7bba      	ldrb	r2, [r7, #14]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	3304      	adds	r3, #4
 8007be8:	2104      	movs	r1, #4
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff ff5e 	bl	8007aac <sequence_step_enabled>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	461a      	mov	r2, r3
 8007c14:	21f8      	movs	r1, #248	; 0xf8
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f004 f9d4 	bl	800bfc4 <VL53L0X_RdWord>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d108      	bne.n	8007c3a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007c28:	f107 0308 	add.w	r3, r7, #8
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	2104      	movs	r1, #4
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f004 f9ff 	bl	800c034 <VL53L0X_RdDWord>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10c      	bne.n	8007c5c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007c42:	89bb      	ldrh	r3, [r7, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	89ba      	ldrh	r2, [r7, #12]
 8007c4c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	7f1b      	ldrb	r3, [r3, #28]
 8007c7a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	7bba      	ldrb	r2, [r7, #14]
 8007c80:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b086      	sub	sp, #24
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007ca0:	f107 030e 	add.w	r3, r7, #14
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	2120      	movs	r1, #32
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f004 f98b 	bl	800bfc4 <VL53L0X_RdWord>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d118      	bne.n	8007cec <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007cba:	89fb      	ldrh	r3, [r7, #14]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	771a      	strb	r2, [r3, #28]
 8007cd2:	e00b      	b.n	8007cec <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007cd4:	89fb      	ldrh	r3, [r7, #14]
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	807b      	strh	r3, [r7, #2]
 8007d04:	4613      	mov	r3, r2
 8007d06:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007d18:	887b      	ldrh	r3, [r7, #2]
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	d902      	bls.n	8007d24 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007d1e:	23fc      	movs	r3, #252	; 0xfc
 8007d20:	75fb      	strb	r3, [r7, #23]
 8007d22:	e05b      	b.n	8007ddc <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007d24:	787b      	ldrb	r3, [r7, #1]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007d32:	2301      	movs	r3, #1
 8007d34:	73bb      	strb	r3, [r7, #14]
 8007d36:	e00a      	b.n	8007d4e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007d38:	887b      	ldrh	r3, [r7, #2]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	330c      	adds	r3, #12
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007d4e:	887b      	ldrh	r3, [r7, #2]
 8007d50:	2b05      	cmp	r3, #5
 8007d52:	d841      	bhi.n	8007dd8 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007d54:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <VL53L0X_SetLimitCheckEnable+0x64>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007d75 	.word	0x08007d75
 8007d60:	08007d7f 	.word	0x08007d7f
 8007d64:	08007d95 	.word	0x08007d95
 8007d68:	08007d9f 	.word	0x08007d9f
 8007d6c:	08007da9 	.word	0x08007da9
 8007d70:	08007dc1 	.word	0x08007dc1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7bfa      	ldrb	r2, [r7, #15]
 8007d78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007d7c:	e02e      	b.n	8007ddc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	2144      	movs	r1, #68	; 0x44
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f004 f893 	bl	800beb4 <VL53L0X_WrWord>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75fb      	strb	r3, [r7, #23]

			break;
 8007d92:	e023      	b.n	8007ddc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	7bfa      	ldrb	r2, [r7, #15]
 8007d98:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007d9c:	e01e      	b.n	8007ddc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	7bfa      	ldrb	r2, [r7, #15]
 8007da2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007da6:	e019      	b.n	8007ddc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007dae:	7b7b      	ldrb	r3, [r7, #13]
 8007db0:	22fe      	movs	r2, #254	; 0xfe
 8007db2:	2160      	movs	r1, #96	; 0x60
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f004 f8a7 	bl	800bf08 <VL53L0X_UpdateByte>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007dbe:	e00d      	b.n	8007ddc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007dc6:	7b7b      	ldrb	r3, [r7, #13]
 8007dc8:	22ef      	movs	r2, #239	; 0xef
 8007dca:	2160      	movs	r1, #96	; 0x60
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f004 f89b 	bl	800bf08 <VL53L0X_UpdateByte>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007dd6:	e001      	b.n	8007ddc <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007dd8:	23fc      	movs	r3, #252	; 0xfc
 8007dda:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10f      	bne.n	8007e04 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007de4:	787b      	ldrb	r3, [r7, #1]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007dea:	887b      	ldrh	r3, [r7, #2]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	4413      	add	r3, r2
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007df6:	e005      	b.n	8007e04 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007df8:	887b      	ldrh	r3, [r7, #2]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007e22:	897b      	ldrh	r3, [r7, #10]
 8007e24:	2b05      	cmp	r3, #5
 8007e26:	d905      	bls.n	8007e34 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e28:	23fc      	movs	r3, #252	; 0xfc
 8007e2a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	e008      	b.n	8007e46 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007e34:	897b      	ldrh	r3, [r7, #10]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e3e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	7dba      	ldrb	r2, [r7, #22]
 8007e44:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
	...

08007e58 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	460b      	mov	r3, r1
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e66:	2300      	movs	r3, #0
 8007e68:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007e6a:	897b      	ldrh	r3, [r7, #10]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e74:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007e76:	7dbb      	ldrb	r3, [r7, #22]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d107      	bne.n	8007e8c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007e7c:	897b      	ldrh	r3, [r7, #10]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	330c      	adds	r3, #12
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	605a      	str	r2, [r3, #4]
 8007e8a:	e040      	b.n	8007f0e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007e8c:	897b      	ldrh	r3, [r7, #10]
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	d830      	bhi.n	8007ef4 <VL53L0X_SetLimitCheckValue+0x9c>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <VL53L0X_SetLimitCheckValue+0x40>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007eb9 	.word	0x08007eb9
 8007ea0:	08007ecf 	.word	0x08007ecf
 8007ea4:	08007ed7 	.word	0x08007ed7
 8007ea8:	08007edf 	.word	0x08007edf
 8007eac:	08007edf 	.word	0x08007edf

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007eb6:	e01f      	b.n	8007ef8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	2144      	movs	r1, #68	; 0x44
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f003 fff6 	bl	800beb4 <VL53L0X_WrWord>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007ecc:	e014      	b.n	8007ef8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007ed4:	e010      	b.n	8007ef8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007edc:	e00c      	b.n	8007ef8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	2164      	movs	r1, #100	; 0x64
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f003 ffe3 	bl	800beb4 <VL53L0X_WrWord>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007ef2:	e001      	b.n	8007ef8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ef4:	23fc      	movs	r3, #252	; 0xfc
 8007ef6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d106      	bne.n	8007f0e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f00:	897b      	ldrh	r3, [r7, #10]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	330c      	adds	r3, #12
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop

08007f1c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	460b      	mov	r3, r1
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007f32:	897b      	ldrh	r3, [r7, #10]
 8007f34:	2b05      	cmp	r3, #5
 8007f36:	d847      	bhi.n	8007fc8 <VL53L0X_GetLimitCheckValue+0xac>
 8007f38:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <VL53L0X_GetLimitCheckValue+0x24>)
 8007f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3e:	bf00      	nop
 8007f40:	08007f59 	.word	0x08007f59
 8007f44:	08007f65 	.word	0x08007f65
 8007f48:	08007f8b 	.word	0x08007f8b
 8007f4c:	08007f97 	.word	0x08007f97
 8007f50:	08007fa3 	.word	0x08007fa3
 8007f54:	08007fa3 	.word	0x08007fa3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	77bb      	strb	r3, [r7, #30]
		break;
 8007f62:	e033      	b.n	8007fcc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007f64:	f107 0316 	add.w	r3, r7, #22
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2144      	movs	r1, #68	; 0x44
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f004 f829 	bl	800bfc4 <VL53L0X_RdWord>
 8007f72:	4603      	mov	r3, r0
 8007f74:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007f76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007f7e:	8afb      	ldrh	r3, [r7, #22]
 8007f80:	025b      	lsls	r3, r3, #9
 8007f82:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007f84:	2301      	movs	r3, #1
 8007f86:	77bb      	strb	r3, [r7, #30]
		break;
 8007f88:	e020      	b.n	8007fcc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007f90:	2300      	movs	r3, #0
 8007f92:	77bb      	strb	r3, [r7, #30]
		break;
 8007f94:	e01a      	b.n	8007fcc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	77bb      	strb	r3, [r7, #30]
		break;
 8007fa0:	e014      	b.n	8007fcc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007fa2:	f107 0316 	add.w	r3, r7, #22
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	2164      	movs	r1, #100	; 0x64
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f004 f80a 	bl	800bfc4 <VL53L0X_RdWord>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007fb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d102      	bne.n	8007fc2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007fbc:	8afb      	ldrh	r3, [r7, #22]
 8007fbe:	025b      	lsls	r3, r3, #9
 8007fc0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	77bb      	strb	r3, [r7, #30]
		break;
 8007fc6:	e001      	b.n	8007fcc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fc8:	23fc      	movs	r3, #252	; 0xfc
 8007fca:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007fcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d12a      	bne.n	800802a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007fd4:	7fbb      	ldrb	r3, [r7, #30]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d124      	bne.n	8008024 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d110      	bne.n	8008002 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007fe0:	897b      	ldrh	r3, [r7, #10]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007ff4:	897b      	ldrh	r3, [r7, #10]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008000:	e013      	b.n	800802a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008008:	897b      	ldrh	r3, [r7, #10]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	330c      	adds	r3, #12
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008016:	897b      	ldrh	r3, [r7, #10]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008022:	e002      	b.n	800802a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800802a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800802e:	4618      	mov	r0, r3
 8008030:	3720      	adds	r7, #32
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop

08008038 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008046:	f107 030e 	add.w	r3, r7, #14
 800804a:	461a      	mov	r2, r3
 800804c:	2101      	movs	r1, #1
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f003 ff8e 	bl	800bf70 <VL53L0X_RdByte>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10e      	bne.n	800807e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008060:	7bba      	ldrb	r2, [r7, #14]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	b25b      	sxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	da03      	bge.n	8008078 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2201      	movs	r2, #1
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	e002      	b.n	800807e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800807e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d104      	bne.n	8008090 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008090:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80080a8:	f107 030e 	add.w	r3, r7, #14
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff fbd2 	bl	8007858 <VL53L0X_GetDeviceMode>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80080b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d107      	bne.n	80080d0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d104      	bne.n	80080d0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f898 	bl	80081fc <VL53L0X_StartMeasurement>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80080d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 fb3f 	bl	800975c <VL53L0X_measurement_poll_for_completion>
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80080e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2203      	movs	r2, #3
 80080f4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80080f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008110:	2300      	movs	r3, #0
 8008112:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008114:	2301      	movs	r3, #1
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	68b9      	ldr	r1, [r7, #8]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f001 fae1 	bl	80096e2 <VL53L0X_perform_ref_calibration>
 8008120:	4603      	mov	r3, r0
 8008122:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008124:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800813c:	2300      	movs	r3, #0
 800813e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008146:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008148:	7dbb      	ldrb	r3, [r7, #22]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d005      	beq.n	800815a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800814e:	7dbb      	ldrb	r3, [r7, #22]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d002      	beq.n	800815a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008154:	7dbb      	ldrb	r3, [r7, #22]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d147      	bne.n	80081ea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800815a:	f107 030c 	add.w	r3, r7, #12
 800815e:	f107 0210 	add.w	r2, r7, #16
 8008162:	2101      	movs	r1, #1
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fbc3 	bl	80088f0 <VL53L0X_GetInterruptThresholds>
 800816a:	4603      	mov	r3, r0
 800816c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008174:	d803      	bhi.n	800817e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008176:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008178:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800817c:	d935      	bls.n	80081ea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800817e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d131      	bne.n	80081ea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008186:	78fb      	ldrb	r3, [r7, #3]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800818c:	491a      	ldr	r1, [pc, #104]	; (80081f8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f002 ff56 	bl	800b040 <VL53L0X_load_tuning_settings>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
 8008198:	e027      	b.n	80081ea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800819a:	2204      	movs	r2, #4
 800819c:	21ff      	movs	r1, #255	; 0xff
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f003 fe64 	bl	800be6c <VL53L0X_WrByte>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80081ae:	2200      	movs	r2, #0
 80081b0:	2170      	movs	r1, #112	; 0x70
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f003 fe5a 	bl	800be6c <VL53L0X_WrByte>
 80081b8:	4603      	mov	r3, r0
 80081ba:	461a      	mov	r2, r3
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	4313      	orrs	r3, r2
 80081c0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80081c2:	2200      	movs	r2, #0
 80081c4:	21ff      	movs	r1, #255	; 0xff
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f003 fe50 	bl	800be6c <VL53L0X_WrByte>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80081d6:	2200      	movs	r2, #0
 80081d8:	2180      	movs	r1, #128	; 0x80
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f003 fe46 	bl	800be6c <VL53L0X_WrByte>
 80081e0:	4603      	mov	r3, r0
 80081e2:	461a      	mov	r2, r3
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80081ea:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000104 	.word	0x20000104

080081fc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008204:	2300      	movs	r3, #0
 8008206:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008208:	2301      	movs	r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800820c:	f107 030e 	add.w	r3, r7, #14
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fb20 	bl	8007858 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008218:	2201      	movs	r2, #1
 800821a:	2180      	movs	r1, #128	; 0x80
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f003 fe25 	bl	800be6c <VL53L0X_WrByte>
 8008222:	4603      	mov	r3, r0
 8008224:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008226:	2201      	movs	r2, #1
 8008228:	21ff      	movs	r1, #255	; 0xff
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f003 fe1e 	bl	800be6c <VL53L0X_WrByte>
 8008230:	4603      	mov	r3, r0
 8008232:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008234:	2200      	movs	r2, #0
 8008236:	2100      	movs	r1, #0
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f003 fe17 	bl	800be6c <VL53L0X_WrByte>
 800823e:	4603      	mov	r3, r0
 8008240:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8008248:	461a      	mov	r2, r3
 800824a:	2191      	movs	r1, #145	; 0x91
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f003 fe0d 	bl	800be6c <VL53L0X_WrByte>
 8008252:	4603      	mov	r3, r0
 8008254:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008256:	2201      	movs	r2, #1
 8008258:	2100      	movs	r1, #0
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f003 fe06 	bl	800be6c <VL53L0X_WrByte>
 8008260:	4603      	mov	r3, r0
 8008262:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008264:	2200      	movs	r2, #0
 8008266:	21ff      	movs	r1, #255	; 0xff
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f003 fdff 	bl	800be6c <VL53L0X_WrByte>
 800826e:	4603      	mov	r3, r0
 8008270:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008272:	2200      	movs	r2, #0
 8008274:	2180      	movs	r1, #128	; 0x80
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f003 fdf8 	bl	800be6c <VL53L0X_WrByte>
 800827c:	4603      	mov	r3, r0
 800827e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	2b03      	cmp	r3, #3
 8008284:	d054      	beq.n	8008330 <VL53L0X_StartMeasurement+0x134>
 8008286:	2b03      	cmp	r3, #3
 8008288:	dc6c      	bgt.n	8008364 <VL53L0X_StartMeasurement+0x168>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <VL53L0X_StartMeasurement+0x98>
 800828e:	2b01      	cmp	r3, #1
 8008290:	d034      	beq.n	80082fc <VL53L0X_StartMeasurement+0x100>
 8008292:	e067      	b.n	8008364 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008294:	2201      	movs	r2, #1
 8008296:	2100      	movs	r1, #0
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f003 fde7 	bl	800be6c <VL53L0X_WrByte>
 800829e:	4603      	mov	r3, r0
 80082a0:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80082a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d15d      	bne.n	800836a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d008      	beq.n	80082ca <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80082b8:	f107 030d 	add.w	r3, r7, #13
 80082bc:	461a      	mov	r2, r3
 80082be:	2100      	movs	r1, #0
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f003 fe55 	bl	800bf70 <VL53L0X_RdByte>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	3301      	adds	r3, #1
 80082ce:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80082d0:	7b7a      	ldrb	r2, [r7, #13]
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	4013      	ands	r3, r2
 80082d6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80082d8:	7bfa      	ldrb	r2, [r7, #15]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d107      	bne.n	80082ee <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80082de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d103      	bne.n	80082ee <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80082ec:	d3e1      	bcc.n	80082b2 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80082f4:	d339      	bcc.n	800836a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80082f6:	23f9      	movs	r3, #249	; 0xf9
 80082f8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80082fa:	e036      	b.n	800836a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80082fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d105      	bne.n	8008310 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008304:	2101      	movs	r1, #1
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff ff12 	bl	8008130 <VL53L0X_CheckAndLoadInterruptSettings>
 800830c:	4603      	mov	r3, r0
 800830e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008310:	2202      	movs	r2, #2
 8008312:	2100      	movs	r1, #0
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f003 fda9 	bl	800be6c <VL53L0X_WrByte>
 800831a:	4603      	mov	r3, r0
 800831c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800831e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d123      	bne.n	800836e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2204      	movs	r2, #4
 800832a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800832e:	e01e      	b.n	800836e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008338:	2101      	movs	r1, #1
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff fef8 	bl	8008130 <VL53L0X_CheckAndLoadInterruptSettings>
 8008340:	4603      	mov	r3, r0
 8008342:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008344:	2204      	movs	r2, #4
 8008346:	2100      	movs	r1, #0
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f003 fd8f 	bl	800be6c <VL53L0X_WrByte>
 800834e:	4603      	mov	r3, r0
 8008350:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8008352:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10b      	bne.n	8008372 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2204      	movs	r2, #4
 800835e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008362:	e006      	b.n	8008372 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008364:	23f8      	movs	r3, #248	; 0xf8
 8008366:	75fb      	strb	r3, [r7, #23]
 8008368:	e004      	b.n	8008374 <VL53L0X_StartMeasurement+0x178>
		break;
 800836a:	bf00      	nop
 800836c:	e002      	b.n	8008374 <VL53L0X_StartMeasurement+0x178>
		break;
 800836e:	bf00      	nop
 8008370:	e000      	b.n	8008374 <VL53L0X_StartMeasurement+0x178>
		break;
 8008372:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008374:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008394:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	2b04      	cmp	r3, #4
 800839a:	d112      	bne.n	80083c2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800839c:	f107 0308 	add.w	r3, r7, #8
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fb1a 	bl	80089dc <VL53L0X_GetInterruptMaskStatus>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d103      	bne.n	80083ba <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2201      	movs	r2, #1
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	e01c      	b.n	80083f4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	e018      	b.n	80083f4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80083c2:	f107 030d 	add.w	r3, r7, #13
 80083c6:	461a      	mov	r2, r3
 80083c8:	2114      	movs	r1, #20
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f003 fdd0 	bl	800bf70 <VL53L0X_RdByte>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80083d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10b      	bne.n	80083f4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80083dc:	7b7b      	ldrb	r3, [r7, #13]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2201      	movs	r2, #1
 80083ea:	701a      	strb	r2, [r3, #0]
 80083ec:	e002      	b.n	80083f4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2200      	movs	r2, #0
 80083f2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008400:	b5b0      	push	{r4, r5, r7, lr}
 8008402:	b096      	sub	sp, #88	; 0x58
 8008404:	af02      	add	r7, sp, #8
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800840a:	2300      	movs	r3, #0
 800840c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8008410:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008414:	230c      	movs	r3, #12
 8008416:	2114      	movs	r1, #20
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f003 fcfb 	bl	800be14 <VL53L0X_ReadMulti>
 800841e:	4603      	mov	r3, r0
 8008420:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008424:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008428:	2b00      	cmp	r3, #0
 800842a:	f040 80d1 	bne.w	80085d0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2200      	movs	r2, #0
 8008432:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800843a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800843e:	b29b      	uxth	r3, r3
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	b29a      	uxth	r2, r3
 8008444:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008448:	b29b      	uxth	r3, r3
 800844a:	4413      	add	r3, r2
 800844c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2200      	movs	r2, #0
 8008454:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008456:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800845a:	b29b      	uxth	r3, r3
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	b29a      	uxth	r2, r3
 8008460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008464:	b29b      	uxth	r3, r3
 8008466:	4413      	add	r3, r2
 8008468:	b29b      	uxth	r3, r3
 800846a:	025b      	lsls	r3, r3, #9
 800846c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008472:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008474:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008478:	b29b      	uxth	r3, r3
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	b29a      	uxth	r2, r3
 800847e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008482:	b29b      	uxth	r3, r3
 8008484:	4413      	add	r3, r2
 8008486:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800848a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800848e:	025b      	lsls	r3, r3, #9
 8008490:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008496:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800849a:	b29b      	uxth	r3, r3
 800849c:	021b      	lsls	r3, r3, #8
 800849e:	b29a      	uxth	r2, r3
 80084a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	4413      	add	r3, r2
 80084a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80084b2:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80084b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80084c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80084ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80084ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80084d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084d4:	d046      	beq.n	8008564 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80084d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80084d8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80084dc:	fb02 f303 	mul.w	r3, r2, r3
 80084e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80084e4:	4a57      	ldr	r2, [pc, #348]	; (8008644 <VL53L0X_GetRangingMeasurementData+0x244>)
 80084e6:	fb82 1203 	smull	r1, r2, r2, r3
 80084ea:	1192      	asrs	r2, r2, #6
 80084ec:	17db      	asrs	r3, r3, #31
 80084ee:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80084f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	7f1b      	ldrb	r3, [r3, #28]
 80084fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8008502:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008506:	2b00      	cmp	r3, #0
 8008508:	d02c      	beq.n	8008564 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800850a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800850c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008510:	fb02 f303 	mul.w	r3, r2, r3
 8008514:	121a      	asrs	r2, r3, #8
					<= 0) {
 8008516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8008518:	429a      	cmp	r2, r3
 800851a:	d10d      	bne.n	8008538 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800851c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008520:	2b00      	cmp	r3, #0
 8008522:	d004      	beq.n	800852e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008524:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008528:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800852c:	e016      	b.n	800855c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800852e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008532:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008536:	e011      	b.n	800855c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008538:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800853c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800853e:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008542:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008544:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008548:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800854c:	121b      	asrs	r3, r3, #8
 800854e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008552:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008554:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008558:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800855c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008560:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008564:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00d      	beq.n	8008588 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800856c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008570:	089b      	lsrs	r3, r3, #2
 8008572:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008578:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800857c:	b2db      	uxtb	r3, r3
 800857e:	019b      	lsls	r3, r3, #6
 8008580:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	75da      	strb	r2, [r3, #23]
 8008586:	e006      	b.n	8008596 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800858e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2200      	movs	r2, #0
 8008594:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008596:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800859a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800859e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	4613      	mov	r3, r2
 80085aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f003 f9e5 	bl	800b97c <VL53L0X_get_pal_range_status>
 80085b2:	4603      	mov	r3, r0
 80085b4:	461a      	mov	r2, r3
 80085b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80085ba:	4313      	orrs	r3, r2
 80085bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80085c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d103      	bne.n	80085d0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80085c8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80085d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d12f      	bne.n	8008638 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f107 040c 	add.w	r4, r7, #12
 80085de:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80085e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80085ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80085f2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80085f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008600:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8008606:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800860c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008612:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8008618:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800861e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008628:	f107 050c 	add.w	r5, r7, #12
 800862c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800862e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008638:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800863c:	4618      	mov	r0, r3
 800863e:	3750      	adds	r7, #80	; 0x50
 8008640:	46bd      	mov	sp, r7
 8008642:	bdb0      	pop	{r4, r5, r7, pc}
 8008644:	10624dd3 	.word	0x10624dd3

08008648 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008656:	2100      	movs	r1, #0
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff f8d1 	bl	8007800 <VL53L0X_SetDeviceMode>
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d104      	bne.n	8008674 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fd16 	bl	800809c <VL53L0X_PerformSingleMeasurement>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d105      	bne.n	8008688 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff febe 	bl	8008400 <VL53L0X_GetRangingMeasurementData>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d105      	bne.n	800869c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008690:	2100      	movs	r1, #0
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f962 	bl	800895c <VL53L0X_ClearInterruptMask>
 8008698:	4603      	mov	r3, r0
 800869a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800869c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	4608      	mov	r0, r1
 80086b2:	4611      	mov	r1, r2
 80086b4:	461a      	mov	r2, r3
 80086b6:	4603      	mov	r3, r0
 80086b8:	70fb      	strb	r3, [r7, #3]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70bb      	strb	r3, [r7, #2]
 80086be:	4613      	mov	r3, r2
 80086c0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80086cc:	23f6      	movs	r3, #246	; 0xf6
 80086ce:	73fb      	strb	r3, [r7, #15]
 80086d0:	e107      	b.n	80088e2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80086d2:	78bb      	ldrb	r3, [r7, #2]
 80086d4:	2b14      	cmp	r3, #20
 80086d6:	d110      	bne.n	80086fa <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80086d8:	7e3b      	ldrb	r3, [r7, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d102      	bne.n	80086e4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80086de:	2310      	movs	r3, #16
 80086e0:	73bb      	strb	r3, [r7, #14]
 80086e2:	e001      	b.n	80086e8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	461a      	mov	r2, r3
 80086ec:	2184      	movs	r1, #132	; 0x84
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f003 fbbc 	bl	800be6c <VL53L0X_WrByte>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]
 80086f8:	e0f3      	b.n	80088e2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80086fa:	78bb      	ldrb	r3, [r7, #2]
 80086fc:	2b15      	cmp	r3, #21
 80086fe:	f040 8097 	bne.w	8008830 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008702:	2201      	movs	r2, #1
 8008704:	21ff      	movs	r1, #255	; 0xff
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f003 fbb0 	bl	800be6c <VL53L0X_WrByte>
 800870c:	4603      	mov	r3, r0
 800870e:	461a      	mov	r2, r3
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	4313      	orrs	r3, r2
 8008714:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008716:	2200      	movs	r2, #0
 8008718:	2100      	movs	r1, #0
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f003 fba6 	bl	800be6c <VL53L0X_WrByte>
 8008720:	4603      	mov	r3, r0
 8008722:	461a      	mov	r2, r3
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	4313      	orrs	r3, r2
 8008728:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800872a:	2200      	movs	r2, #0
 800872c:	21ff      	movs	r1, #255	; 0xff
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f003 fb9c 	bl	800be6c <VL53L0X_WrByte>
 8008734:	4603      	mov	r3, r0
 8008736:	461a      	mov	r2, r3
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	4313      	orrs	r3, r2
 800873c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800873e:	2201      	movs	r2, #1
 8008740:	2180      	movs	r1, #128	; 0x80
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f003 fb92 	bl	800be6c <VL53L0X_WrByte>
 8008748:	4603      	mov	r3, r0
 800874a:	461a      	mov	r2, r3
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	4313      	orrs	r3, r2
 8008750:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008752:	2202      	movs	r2, #2
 8008754:	2185      	movs	r1, #133	; 0x85
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f003 fb88 	bl	800be6c <VL53L0X_WrByte>
 800875c:	4603      	mov	r3, r0
 800875e:	461a      	mov	r2, r3
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	4313      	orrs	r3, r2
 8008764:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008766:	2204      	movs	r2, #4
 8008768:	21ff      	movs	r1, #255	; 0xff
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f003 fb7e 	bl	800be6c <VL53L0X_WrByte>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	4313      	orrs	r3, r2
 8008778:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800877a:	2200      	movs	r2, #0
 800877c:	21cd      	movs	r1, #205	; 0xcd
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f003 fb74 	bl	800be6c <VL53L0X_WrByte>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	4313      	orrs	r3, r2
 800878c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800878e:	2211      	movs	r2, #17
 8008790:	21cc      	movs	r1, #204	; 0xcc
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f003 fb6a 	bl	800be6c <VL53L0X_WrByte>
 8008798:	4603      	mov	r3, r0
 800879a:	461a      	mov	r2, r3
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4313      	orrs	r3, r2
 80087a0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80087a2:	2207      	movs	r2, #7
 80087a4:	21ff      	movs	r1, #255	; 0xff
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f003 fb60 	bl	800be6c <VL53L0X_WrByte>
 80087ac:	4603      	mov	r3, r0
 80087ae:	461a      	mov	r2, r3
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80087b6:	2200      	movs	r2, #0
 80087b8:	21be      	movs	r1, #190	; 0xbe
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f003 fb56 	bl	800be6c <VL53L0X_WrByte>
 80087c0:	4603      	mov	r3, r0
 80087c2:	461a      	mov	r2, r3
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80087ca:	2206      	movs	r2, #6
 80087cc:	21ff      	movs	r1, #255	; 0xff
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f003 fb4c 	bl	800be6c <VL53L0X_WrByte>
 80087d4:	4603      	mov	r3, r0
 80087d6:	461a      	mov	r2, r3
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	4313      	orrs	r3, r2
 80087dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80087de:	2209      	movs	r2, #9
 80087e0:	21cc      	movs	r1, #204	; 0xcc
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f003 fb42 	bl	800be6c <VL53L0X_WrByte>
 80087e8:	4603      	mov	r3, r0
 80087ea:	461a      	mov	r2, r3
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80087f2:	2200      	movs	r2, #0
 80087f4:	21ff      	movs	r1, #255	; 0xff
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f003 fb38 	bl	800be6c <VL53L0X_WrByte>
 80087fc:	4603      	mov	r3, r0
 80087fe:	461a      	mov	r2, r3
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	4313      	orrs	r3, r2
 8008804:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008806:	2201      	movs	r2, #1
 8008808:	21ff      	movs	r1, #255	; 0xff
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f003 fb2e 	bl	800be6c <VL53L0X_WrByte>
 8008810:	4603      	mov	r3, r0
 8008812:	461a      	mov	r2, r3
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4313      	orrs	r3, r2
 8008818:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800881a:	2200      	movs	r2, #0
 800881c:	2100      	movs	r1, #0
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f003 fb24 	bl	800be6c <VL53L0X_WrByte>
 8008824:	4603      	mov	r3, r0
 8008826:	461a      	mov	r2, r3
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	4313      	orrs	r3, r2
 800882c:	73fb      	strb	r3, [r7, #15]
 800882e:	e058      	b.n	80088e2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d121      	bne.n	800887c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008838:	787b      	ldrb	r3, [r7, #1]
 800883a:	2b04      	cmp	r3, #4
 800883c:	d81b      	bhi.n	8008876 <VL53L0X_SetGpioConfig+0x1ce>
 800883e:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <VL53L0X_SetGpioConfig+0x19c>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	08008859 	.word	0x08008859
 8008848:	0800885f 	.word	0x0800885f
 800884c:	08008865 	.word	0x08008865
 8008850:	0800886b 	.word	0x0800886b
 8008854:	08008871 	.word	0x08008871
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008858:	2300      	movs	r3, #0
 800885a:	73bb      	strb	r3, [r7, #14]
				break;
 800885c:	e00f      	b.n	800887e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800885e:	2301      	movs	r3, #1
 8008860:	73bb      	strb	r3, [r7, #14]
				break;
 8008862:	e00c      	b.n	800887e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008864:	2302      	movs	r3, #2
 8008866:	73bb      	strb	r3, [r7, #14]
				break;
 8008868:	e009      	b.n	800887e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800886a:	2303      	movs	r3, #3
 800886c:	73bb      	strb	r3, [r7, #14]
				break;
 800886e:	e006      	b.n	800887e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008870:	2304      	movs	r3, #4
 8008872:	73bb      	strb	r3, [r7, #14]
				break;
 8008874:	e003      	b.n	800887e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008876:	23f5      	movs	r3, #245	; 0xf5
 8008878:	73fb      	strb	r3, [r7, #15]
 800887a:	e000      	b.n	800887e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800887c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800887e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d107      	bne.n	8008896 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	461a      	mov	r2, r3
 800888a:	210a      	movs	r1, #10
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f003 faed 	bl	800be6c <VL53L0X_WrByte>
 8008892:	4603      	mov	r3, r0
 8008894:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10f      	bne.n	80088be <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800889e:	7e3b      	ldrb	r3, [r7, #24]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d102      	bne.n	80088aa <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]
 80088a8:	e001      	b.n	80088ae <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80088aa:	2310      	movs	r3, #16
 80088ac:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
 80088b0:	22ef      	movs	r2, #239	; 0xef
 80088b2:	2184      	movs	r1, #132	; 0x84
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f003 fb27 	bl	800bf08 <VL53L0X_UpdateByte>
 80088ba:	4603      	mov	r3, r0
 80088bc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80088be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d103      	bne.n	80088ce <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	787a      	ldrb	r2, [r7, #1]
 80088ca:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80088ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d105      	bne.n	80088e2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80088d6:	2100      	movs	r1, #0
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f83f 	bl	800895c <VL53L0X_ClearInterruptMask>
 80088de:	4603      	mov	r3, r0
 80088e0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80088e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop

080088f0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	607a      	str	r2, [r7, #4]
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	460b      	mov	r3, r1
 80088fe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008900:	2300      	movs	r3, #0
 8008902:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008904:	f107 0314 	add.w	r3, r7, #20
 8008908:	461a      	mov	r2, r3
 800890a:	210e      	movs	r1, #14
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f003 fb59 	bl	800bfc4 <VL53L0X_RdWord>
 8008912:	4603      	mov	r3, r0
 8008914:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008916:	8abb      	ldrh	r3, [r7, #20]
 8008918:	045b      	lsls	r3, r3, #17
 800891a:	461a      	mov	r2, r3
 800891c:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <VL53L0X_GetInterruptThresholds+0x68>)
 800891e:	4013      	ands	r3, r2
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008924:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10f      	bne.n	800894c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800892c:	f107 0314 	add.w	r3, r7, #20
 8008930:	461a      	mov	r2, r3
 8008932:	210c      	movs	r1, #12
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f003 fb45 	bl	800bfc4 <VL53L0X_RdWord>
 800893a:	4603      	mov	r3, r0
 800893c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800893e:	8abb      	ldrh	r3, [r7, #20]
 8008940:	045b      	lsls	r3, r3, #17
 8008942:	461a      	mov	r2, r3
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <VL53L0X_GetInterruptThresholds+0x68>)
 8008946:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800894c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	1ffe0000 	.word	0x1ffe0000

0800895c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800896e:	2201      	movs	r2, #1
 8008970:	210b      	movs	r1, #11
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f003 fa7a 	bl	800be6c <VL53L0X_WrByte>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800897c:	2200      	movs	r2, #0
 800897e:	210b      	movs	r1, #11
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f003 fa73 	bl	800be6c <VL53L0X_WrByte>
 8008986:	4603      	mov	r3, r0
 8008988:	461a      	mov	r2, r3
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	4313      	orrs	r3, r2
 800898e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008990:	f107 030d 	add.w	r3, r7, #13
 8008994:	461a      	mov	r2, r3
 8008996:	2113      	movs	r1, #19
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f003 fae9 	bl	800bf70 <VL53L0X_RdByte>
 800899e:	4603      	mov	r3, r0
 80089a0:	461a      	mov	r2, r3
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	3301      	adds	r3, #1
 80089ac:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80089ae:	7b7b      	ldrb	r3, [r7, #13]
 80089b0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d006      	beq.n	80089c6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d803      	bhi.n	80089c6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80089be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0d3      	beq.n	800896e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d901      	bls.n	80089d0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80089cc:	23f4      	movs	r3, #244	; 0xf4
 80089ce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80089d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80089ea:	f107 030e 	add.w	r3, r7, #14
 80089ee:	461a      	mov	r2, r3
 80089f0:	2113      	movs	r1, #19
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f003 fabc 	bl	800bf70 <VL53L0X_RdByte>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	f003 0207 	and.w	r2, r3, #7
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	f003 0318 	and.w	r3, r3, #24
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008a10:	23fa      	movs	r3, #250	; 0xfa
 8008a12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 fa03 	bl	8008e40 <VL53L0X_perform_ref_spad_management>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008a58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008a5c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a62:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008a64:	f107 0308 	add.w	r3, r7, #8
 8008a68:	461a      	mov	r2, r3
 8008a6a:	2128      	movs	r1, #40	; 0x28
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f003 faa9 	bl	800bfc4 <VL53L0X_RdWord>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d11e      	bne.n	8008abc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008a7e:	893b      	ldrh	r3, [r7, #8]
 8008a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008a88:	893b      	ldrh	r3, [r7, #8]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	dd0b      	ble.n	8008aac <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008a94:	893a      	ldrh	r2, [r7, #8]
 8008a96:	897b      	ldrh	r3, [r7, #10]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	b21b      	sxth	r3, r3
 8008a9e:	461a      	mov	r2, r3
					* 250;
 8008aa0:	23fa      	movs	r3, #250	; 0xfa
 8008aa2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	e007      	b.n	8008abc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008aac:	893b      	ldrh	r3, [r7, #8]
 8008aae:	b21b      	sxth	r3, r3
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	23fa      	movs	r3, #250	; 0xfa
 8008ab4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b08b      	sub	sp, #44	; 0x2c
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008ad6:	2308      	movs	r3, #8
 8008ad8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aee:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008af8:	69b9      	ldr	r1, [r7, #24]
 8008afa:	fb01 f202 	mul.w	r2, r1, r2
 8008afe:	1a9b      	subs	r3, r3, r2
 8008b00:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	627b      	str	r3, [r7, #36]	; 0x24
 8008b06:	e030      	b.n	8008b6a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	4413      	add	r3, r2
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d11e      	bne.n	8008b5c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008b1e:	7ffa      	ldrb	r2, [r7, #31]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	fa42 f303 	asr.w	r3, r2, r3
 8008b26:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008b2c:	e016      	b.n	8008b5c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008b2e:	7ffb      	ldrb	r3, [r7, #31]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <get_next_good_spad+0x88>
				success = 1;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	fb03 f202 	mul.w	r2, r3, r2
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	4413      	add	r3, r2
 8008b48:	461a      	mov	r2, r3
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	601a      	str	r2, [r3, #0]
				break;
 8008b4e:	e009      	b.n	8008b64 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008b50:	7ffb      	ldrb	r3, [r7, #31]
 8008b52:	085b      	lsrs	r3, r3, #1
 8008b54:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008b5c:	6a3a      	ldr	r2, [r7, #32]
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d3e4      	bcc.n	8008b2e <get_next_good_spad+0x66>
				coarseIndex++) {
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	3301      	adds	r3, #1
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d202      	bcs.n	8008b78 <get_next_good_spad+0xb0>
 8008b72:	7fbb      	ldrb	r3, [r7, #30]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0c7      	beq.n	8008b08 <get_next_good_spad+0x40>
		}
	}
}
 8008b78:	bf00      	nop
 8008b7a:	372c      	adds	r7, #44	; 0x2c
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	099b      	lsrs	r3, r3, #6
 8008b94:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008b96:	4a07      	ldr	r2, [pc, #28]	; (8008bb4 <is_aperture+0x30>)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <is_aperture+0x22>
		isAperture = 0;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	200002bc 	.word	0x200002bc

08008bb8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b089      	sub	sp, #36	; 0x24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008bc8:	2308      	movs	r3, #8
 8008bca:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bde:	69b9      	ldr	r1, [r7, #24]
 8008be0:	fb01 f202 	mul.w	r2, r1, r2
 8008be4:	1a9b      	subs	r3, r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d302      	bcc.n	8008bf6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008bf0:	23ce      	movs	r3, #206	; 0xce
 8008bf2:	77fb      	strb	r3, [r7, #31]
 8008bf4:	e010      	b.n	8008c18 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	b25a      	sxtb	r2, r3
 8008c00:	2101      	movs	r1, #1
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	fa01 f303 	lsl.w	r3, r1, r3
 8008c08:	b25b      	sxtb	r3, r3
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	b259      	sxtb	r1, r3
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	4413      	add	r3, r2
 8008c14:	b2ca      	uxtb	r2, r1
 8008c16:	701a      	strb	r2, [r3, #0]

	return status;
 8008c18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3724      	adds	r7, #36	; 0x24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8008c32:	2306      	movs	r3, #6
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	21b0      	movs	r1, #176	; 0xb0
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f003 f8bb 	bl	800bdb4 <VL53L0X_WriteMulti>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8008c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008c58:	2306      	movs	r3, #6
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	21b0      	movs	r1, #176	; 0xb0
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f003 f8d8 	bl	800be14 <VL53L0X_ReadMulti>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08c      	sub	sp, #48	; 0x30
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	607a      	str	r2, [r7, #4]
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	460b      	mov	r3, r1
 8008c82:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c8c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c90:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008c92:	2300      	movs	r3, #0
 8008c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c96:	e02b      	b.n	8008cf0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008c98:	f107 031c 	add.w	r3, r7, #28
 8008c9c:	6a3a      	ldr	r2, [r7, #32]
 8008c9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7ff ff11 	bl	8008ac8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cac:	d103      	bne.n	8008cb6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008cae:	23ce      	movs	r3, #206	; 0xce
 8008cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008cb4:	e020      	b.n	8008cf8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cbc:	4413      	add	r3, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff ff60 	bl	8008b84 <is_aperture>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d003      	beq.n	8008cd6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008cce:	23ce      	movs	r3, #206	; 0xce
 8008cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008cd4:	e010      	b.n	8008cf8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008cda:	6a3a      	ldr	r2, [r7, #32]
 8008cdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cde:	6838      	ldr	r0, [r7, #0]
 8008ce0:	f7ff ff6a 	bl	8008bb8 <enable_spad_bit>
		currentSpad++;
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	3301      	adds	r3, #1
 8008cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d3cf      	bcc.n	8008c98 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cfa:	6a3a      	ldr	r2, [r7, #32]
 8008cfc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008cfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d106      	bne.n	8008d14 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7ff ff8d 	bl	8008c28 <set_ref_spad_map>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008d14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d121      	bne.n	8008d60 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008d1c:	f107 0314 	add.w	r3, r7, #20
 8008d20:	4619      	mov	r1, r3
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff ff93 	bl	8008c4e <get_ref_spad_map>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008d32:	e011      	b.n	8008d58 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	4413      	add	r3, r2
 8008d3a:	781a      	ldrb	r2, [r3, #0]
 8008d3c:	f107 0114 	add.w	r1, r7, #20
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	440b      	add	r3, r1
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d003      	beq.n	8008d52 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008d4a:	23ce      	movs	r3, #206	; 0xce
 8008d4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008d50:	e006      	b.n	8008d60 <enable_ref_spads+0xec>
			}
			i++;
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	3301      	adds	r3, #1
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d3e9      	bcc.n	8008d34 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008d60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3730      	adds	r7, #48	; 0x30
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008d76:	2300      	movs	r3, #0
 8008d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008d88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008d8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d107      	bne.n	8008da4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008d94:	22c0      	movs	r2, #192	; 0xc0
 8008d96:	2101      	movs	r1, #1
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f003 f867 	bl	800be6c <VL53L0X_WrByte>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008da4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d108      	bne.n	8008dbe <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008dac:	f107 0308 	add.w	r3, r7, #8
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff fc48 	bl	8008648 <VL53L0X_PerformSingleRangingMeasurement>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008dbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d107      	bne.n	8008dd6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	21ff      	movs	r1, #255	; 0xff
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f003 f84e 	bl	800be6c <VL53L0X_WrByte>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008dd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d107      	bne.n	8008dee <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	21b6      	movs	r1, #182	; 0xb6
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f003 f8ee 	bl	800bfc4 <VL53L0X_RdWord>
 8008de8:	4603      	mov	r3, r0
 8008dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008dee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d107      	bne.n	8008e06 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008df6:	2200      	movs	r2, #0
 8008df8:	21ff      	movs	r1, #255	; 0xff
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f003 f836 	bl	800be6c <VL53L0X_WrByte>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008e06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d112      	bne.n	8008e34 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e12:	461a      	mov	r2, r3
 8008e14:	2101      	movs	r1, #1
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f003 f828 	bl	800be6c <VL53L0X_WrByte>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008e22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e30:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008e34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3728      	adds	r7, #40	; 0x28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008e40:	b590      	push	{r4, r7, lr}
 8008e42:	b09d      	sub	sp, #116	; 0x74
 8008e44:	af06      	add	r7, sp, #24
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008e52:	23b4      	movs	r3, #180	; 0xb4
 8008e54:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008e5c:	232c      	movs	r3, #44	; 0x2c
 8008e5e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008e6c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008e70:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008e7a:	2306      	movs	r3, #6
 8008e7c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008ea4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eaa:	e009      	b.n	8008ec0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d3f1      	bcc.n	8008eac <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ec8:	2201      	movs	r2, #1
 8008eca:	21ff      	movs	r1, #255	; 0xff
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f002 ffcd 	bl	800be6c <VL53L0X_WrByte>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008ed8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d107      	bne.n	8008ef0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	214f      	movs	r1, #79	; 0x4f
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f002 ffc1 	bl	800be6c <VL53L0X_WrByte>
 8008eea:	4603      	mov	r3, r0
 8008eec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008ef0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d107      	bne.n	8008f08 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008ef8:	222c      	movs	r2, #44	; 0x2c
 8008efa:	214e      	movs	r1, #78	; 0x4e
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f002 ffb5 	bl	800be6c <VL53L0X_WrByte>
 8008f02:	4603      	mov	r3, r0
 8008f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008f08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d107      	bne.n	8008f20 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f10:	2200      	movs	r2, #0
 8008f12:	21ff      	movs	r1, #255	; 0xff
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f002 ffa9 	bl	800be6c <VL53L0X_WrByte>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008f20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d109      	bne.n	8008f3c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008f28:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	21b6      	movs	r1, #182	; 0xb6
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f002 ff9b 	bl	800be6c <VL53L0X_WrByte>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008f3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d107      	bne.n	8008f54 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008f44:	2200      	movs	r2, #0
 8008f46:	2180      	movs	r1, #128	; 0x80
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f002 ff8f 	bl	800be6c <VL53L0X_WrByte>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008f54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10a      	bne.n	8008f72 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008f5c:	f107 0210 	add.w	r2, r7, #16
 8008f60:	f107 0111 	add.w	r1, r7, #17
 8008f64:	2300      	movs	r3, #0
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f000 fbbb 	bl	80096e2 <VL53L0X_perform_ref_calibration>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008f72:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d121      	bne.n	8008fbe <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f80:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f88:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008f96:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008f9a:	f107 0218 	add.w	r2, r7, #24
 8008f9e:	9204      	str	r2, [sp, #16]
 8008fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fa2:	9203      	str	r2, [sp, #12]
 8008fa4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fa6:	9202      	str	r2, [sp, #8]
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	4623      	mov	r3, r4
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff fe5e 	bl	8008c74 <enable_ref_spads>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008fbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d174      	bne.n	80090b0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008fca:	f107 0312 	add.w	r3, r7, #18
 8008fce:	4619      	mov	r1, r3
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f7ff fecb 	bl	8008d6c <perform_ref_signal_measurement>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008fdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d161      	bne.n	80090a8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008fe4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008fe6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d25d      	bcs.n	80090a8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008fec:	2300      	movs	r3, #0
 8008fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ff0:	e009      	b.n	8009006 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009002:	3301      	adds	r3, #1
 8009004:	64bb      	str	r3, [r7, #72]	; 0x48
 8009006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900a:	429a      	cmp	r2, r3
 800900c:	d3f1      	bcc.n	8008ff2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800900e:	e002      	b.n	8009016 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009012:	3301      	adds	r3, #1
 8009014:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8009016:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800901a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800901c:	4413      	add	r3, r2
 800901e:	4618      	mov	r0, r3
 8009020:	f7ff fdb0 	bl	8008b84 <is_aperture>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d103      	bne.n	8009032 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800902a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	429a      	cmp	r2, r3
 8009030:	d3ee      	bcc.n	8009010 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009032:	2301      	movs	r3, #1
 8009034:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009038:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009046:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800904a:	f107 0218 	add.w	r2, r7, #24
 800904e:	9204      	str	r2, [sp, #16]
 8009050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009052:	9203      	str	r2, [sp, #12]
 8009054:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009056:	9202      	str	r2, [sp, #8]
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	4623      	mov	r3, r4
 8009060:	4602      	mov	r2, r0
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff fe06 	bl	8008c74 <enable_ref_spads>
 8009068:	4603      	mov	r3, r0
 800906a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800906e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009072:	2b00      	cmp	r3, #0
 8009074:	d11b      	bne.n	80090ae <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800907a:	f107 0312 	add.w	r3, r7, #18
 800907e:	4619      	mov	r1, r3
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f7ff fe73 	bl	8008d6c <perform_ref_signal_measurement>
 8009086:	4603      	mov	r3, r0
 8009088:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800908c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10c      	bne.n	80090ae <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009094:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009096:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009098:	429a      	cmp	r2, r3
 800909a:	d208      	bcs.n	80090ae <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800909c:	2301      	movs	r3, #1
 800909e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80090a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80090a6:	e002      	b.n	80090ae <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ac:	e000      	b.n	80090b0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80090ae:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80090b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f040 80af 	bne.w	8009218 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80090ba:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80090bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090be:	429a      	cmp	r2, r3
 80090c0:	f240 80aa 	bls.w	8009218 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80090c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80090ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090cc:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80090d4:	f107 031c 	add.w	r3, r7, #28
 80090d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090da:	4618      	mov	r0, r3
 80090dc:	f003 f820 	bl	800c120 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80090e0:	8a7b      	ldrh	r3, [r7, #18]
 80090e2:	461a      	mov	r2, r3
 80090e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bfb8      	it	lt
 80090ec:	425b      	neglt	r3, r3
 80090ee:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80090f6:	e086      	b.n	8009206 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80090fe:	f107 0314 	add.w	r3, r7, #20
 8009102:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009106:	f7ff fcdf 	bl	8008ac8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009110:	d103      	bne.n	800911a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009112:	23ce      	movs	r3, #206	; 0xce
 8009114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009118:	e07e      	b.n	8009218 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800911a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	4413      	add	r3, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff fd2e 	bl	8008b84 <is_aperture>
 8009128:	4603      	mov	r3, r0
 800912a:	461a      	mov	r2, r3
 800912c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912e:	4293      	cmp	r3, r2
 8009130:	d003      	beq.n	800913a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009132:	2301      	movs	r3, #1
 8009134:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009138:	e06e      	b.n	8009218 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800913a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913c:	3301      	adds	r3, #1
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800914a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800914c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff fd32 	bl	8008bb8 <enable_spad_bit>
 8009154:	4603      	mov	r3, r0
 8009156:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800915a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10c      	bne.n	800917c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009164:	3301      	adds	r3, #1
 8009166:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800916e:	4619      	mov	r1, r3
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7ff fd59 	bl	8008c28 <set_ref_spad_map>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800917c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009180:	2b00      	cmp	r3, #0
 8009182:	d146      	bne.n	8009212 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009184:	f107 0312 	add.w	r3, r7, #18
 8009188:	4619      	mov	r1, r3
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7ff fdee 	bl	8008d6c <perform_ref_signal_measurement>
 8009190:	4603      	mov	r3, r0
 8009192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009196:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800919a:	2b00      	cmp	r3, #0
 800919c:	d13b      	bne.n	8009216 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800919e:	8a7b      	ldrh	r3, [r7, #18]
 80091a0:	461a      	mov	r2, r3
 80091a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bfb8      	it	lt
 80091aa:	425b      	neglt	r3, r3
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80091ae:	8a7b      	ldrh	r3, [r7, #18]
 80091b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d21c      	bcs.n	80091f0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80091b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d914      	bls.n	80091e8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80091be:	f107 031c 	add.w	r3, r7, #28
 80091c2:	4619      	mov	r1, r3
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f7ff fd2f 	bl	8008c28 <set_ref_spad_map>
 80091ca:	4603      	mov	r3, r0
 80091cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80091d6:	f107 011c 	add.w	r1, r7, #28
 80091da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091dc:	4618      	mov	r0, r3
 80091de:	f002 ff9f 	bl	800c120 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80091e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e4:	3b01      	subs	r3, #1
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80091e8:	2301      	movs	r3, #1
 80091ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ee:	e00a      	b.n	8009206 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80091fa:	f107 031c 	add.w	r3, r7, #28
 80091fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009200:	4618      	mov	r0, r3
 8009202:	f002 ff8d 	bl	800c120 <memcpy>
		while (!complete) {
 8009206:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800920a:	2b00      	cmp	r3, #0
 800920c:	f43f af74 	beq.w	80090f8 <VL53L0X_perform_ref_spad_management+0x2b8>
 8009210:	e002      	b.n	8009218 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009212:	bf00      	nop
 8009214:	e000      	b.n	8009218 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009216:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009218:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800921c:	2b00      	cmp	r3, #0
 800921e:	d115      	bne.n	800924c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009224:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800922c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	b2da      	uxtb	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	781a      	ldrb	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800924c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009250:	4618      	mov	r0, r3
 8009252:	375c      	adds	r7, #92	; 0x5c
 8009254:	46bd      	mov	sp, r7
 8009256:	bd90      	pop	{r4, r7, pc}

08009258 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009258:	b590      	push	{r4, r7, lr}
 800925a:	b093      	sub	sp, #76	; 0x4c
 800925c:	af06      	add	r7, sp, #24
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009266:	2300      	movs	r3, #0
 8009268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009270:	23b4      	movs	r3, #180	; 0xb4
 8009272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009276:	2306      	movs	r3, #6
 8009278:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800927a:	232c      	movs	r3, #44	; 0x2c
 800927c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800927e:	2201      	movs	r2, #1
 8009280:	21ff      	movs	r1, #255	; 0xff
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f002 fdf2 	bl	800be6c <VL53L0X_WrByte>
 8009288:	4603      	mov	r3, r0
 800928a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800928e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009292:	2b00      	cmp	r3, #0
 8009294:	d107      	bne.n	80092a6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009296:	2200      	movs	r2, #0
 8009298:	214f      	movs	r1, #79	; 0x4f
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f002 fde6 	bl	800be6c <VL53L0X_WrByte>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80092a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d107      	bne.n	80092be <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80092ae:	222c      	movs	r2, #44	; 0x2c
 80092b0:	214e      	movs	r1, #78	; 0x4e
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f002 fdda 	bl	800be6c <VL53L0X_WrByte>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80092be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d107      	bne.n	80092d6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80092c6:	2200      	movs	r2, #0
 80092c8:	21ff      	movs	r1, #255	; 0xff
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f002 fdce 	bl	800be6c <VL53L0X_WrByte>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80092d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80092de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092e2:	461a      	mov	r2, r3
 80092e4:	21b6      	movs	r1, #182	; 0xb6
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f002 fdc0 	bl	800be6c <VL53L0X_WrByte>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80092f2:	2300      	movs	r3, #0
 80092f4:	627b      	str	r3, [r7, #36]	; 0x24
 80092f6:	e009      	b.n	800930c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009302:	2200      	movs	r2, #0
 8009304:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	3301      	adds	r3, #1
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
 800930c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	429a      	cmp	r2, r3
 8009312:	d3f1      	bcc.n	80092f8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8009314:	79fb      	ldrb	r3, [r7, #7]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d011      	beq.n	800933e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800931a:	e002      	b.n	8009322 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	3301      	adds	r3, #1
 8009320:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009322:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009328:	4413      	add	r3, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fc2a 	bl	8008b84 <is_aperture>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d103      	bne.n	800933e <VL53L0X_set_reference_spads+0xe6>
 8009336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	429a      	cmp	r2, r3
 800933c:	d3ee      	bcc.n	800931c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800934a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800934e:	79f9      	ldrb	r1, [r7, #7]
 8009350:	f107 0214 	add.w	r2, r7, #20
 8009354:	9204      	str	r2, [sp, #16]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	9203      	str	r2, [sp, #12]
 800935a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800935c:	9202      	str	r2, [sp, #8]
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	4623      	mov	r3, r4
 8009366:	4602      	mov	r2, r0
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f7ff fc83 	bl	8008c74 <enable_ref_spads>
 800936e:	4603      	mov	r3, r0
 8009370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8009374:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10c      	bne.n	8009396 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	b2da      	uxtb	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	79fa      	ldrb	r2, [r7, #7]
 8009392:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8009396:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800939a:	4618      	mov	r0, r3
 800939c:	3734      	adds	r7, #52	; 0x34
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd90      	pop	{r4, r7, pc}

080093a2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	460b      	mov	r3, r1
 80093ac:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80093b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	f043 0301 	orr.w	r3, r3, #1
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	461a      	mov	r2, r3
 80093c4:	2100      	movs	r1, #0
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f002 fd50 	bl	800be6c <VL53L0X_WrByte>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80093d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d104      	bne.n	80093e2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f9bf 	bl	800975c <VL53L0X_measurement_poll_for_completion>
 80093de:	4603      	mov	r3, r0
 80093e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80093e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d105      	bne.n	80093f6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80093ea:	2100      	movs	r1, #0
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7ff fab5 	bl	800895c <VL53L0X_ClearInterruptMask>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80093f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d106      	bne.n	800940c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80093fe:	2200      	movs	r2, #0
 8009400:	2100      	movs	r1, #0
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f002 fd32 	bl	800be6c <VL53L0X_WrByte>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800940c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	4608      	mov	r0, r1
 8009422:	4611      	mov	r1, r2
 8009424:	461a      	mov	r2, r3
 8009426:	4603      	mov	r3, r0
 8009428:	70fb      	strb	r3, [r7, #3]
 800942a:	460b      	mov	r3, r1
 800942c:	70bb      	strb	r3, [r7, #2]
 800942e:	4613      	mov	r3, r2
 8009430:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800943a:	2201      	movs	r2, #1
 800943c:	21ff      	movs	r1, #255	; 0xff
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f002 fd14 	bl	800be6c <VL53L0X_WrByte>
 8009444:	4603      	mov	r3, r0
 8009446:	461a      	mov	r2, r3
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	4313      	orrs	r3, r2
 800944c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800944e:	2200      	movs	r2, #0
 8009450:	2100      	movs	r1, #0
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f002 fd0a 	bl	800be6c <VL53L0X_WrByte>
 8009458:	4603      	mov	r3, r0
 800945a:	461a      	mov	r2, r3
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	4313      	orrs	r3, r2
 8009460:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009462:	2200      	movs	r2, #0
 8009464:	21ff      	movs	r1, #255	; 0xff
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f002 fd00 	bl	800be6c <VL53L0X_WrByte>
 800946c:	4603      	mov	r3, r0
 800946e:	461a      	mov	r2, r3
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	4313      	orrs	r3, r2
 8009474:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009476:	78fb      	ldrb	r3, [r7, #3]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d01e      	beq.n	80094ba <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800947c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d009      	beq.n	8009498 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	21cb      	movs	r1, #203	; 0xcb
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f002 fd71 	bl	800bf70 <VL53L0X_RdByte>
 800948e:	4603      	mov	r3, r0
 8009490:	461a      	mov	r2, r3
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	4313      	orrs	r3, r2
 8009496:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009498:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800949c:	2b00      	cmp	r3, #0
 800949e:	d02a      	beq.n	80094f6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80094a0:	f107 030e 	add.w	r3, r7, #14
 80094a4:	461a      	mov	r2, r3
 80094a6:	21ee      	movs	r1, #238	; 0xee
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f002 fd61 	bl	800bf70 <VL53L0X_RdByte>
 80094ae:	4603      	mov	r3, r0
 80094b0:	461a      	mov	r2, r3
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	73fb      	strb	r3, [r7, #15]
 80094b8:	e01d      	b.n	80094f6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80094ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00a      	beq.n	80094d8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80094c2:	78bb      	ldrb	r3, [r7, #2]
 80094c4:	461a      	mov	r2, r3
 80094c6:	21cb      	movs	r1, #203	; 0xcb
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f002 fccf 	bl	800be6c <VL53L0X_WrByte>
 80094ce:	4603      	mov	r3, r0
 80094d0:	461a      	mov	r2, r3
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80094d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00a      	beq.n	80094f6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80094e0:	787b      	ldrb	r3, [r7, #1]
 80094e2:	2280      	movs	r2, #128	; 0x80
 80094e4:	21ee      	movs	r1, #238	; 0xee
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f002 fd0e 	bl	800bf08 <VL53L0X_UpdateByte>
 80094ec:	4603      	mov	r3, r0
 80094ee:	461a      	mov	r2, r3
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80094f6:	2201      	movs	r2, #1
 80094f8:	21ff      	movs	r1, #255	; 0xff
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f002 fcb6 	bl	800be6c <VL53L0X_WrByte>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4313      	orrs	r3, r2
 8009508:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800950a:	2201      	movs	r2, #1
 800950c:	2100      	movs	r1, #0
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f002 fcac 	bl	800be6c <VL53L0X_WrByte>
 8009514:	4603      	mov	r3, r0
 8009516:	461a      	mov	r2, r3
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	4313      	orrs	r3, r2
 800951c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800951e:	2200      	movs	r2, #0
 8009520:	21ff      	movs	r1, #255	; 0xff
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f002 fca2 	bl	800be6c <VL53L0X_WrByte>
 8009528:	4603      	mov	r3, r0
 800952a:	461a      	mov	r2, r3
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	4313      	orrs	r3, r2
 8009530:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	f023 0310 	bic.w	r3, r3, #16
 8009538:	b2da      	uxtb	r2, r3
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	701a      	strb	r2, [r3, #0]

	return Status;
 800953e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b08a      	sub	sp, #40	; 0x28
 800954e:	af04      	add	r7, sp, #16
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	4611      	mov	r1, r2
 8009556:	461a      	mov	r2, r3
 8009558:	460b      	mov	r3, r1
 800955a:	71fb      	strb	r3, [r7, #7]
 800955c:	4613      	mov	r3, r2
 800955e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009560:	2300      	movs	r3, #0
 8009562:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009568:	2300      	movs	r3, #0
 800956a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009574:	79bb      	ldrb	r3, [r7, #6]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009580:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009582:	2201      	movs	r2, #1
 8009584:	2101      	movs	r1, #1
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f002 fc70 	bl	800be6c <VL53L0X_WrByte>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009590:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d105      	bne.n	80095a4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009598:	2140      	movs	r1, #64	; 0x40
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7ff ff01 	bl	80093a2 <VL53L0X_perform_single_ref_calibration>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80095a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d115      	bne.n	80095d8 <VL53L0X_perform_vhv_calibration+0x8e>
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d112      	bne.n	80095d8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80095b2:	7d39      	ldrb	r1, [r7, #20]
 80095b4:	7d7a      	ldrb	r2, [r7, #21]
 80095b6:	2300      	movs	r3, #0
 80095b8:	9303      	str	r3, [sp, #12]
 80095ba:	2301      	movs	r3, #1
 80095bc:	9302      	str	r3, [sp, #8]
 80095be:	f107 0313 	add.w	r3, r7, #19
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	460b      	mov	r3, r1
 80095ca:	2101      	movs	r1, #1
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f7ff ff23 	bl	8009418 <VL53L0X_ref_calibration_io>
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]
 80095d6:	e002      	b.n	80095de <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80095de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d112      	bne.n	800960c <VL53L0X_perform_vhv_calibration+0xc2>
 80095e6:	79bb      	ldrb	r3, [r7, #6]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00f      	beq.n	800960c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80095ec:	7dbb      	ldrb	r3, [r7, #22]
 80095ee:	461a      	mov	r2, r3
 80095f0:	2101      	movs	r1, #1
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f002 fc3a 	bl	800be6c <VL53L0X_WrByte>
 80095f8:	4603      	mov	r3, r0
 80095fa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80095fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	7dba      	ldrb	r2, [r7, #22]
 8009608:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800960c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b08a      	sub	sp, #40	; 0x28
 800961c:	af04      	add	r7, sp, #16
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	4611      	mov	r1, r2
 8009624:	461a      	mov	r2, r3
 8009626:	460b      	mov	r3, r1
 8009628:	71fb      	strb	r3, [r7, #7]
 800962a:	4613      	mov	r3, r2
 800962c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800962e:	2300      	movs	r3, #0
 8009630:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800963e:	79bb      	ldrb	r3, [r7, #6]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d003      	beq.n	800964c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800964a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800964c:	2202      	movs	r2, #2
 800964e:	2101      	movs	r1, #1
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f002 fc0b 	bl	800be6c <VL53L0X_WrByte>
 8009656:	4603      	mov	r3, r0
 8009658:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800965a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d105      	bne.n	800966e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009662:	2100      	movs	r1, #0
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7ff fe9c 	bl	80093a2 <VL53L0X_perform_single_ref_calibration>
 800966a:	4603      	mov	r3, r0
 800966c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800966e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d115      	bne.n	80096a2 <VL53L0X_perform_phase_calibration+0x8a>
 8009676:	79fb      	ldrb	r3, [r7, #7]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d112      	bne.n	80096a2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800967c:	7d39      	ldrb	r1, [r7, #20]
 800967e:	7d7a      	ldrb	r2, [r7, #21]
 8009680:	2301      	movs	r3, #1
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	2300      	movs	r3, #0
 8009686:	9302      	str	r3, [sp, #8]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	f107 0313 	add.w	r3, r7, #19
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	460b      	mov	r3, r1
 8009694:	2101      	movs	r1, #1
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff febe 	bl	8009418 <VL53L0X_ref_calibration_io>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]
 80096a0:	e002      	b.n	80096a8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80096a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d112      	bne.n	80096d6 <VL53L0X_perform_phase_calibration+0xbe>
 80096b0:	79bb      	ldrb	r3, [r7, #6]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00f      	beq.n	80096d6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80096b6:	7dbb      	ldrb	r3, [r7, #22]
 80096b8:	461a      	mov	r2, r3
 80096ba:	2101      	movs	r1, #1
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f002 fbd5 	bl	800be6c <VL53L0X_WrByte>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80096c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d103      	bne.n	80096d6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	7dba      	ldrb	r2, [r7, #22]
 80096d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80096d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b086      	sub	sp, #24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	607a      	str	r2, [r7, #4]
 80096ee:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096f0:	2300      	movs	r3, #0
 80096f2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80096fe:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009700:	78fa      	ldrb	r2, [r7, #3]
 8009702:	2300      	movs	r3, #0
 8009704:	68b9      	ldr	r1, [r7, #8]
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f7ff ff1f 	bl	800954a <VL53L0X_perform_vhv_calibration>
 800970c:	4603      	mov	r3, r0
 800970e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009710:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d107      	bne.n	8009728 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009718:	78fa      	ldrb	r2, [r7, #3]
 800971a:	2300      	movs	r3, #0
 800971c:	6879      	ldr	r1, [r7, #4]
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f7ff ff7a 	bl	8009618 <VL53L0X_perform_phase_calibration>
 8009724:	4603      	mov	r3, r0
 8009726:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10f      	bne.n	8009750 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009730:	7dbb      	ldrb	r3, [r7, #22]
 8009732:	461a      	mov	r2, r3
 8009734:	2101      	movs	r1, #1
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f002 fb98 	bl	800be6c <VL53L0X_WrByte>
 800973c:	4603      	mov	r3, r0
 800973e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009740:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d103      	bne.n	8009750 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	7dba      	ldrb	r2, [r7, #22]
 800974c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009750:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009764:	2300      	movs	r3, #0
 8009766:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009770:	f107 030f 	add.w	r3, r7, #15
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7fe fe02 	bl	8008380 <VL53L0X_GetMeasurementDataReady>
 800977c:	4603      	mov	r3, r0
 800977e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d110      	bne.n	80097aa <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009788:	7bfb      	ldrb	r3, [r7, #15]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d00f      	beq.n	80097ae <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	3301      	adds	r3, #1
 8009792:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800979a:	d302      	bcc.n	80097a2 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800979c:	23f9      	movs	r3, #249	; 0xf9
 800979e:	75fb      	strb	r3, [r7, #23]
			break;
 80097a0:	e006      	b.n	80097b0 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f002 fc82 	bl	800c0ac <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80097a8:	e7e2      	b.n	8009770 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80097aa:	bf00      	nop
 80097ac:	e000      	b.n	80097b0 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80097ae:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80097b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	3301      	adds	r3, #1
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	005b      	lsls	r3, r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	4603      	mov	r3, r0
 80097ea:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	085b      	lsrs	r3, r3, #1
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009818:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800981a:	e002      	b.n	8009822 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	089b      	lsrs	r3, r3, #2
 8009820:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	429a      	cmp	r2, r3
 8009828:	d8f8      	bhi.n	800981c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800982a:	e017      	b.n	800985c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	4413      	add	r3, r2
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	429a      	cmp	r2, r3
 8009836:	d30b      	bcc.n	8009850 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	4413      	add	r3, r2
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	4413      	add	r3, r2
 800984c:	60fb      	str	r3, [r7, #12]
 800984e:	e002      	b.n	8009856 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	085b      	lsrs	r3, r3, #1
 8009854:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	089b      	lsrs	r3, r3, #2
 800985a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1e4      	bne.n	800982c <VL53L0X_isqrt+0x24>
	}

	return res;
 8009862:	68fb      	ldr	r3, [r7, #12]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009878:	2300      	movs	r3, #0
 800987a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800987c:	2200      	movs	r2, #0
 800987e:	2183      	movs	r1, #131	; 0x83
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f002 faf3 	bl	800be6c <VL53L0X_WrByte>
 8009886:	4603      	mov	r3, r0
 8009888:	461a      	mov	r2, r3
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	4313      	orrs	r3, r2
 800988e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d11e      	bne.n	80098d6 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009898:	2300      	movs	r3, #0
 800989a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800989c:	f107 030f 	add.w	r3, r7, #15
 80098a0:	461a      	mov	r2, r3
 80098a2:	2183      	movs	r1, #131	; 0x83
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f002 fb63 	bl	800bf70 <VL53L0X_RdByte>
 80098aa:	4603      	mov	r3, r0
 80098ac:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10a      	bne.n	80098ca <VL53L0X_device_read_strobe+0x5a>
 80098b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d106      	bne.n	80098ca <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3301      	adds	r3, #1
 80098c0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80098c8:	d3e8      	bcc.n	800989c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80098d0:	d301      	bcc.n	80098d6 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80098d2:	23f9      	movs	r3, #249	; 0xf9
 80098d4:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80098d6:	2201      	movs	r2, #1
 80098d8:	2183      	movs	r1, #131	; 0x83
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f002 fac6 	bl	800be6c <VL53L0X_WrByte>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80098ea:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b098      	sub	sp, #96	; 0x60
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009902:	2300      	movs	r3, #0
 8009904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009908:	2300      	movs	r3, #0
 800990a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009914:	2300      	movs	r3, #0
 8009916:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009926:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800992a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800993e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009942:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009946:	2b07      	cmp	r3, #7
 8009948:	f000 8408 	beq.w	800a15c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800994c:	2201      	movs	r2, #1
 800994e:	2180      	movs	r1, #128	; 0x80
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f002 fa8b 	bl	800be6c <VL53L0X_WrByte>
 8009956:	4603      	mov	r3, r0
 8009958:	461a      	mov	r2, r3
 800995a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800995e:	4313      	orrs	r3, r2
 8009960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009964:	2201      	movs	r2, #1
 8009966:	21ff      	movs	r1, #255	; 0xff
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f002 fa7f 	bl	800be6c <VL53L0X_WrByte>
 800996e:	4603      	mov	r3, r0
 8009970:	461a      	mov	r2, r3
 8009972:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009976:	4313      	orrs	r3, r2
 8009978:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800997c:	2200      	movs	r2, #0
 800997e:	2100      	movs	r1, #0
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f002 fa73 	bl	800be6c <VL53L0X_WrByte>
 8009986:	4603      	mov	r3, r0
 8009988:	461a      	mov	r2, r3
 800998a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800998e:	4313      	orrs	r3, r2
 8009990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009994:	2206      	movs	r2, #6
 8009996:	21ff      	movs	r1, #255	; 0xff
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f002 fa67 	bl	800be6c <VL53L0X_WrByte>
 800999e:	4603      	mov	r3, r0
 80099a0:	461a      	mov	r2, r3
 80099a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099a6:	4313      	orrs	r3, r2
 80099a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80099ac:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80099b0:	461a      	mov	r2, r3
 80099b2:	2183      	movs	r1, #131	; 0x83
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f002 fadb 	bl	800bf70 <VL53L0X_RdByte>
 80099ba:	4603      	mov	r3, r0
 80099bc:	461a      	mov	r2, r3
 80099be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099c2:	4313      	orrs	r3, r2
 80099c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80099c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099cc:	f043 0304 	orr.w	r3, r3, #4
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	461a      	mov	r2, r3
 80099d4:	2183      	movs	r1, #131	; 0x83
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f002 fa48 	bl	800be6c <VL53L0X_WrByte>
 80099dc:	4603      	mov	r3, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099e4:	4313      	orrs	r3, r2
 80099e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80099ea:	2207      	movs	r2, #7
 80099ec:	21ff      	movs	r1, #255	; 0xff
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f002 fa3c 	bl	800be6c <VL53L0X_WrByte>
 80099f4:	4603      	mov	r3, r0
 80099f6:	461a      	mov	r2, r3
 80099f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099fc:	4313      	orrs	r3, r2
 80099fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009a02:	2201      	movs	r2, #1
 8009a04:	2181      	movs	r1, #129	; 0x81
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f002 fa30 	bl	800be6c <VL53L0X_WrByte>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a14:	4313      	orrs	r3, r2
 8009a16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f002 fb46 	bl	800c0ac <VL53L0X_PollingDelay>
 8009a20:	4603      	mov	r3, r0
 8009a22:	461a      	mov	r2, r3
 8009a24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009a2e:	2201      	movs	r2, #1
 8009a30:	2180      	movs	r1, #128	; 0x80
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f002 fa1a 	bl	800be6c <VL53L0X_WrByte>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a40:	4313      	orrs	r3, r2
 8009a42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009a46:	78fb      	ldrb	r3, [r7, #3]
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 8098 	beq.w	8009b82 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009a52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a56:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f040 8091 	bne.w	8009b82 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009a60:	226b      	movs	r2, #107	; 0x6b
 8009a62:	2194      	movs	r1, #148	; 0x94
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f002 fa01 	bl	800be6c <VL53L0X_WrByte>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a72:	4313      	orrs	r3, r2
 8009a74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff fef9 	bl	8009870 <VL53L0X_device_read_strobe>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	461a      	mov	r2, r3
 8009a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a86:	4313      	orrs	r3, r2
 8009a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a90:	461a      	mov	r2, r3
 8009a92:	2190      	movs	r1, #144	; 0x90
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f002 facd 	bl	800c034 <VL53L0X_RdDWord>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	0a1b      	lsrs	r3, r3, #8
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	0bdb      	lsrs	r3, r3, #15
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009ac4:	2224      	movs	r2, #36	; 0x24
 8009ac6:	2194      	movs	r1, #148	; 0x94
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f002 f9cf 	bl	800be6c <VL53L0X_WrByte>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff fec7 	bl	8009870 <VL53L0X_device_read_strobe>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aea:	4313      	orrs	r3, r2
 8009aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009af0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009af4:	461a      	mov	r2, r3
 8009af6:	2190      	movs	r1, #144	; 0x90
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f002 fa9b 	bl	800c034 <VL53L0X_RdDWord>
 8009afe:	4603      	mov	r3, r0
 8009b00:	461a      	mov	r2, r3
 8009b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b06:	4313      	orrs	r3, r2
 8009b08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	0e1b      	lsrs	r3, r3, #24
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	0c1b      	lsrs	r3, r3, #16
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	0a1b      	lsrs	r3, r3, #8
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009b2a:	2225      	movs	r2, #37	; 0x25
 8009b2c:	2194      	movs	r1, #148	; 0x94
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f002 f99c 	bl	800be6c <VL53L0X_WrByte>
 8009b34:	4603      	mov	r3, r0
 8009b36:	461a      	mov	r2, r3
 8009b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff fe94 	bl	8009870 <VL53L0X_device_read_strobe>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b50:	4313      	orrs	r3, r2
 8009b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	2190      	movs	r1, #144	; 0x90
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f002 fa68 	bl	800c034 <VL53L0X_RdDWord>
 8009b64:	4603      	mov	r3, r0
 8009b66:	461a      	mov	r2, r3
 8009b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b74:	0e1b      	lsrs	r3, r3, #24
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	0c1b      	lsrs	r3, r3, #16
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009b82:	78fb      	ldrb	r3, [r7, #3]
 8009b84:	f003 0302 	and.w	r3, r3, #2
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 8189 	beq.w	8009ea0 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b92:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f040 8182 	bne.w	8009ea0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	2194      	movs	r1, #148	; 0x94
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f002 f963 	bl	800be6c <VL53L0X_WrByte>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fe5b 	bl	8009870 <VL53L0X_device_read_strobe>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009bc8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009bcc:	461a      	mov	r2, r3
 8009bce:	2190      	movs	r1, #144	; 0x90
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f002 f9cd 	bl	800bf70 <VL53L0X_RdByte>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	461a      	mov	r2, r3
 8009bda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bde:	4313      	orrs	r3, r2
 8009be0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009be4:	227b      	movs	r2, #123	; 0x7b
 8009be6:	2194      	movs	r1, #148	; 0x94
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f002 f93f 	bl	800be6c <VL53L0X_WrByte>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff fe37 	bl	8009870 <VL53L0X_device_read_strobe>
 8009c02:	4603      	mov	r3, r0
 8009c04:	461a      	mov	r2, r3
 8009c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009c10:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009c14:	461a      	mov	r2, r3
 8009c16:	2190      	movs	r1, #144	; 0x90
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f002 f9a9 	bl	800bf70 <VL53L0X_RdByte>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	461a      	mov	r2, r3
 8009c22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009c2c:	2277      	movs	r2, #119	; 0x77
 8009c2e:	2194      	movs	r1, #148	; 0x94
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f002 f91b 	bl	800be6c <VL53L0X_WrByte>
 8009c36:	4603      	mov	r3, r0
 8009c38:	461a      	mov	r2, r3
 8009c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff fe13 	bl	8009870 <VL53L0X_device_read_strobe>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c52:	4313      	orrs	r3, r2
 8009c54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	2190      	movs	r1, #144	; 0x90
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f002 f9e7 	bl	800c034 <VL53L0X_RdDWord>
 8009c66:	4603      	mov	r3, r0
 8009c68:	461a      	mov	r2, r3
 8009c6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	0e5b      	lsrs	r3, r3, #25
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	0c9b      	lsrs	r3, r3, #18
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c92:	0adb      	lsrs	r3, r3, #11
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	091b      	lsrs	r3, r3, #4
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009cbe:	2278      	movs	r2, #120	; 0x78
 8009cc0:	2194      	movs	r1, #148	; 0x94
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f002 f8d2 	bl	800be6c <VL53L0X_WrByte>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff fdca 	bl	8009870 <VL53L0X_device_read_strobe>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009cea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cee:	461a      	mov	r2, r3
 8009cf0:	2190      	movs	r1, #144	; 0x90
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f002 f99e 	bl	800c034 <VL53L0X_RdDWord>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d00:	4313      	orrs	r3, r2
 8009d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	0f5b      	lsrs	r3, r3, #29
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d10:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009d12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d16:	4413      	add	r3, r2
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	0d9b      	lsrs	r3, r3, #22
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	0bdb      	lsrs	r3, r3, #15
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	0a1b      	lsrs	r3, r3, #8
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d48:	085b      	lsrs	r3, r3, #1
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	019b      	lsls	r3, r3, #6
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009d66:	2279      	movs	r2, #121	; 0x79
 8009d68:	2194      	movs	r1, #148	; 0x94
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f002 f87e 	bl	800be6c <VL53L0X_WrByte>
 8009d70:	4603      	mov	r3, r0
 8009d72:	461a      	mov	r2, r3
 8009d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff fd76 	bl	8009870 <VL53L0X_device_read_strobe>
 8009d84:	4603      	mov	r3, r0
 8009d86:	461a      	mov	r2, r3
 8009d88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d96:	461a      	mov	r2, r3
 8009d98:	2190      	movs	r1, #144	; 0x90
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f002 f94a 	bl	800c034 <VL53L0X_RdDWord>
 8009da0:	4603      	mov	r3, r0
 8009da2:	461a      	mov	r2, r3
 8009da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009da8:	4313      	orrs	r3, r2
 8009daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	0e9b      	lsrs	r3, r3, #26
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009db8:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009dba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dbe:	4413      	add	r3, r2
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc6:	0cdb      	lsrs	r3, r3, #19
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	0b1b      	lsrs	r3, r3, #12
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	095b      	lsrs	r3, r3, #5
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009e00:	227a      	movs	r2, #122	; 0x7a
 8009e02:	2194      	movs	r1, #148	; 0x94
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f002 f831 	bl	800be6c <VL53L0X_WrByte>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e12:	4313      	orrs	r3, r2
 8009e14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7ff fd29 	bl	8009870 <VL53L0X_device_read_strobe>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	461a      	mov	r2, r3
 8009e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e26:	4313      	orrs	r3, r2
 8009e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e30:	461a      	mov	r2, r3
 8009e32:	2190      	movs	r1, #144	; 0x90
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f002 f8fd 	bl	800c034 <VL53L0X_RdDWord>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e42:	4313      	orrs	r3, r2
 8009e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8009e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4a:	0f9b      	lsrs	r3, r3, #30
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e52:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009e54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e58:	4413      	add	r3, r2
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	0ddb      	lsrs	r3, r3, #23
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	0c1b      	lsrs	r3, r3, #16
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7c:	0a5b      	lsrs	r3, r3, #9
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	089b      	lsrs	r3, r3, #2
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009ea0:	78fb      	ldrb	r3, [r7, #3]
 8009ea2:	f003 0304 	and.w	r3, r3, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 80f1 	beq.w	800a08e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009eac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009eb0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f040 80ea 	bne.w	800a08e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009eba:	227b      	movs	r2, #123	; 0x7b
 8009ebc:	2194      	movs	r1, #148	; 0x94
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f001 ffd4 	bl	800be6c <VL53L0X_WrByte>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff fccc 	bl	8009870 <VL53L0X_device_read_strobe>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461a      	mov	r2, r3
 8009edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009eea:	461a      	mov	r2, r3
 8009eec:	2190      	movs	r1, #144	; 0x90
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f002 f8a0 	bl	800c034 <VL53L0X_RdDWord>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009efc:	4313      	orrs	r3, r2
 8009efe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009f02:	227c      	movs	r2, #124	; 0x7c
 8009f04:	2194      	movs	r1, #148	; 0x94
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f001 ffb0 	bl	800be6c <VL53L0X_WrByte>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	461a      	mov	r2, r3
 8009f10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f14:	4313      	orrs	r3, r2
 8009f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7ff fca8 	bl	8009870 <VL53L0X_device_read_strobe>
 8009f20:	4603      	mov	r3, r0
 8009f22:	461a      	mov	r2, r3
 8009f24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f32:	461a      	mov	r2, r3
 8009f34:	2190      	movs	r1, #144	; 0x90
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f002 f87c 	bl	800c034 <VL53L0X_RdDWord>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	461a      	mov	r2, r3
 8009f40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f44:	4313      	orrs	r3, r2
 8009f46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009f4a:	2273      	movs	r2, #115	; 0x73
 8009f4c:	2194      	movs	r1, #148	; 0x94
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 ff8c 	bl	800be6c <VL53L0X_WrByte>
 8009f54:	4603      	mov	r3, r0
 8009f56:	461a      	mov	r2, r3
 8009f58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7ff fc84 	bl	8009870 <VL53L0X_device_read_strobe>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f70:	4313      	orrs	r3, r2
 8009f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009f76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	2190      	movs	r1, #144	; 0x90
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f002 f858 	bl	800c034 <VL53L0X_RdDWord>
 8009f84:	4603      	mov	r3, r0
 8009f86:	461a      	mov	r2, r3
 8009f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009f9a:	2274      	movs	r2, #116	; 0x74
 8009f9c:	2194      	movs	r1, #148	; 0x94
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 ff64 	bl	800be6c <VL53L0X_WrByte>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fac:	4313      	orrs	r3, r2
 8009fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff fc5c 	bl	8009870 <VL53L0X_device_read_strobe>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009fc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009fca:	461a      	mov	r2, r3
 8009fcc:	2190      	movs	r1, #144	; 0x90
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f002 f830 	bl	800c034 <VL53L0X_RdDWord>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009fe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009fec:	2275      	movs	r2, #117	; 0x75
 8009fee:	2194      	movs	r1, #148	; 0x94
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 ff3b 	bl	800be6c <VL53L0X_WrByte>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ffe:	4313      	orrs	r3, r2
 800a000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff fc33 	bl	8009870 <VL53L0X_device_read_strobe>
 800a00a:	4603      	mov	r3, r0
 800a00c:	461a      	mov	r2, r3
 800a00e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a012:	4313      	orrs	r3, r2
 800a014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a01c:	461a      	mov	r2, r3
 800a01e:	2190      	movs	r1, #144	; 0x90
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f002 f807 	bl	800c034 <VL53L0X_RdDWord>
 800a026:	4603      	mov	r3, r0
 800a028:	461a      	mov	r2, r3
 800a02a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a02e:	4313      	orrs	r3, r2
 800a030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800a038:	b29b      	uxth	r3, r3
 800a03a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a03c:	2276      	movs	r2, #118	; 0x76
 800a03e:	2194      	movs	r1, #148	; 0x94
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f001 ff13 	bl	800be6c <VL53L0X_WrByte>
 800a046:	4603      	mov	r3, r0
 800a048:	461a      	mov	r2, r3
 800a04a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a04e:	4313      	orrs	r3, r2
 800a050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff fc0b 	bl	8009870 <VL53L0X_device_read_strobe>
 800a05a:	4603      	mov	r3, r0
 800a05c:	461a      	mov	r2, r3
 800a05e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a062:	4313      	orrs	r3, r2
 800a064:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a06c:	461a      	mov	r2, r3
 800a06e:	2190      	movs	r1, #144	; 0x90
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 ffdf 	bl	800c034 <VL53L0X_RdDWord>
 800a076:	4603      	mov	r3, r0
 800a078:	461a      	mov	r2, r3
 800a07a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a07e:	4313      	orrs	r3, r2
 800a080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a086:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a08a:	4313      	orrs	r3, r2
 800a08c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a08e:	2200      	movs	r2, #0
 800a090:	2181      	movs	r1, #129	; 0x81
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 feea 	bl	800be6c <VL53L0X_WrByte>
 800a098:	4603      	mov	r3, r0
 800a09a:	461a      	mov	r2, r3
 800a09c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a0a6:	2206      	movs	r2, #6
 800a0a8:	21ff      	movs	r1, #255	; 0xff
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f001 fede 	bl	800be6c <VL53L0X_WrByte>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a0be:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	2183      	movs	r1, #131	; 0x83
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 ff52 	bl	800bf70 <VL53L0X_RdByte>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a0da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0de:	f023 0304 	bic.w	r3, r3, #4
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	2183      	movs	r1, #131	; 0x83
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f001 febf 	bl	800be6c <VL53L0X_WrByte>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	21ff      	movs	r1, #255	; 0xff
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f001 feb3 	bl	800be6c <VL53L0X_WrByte>
 800a106:	4603      	mov	r3, r0
 800a108:	461a      	mov	r2, r3
 800a10a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a10e:	4313      	orrs	r3, r2
 800a110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a114:	2201      	movs	r2, #1
 800a116:	2100      	movs	r1, #0
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 fea7 	bl	800be6c <VL53L0X_WrByte>
 800a11e:	4603      	mov	r3, r0
 800a120:	461a      	mov	r2, r3
 800a122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a126:	4313      	orrs	r3, r2
 800a128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a12c:	2200      	movs	r2, #0
 800a12e:	21ff      	movs	r1, #255	; 0xff
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 fe9b 	bl	800be6c <VL53L0X_WrByte>
 800a136:	4603      	mov	r3, r0
 800a138:	461a      	mov	r2, r3
 800a13a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a13e:	4313      	orrs	r3, r2
 800a140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a144:	2200      	movs	r2, #0
 800a146:	2180      	movs	r1, #128	; 0x80
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f001 fe8f 	bl	800be6c <VL53L0X_WrByte>
 800a14e:	4603      	mov	r3, r0
 800a150:	461a      	mov	r2, r3
 800a152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a156:	4313      	orrs	r3, r2
 800a158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a15c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a160:	2b00      	cmp	r3, #0
 800a162:	f040 808f 	bne.w	800a284 <VL53L0X_get_info_from_device+0x98e>
 800a166:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a16a:	2b07      	cmp	r3, #7
 800a16c:	f000 808a 	beq.w	800a284 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d024      	beq.n	800a1c4 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a17a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a17e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a182:	2b00      	cmp	r3, #0
 800a184:	d11e      	bne.n	800a1c4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a18c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a196:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a19a:	2300      	movs	r3, #0
 800a19c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a19e:	e00e      	b.n	800a1be <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a1a0:	f107 0208 	add.w	r2, r7, #8
 800a1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a6:	4413      	add	r3, r2
 800a1a8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a1b4:	460a      	mov	r2, r1
 800a1b6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c0:	2b05      	cmp	r3, #5
 800a1c2:	dded      	ble.n	800a1a0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a1c4:	78fb      	ldrb	r3, [r7, #3]
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d018      	beq.n	800a200 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a1ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a1d2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d112      	bne.n	800a200 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1e4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	33f3      	adds	r3, #243	; 0xf3
 800a1f2:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a1f4:	f107 0310 	add.w	r3, r7, #16
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1fc:	f002 fe46 	bl	800ce8c <strcpy>

		}

		if (((option & 4) == 4) &&
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b00      	cmp	r3, #0
 800a208:	d030      	beq.n	800a26c <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a20a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a20e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a212:	2b00      	cmp	r3, #0
 800a214:	d12a      	bne.n	800a26c <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a21e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a228:	025b      	lsls	r3, r3, #9
 800a22a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a230:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a23a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d011      	beq.n	800a264 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800a240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a24a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a24e:	fb02 f303 	mul.w	r3, r2, r3
 800a252:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a254:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800a258:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a25c:	425b      	negs	r3, r3
 800a25e:	b29b      	uxth	r3, r3
 800a260:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a264:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a26c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	4313      	orrs	r3, r2
 800a274:	b2db      	uxtb	r3, r3
 800a276:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a27a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a284:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3760      	adds	r7, #96	; 0x60
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a29c:	f240 6277 	movw	r2, #1655	; 0x677
 800a2a0:	f04f 0300 	mov.w	r3, #0
 800a2a4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a2a8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a2ac:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	fb02 f303 	mul.w	r3, r2, r3
 800a2bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a2be:	68bb      	ldr	r3, [r7, #8]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d017      	beq.n	800a316 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a2ec:	e005      	b.n	800a2fa <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	085b      	lsrs	r3, r3, #1
 800a2f2:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a2f4:	89fb      	ldrh	r3, [r7, #14]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1f4      	bne.n	800a2ee <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a304:	89fb      	ldrh	r3, [r7, #14]
 800a306:	021b      	lsls	r3, r3, #8
 800a308:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a312:	4413      	add	r3, r2
 800a314:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a316:	8afb      	ldrh	r3, [r7, #22]

}
 800a318:	4618      	mov	r0, r3
 800a31a:	371c      	adds	r7, #28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	4603      	mov	r3, r0
 800a32c:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a332:	88fb      	ldrh	r3, [r7, #6]
 800a334:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a336:	88fa      	ldrh	r2, [r7, #6]
 800a338:	0a12      	lsrs	r2, r2, #8
 800a33a:	b292      	uxth	r2, r2
 800a33c:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a33e:	3301      	adds	r3, #1
 800a340:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	4613      	mov	r3, r2
 800a35c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a362:	79fb      	ldrb	r3, [r7, #7]
 800a364:	4619      	mov	r1, r3
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f7ff ff92 	bl	800a290 <VL53L0X_calc_macro_period_ps>
 800a36c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a374:	4a0a      	ldr	r2, [pc, #40]	; (800a3a0 <VL53L0X_calc_timeout_mclks+0x50>)
 800a376:	fba2 2303 	umull	r2, r3, r2, r3
 800a37a:	099b      	lsrs	r3, r3, #6
 800a37c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a384:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	085b      	lsrs	r3, r3, #1
 800a38c:	441a      	add	r2, r3
	timeout_period_mclks =
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	fbb2 f3f3 	udiv	r3, r2, r3
 800a394:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800a396:	69fb      	ldr	r3, [r7, #28]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3720      	adds	r7, #32
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	10624dd3 	.word	0x10624dd3

0800a3a4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	807b      	strh	r3, [r7, #2]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a3b8:	787b      	ldrb	r3, [r7, #1]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff ff67 	bl	800a290 <VL53L0X_calc_macro_period_ps>
 800a3c2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a3ca:	4a0a      	ldr	r2, [pc, #40]	; (800a3f4 <VL53L0X_calc_timeout_us+0x50>)
 800a3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d0:	099b      	lsrs	r3, r3, #6
 800a3d2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a3d4:	887b      	ldrh	r3, [r7, #2]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	fb02 f303 	mul.w	r3, r2, r3
 800a3dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a3e0:	4a04      	ldr	r2, [pc, #16]	; (800a3f4 <VL53L0X_calc_timeout_us+0x50>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	099b      	lsrs	r3, r3, #6
 800a3e8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a3ea:	697b      	ldr	r3, [r7, #20]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	10624dd3 	.word	0x10624dd3

0800a3f8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08c      	sub	sp, #48	; 0x30
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	460b      	mov	r3, r1
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a406:	2300      	movs	r3, #0
 800a408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a41e:	7afb      	ldrb	r3, [r7, #11]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <get_sequence_step_timeout+0x38>
 800a424:	7afb      	ldrb	r3, [r7, #11]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d002      	beq.n	800a430 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a42a:	7afb      	ldrb	r3, [r7, #11]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d128      	bne.n	800a482 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a430:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a434:	461a      	mov	r2, r3
 800a436:	2100      	movs	r1, #0
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7fd fa7d 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 800a43e:	4603      	mov	r3, r0
 800a440:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a444:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d109      	bne.n	800a460 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a44c:	f107 0320 	add.w	r3, r7, #32
 800a450:	461a      	mov	r2, r3
 800a452:	2146      	movs	r1, #70	; 0x46
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f001 fd8b 	bl	800bf70 <VL53L0X_RdByte>
 800a45a:	4603      	mov	r3, r0
 800a45c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a460:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a464:	b29b      	uxth	r3, r3
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff ff5c 	bl	800a324 <VL53L0X_decode_timeout>
 800a46c:	4603      	mov	r3, r0
 800a46e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a470:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a474:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a476:	4619      	mov	r1, r3
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f7ff ff93 	bl	800a3a4 <VL53L0X_calc_timeout_us>
 800a47e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a480:	e092      	b.n	800a5a8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a482:	7afb      	ldrb	r3, [r7, #11]
 800a484:	2b03      	cmp	r3, #3
 800a486:	d135      	bne.n	800a4f4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a488:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a48c:	461a      	mov	r2, r3
 800a48e:	2100      	movs	r1, #0
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7fd fa51 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 800a496:	4603      	mov	r3, r0
 800a498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a49c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f040 8081 	bne.w	800a5a8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a4a6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f7fd fa42 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a4ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d109      	bne.n	800a4d6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a4c2:	f107 031e 	add.w	r3, r7, #30
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	2151      	movs	r1, #81	; 0x51
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f001 fd7a 	bl	800bfc4 <VL53L0X_RdWord>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a4d6:	8bfb      	ldrh	r3, [r7, #30]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff ff23 	bl	800a324 <VL53L0X_decode_timeout>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a4e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a4e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f7ff ff5a 	bl	800a3a4 <VL53L0X_calc_timeout_us>
 800a4f0:	62b8      	str	r0, [r7, #40]	; 0x28
 800a4f2:	e059      	b.n	800a5a8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d156      	bne.n	800a5a8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a4fa:	f107 0314 	add.w	r3, r7, #20
 800a4fe:	4619      	mov	r1, r3
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7fd fb25 	bl	8007b50 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01d      	beq.n	800a54c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a510:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a514:	461a      	mov	r2, r3
 800a516:	2100      	movs	r1, #0
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f7fd fa0d 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 800a51e:	4603      	mov	r3, r0
 800a520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a524:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10f      	bne.n	800a54c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a52c:	f107 031e 	add.w	r3, r7, #30
 800a530:	461a      	mov	r2, r3
 800a532:	2151      	movs	r1, #81	; 0x51
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f001 fd45 	bl	800bfc4 <VL53L0X_RdWord>
 800a53a:	4603      	mov	r3, r0
 800a53c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a540:	8bfb      	ldrh	r3, [r7, #30]
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff feee 	bl	800a324 <VL53L0X_decode_timeout>
 800a548:	4603      	mov	r3, r0
 800a54a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a54c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a550:	2b00      	cmp	r3, #0
 800a552:	d109      	bne.n	800a568 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a554:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a558:	461a      	mov	r2, r3
 800a55a:	2101      	movs	r1, #1
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f7fd f9eb 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 800a562:	4603      	mov	r3, r0
 800a564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a568:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10f      	bne.n	800a590 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a570:	f107 031c 	add.w	r3, r7, #28
 800a574:	461a      	mov	r2, r3
 800a576:	2171      	movs	r1, #113	; 0x71
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f001 fd23 	bl	800bfc4 <VL53L0X_RdWord>
 800a57e:	4603      	mov	r3, r0
 800a580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a584:	8bbb      	ldrh	r3, [r7, #28]
 800a586:	4618      	mov	r0, r3
 800a588:	f7ff fecc 	bl	800a324 <VL53L0X_decode_timeout>
 800a58c:	4603      	mov	r3, r0
 800a58e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a590:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a592:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a598:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a59c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a59e:	4619      	mov	r1, r3
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7ff feff 	bl	800a3a4 <VL53L0X_calc_timeout_us>
 800a5a6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ac:	601a      	str	r2, [r3, #0]

	return Status;
 800a5ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3730      	adds	r7, #48	; 0x30
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b08a      	sub	sp, #40	; 0x28
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	60f8      	str	r0, [r7, #12]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	607a      	str	r2, [r7, #4]
 800a5c6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a5ce:	7afb      	ldrb	r3, [r7, #11]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d005      	beq.n	800a5e0 <set_sequence_step_timeout+0x26>
 800a5d4:	7afb      	ldrb	r3, [r7, #11]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d002      	beq.n	800a5e0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a5da:	7afb      	ldrb	r3, [r7, #11]
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d138      	bne.n	800a652 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a5e0:	f107 031b 	add.w	r3, r7, #27
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f7fd f9a5 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a5f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d11a      	bne.n	800a632 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a5fc:	7efb      	ldrb	r3, [r7, #27]
 800a5fe:	461a      	mov	r2, r3
 800a600:	6879      	ldr	r1, [r7, #4]
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f7ff fea4 	bl	800a350 <VL53L0X_calc_timeout_mclks>
 800a608:	4603      	mov	r3, r0
 800a60a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a60c:	8bbb      	ldrh	r3, [r7, #28]
 800a60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a612:	d903      	bls.n	800a61c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a614:	23ff      	movs	r3, #255	; 0xff
 800a616:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a61a:	e004      	b.n	800a626 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a61c:	8bbb      	ldrh	r3, [r7, #28]
 800a61e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a620:	3b01      	subs	r3, #1
 800a622:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a626:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a632:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a636:	2b00      	cmp	r3, #0
 800a638:	f040 80ab 	bne.w	800a792 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a63c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a640:	461a      	mov	r2, r3
 800a642:	2146      	movs	r1, #70	; 0x46
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f001 fc11 	bl	800be6c <VL53L0X_WrByte>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a650:	e09f      	b.n	800a792 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a652:	7afb      	ldrb	r3, [r7, #11]
 800a654:	2b03      	cmp	r3, #3
 800a656:	d135      	bne.n	800a6c4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d11b      	bne.n	800a698 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a660:	f107 031b 	add.w	r3, r7, #27
 800a664:	461a      	mov	r2, r3
 800a666:	2100      	movs	r1, #0
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f7fd f965 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 800a66e:	4603      	mov	r3, r0
 800a670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a674:	7efb      	ldrb	r3, [r7, #27]
 800a676:	461a      	mov	r2, r3
 800a678:	6879      	ldr	r1, [r7, #4]
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7ff fe68 	bl	800a350 <VL53L0X_calc_timeout_mclks>
 800a680:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a682:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff fe20 	bl	800a2cc <VL53L0X_encode_timeout>
 800a68c:	4603      	mov	r3, r0
 800a68e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a690:	8b3a      	ldrh	r2, [r7, #24]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a698:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d108      	bne.n	800a6b2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a6a0:	8b3b      	ldrh	r3, [r7, #24]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	2151      	movs	r1, #81	; 0x51
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f001 fc04 	bl	800beb4 <VL53L0X_WrWord>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a6b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d16b      	bne.n	800a792 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a6c2:	e066      	b.n	800a792 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a6c4:	7afb      	ldrb	r3, [r7, #11]
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	d160      	bne.n	800a78c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a6ca:	f107 0310 	add.w	r3, r7, #16
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7fd fa3d 	bl	8007b50 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a6da:	7cfb      	ldrb	r3, [r7, #19]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d01d      	beq.n	800a71c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a6e0:	f107 031b 	add.w	r3, r7, #27
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f7fd f925 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a6f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10f      	bne.n	800a71c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a6fc:	f107 0318 	add.w	r3, r7, #24
 800a700:	461a      	mov	r2, r3
 800a702:	2151      	movs	r1, #81	; 0x51
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f001 fc5d 	bl	800bfc4 <VL53L0X_RdWord>
 800a70a:	4603      	mov	r3, r0
 800a70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a710:	8b3b      	ldrh	r3, [r7, #24]
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff fe06 	bl	800a324 <VL53L0X_decode_timeout>
 800a718:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a71a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a71c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a720:	2b00      	cmp	r3, #0
 800a722:	d109      	bne.n	800a738 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a724:	f107 031b 	add.w	r3, r7, #27
 800a728:	461a      	mov	r2, r3
 800a72a:	2101      	movs	r1, #1
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7fd f903 	bl	8007938 <VL53L0X_GetVcselPulsePeriod>
 800a732:	4603      	mov	r3, r0
 800a734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a738:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d128      	bne.n	800a792 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a740:	7efb      	ldrb	r3, [r7, #27]
 800a742:	461a      	mov	r2, r3
 800a744:	6879      	ldr	r1, [r7, #4]
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f7ff fe02 	bl	800a350 <VL53L0X_calc_timeout_mclks>
 800a74c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a74e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a750:	6a3a      	ldr	r2, [r7, #32]
 800a752:	4413      	add	r3, r2
 800a754:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a756:	6a38      	ldr	r0, [r7, #32]
 800a758:	f7ff fdb8 	bl	800a2cc <VL53L0X_encode_timeout>
 800a75c:	4603      	mov	r3, r0
 800a75e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a760:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a764:	2b00      	cmp	r3, #0
 800a766:	d108      	bne.n	800a77a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a768:	8bfb      	ldrh	r3, [r7, #30]
 800a76a:	461a      	mov	r2, r3
 800a76c:	2171      	movs	r1, #113	; 0x71
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f001 fba0 	bl	800beb4 <VL53L0X_WrWord>
 800a774:	4603      	mov	r3, r0
 800a776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a77a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d107      	bne.n	800a792 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a78a:	e002      	b.n	800a792 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a78c:	23fc      	movs	r3, #252	; 0xfc
 800a78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a792:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a796:	4618      	mov	r0, r3
 800a798:	3728      	adds	r7, #40	; 0x28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b08a      	sub	sp, #40	; 0x28
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	70fb      	strb	r3, [r7, #3]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a7b4:	230c      	movs	r3, #12
 800a7b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a7ba:	2312      	movs	r3, #18
 800a7bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a7c0:	2308      	movs	r3, #8
 800a7c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a7c6:	230e      	movs	r3, #14
 800a7c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a7d0:	78bb      	ldrb	r3, [r7, #2]
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7dc:	23fc      	movs	r3, #252	; 0xfc
 800a7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7e2:	e020      	b.n	800a826 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10d      	bne.n	800a806 <VL53L0X_set_vcsel_pulse_period+0x68>
 800a7ea:	78ba      	ldrb	r2, [r7, #2]
 800a7ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d304      	bcc.n	800a7fe <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a7f4:	78ba      	ldrb	r2, [r7, #2]
 800a7f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d903      	bls.n	800a806 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7fe:	23fc      	movs	r3, #252	; 0xfc
 800a800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a804:	e00f      	b.n	800a826 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a806:	78fb      	ldrb	r3, [r7, #3]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d10c      	bne.n	800a826 <VL53L0X_set_vcsel_pulse_period+0x88>
 800a80c:	78ba      	ldrb	r2, [r7, #2]
 800a80e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a812:	429a      	cmp	r2, r3
 800a814:	d304      	bcc.n	800a820 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a816:	78ba      	ldrb	r2, [r7, #2]
 800a818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d902      	bls.n	800a826 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a820:	23fc      	movs	r3, #252	; 0xfc
 800a822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a826:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a82e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a832:	e239      	b.n	800aca8 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a834:	78fb      	ldrb	r3, [r7, #3]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d150      	bne.n	800a8dc <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a83a:	78bb      	ldrb	r3, [r7, #2]
 800a83c:	2b0c      	cmp	r3, #12
 800a83e:	d110      	bne.n	800a862 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a840:	2218      	movs	r2, #24
 800a842:	2157      	movs	r1, #87	; 0x57
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 fb11 	bl	800be6c <VL53L0X_WrByte>
 800a84a:	4603      	mov	r3, r0
 800a84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a850:	2208      	movs	r2, #8
 800a852:	2156      	movs	r1, #86	; 0x56
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f001 fb09 	bl	800be6c <VL53L0X_WrByte>
 800a85a:	4603      	mov	r3, r0
 800a85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a860:	e17f      	b.n	800ab62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a862:	78bb      	ldrb	r3, [r7, #2]
 800a864:	2b0e      	cmp	r3, #14
 800a866:	d110      	bne.n	800a88a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a868:	2230      	movs	r2, #48	; 0x30
 800a86a:	2157      	movs	r1, #87	; 0x57
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f001 fafd 	bl	800be6c <VL53L0X_WrByte>
 800a872:	4603      	mov	r3, r0
 800a874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a878:	2208      	movs	r2, #8
 800a87a:	2156      	movs	r1, #86	; 0x56
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f001 faf5 	bl	800be6c <VL53L0X_WrByte>
 800a882:	4603      	mov	r3, r0
 800a884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a888:	e16b      	b.n	800ab62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a88a:	78bb      	ldrb	r3, [r7, #2]
 800a88c:	2b10      	cmp	r3, #16
 800a88e:	d110      	bne.n	800a8b2 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a890:	2240      	movs	r2, #64	; 0x40
 800a892:	2157      	movs	r1, #87	; 0x57
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f001 fae9 	bl	800be6c <VL53L0X_WrByte>
 800a89a:	4603      	mov	r3, r0
 800a89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a8a0:	2208      	movs	r2, #8
 800a8a2:	2156      	movs	r1, #86	; 0x56
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f001 fae1 	bl	800be6c <VL53L0X_WrByte>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8b0:	e157      	b.n	800ab62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a8b2:	78bb      	ldrb	r3, [r7, #2]
 800a8b4:	2b12      	cmp	r3, #18
 800a8b6:	f040 8154 	bne.w	800ab62 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a8ba:	2250      	movs	r2, #80	; 0x50
 800a8bc:	2157      	movs	r1, #87	; 0x57
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f001 fad4 	bl	800be6c <VL53L0X_WrByte>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a8ca:	2208      	movs	r2, #8
 800a8cc:	2156      	movs	r1, #86	; 0x56
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f001 facc 	bl	800be6c <VL53L0X_WrByte>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8da:	e142      	b.n	800ab62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	f040 813f 	bne.w	800ab62 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a8e4:	78bb      	ldrb	r3, [r7, #2]
 800a8e6:	2b08      	cmp	r3, #8
 800a8e8:	d14c      	bne.n	800a984 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a8ea:	2210      	movs	r2, #16
 800a8ec:	2148      	movs	r1, #72	; 0x48
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f001 fabc 	bl	800be6c <VL53L0X_WrByte>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a8fa:	2208      	movs	r2, #8
 800a8fc:	2147      	movs	r1, #71	; 0x47
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f001 fab4 	bl	800be6c <VL53L0X_WrByte>
 800a904:	4603      	mov	r3, r0
 800a906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a90a:	2202      	movs	r2, #2
 800a90c:	2132      	movs	r1, #50	; 0x32
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 faac 	bl	800be6c <VL53L0X_WrByte>
 800a914:	4603      	mov	r3, r0
 800a916:	461a      	mov	r2, r3
 800a918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a91c:	4313      	orrs	r3, r2
 800a91e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a922:	220c      	movs	r2, #12
 800a924:	2130      	movs	r1, #48	; 0x30
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f001 faa0 	bl	800be6c <VL53L0X_WrByte>
 800a92c:	4603      	mov	r3, r0
 800a92e:	461a      	mov	r2, r3
 800a930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a934:	4313      	orrs	r3, r2
 800a936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a93a:	2201      	movs	r2, #1
 800a93c:	21ff      	movs	r1, #255	; 0xff
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f001 fa94 	bl	800be6c <VL53L0X_WrByte>
 800a944:	4603      	mov	r3, r0
 800a946:	461a      	mov	r2, r3
 800a948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a94c:	4313      	orrs	r3, r2
 800a94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a952:	2230      	movs	r2, #48	; 0x30
 800a954:	2130      	movs	r1, #48	; 0x30
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f001 fa88 	bl	800be6c <VL53L0X_WrByte>
 800a95c:	4603      	mov	r3, r0
 800a95e:	461a      	mov	r2, r3
 800a960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a964:	4313      	orrs	r3, r2
 800a966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a96a:	2200      	movs	r2, #0
 800a96c:	21ff      	movs	r1, #255	; 0xff
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f001 fa7c 	bl	800be6c <VL53L0X_WrByte>
 800a974:	4603      	mov	r3, r0
 800a976:	461a      	mov	r2, r3
 800a978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a97c:	4313      	orrs	r3, r2
 800a97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a982:	e0ee      	b.n	800ab62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a984:	78bb      	ldrb	r3, [r7, #2]
 800a986:	2b0a      	cmp	r3, #10
 800a988:	d14c      	bne.n	800aa24 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a98a:	2228      	movs	r2, #40	; 0x28
 800a98c:	2148      	movs	r1, #72	; 0x48
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f001 fa6c 	bl	800be6c <VL53L0X_WrByte>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a99a:	2208      	movs	r2, #8
 800a99c:	2147      	movs	r1, #71	; 0x47
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f001 fa64 	bl	800be6c <VL53L0X_WrByte>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a9aa:	2203      	movs	r2, #3
 800a9ac:	2132      	movs	r1, #50	; 0x32
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 fa5c 	bl	800be6c <VL53L0X_WrByte>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a9c2:	2209      	movs	r2, #9
 800a9c4:	2130      	movs	r1, #48	; 0x30
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f001 fa50 	bl	800be6c <VL53L0X_WrByte>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a9da:	2201      	movs	r2, #1
 800a9dc:	21ff      	movs	r1, #255	; 0xff
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f001 fa44 	bl	800be6c <VL53L0X_WrByte>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a9f2:	2220      	movs	r2, #32
 800a9f4:	2130      	movs	r1, #48	; 0x30
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f001 fa38 	bl	800be6c <VL53L0X_WrByte>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa04:	4313      	orrs	r3, r2
 800aa06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	21ff      	movs	r1, #255	; 0xff
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 fa2c 	bl	800be6c <VL53L0X_WrByte>
 800aa14:	4603      	mov	r3, r0
 800aa16:	461a      	mov	r2, r3
 800aa18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa22:	e09e      	b.n	800ab62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800aa24:	78bb      	ldrb	r3, [r7, #2]
 800aa26:	2b0c      	cmp	r3, #12
 800aa28:	d14c      	bne.n	800aac4 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800aa2a:	2238      	movs	r2, #56	; 0x38
 800aa2c:	2148      	movs	r1, #72	; 0x48
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 fa1c 	bl	800be6c <VL53L0X_WrByte>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800aa3a:	2208      	movs	r2, #8
 800aa3c:	2147      	movs	r1, #71	; 0x47
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f001 fa14 	bl	800be6c <VL53L0X_WrByte>
 800aa44:	4603      	mov	r3, r0
 800aa46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800aa4a:	2203      	movs	r2, #3
 800aa4c:	2132      	movs	r1, #50	; 0x32
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 fa0c 	bl	800be6c <VL53L0X_WrByte>
 800aa54:	4603      	mov	r3, r0
 800aa56:	461a      	mov	r2, r3
 800aa58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800aa62:	2208      	movs	r2, #8
 800aa64:	2130      	movs	r1, #48	; 0x30
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f001 fa00 	bl	800be6c <VL53L0X_WrByte>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa74:	4313      	orrs	r3, r2
 800aa76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	21ff      	movs	r1, #255	; 0xff
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f001 f9f4 	bl	800be6c <VL53L0X_WrByte>
 800aa84:	4603      	mov	r3, r0
 800aa86:	461a      	mov	r2, r3
 800aa88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800aa92:	2220      	movs	r2, #32
 800aa94:	2130      	movs	r1, #48	; 0x30
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f001 f9e8 	bl	800be6c <VL53L0X_WrByte>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800aaaa:	2200      	movs	r2, #0
 800aaac:	21ff      	movs	r1, #255	; 0xff
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 f9dc 	bl	800be6c <VL53L0X_WrByte>
 800aab4:	4603      	mov	r3, r0
 800aab6:	461a      	mov	r2, r3
 800aab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aabc:	4313      	orrs	r3, r2
 800aabe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aac2:	e04e      	b.n	800ab62 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800aac4:	78bb      	ldrb	r3, [r7, #2]
 800aac6:	2b0e      	cmp	r3, #14
 800aac8:	d14b      	bne.n	800ab62 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800aaca:	2248      	movs	r2, #72	; 0x48
 800aacc:	2148      	movs	r1, #72	; 0x48
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f001 f9cc 	bl	800be6c <VL53L0X_WrByte>
 800aad4:	4603      	mov	r3, r0
 800aad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800aada:	2208      	movs	r2, #8
 800aadc:	2147      	movs	r1, #71	; 0x47
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 f9c4 	bl	800be6c <VL53L0X_WrByte>
 800aae4:	4603      	mov	r3, r0
 800aae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800aaea:	2203      	movs	r2, #3
 800aaec:	2132      	movs	r1, #50	; 0x32
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f001 f9bc 	bl	800be6c <VL53L0X_WrByte>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aafc:	4313      	orrs	r3, r2
 800aafe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ab02:	2207      	movs	r2, #7
 800ab04:	2130      	movs	r1, #48	; 0x30
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f001 f9b0 	bl	800be6c <VL53L0X_WrByte>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab14:	4313      	orrs	r3, r2
 800ab16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	21ff      	movs	r1, #255	; 0xff
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f001 f9a4 	bl	800be6c <VL53L0X_WrByte>
 800ab24:	4603      	mov	r3, r0
 800ab26:	461a      	mov	r2, r3
 800ab28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ab32:	2220      	movs	r2, #32
 800ab34:	2130      	movs	r1, #48	; 0x30
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f001 f998 	bl	800be6c <VL53L0X_WrByte>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab44:	4313      	orrs	r3, r2
 800ab46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	21ff      	movs	r1, #255	; 0xff
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f001 f98c 	bl	800be6c <VL53L0X_WrByte>
 800ab54:	4603      	mov	r3, r0
 800ab56:	461a      	mov	r2, r3
 800ab58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800ab62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d17f      	bne.n	800ac6a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800ab6a:	78bb      	ldrb	r3, [r7, #2]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fe fe38 	bl	80097e2 <VL53L0X_encode_vcsel_period>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800ab78:	78fb      	ldrb	r3, [r7, #3]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d045      	beq.n	800ac0e <VL53L0X_set_vcsel_pulse_period+0x470>
 800ab82:	e06e      	b.n	800ac62 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ab84:	f107 0314 	add.w	r3, r7, #20
 800ab88:	461a      	mov	r2, r3
 800ab8a:	2103      	movs	r1, #3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7ff fc33 	bl	800a3f8 <get_sequence_step_timeout>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ab98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d109      	bne.n	800abb4 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800aba0:	f107 0310 	add.w	r3, r7, #16
 800aba4:	461a      	mov	r2, r3
 800aba6:	2102      	movs	r1, #2
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff fc25 	bl	800a3f8 <get_sequence_step_timeout>
 800abae:	4603      	mov	r3, r0
 800abb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800abb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d109      	bne.n	800abd0 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800abbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800abc0:	461a      	mov	r2, r3
 800abc2:	2150      	movs	r1, #80	; 0x50
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f001 f951 	bl	800be6c <VL53L0X_WrByte>
 800abca:	4603      	mov	r3, r0
 800abcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800abd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d108      	bne.n	800abea <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	461a      	mov	r2, r3
 800abdc:	2103      	movs	r1, #3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7ff fceb 	bl	800a5ba <set_sequence_step_timeout>
 800abe4:	4603      	mov	r3, r0
 800abe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800abea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d108      	bne.n	800ac04 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	461a      	mov	r2, r3
 800abf6:	2102      	movs	r1, #2
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7ff fcde 	bl	800a5ba <set_sequence_step_timeout>
 800abfe:	4603      	mov	r3, r0
 800ac00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	78ba      	ldrb	r2, [r7, #2]
 800ac08:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ac0c:	e02e      	b.n	800ac6c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ac0e:	f107 0318 	add.w	r3, r7, #24
 800ac12:	461a      	mov	r2, r3
 800ac14:	2104      	movs	r1, #4
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7ff fbee 	bl	800a3f8 <get_sequence_step_timeout>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ac22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d109      	bne.n	800ac3e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800ac2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ac2e:	461a      	mov	r2, r3
 800ac30:	2170      	movs	r1, #112	; 0x70
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f001 f91a 	bl	800be6c <VL53L0X_WrByte>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ac3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d108      	bne.n	800ac58 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	461a      	mov	r2, r3
 800ac4a:	2104      	movs	r1, #4
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff fcb4 	bl	800a5ba <set_sequence_step_timeout>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	78ba      	ldrb	r2, [r7, #2]
 800ac5c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ac60:	e004      	b.n	800ac6c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac62:	23fc      	movs	r3, #252	; 0xfc
 800ac64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac68:	e000      	b.n	800ac6c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800ac6a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800ac6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d109      	bne.n	800ac88 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ac7a:	69f9      	ldr	r1, [r7, #28]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7fc fe1d 	bl	80078bc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ac82:	4603      	mov	r3, r0
 800ac84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800ac88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d109      	bne.n	800aca4 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800ac90:	f107 010f 	add.w	r1, r7, #15
 800ac94:	2301      	movs	r3, #1
 800ac96:	2200      	movs	r2, #0
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7fe fcbd 	bl	8009618 <VL53L0X_perform_phase_calibration>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800aca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3728      	adds	r7, #40	; 0x28
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	460b      	mov	r3, r1
 800acba:	607a      	str	r2, [r7, #4]
 800acbc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acbe:	2300      	movs	r3, #0
 800acc0:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800acc2:	7afb      	ldrb	r3, [r7, #11]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <VL53L0X_get_vcsel_pulse_period+0x1e>
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d00a      	beq.n	800ace2 <VL53L0X_get_vcsel_pulse_period+0x32>
 800accc:	e013      	b.n	800acf6 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800acce:	f107 0316 	add.w	r3, r7, #22
 800acd2:	461a      	mov	r2, r3
 800acd4:	2150      	movs	r1, #80	; 0x50
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f001 f94a 	bl	800bf70 <VL53L0X_RdByte>
 800acdc:	4603      	mov	r3, r0
 800acde:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ace0:	e00b      	b.n	800acfa <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ace2:	f107 0316 	add.w	r3, r7, #22
 800ace6:	461a      	mov	r2, r3
 800ace8:	2170      	movs	r1, #112	; 0x70
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f001 f940 	bl	800bf70 <VL53L0X_RdByte>
 800acf0:	4603      	mov	r3, r0
 800acf2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800acf4:	e001      	b.n	800acfa <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acf6:	23fc      	movs	r3, #252	; 0xfc
 800acf8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800acfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d107      	bne.n	800ad12 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ad02:	7dbb      	ldrb	r3, [r7, #22]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fe fd59 	bl	80097bc <VL53L0X_decode_vcsel_period>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	701a      	strb	r2, [r3, #0]

	return Status;
 800ad12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b092      	sub	sp, #72	; 0x48
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ad2e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ad32:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ad34:	f240 7376 	movw	r3, #1910	; 0x776
 800ad38:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ad3a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ad3e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ad40:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ad44:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ad46:	f240 234e 	movw	r3, #590	; 0x24e
 800ad4a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ad4c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ad50:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ad52:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ad56:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ad58:	f240 2326 	movw	r3, #550	; 0x226
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ad62:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ad66:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	6a3b      	ldr	r3, [r7, #32]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d205      	bcs.n	800ad80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad74:	23fc      	movs	r3, #252	; 0xfc
 800ad76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ad7a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ad7e:	e0aa      	b.n	800aed6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ad80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ad8c:	f107 0314 	add.w	r3, r7, #20
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7fc fedc 	bl	8007b50 <VL53L0X_GetSequenceStepEnables>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ad9e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d15b      	bne.n	800ae5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ada6:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d105      	bne.n	800adb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800adac:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d102      	bne.n	800adb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800adb2:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d052      	beq.n	800ae5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800adb8:	f107 0310 	add.w	r3, r7, #16
 800adbc:	461a      	mov	r2, r3
 800adbe:	2102      	movs	r1, #2
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff fb19 	bl	800a3f8 <get_sequence_step_timeout>
 800adc6:	4603      	mov	r3, r0
 800adc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800adcc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800add4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800add8:	e07d      	b.n	800aed6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800adda:	7d3b      	ldrb	r3, [r7, #20]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00f      	beq.n	800ae00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ade0:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ade2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade4:	4413      	add	r3, r2
 800ade6:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ade8:	69fa      	ldr	r2, [r7, #28]
 800adea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adec:	429a      	cmp	r2, r3
 800adee:	d204      	bcs.n	800adfa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800adf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	643b      	str	r3, [r7, #64]	; 0x40
 800adf8:	e002      	b.n	800ae00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800adfa:	23fc      	movs	r3, #252	; 0xfc
 800adfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ae00:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ae08:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae0c:	e063      	b.n	800aed6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ae0e:	7dbb      	ldrb	r3, [r7, #22]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d011      	beq.n	800ae38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	4413      	add	r3, r2
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ae1e:	69fa      	ldr	r2, [r7, #28]
 800ae20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d204      	bcs.n	800ae30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ae26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	643b      	str	r3, [r7, #64]	; 0x40
 800ae2e:	e016      	b.n	800ae5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae30:	23fc      	movs	r3, #252	; 0xfc
 800ae32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ae36:	e012      	b.n	800ae5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ae38:	7d7b      	ldrb	r3, [r7, #21]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00f      	beq.n	800ae5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae42:	4413      	add	r3, r2
 800ae44:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d204      	bcs.n	800ae58 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ae4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	643b      	str	r3, [r7, #64]	; 0x40
 800ae56:	e002      	b.n	800ae5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae58:	23fc      	movs	r3, #252	; 0xfc
 800ae5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ae5e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ae66:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae6a:	e034      	b.n	800aed6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d019      	beq.n	800aea6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ae72:	f107 030c 	add.w	r3, r7, #12
 800ae76:	461a      	mov	r2, r3
 800ae78:	2103      	movs	r1, #3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fabc 	bl	800a3f8 <get_sequence_step_timeout>
 800ae80:	4603      	mov	r3, r0
 800ae82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae8a:	4413      	add	r3, r2
 800ae8c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ae8e:	69fa      	ldr	r2, [r7, #28]
 800ae90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d204      	bcs.n	800aea0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800ae96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	643b      	str	r3, [r7, #64]	; 0x40
 800ae9e:	e002      	b.n	800aea6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aea0:	23fc      	movs	r3, #252	; 0xfc
 800aea2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800aea6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d111      	bne.n	800aed2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800aeae:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00e      	beq.n	800aed2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800aeb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800aebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aebe:	2104      	movs	r1, #4
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7ff fb7a 	bl	800a5ba <set_sequence_step_timeout>
 800aec6:	4603      	mov	r3, r0
 800aec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800aed2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3748      	adds	r7, #72	; 0x48
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b090      	sub	sp, #64	; 0x40
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aee8:	2300      	movs	r3, #0
 800aeea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800aeee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800aef2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800aef4:	f240 7376 	movw	r3, #1910	; 0x776
 800aef8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800aefa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800aefe:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800af00:	f44f 7325 	mov.w	r3, #660	; 0x294
 800af04:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800af06:	f240 234e 	movw	r3, #590	; 0x24e
 800af0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800af0c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800af10:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800af12:	f44f 7325 	mov.w	r3, #660	; 0x294
 800af16:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800af18:	f240 2326 	movw	r3, #550	; 0x226
 800af1c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800af22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af26:	441a      	add	r2, r3
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800af2c:	f107 0318 	add.w	r3, r7, #24
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7fc fe0c 	bl	8007b50 <VL53L0X_GetSequenceStepEnables>
 800af38:	4603      	mov	r3, r0
 800af3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800af3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800af46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af4a:	e075      	b.n	800b038 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800af4c:	7e3b      	ldrb	r3, [r7, #24]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d105      	bne.n	800af5e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800af52:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800af54:	2b00      	cmp	r3, #0
 800af56:	d102      	bne.n	800af5e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800af58:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d030      	beq.n	800afc0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800af5e:	f107 0310 	add.w	r3, r7, #16
 800af62:	461a      	mov	r2, r3
 800af64:	2102      	movs	r1, #2
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7ff fa46 	bl	800a3f8 <get_sequence_step_timeout>
 800af6c:	4603      	mov	r3, r0
 800af6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800af72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af76:	2b00      	cmp	r3, #0
 800af78:	d122      	bne.n	800afc0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800af7a:	7e3b      	ldrb	r3, [r7, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d007      	beq.n	800af90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800af84:	6939      	ldr	r1, [r7, #16]
 800af86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af88:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800af8a:	441a      	add	r2, r3
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800af90:	7ebb      	ldrb	r3, [r7, #26]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d009      	beq.n	800afaa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800af9a:	6939      	ldr	r1, [r7, #16]
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	440b      	add	r3, r1
 800afa0:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800afa2:	441a      	add	r2, r3
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	e00a      	b.n	800afc0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800afaa:	7e7b      	ldrb	r3, [r7, #25]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d007      	beq.n	800afc0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800afb4:	6939      	ldr	r1, [r7, #16]
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800afba:	441a      	add	r2, r3
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800afc0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d114      	bne.n	800aff2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800afc8:	7efb      	ldrb	r3, [r7, #27]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d011      	beq.n	800aff2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800afce:	f107 030c 	add.w	r3, r7, #12
 800afd2:	461a      	mov	r2, r3
 800afd4:	2103      	movs	r1, #3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7ff fa0e 	bl	800a3f8 <get_sequence_step_timeout>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800afe6:	68f9      	ldr	r1, [r7, #12]
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800afec:	441a      	add	r2, r3
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d114      	bne.n	800b024 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800affa:	7f3b      	ldrb	r3, [r7, #28]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d011      	beq.n	800b024 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800b000:	f107 0314 	add.w	r3, r7, #20
 800b004:	461a      	mov	r2, r3
 800b006:	2104      	movs	r1, #4
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7ff f9f5 	bl	800a3f8 <get_sequence_step_timeout>
 800b00e:	4603      	mov	r3, r0
 800b010:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b018:	6979      	ldr	r1, [r7, #20]
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b01e:	441a      	add	r2, r3
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b024:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d103      	bne.n	800b034 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b034:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3740      	adds	r7, #64	; 0x40
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b088      	sub	sp, #32
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b052:	e0c6      	b.n	800b1e2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	4413      	add	r3, r2
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	3301      	adds	r3, #1
 800b062:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b064:	7cfb      	ldrb	r3, [r7, #19]
 800b066:	2bff      	cmp	r3, #255	; 0xff
 800b068:	f040 808d 	bne.w	800b186 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	4413      	add	r3, r2
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	747b      	strb	r3, [r7, #17]
			Index++;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	3301      	adds	r3, #1
 800b07a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800b07c:	7c7b      	ldrb	r3, [r7, #17]
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d87e      	bhi.n	800b180 <VL53L0X_load_tuning_settings+0x140>
 800b082:	a201      	add	r2, pc, #4	; (adr r2, 800b088 <VL53L0X_load_tuning_settings+0x48>)
 800b084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b088:	0800b099 	.word	0x0800b099
 800b08c:	0800b0d3 	.word	0x0800b0d3
 800b090:	0800b10d 	.word	0x0800b10d
 800b094:	0800b147 	.word	0x0800b147
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	683a      	ldr	r2, [r7, #0]
 800b09c:	4413      	add	r3, r2
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	743b      	strb	r3, [r7, #16]
				Index++;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b0b8:	7c3b      	ldrb	r3, [r7, #16]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	021b      	lsls	r3, r3, #8
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	4413      	add	r3, r2
 800b0c6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	89ba      	ldrh	r2, [r7, #12]
 800b0cc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800b0d0:	e087      	b.n	800b1e2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	743b      	strb	r3, [r7, #16]
				Index++;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b0f2:	7c3b      	ldrb	r3, [r7, #16]
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	021b      	lsls	r3, r3, #8
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	7bfb      	ldrb	r3, [r7, #15]
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	4413      	add	r3, r2
 800b100:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	89ba      	ldrh	r2, [r7, #12]
 800b106:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800b10a:	e06a      	b.n	800b1e2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	4413      	add	r3, r2
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	743b      	strb	r3, [r7, #16]
				Index++;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	3301      	adds	r3, #1
 800b11a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	4413      	add	r3, r2
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	3301      	adds	r3, #1
 800b12a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b12c:	7c3b      	ldrb	r3, [r7, #16]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	b29a      	uxth	r2, r3
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	b29b      	uxth	r3, r3
 800b138:	4413      	add	r3, r2
 800b13a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	89ba      	ldrh	r2, [r7, #12]
 800b140:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800b144:	e04d      	b.n	800b1e2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	4413      	add	r3, r2
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	743b      	strb	r3, [r7, #16]
				Index++;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	3301      	adds	r3, #1
 800b154:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	4413      	add	r3, r2
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	3301      	adds	r3, #1
 800b164:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b166:	7c3b      	ldrb	r3, [r7, #16]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	021b      	lsls	r3, r3, #8
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
 800b170:	b29b      	uxth	r3, r3
 800b172:	4413      	add	r3, r2
 800b174:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	89ba      	ldrh	r2, [r7, #12]
 800b17a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800b17e:	e030      	b.n	800b1e2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b180:	23fc      	movs	r3, #252	; 0xfc
 800b182:	77fb      	strb	r3, [r7, #31]
 800b184:	e02d      	b.n	800b1e2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b186:	7cfb      	ldrb	r3, [r7, #19]
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d828      	bhi.n	800b1de <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	4413      	add	r3, r2
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	3301      	adds	r3, #1
 800b19a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b19c:	2300      	movs	r3, #0
 800b19e:	61bb      	str	r3, [r7, #24]
 800b1a0:	e00f      	b.n	800b1c2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	7819      	ldrb	r1, [r3, #0]
 800b1aa:	f107 0208 	add.w	r2, r7, #8
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	460a      	mov	r2, r1
 800b1b4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	61bb      	str	r3, [r7, #24]
 800b1c2:	7cfb      	ldrb	r3, [r7, #19]
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	dbeb      	blt.n	800b1a2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b1ca:	7cfb      	ldrb	r3, [r7, #19]
 800b1cc:	f107 0208 	add.w	r2, r7, #8
 800b1d0:	7cb9      	ldrb	r1, [r7, #18]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fdee 	bl	800bdb4 <VL53L0X_WriteMulti>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	77fb      	strb	r3, [r7, #31]
 800b1dc:	e001      	b.n	800b1e2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b1de:	23fc      	movs	r3, #252	; 0xfc
 800b1e0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d004      	beq.n	800b1f8 <VL53L0X_load_tuning_settings+0x1b8>
 800b1ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f43f af2e 	beq.w	800b054 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b1f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3720      	adds	r7, #32
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b088      	sub	sp, #32
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b210:	2300      	movs	r3, #0
 800b212:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b21a:	f107 0313 	add.w	r3, r7, #19
 800b21e:	4619      	mov	r1, r3
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f7fc fd21 	bl	8007c68 <VL53L0X_GetXTalkCompensationEnable>
 800b226:	4603      	mov	r3, r0
 800b228:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800b22a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d111      	bne.n	800b256 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b232:	7cfb      	ldrb	r3, [r7, #19]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00e      	beq.n	800b256 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6a1b      	ldr	r3, [r3, #32]
 800b23c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	8a9b      	ldrh	r3, [r3, #20]
 800b242:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	fb02 f303 	mul.w	r3, r2, r3
 800b24a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	3380      	adds	r3, #128	; 0x80
 800b250:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b256:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3720      	adds	r7, #32
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b086      	sub	sp, #24
 800b266:	af00      	add	r7, sp, #0
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b26e:	2300      	movs	r3, #0
 800b270:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b27a:	f107 0310 	add.w	r3, r7, #16
 800b27e:	461a      	mov	r2, r3
 800b280:	68b9      	ldr	r1, [r7, #8]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7ff ffbe 	bl	800b204 <VL53L0X_get_total_xtalk_rate>
 800b288:	4603      	mov	r3, r0
 800b28a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b28c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d105      	bne.n	800b2a0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	441a      	add	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	601a      	str	r2, [r3, #0]

	return Status;
 800b2a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b09a      	sub	sp, #104	; 0x68
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800b2ba:	2312      	movs	r3, #18
 800b2bc:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800b2be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2c2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b2c4:	2342      	movs	r3, #66	; 0x42
 800b2c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800b2c8:	2306      	movs	r3, #6
 800b2ca:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800b2cc:	2307      	movs	r3, #7
 800b2ce:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800b2dc:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b2e4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800b2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2ea:	fb02 f303 	mul.w	r3, r2, r3
 800b2ee:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800b2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f2:	3380      	adds	r3, #128	; 0x80
 800b2f4:	0a1b      	lsrs	r3, r3, #8
 800b2f6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2fc:	fb02 f303 	mul.w	r3, r2, r3
 800b300:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01a      	beq.n	800b342 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	029b      	lsls	r3, r3, #10
 800b310:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b318:	4413      	add	r3, r2
 800b31a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b31c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	fbb2 f3f3 	udiv	r3, r2, r3
 800b324:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b326:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b328:	4613      	mov	r3, r2
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	4413      	add	r3, r2
 800b32e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b332:	fb03 f303 	mul.w	r3, r3, r3
 800b336:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b33a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b33e:	0c1b      	lsrs	r3, r3, #16
 800b340:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b346:	fb02 f303 	mul.w	r3, r2, r3
 800b34a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b352:	0c1b      	lsrs	r3, r3, #16
 800b354:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	fb03 f303 	mul.w	r3, r3, r3
 800b35c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b35e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b360:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b364:	0c1b      	lsrs	r3, r3, #16
 800b366:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b36a:	085a      	lsrs	r2, r3, #1
 800b36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36e:	441a      	add	r2, r3
 800b370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b372:	fbb2 f3f3 	udiv	r3, r2, r3
 800b376:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b37c:	fb02 f303 	mul.w	r3, r2, r3
 800b380:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b388:	d302      	bcc.n	800b390 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800b38a:	4b54      	ldr	r3, [pc, #336]	; (800b4dc <VL53L0X_calc_dmax+0x230>)
 800b38c:	663b      	str	r3, [r7, #96]	; 0x60
 800b38e:	e015      	b.n	800b3bc <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b392:	085a      	lsrs	r2, r3, #1
 800b394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b396:	441a      	add	r2, r3
 800b398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b39e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b3a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3a4:	fb02 f303 	mul.w	r3, r2, r3
 800b3a8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b3aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b3b0:	0c1b      	lsrs	r3, r3, #16
 800b3b2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b3b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3b6:	fb03 f303 	mul.w	r3, r3, r3
 800b3ba:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b3bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3be:	039b      	lsls	r3, r3, #14
 800b3c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b3c4:	4a46      	ldr	r2, [pc, #280]	; (800b4e0 <VL53L0X_calc_dmax+0x234>)
 800b3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ca:	099b      	lsrs	r3, r3, #6
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	fb03 f303 	mul.w	r3, r3, r3
 800b3d4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d8:	fb03 f303 	mul.w	r3, r3, r3
 800b3dc:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	091b      	lsrs	r3, r3, #4
 800b3e4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e8:	6a3b      	ldr	r3, [r7, #32]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	4413      	add	r3, r2
 800b3f6:	011b      	lsls	r3, r3, #4
 800b3f8:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b400:	0b9b      	lsrs	r3, r3, #14
 800b402:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b408:	4413      	add	r3, r2
 800b40a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b40c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b40e:	085b      	lsrs	r3, r3, #1
 800b410:	69ba      	ldr	r2, [r7, #24]
 800b412:	4413      	add	r3, r2
 800b414:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b416:	69ba      	ldr	r2, [r7, #24]
 800b418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b41e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	039b      	lsls	r3, r3, #14
 800b424:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	085b      	lsrs	r3, r3, #1
 800b42a:	69ba      	ldr	r2, [r7, #24]
 800b42c:	4413      	add	r3, r2
 800b42e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b430:	69ba      	ldr	r2, [r7, #24]
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	fbb2 f3f3 	udiv	r3, r2, r3
 800b438:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b43e:	fb02 f303 	mul.w	r3, r2, r3
 800b442:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b44a:	4a25      	ldr	r2, [pc, #148]	; (800b4e0 <VL53L0X_calc_dmax+0x234>)
 800b44c:	fba2 2303 	umull	r2, r3, r2, r3
 800b450:	099b      	lsrs	r3, r3, #6
 800b452:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	011b      	lsls	r3, r3, #4
 800b458:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b460:	4a1f      	ldr	r2, [pc, #124]	; (800b4e0 <VL53L0X_calc_dmax+0x234>)
 800b462:	fba2 2303 	umull	r2, r3, r2, r3
 800b466:	099b      	lsrs	r3, r3, #6
 800b468:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b46c:	3380      	adds	r3, #128	; 0x80
 800b46e:	0a1b      	lsrs	r3, r3, #8
 800b470:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d008      	beq.n	800b48a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	085a      	lsrs	r2, r3, #1
 800b47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47e:	441a      	add	r2, r3
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	fbb2 f3f3 	udiv	r3, r2, r3
 800b486:	65bb      	str	r3, [r7, #88]	; 0x58
 800b488:	e001      	b.n	800b48e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b48e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b490:	f7fe f9ba 	bl	8009808 <VL53L0X_isqrt>
 800b494:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d008      	beq.n	800b4ae <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	085a      	lsrs	r2, r3, #1
 800b4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a2:	441a      	add	r2, r3
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4ac:	e001      	b.n	800b4b2 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b4b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b4b4:	f7fe f9a8 	bl	8009808 <VL53L0X_isqrt>
 800b4b8:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b4ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b4c0:	693a      	ldr	r2, [r7, #16]
 800b4c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d902      	bls.n	800b4ce <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b4c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b4ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4cc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b4ce:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3768      	adds	r7, #104	; 0x68
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	fff00000 	.word	0xfff00000
 800b4e0:	10624dd3 	.word	0x10624dd3

0800b4e4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b0b4      	sub	sp, #208	; 0xd0
 800b4e8:	af04      	add	r7, sp, #16
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
 800b4f0:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b4f2:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b4f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b4fa:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b4fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b502:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b50a:	f241 235c 	movw	r3, #4700	; 0x125c
 800b50e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b512:	4b9e      	ldr	r3, [pc, #632]	; (800b78c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b518:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b51c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b51e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b526:	fbb2 f3f3 	udiv	r3, r2, r3
 800b52a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b52c:	4b98      	ldr	r3, [pc, #608]	; (800b790 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b52e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b530:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b534:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b536:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b53a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b53c:	f240 6377 	movw	r3, #1655	; 0x677
 800b540:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b542:	2300      	movs	r3, #0
 800b544:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6a1b      	ldr	r3, [r3, #32]
 800b54c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b556:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b55a:	0c1b      	lsrs	r3, r3, #16
 800b55c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b564:	f107 0310 	add.w	r3, r7, #16
 800b568:	461a      	mov	r2, r3
 800b56a:	68b9      	ldr	r1, [r7, #8]
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f7ff fe78 	bl	800b262 <VL53L0X_get_total_signal_rate>
 800b572:	4603      	mov	r3, r0
 800b574:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b578:	f107 0314 	add.w	r3, r7, #20
 800b57c:	461a      	mov	r2, r3
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f7ff fe3f 	bl	800b204 <VL53L0X_get_total_xtalk_rate>
 800b586:	4603      	mov	r3, r0
 800b588:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b592:	fb02 f303 	mul.w	r3, r2, r3
 800b596:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b59a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b59e:	0c1b      	lsrs	r3, r3, #16
 800b5a0:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5a8:	fb02 f303 	mul.w	r3, r2, r3
 800b5ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b5b0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b5b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d902      	bls.n	800b5c0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b5ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b5c0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d168      	bne.n	800b69a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b5ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b5d8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b5dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f7fe feb2 	bl	800a350 <VL53L0X_calc_timeout_mclks>
 800b5ec:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b5f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b5fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b602:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b606:	461a      	mov	r2, r3
 800b608:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f7fe fe9f 	bl	800a350 <VL53L0X_calc_timeout_mclks>
 800b612:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b614:	2303      	movs	r3, #3
 800b616:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b61a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b61e:	2b08      	cmp	r3, #8
 800b620:	d102      	bne.n	800b628 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b622:	2302      	movs	r3, #2
 800b624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b62c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b62e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b632:	fb02 f303 	mul.w	r3, r2, r3
 800b636:	02db      	lsls	r3, r3, #11
 800b638:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b63c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b640:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b644:	4a53      	ldr	r2, [pc, #332]	; (800b794 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b646:	fba2 2303 	umull	r2, r3, r2, r3
 800b64a:	099b      	lsrs	r3, r3, #6
 800b64c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b650:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b654:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b656:	fb02 f303 	mul.w	r3, r2, r3
 800b65a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b65e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b662:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b666:	4a4b      	ldr	r2, [pc, #300]	; (800b794 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b668:	fba2 2303 	umull	r2, r3, r2, r3
 800b66c:	099b      	lsrs	r3, r3, #6
 800b66e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	3380      	adds	r3, #128	; 0x80
 800b676:	0a1b      	lsrs	r3, r3, #8
 800b678:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b67a:	693a      	ldr	r2, [r7, #16]
 800b67c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b680:	fb02 f303 	mul.w	r3, r2, r3
 800b684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b68c:	3380      	adds	r3, #128	; 0x80
 800b68e:	0a1b      	lsrs	r3, r3, #8
 800b690:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	021b      	lsls	r3, r3, #8
 800b698:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b69a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b6a2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b6a6:	e15e      	b.n	800b966 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b6a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10c      	bne.n	800b6c8 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b6b4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b6bc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	e14c      	b.n	800b962 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b6c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b6d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6da:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b6dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6de:	041a      	lsls	r2, r3, #16
 800b6e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b6ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b6ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d902      	bls.n	800b6fa <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b6f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b6fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b6fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b702:	fb02 f303 	mul.w	r3, r2, r3
 800b706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b70a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b70e:	4613      	mov	r3, r2
 800b710:	005b      	lsls	r3, r3, #1
 800b712:	4413      	add	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4618      	mov	r0, r3
 800b718:	f7fe f876 	bl	8009808 <VL53L0X_isqrt>
 800b71c:	4603      	mov	r3, r0
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	891b      	ldrh	r3, [r3, #8]
 800b726:	461a      	mov	r2, r3
 800b728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b72a:	fb02 f303 	mul.w	r3, r2, r3
 800b72e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b732:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b734:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b738:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b73a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b73c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b740:	4a14      	ldr	r2, [pc, #80]	; (800b794 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b742:	fba2 2303 	umull	r2, r3, r2, r3
 800b746:	099b      	lsrs	r3, r3, #6
 800b748:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b74a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b74c:	041b      	lsls	r3, r3, #16
 800b74e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b752:	4a10      	ldr	r2, [pc, #64]	; (800b794 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b754:	fba2 2303 	umull	r2, r3, r2, r3
 800b758:	099b      	lsrs	r3, r3, #6
 800b75a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b75e:	021b      	lsls	r3, r3, #8
 800b760:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	fbb2 f3f3 	udiv	r3, r2, r3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	bfb8      	it	lt
 800b76e:	425b      	neglt	r3, r3
 800b770:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b774:	021b      	lsls	r3, r3, #8
 800b776:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	7e1b      	ldrb	r3, [r3, #24]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00b      	beq.n	800b798 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b788:	e033      	b.n	800b7f2 <VL53L0X_calc_sigma_estimate+0x30e>
 800b78a:	bf00      	nop
 800b78c:	028f87ae 	.word	0x028f87ae
 800b790:	0006999a 	.word	0x0006999a
 800b794:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b79a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b79e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b7ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7b0:	fb02 f303 	mul.w	r3, r2, r3
 800b7b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b7b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b7bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7be:	4413      	add	r3, r2
 800b7c0:	0c1b      	lsrs	r3, r3, #16
 800b7c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b7c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b7ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b7d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7d6:	085b      	lsrs	r3, r3, #1
 800b7d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b7dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7e0:	fb03 f303 	mul.w	r3, r3, r3
 800b7e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b7e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7ec:	0b9b      	lsrs	r3, r3, #14
 800b7ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b7f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7f8:	fb02 f303 	mul.w	r3, r2, r3
 800b7fc:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b804:	0c1b      	lsrs	r3, r3, #16
 800b806:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80a:	fb03 f303 	mul.w	r3, r3, r3
 800b80e:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b810:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b818:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b81c:	0c1b      	lsrs	r3, r3, #16
 800b81e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	fb03 f303 	mul.w	r3, r3, r3
 800b826:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82c:	4413      	add	r3, r2
 800b82e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b832:	f7fd ffe9 	bl	8009808 <VL53L0X_isqrt>
 800b836:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	041b      	lsls	r3, r3, #16
 800b83c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	3332      	adds	r3, #50	; 0x32
 800b842:	4a4b      	ldr	r2, [pc, #300]	; (800b970 <VL53L0X_calc_sigma_estimate+0x48c>)
 800b844:	fba2 2303 	umull	r2, r3, r2, r3
 800b848:	095a      	lsrs	r2, r3, #5
 800b84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b854:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b858:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b85c:	fb02 f303 	mul.w	r3, r2, r3
 800b860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b868:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b86c:	3308      	adds	r3, #8
 800b86e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b872:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b876:	4a3f      	ldr	r2, [pc, #252]	; (800b974 <VL53L0X_calc_sigma_estimate+0x490>)
 800b878:	fba2 2303 	umull	r2, r3, r2, r3
 800b87c:	0b5b      	lsrs	r3, r3, #13
 800b87e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b888:	429a      	cmp	r2, r3
 800b88a:	d902      	bls.n	800b892 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b88c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b88e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b892:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b8a0:	4a35      	ldr	r2, [pc, #212]	; (800b978 <VL53L0X_calc_sigma_estimate+0x494>)
 800b8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a6:	099b      	lsrs	r3, r3, #6
 800b8a8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b8aa:	6a3b      	ldr	r3, [r7, #32]
 800b8ac:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b8ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8b2:	441a      	add	r2, r3
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fd ffa4 	bl	8009808 <VL53L0X_isqrt>
 800b8c0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	021b      	lsls	r3, r3, #8
 800b8c6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b8ce:	4a2a      	ldr	r2, [pc, #168]	; (800b978 <VL53L0X_calc_sigma_estimate+0x494>)
 800b8d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d4:	099b      	lsrs	r3, r3, #6
 800b8d6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b8d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8dc:	fb03 f303 	mul.w	r3, r3, r3
 800b8e0:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	fb03 f303 	mul.w	r3, r3, r3
 800b8e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b8ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	4413      	add	r3, r2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fd ff89 	bl	8009808 <VL53L0X_isqrt>
 800b8f6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8fe:	fb02 f303 	mul.w	r3, r2, r3
 800b902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d009      	beq.n	800b920 <VL53L0X_calc_sigma_estimate+0x43c>
 800b90c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b910:	2b00      	cmp	r3, #0
 800b912:	d005      	beq.n	800b920 <VL53L0X_calc_sigma_estimate+0x43c>
 800b914:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b918:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d903      	bls.n	800b928 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b924:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b92e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b93a:	6939      	ldr	r1, [r7, #16]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	9303      	str	r3, [sp, #12]
 800b940:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b944:	9302      	str	r3, [sp, #8]
 800b946:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b94a:	9301      	str	r3, [sp, #4]
 800b94c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f7ff fca8 	bl	800b2ac <VL53L0X_calc_dmax>
 800b95c:	4603      	mov	r3, r0
 800b95e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b962:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b966:	4618      	mov	r0, r3
 800b968:	37c0      	adds	r7, #192	; 0xc0
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	51eb851f 	.word	0x51eb851f
 800b974:	d1b71759 	.word	0xd1b71759
 800b978:	10624dd3 	.word	0x10624dd3

0800b97c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b090      	sub	sp, #64	; 0x40
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	607a      	str	r2, [r7, #4]
 800b986:	461a      	mov	r2, r3
 800b988:	460b      	mov	r3, r1
 800b98a:	72fb      	strb	r3, [r7, #11]
 800b98c:	4613      	mov	r3, r2
 800b98e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b990:	2300      	movs	r3, #0
 800b992:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b9ce:	7afb      	ldrb	r3, [r7, #11]
 800b9d0:	10db      	asrs	r3, r3, #3
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	f003 030f 	and.w	r3, r3, #15
 800b9d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b9dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d017      	beq.n	800ba14 <VL53L0X_get_pal_range_status+0x98>
 800b9e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9e8:	2b05      	cmp	r3, #5
 800b9ea:	d013      	beq.n	800ba14 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b9ec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9f0:	2b07      	cmp	r3, #7
 800b9f2:	d00f      	beq.n	800ba14 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b9f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9f8:	2b0c      	cmp	r3, #12
 800b9fa:	d00b      	beq.n	800ba14 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b9fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba00:	2b0d      	cmp	r3, #13
 800ba02:	d007      	beq.n	800ba14 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800ba04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba08:	2b0e      	cmp	r3, #14
 800ba0a:	d003      	beq.n	800ba14 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800ba0c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba10:	2b0f      	cmp	r3, #15
 800ba12:	d103      	bne.n	800ba1c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800ba14:	2301      	movs	r3, #1
 800ba16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ba1a:	e002      	b.n	800ba22 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ba22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d109      	bne.n	800ba3e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ba2a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ba2e:	461a      	mov	r2, r3
 800ba30:	2100      	movs	r1, #0
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7fc f9ec 	bl	8007e10 <VL53L0X_GetLimitCheckEnable>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800ba3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d02e      	beq.n	800baa4 <VL53L0X_get_pal_range_status+0x128>
 800ba46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d12a      	bne.n	800baa4 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800ba4e:	f107 0310 	add.w	r3, r7, #16
 800ba52:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ba56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f7ff fd43 	bl	800b4e4 <VL53L0X_calc_sigma_estimate>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800ba64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d103      	bne.n	800ba74 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba72:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800ba74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d113      	bne.n	800baa4 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800ba7c:	f107 0320 	add.w	r3, r7, #32
 800ba80:	461a      	mov	r2, r3
 800ba82:	2100      	movs	r1, #0
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f7fc fa49 	bl	8007f1c <VL53L0X_GetLimitCheckValue>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d006      	beq.n	800baa4 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800ba96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba98:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d902      	bls.n	800baa4 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800baa4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d109      	bne.n	800bac0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800baac:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800bab0:	461a      	mov	r2, r3
 800bab2:	2102      	movs	r1, #2
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7fc f9ab 	bl	8007e10 <VL53L0X_GetLimitCheckEnable>
 800baba:	4603      	mov	r3, r0
 800babc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800bac0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d044      	beq.n	800bb52 <VL53L0X_get_pal_range_status+0x1d6>
 800bac8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d140      	bne.n	800bb52 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bad0:	f107 031c 	add.w	r3, r7, #28
 800bad4:	461a      	mov	r2, r3
 800bad6:	2102      	movs	r1, #2
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7fc fa1f 	bl	8007f1c <VL53L0X_GetLimitCheckValue>
 800bade:	4603      	mov	r3, r0
 800bae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800bae4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d107      	bne.n	800bafc <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800baec:	2201      	movs	r2, #1
 800baee:	21ff      	movs	r1, #255	; 0xff
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f000 f9bb 	bl	800be6c <VL53L0X_WrByte>
 800baf6:	4603      	mov	r3, r0
 800baf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800bafc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d109      	bne.n	800bb18 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800bb04:	f107 0316 	add.w	r3, r7, #22
 800bb08:	461a      	mov	r2, r3
 800bb0a:	21b6      	movs	r1, #182	; 0xb6
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f000 fa59 	bl	800bfc4 <VL53L0X_RdWord>
 800bb12:	4603      	mov	r3, r0
 800bb14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800bb18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d107      	bne.n	800bb30 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bb20:	2200      	movs	r2, #0
 800bb22:	21ff      	movs	r1, #255	; 0xff
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f000 f9a1 	bl	800be6c <VL53L0X_WrByte>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800bb30:	8afb      	ldrh	r3, [r7, #22]
 800bb32:	025b      	lsls	r3, r3, #9
 800bb34:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb3a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d006      	beq.n	800bb52 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800bb44:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800bb46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d902      	bls.n	800bb52 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bb52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d109      	bne.n	800bb6e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bb5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb5e:	461a      	mov	r2, r3
 800bb60:	2103      	movs	r1, #3
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7fc f954 	bl	8007e10 <VL53L0X_GetLimitCheckEnable>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800bb6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d023      	beq.n	800bbbe <VL53L0X_get_pal_range_status+0x242>
 800bb76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d11f      	bne.n	800bbbe <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800bb7e:	893b      	ldrh	r3, [r7, #8]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d102      	bne.n	800bb8a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	637b      	str	r3, [r7, #52]	; 0x34
 800bb88:	e005      	b.n	800bb96 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	021a      	lsls	r2, r3, #8
 800bb8e:	893b      	ldrh	r3, [r7, #8]
 800bb90:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb94:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bb96:	f107 0318 	add.w	r3, r7, #24
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	2103      	movs	r1, #3
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f7fc f9bc 	bl	8007f1c <VL53L0X_GetLimitCheckValue>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d006      	beq.n	800bbbe <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800bbb0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800bbb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d202      	bcs.n	800bbbe <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bbbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d14a      	bne.n	800bc5c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800bbc6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d103      	bne.n	800bbd6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800bbce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd0:	22ff      	movs	r2, #255	; 0xff
 800bbd2:	701a      	strb	r2, [r3, #0]
 800bbd4:	e042      	b.n	800bc5c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800bbd6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d007      	beq.n	800bbee <VL53L0X_get_pal_range_status+0x272>
 800bbde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d003      	beq.n	800bbee <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800bbe6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	d103      	bne.n	800bbf6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800bbee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbf0:	2205      	movs	r2, #5
 800bbf2:	701a      	strb	r2, [r3, #0]
 800bbf4:	e032      	b.n	800bc5c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800bbf6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbfa:	2b06      	cmp	r3, #6
 800bbfc:	d003      	beq.n	800bc06 <VL53L0X_get_pal_range_status+0x28a>
 800bbfe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc02:	2b09      	cmp	r3, #9
 800bc04:	d103      	bne.n	800bc0e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800bc06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc08:	2204      	movs	r2, #4
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	e026      	b.n	800bc5c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800bc0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc12:	2b08      	cmp	r3, #8
 800bc14:	d007      	beq.n	800bc26 <VL53L0X_get_pal_range_status+0x2aa>
 800bc16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc1a:	2b0a      	cmp	r3, #10
 800bc1c:	d003      	beq.n	800bc26 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800bc1e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d103      	bne.n	800bc2e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800bc26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc28:	2203      	movs	r2, #3
 800bc2a:	701a      	strb	r2, [r3, #0]
 800bc2c:	e016      	b.n	800bc5c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800bc2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	d003      	beq.n	800bc3e <VL53L0X_get_pal_range_status+0x2c2>
 800bc36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d103      	bne.n	800bc46 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800bc3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc40:	2202      	movs	r2, #2
 800bc42:	701a      	strb	r2, [r3, #0]
 800bc44:	e00a      	b.n	800bc5c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800bc46:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d103      	bne.n	800bc56 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800bc4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc50:	2201      	movs	r2, #1
 800bc52:	701a      	strb	r2, [r3, #0]
 800bc54:	e002      	b.n	800bc5c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800bc56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc58:	2200      	movs	r2, #0
 800bc5a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800bc5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d102      	bne.n	800bc6a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800bc64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc66:	2200      	movs	r2, #0
 800bc68:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bc6a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bc6e:	461a      	mov	r2, r3
 800bc70:	2101      	movs	r1, #1
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f7fc f8cc 	bl	8007e10 <VL53L0X_GetLimitCheckEnable>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800bc7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d14f      	bne.n	800bd26 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800bc86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <VL53L0X_get_pal_range_status+0x31a>
 800bc8e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d103      	bne.n	800bc9e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800bc96:	2301      	movs	r3, #1
 800bc98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9c:	e002      	b.n	800bca4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bcaa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800bcae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	d003      	beq.n	800bcbe <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800bcb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d103      	bne.n	800bcc6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcc4:	e002      	b.n	800bccc <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bcd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800bcd6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d003      	beq.n	800bce6 <VL53L0X_get_pal_range_status+0x36a>
 800bcde:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d103      	bne.n	800bcee <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800bce6:	2301      	movs	r3, #1
 800bce8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcec:	e002      	b.n	800bcf4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bcfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800bcfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d003      	beq.n	800bd0e <VL53L0X_get_pal_range_status+0x392>
 800bd06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d103      	bne.n	800bd16 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd14:	e002      	b.n	800bd1c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800bd16:	2300      	movs	r3, #0
 800bd18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3740      	adds	r7, #64	; 0x40
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b088      	sub	sp, #32
 800bd36:	af02      	add	r7, sp, #8
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	330a      	adds	r3, #10
 800bd42:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800bd50:	b299      	uxth	r1, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	f7f8 fc5f 	bl	8004620 <HAL_I2C_Master_Transmit>
 800bd62:	4603      	mov	r3, r0
 800bd64:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800bd66:	693b      	ldr	r3, [r7, #16]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3718      	adds	r7, #24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af02      	add	r7, sp, #8
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	330a      	adds	r3, #10
 800bd80:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800bd8e:	f043 0301 	orr.w	r3, r3, #1
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	b299      	uxth	r1, r3
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	f7f8 fd3b 	bl	800481c <HAL_I2C_Master_Receive>
 800bda6:	4603      	mov	r3, r0
 800bda8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800bdaa:	693b      	ldr	r3, [r7, #16]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3718      	adds	r7, #24
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	607a      	str	r2, [r7, #4]
 800bdbe:	603b      	str	r3, [r7, #0]
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2b3f      	cmp	r3, #63	; 0x3f
 800bdcc:	d902      	bls.n	800bdd4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800bdce:	f06f 0303 	mvn.w	r3, #3
 800bdd2:	e016      	b.n	800be02 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800bdd4:	4a0d      	ldr	r2, [pc, #52]	; (800be0c <VL53L0X_WriteMulti+0x58>)
 800bdd6:	7afb      	ldrb	r3, [r7, #11]
 800bdd8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	6879      	ldr	r1, [r7, #4]
 800bdde:	480c      	ldr	r0, [pc, #48]	; (800be10 <VL53L0X_WriteMulti+0x5c>)
 800bde0:	f000 f99e 	bl	800c120 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	3301      	adds	r3, #1
 800bde8:	461a      	mov	r2, r3
 800bdea:	4908      	ldr	r1, [pc, #32]	; (800be0c <VL53L0X_WriteMulti+0x58>)
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f7ff ffa0 	bl	800bd32 <_I2CWrite>
 800bdf2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bdfa:	23ec      	movs	r3, #236	; 0xec
 800bdfc:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bdfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3718      	adds	r7, #24
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20001230 	.word	0x20001230
 800be10:	20001231 	.word	0x20001231

0800be14 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	607a      	str	r2, [r7, #4]
 800be1e:	603b      	str	r3, [r7, #0]
 800be20:	460b      	mov	r3, r1
 800be22:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be24:	2300      	movs	r3, #0
 800be26:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800be28:	f107 030b 	add.w	r3, r7, #11
 800be2c:	2201      	movs	r2, #1
 800be2e:	4619      	mov	r1, r3
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f7ff ff7e 	bl	800bd32 <_I2CWrite>
 800be36:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be3e:	23ec      	movs	r3, #236	; 0xec
 800be40:	75fb      	strb	r3, [r7, #23]
        goto done;
 800be42:	e00c      	b.n	800be5e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	6879      	ldr	r1, [r7, #4]
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f7ff ff91 	bl	800bd70 <_I2CRead>
 800be4e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be56:	23ec      	movs	r3, #236	; 0xec
 800be58:	75fb      	strb	r3, [r7, #23]
 800be5a:	e000      	b.n	800be5e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800be5c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800be5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3718      	adds	r7, #24
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
	...

0800be6c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	70fb      	strb	r3, [r7, #3]
 800be78:	4613      	mov	r3, r2
 800be7a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be7c:	2300      	movs	r3, #0
 800be7e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800be80:	4a0b      	ldr	r2, [pc, #44]	; (800beb0 <VL53L0X_WrByte+0x44>)
 800be82:	78fb      	ldrb	r3, [r7, #3]
 800be84:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800be86:	4a0a      	ldr	r2, [pc, #40]	; (800beb0 <VL53L0X_WrByte+0x44>)
 800be88:	78bb      	ldrb	r3, [r7, #2]
 800be8a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800be8c:	2202      	movs	r2, #2
 800be8e:	4908      	ldr	r1, [pc, #32]	; (800beb0 <VL53L0X_WrByte+0x44>)
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff ff4e 	bl	800bd32 <_I2CWrite>
 800be96:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d001      	beq.n	800bea2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be9e:	23ec      	movs	r3, #236	; 0xec
 800bea0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	20001230 	.word	0x20001230

0800beb4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	460b      	mov	r3, r1
 800bebe:	70fb      	strb	r3, [r7, #3]
 800bec0:	4613      	mov	r3, r2
 800bec2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bec8:	4a0e      	ldr	r2, [pc, #56]	; (800bf04 <VL53L0X_WrWord+0x50>)
 800beca:	78fb      	ldrb	r3, [r7, #3]
 800becc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800bece:	883b      	ldrh	r3, [r7, #0]
 800bed0:	0a1b      	lsrs	r3, r3, #8
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	4b0b      	ldr	r3, [pc, #44]	; (800bf04 <VL53L0X_WrWord+0x50>)
 800bed8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800beda:	883b      	ldrh	r3, [r7, #0]
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <VL53L0X_WrWord+0x50>)
 800bee0:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800bee2:	2203      	movs	r2, #3
 800bee4:	4907      	ldr	r1, [pc, #28]	; (800bf04 <VL53L0X_WrWord+0x50>)
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f7ff ff23 	bl	800bd32 <_I2CWrite>
 800beec:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d001      	beq.n	800bef8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bef4:	23ec      	movs	r3, #236	; 0xec
 800bef6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	20001230 	.word	0x20001230

0800bf08 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	4608      	mov	r0, r1
 800bf12:	4611      	mov	r1, r2
 800bf14:	461a      	mov	r2, r3
 800bf16:	4603      	mov	r3, r0
 800bf18:	70fb      	strb	r3, [r7, #3]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	70bb      	strb	r3, [r7, #2]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf22:	2300      	movs	r3, #0
 800bf24:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800bf26:	f107 020e 	add.w	r2, r7, #14
 800bf2a:	78fb      	ldrb	r3, [r7, #3]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f81e 	bl	800bf70 <VL53L0X_RdByte>
 800bf34:	4603      	mov	r3, r0
 800bf36:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800bf38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d110      	bne.n	800bf62 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800bf40:	7bba      	ldrb	r2, [r7, #14]
 800bf42:	78bb      	ldrb	r3, [r7, #2]
 800bf44:	4013      	ands	r3, r2
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	787b      	ldrb	r3, [r7, #1]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bf50:	7bba      	ldrb	r2, [r7, #14]
 800bf52:	78fb      	ldrb	r3, [r7, #3]
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff ff88 	bl	800be6c <VL53L0X_WrByte>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	73fb      	strb	r3, [r7, #15]
 800bf60:	e000      	b.n	800bf64 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800bf62:	bf00      	nop
done:
    return Status;
 800bf64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bf82:	f107 030b 	add.w	r3, r7, #11
 800bf86:	2201      	movs	r2, #1
 800bf88:	4619      	mov	r1, r3
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7ff fed1 	bl	800bd32 <_I2CWrite>
 800bf90:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d002      	beq.n	800bf9e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bf98:	23ec      	movs	r3, #236	; 0xec
 800bf9a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bf9c:	e00c      	b.n	800bfb8 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f7ff fee4 	bl	800bd70 <_I2CRead>
 800bfa8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bfb0:	23ec      	movs	r3, #236	; 0xec
 800bfb2:	75fb      	strb	r3, [r7, #23]
 800bfb4:	e000      	b.n	800bfb8 <VL53L0X_RdByte+0x48>
    }
done:
 800bfb6:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bfb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bfd6:	f107 030b 	add.w	r3, r7, #11
 800bfda:	2201      	movs	r2, #1
 800bfdc:	4619      	mov	r1, r3
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f7ff fea7 	bl	800bd32 <_I2CWrite>
 800bfe4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d002      	beq.n	800bff2 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bfec:	23ec      	movs	r3, #236	; 0xec
 800bfee:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bff0:	e017      	b.n	800c022 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800bff2:	2202      	movs	r2, #2
 800bff4:	490e      	ldr	r1, [pc, #56]	; (800c030 <VL53L0X_RdWord+0x6c>)
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f7ff feba 	bl	800bd70 <_I2CRead>
 800bffc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c004:	23ec      	movs	r3, #236	; 0xec
 800c006:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c008:	e00b      	b.n	800c022 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800c00a:	4b09      	ldr	r3, [pc, #36]	; (800c030 <VL53L0X_RdWord+0x6c>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	b29b      	uxth	r3, r3
 800c010:	021b      	lsls	r3, r3, #8
 800c012:	b29a      	uxth	r2, r3
 800c014:	4b06      	ldr	r3, [pc, #24]	; (800c030 <VL53L0X_RdWord+0x6c>)
 800c016:	785b      	ldrb	r3, [r3, #1]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	4413      	add	r3, r2
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800c022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	20001230 	.word	0x20001230

0800c034 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	460b      	mov	r3, r1
 800c03e:	607a      	str	r2, [r7, #4]
 800c040:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c042:	2300      	movs	r3, #0
 800c044:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c046:	f107 030b 	add.w	r3, r7, #11
 800c04a:	2201      	movs	r2, #1
 800c04c:	4619      	mov	r1, r3
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f7ff fe6f 	bl	800bd32 <_I2CWrite>
 800c054:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d002      	beq.n	800c062 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c05c:	23ec      	movs	r3, #236	; 0xec
 800c05e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c060:	e01b      	b.n	800c09a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800c062:	2204      	movs	r2, #4
 800c064:	4910      	ldr	r1, [pc, #64]	; (800c0a8 <VL53L0X_RdDWord+0x74>)
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f7ff fe82 	bl	800bd70 <_I2CRead>
 800c06c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c074:	23ec      	movs	r3, #236	; 0xec
 800c076:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c078:	e00f      	b.n	800c09a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800c07a:	4b0b      	ldr	r3, [pc, #44]	; (800c0a8 <VL53L0X_RdDWord+0x74>)
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	061a      	lsls	r2, r3, #24
 800c080:	4b09      	ldr	r3, [pc, #36]	; (800c0a8 <VL53L0X_RdDWord+0x74>)
 800c082:	785b      	ldrb	r3, [r3, #1]
 800c084:	041b      	lsls	r3, r3, #16
 800c086:	441a      	add	r2, r3
 800c088:	4b07      	ldr	r3, [pc, #28]	; (800c0a8 <VL53L0X_RdDWord+0x74>)
 800c08a:	789b      	ldrb	r3, [r3, #2]
 800c08c:	021b      	lsls	r3, r3, #8
 800c08e:	4413      	add	r3, r2
 800c090:	4a05      	ldr	r2, [pc, #20]	; (800c0a8 <VL53L0X_RdDWord+0x74>)
 800c092:	78d2      	ldrb	r2, [r2, #3]
 800c094:	441a      	add	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800c09a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3718      	adds	r7, #24
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20001230 	.word	0x20001230

0800c0ac <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800c0b8:	2002      	movs	r0, #2
 800c0ba:	f7f6 ff0f 	bl	8002edc <HAL_Delay>
    return status;
 800c0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <__errno>:
 800c0cc:	4b01      	ldr	r3, [pc, #4]	; (800c0d4 <__errno+0x8>)
 800c0ce:	6818      	ldr	r0, [r3, #0]
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	200002cc 	.word	0x200002cc

0800c0d8 <__libc_init_array>:
 800c0d8:	b570      	push	{r4, r5, r6, lr}
 800c0da:	4d0d      	ldr	r5, [pc, #52]	; (800c110 <__libc_init_array+0x38>)
 800c0dc:	4c0d      	ldr	r4, [pc, #52]	; (800c114 <__libc_init_array+0x3c>)
 800c0de:	1b64      	subs	r4, r4, r5
 800c0e0:	10a4      	asrs	r4, r4, #2
 800c0e2:	2600      	movs	r6, #0
 800c0e4:	42a6      	cmp	r6, r4
 800c0e6:	d109      	bne.n	800c0fc <__libc_init_array+0x24>
 800c0e8:	4d0b      	ldr	r5, [pc, #44]	; (800c118 <__libc_init_array+0x40>)
 800c0ea:	4c0c      	ldr	r4, [pc, #48]	; (800c11c <__libc_init_array+0x44>)
 800c0ec:	f004 fd16 	bl	8010b1c <_init>
 800c0f0:	1b64      	subs	r4, r4, r5
 800c0f2:	10a4      	asrs	r4, r4, #2
 800c0f4:	2600      	movs	r6, #0
 800c0f6:	42a6      	cmp	r6, r4
 800c0f8:	d105      	bne.n	800c106 <__libc_init_array+0x2e>
 800c0fa:	bd70      	pop	{r4, r5, r6, pc}
 800c0fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c100:	4798      	blx	r3
 800c102:	3601      	adds	r6, #1
 800c104:	e7ee      	b.n	800c0e4 <__libc_init_array+0xc>
 800c106:	f855 3b04 	ldr.w	r3, [r5], #4
 800c10a:	4798      	blx	r3
 800c10c:	3601      	adds	r6, #1
 800c10e:	e7f2      	b.n	800c0f6 <__libc_init_array+0x1e>
 800c110:	08012194 	.word	0x08012194
 800c114:	08012194 	.word	0x08012194
 800c118:	08012194 	.word	0x08012194
 800c11c:	08012198 	.word	0x08012198

0800c120 <memcpy>:
 800c120:	440a      	add	r2, r1
 800c122:	4291      	cmp	r1, r2
 800c124:	f100 33ff 	add.w	r3, r0, #4294967295
 800c128:	d100      	bne.n	800c12c <memcpy+0xc>
 800c12a:	4770      	bx	lr
 800c12c:	b510      	push	{r4, lr}
 800c12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c132:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c136:	4291      	cmp	r1, r2
 800c138:	d1f9      	bne.n	800c12e <memcpy+0xe>
 800c13a:	bd10      	pop	{r4, pc}

0800c13c <memset>:
 800c13c:	4402      	add	r2, r0
 800c13e:	4603      	mov	r3, r0
 800c140:	4293      	cmp	r3, r2
 800c142:	d100      	bne.n	800c146 <memset+0xa>
 800c144:	4770      	bx	lr
 800c146:	f803 1b01 	strb.w	r1, [r3], #1
 800c14a:	e7f9      	b.n	800c140 <memset+0x4>

0800c14c <__cvt>:
 800c14c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c150:	ec55 4b10 	vmov	r4, r5, d0
 800c154:	2d00      	cmp	r5, #0
 800c156:	460e      	mov	r6, r1
 800c158:	4619      	mov	r1, r3
 800c15a:	462b      	mov	r3, r5
 800c15c:	bfbb      	ittet	lt
 800c15e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c162:	461d      	movlt	r5, r3
 800c164:	2300      	movge	r3, #0
 800c166:	232d      	movlt	r3, #45	; 0x2d
 800c168:	700b      	strb	r3, [r1, #0]
 800c16a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c16c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c170:	4691      	mov	r9, r2
 800c172:	f023 0820 	bic.w	r8, r3, #32
 800c176:	bfbc      	itt	lt
 800c178:	4622      	movlt	r2, r4
 800c17a:	4614      	movlt	r4, r2
 800c17c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c180:	d005      	beq.n	800c18e <__cvt+0x42>
 800c182:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c186:	d100      	bne.n	800c18a <__cvt+0x3e>
 800c188:	3601      	adds	r6, #1
 800c18a:	2102      	movs	r1, #2
 800c18c:	e000      	b.n	800c190 <__cvt+0x44>
 800c18e:	2103      	movs	r1, #3
 800c190:	ab03      	add	r3, sp, #12
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	ab02      	add	r3, sp, #8
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	ec45 4b10 	vmov	d0, r4, r5
 800c19c:	4653      	mov	r3, sl
 800c19e:	4632      	mov	r2, r6
 800c1a0:	f001 fdf2 	bl	800dd88 <_dtoa_r>
 800c1a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c1a8:	4607      	mov	r7, r0
 800c1aa:	d102      	bne.n	800c1b2 <__cvt+0x66>
 800c1ac:	f019 0f01 	tst.w	r9, #1
 800c1b0:	d022      	beq.n	800c1f8 <__cvt+0xac>
 800c1b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c1b6:	eb07 0906 	add.w	r9, r7, r6
 800c1ba:	d110      	bne.n	800c1de <__cvt+0x92>
 800c1bc:	783b      	ldrb	r3, [r7, #0]
 800c1be:	2b30      	cmp	r3, #48	; 0x30
 800c1c0:	d10a      	bne.n	800c1d8 <__cvt+0x8c>
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	f7f4 fc85 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1ce:	b918      	cbnz	r0, 800c1d8 <__cvt+0x8c>
 800c1d0:	f1c6 0601 	rsb	r6, r6, #1
 800c1d4:	f8ca 6000 	str.w	r6, [sl]
 800c1d8:	f8da 3000 	ldr.w	r3, [sl]
 800c1dc:	4499      	add	r9, r3
 800c1de:	2200      	movs	r2, #0
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	f7f4 fc77 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1ea:	b108      	cbz	r0, 800c1f0 <__cvt+0xa4>
 800c1ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1f0:	2230      	movs	r2, #48	; 0x30
 800c1f2:	9b03      	ldr	r3, [sp, #12]
 800c1f4:	454b      	cmp	r3, r9
 800c1f6:	d307      	bcc.n	800c208 <__cvt+0xbc>
 800c1f8:	9b03      	ldr	r3, [sp, #12]
 800c1fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1fc:	1bdb      	subs	r3, r3, r7
 800c1fe:	4638      	mov	r0, r7
 800c200:	6013      	str	r3, [r2, #0]
 800c202:	b004      	add	sp, #16
 800c204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c208:	1c59      	adds	r1, r3, #1
 800c20a:	9103      	str	r1, [sp, #12]
 800c20c:	701a      	strb	r2, [r3, #0]
 800c20e:	e7f0      	b.n	800c1f2 <__cvt+0xa6>

0800c210 <__exponent>:
 800c210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c212:	4603      	mov	r3, r0
 800c214:	2900      	cmp	r1, #0
 800c216:	bfb8      	it	lt
 800c218:	4249      	neglt	r1, r1
 800c21a:	f803 2b02 	strb.w	r2, [r3], #2
 800c21e:	bfb4      	ite	lt
 800c220:	222d      	movlt	r2, #45	; 0x2d
 800c222:	222b      	movge	r2, #43	; 0x2b
 800c224:	2909      	cmp	r1, #9
 800c226:	7042      	strb	r2, [r0, #1]
 800c228:	dd2a      	ble.n	800c280 <__exponent+0x70>
 800c22a:	f10d 0407 	add.w	r4, sp, #7
 800c22e:	46a4      	mov	ip, r4
 800c230:	270a      	movs	r7, #10
 800c232:	46a6      	mov	lr, r4
 800c234:	460a      	mov	r2, r1
 800c236:	fb91 f6f7 	sdiv	r6, r1, r7
 800c23a:	fb07 1516 	mls	r5, r7, r6, r1
 800c23e:	3530      	adds	r5, #48	; 0x30
 800c240:	2a63      	cmp	r2, #99	; 0x63
 800c242:	f104 34ff 	add.w	r4, r4, #4294967295
 800c246:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c24a:	4631      	mov	r1, r6
 800c24c:	dcf1      	bgt.n	800c232 <__exponent+0x22>
 800c24e:	3130      	adds	r1, #48	; 0x30
 800c250:	f1ae 0502 	sub.w	r5, lr, #2
 800c254:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c258:	1c44      	adds	r4, r0, #1
 800c25a:	4629      	mov	r1, r5
 800c25c:	4561      	cmp	r1, ip
 800c25e:	d30a      	bcc.n	800c276 <__exponent+0x66>
 800c260:	f10d 0209 	add.w	r2, sp, #9
 800c264:	eba2 020e 	sub.w	r2, r2, lr
 800c268:	4565      	cmp	r5, ip
 800c26a:	bf88      	it	hi
 800c26c:	2200      	movhi	r2, #0
 800c26e:	4413      	add	r3, r2
 800c270:	1a18      	subs	r0, r3, r0
 800c272:	b003      	add	sp, #12
 800c274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c27a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c27e:	e7ed      	b.n	800c25c <__exponent+0x4c>
 800c280:	2330      	movs	r3, #48	; 0x30
 800c282:	3130      	adds	r1, #48	; 0x30
 800c284:	7083      	strb	r3, [r0, #2]
 800c286:	70c1      	strb	r1, [r0, #3]
 800c288:	1d03      	adds	r3, r0, #4
 800c28a:	e7f1      	b.n	800c270 <__exponent+0x60>

0800c28c <_printf_float>:
 800c28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c290:	ed2d 8b02 	vpush	{d8}
 800c294:	b08d      	sub	sp, #52	; 0x34
 800c296:	460c      	mov	r4, r1
 800c298:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c29c:	4616      	mov	r6, r2
 800c29e:	461f      	mov	r7, r3
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	f002 fecf 	bl	800f044 <_localeconv_r>
 800c2a6:	f8d0 a000 	ldr.w	sl, [r0]
 800c2aa:	4650      	mov	r0, sl
 800c2ac:	f7f3 ff98 	bl	80001e0 <strlen>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2b4:	6823      	ldr	r3, [r4, #0]
 800c2b6:	9305      	str	r3, [sp, #20]
 800c2b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c2bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c2c0:	3307      	adds	r3, #7
 800c2c2:	f023 0307 	bic.w	r3, r3, #7
 800c2c6:	f103 0208 	add.w	r2, r3, #8
 800c2ca:	f8c8 2000 	str.w	r2, [r8]
 800c2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c2d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c2da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c2de:	9307      	str	r3, [sp, #28]
 800c2e0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2e4:	ee08 0a10 	vmov	s16, r0
 800c2e8:	4b9f      	ldr	r3, [pc, #636]	; (800c568 <_printf_float+0x2dc>)
 800c2ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f2:	f7f4 fc23 	bl	8000b3c <__aeabi_dcmpun>
 800c2f6:	bb88      	cbnz	r0, 800c35c <_printf_float+0xd0>
 800c2f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2fc:	4b9a      	ldr	r3, [pc, #616]	; (800c568 <_printf_float+0x2dc>)
 800c2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c302:	f7f4 fbfd 	bl	8000b00 <__aeabi_dcmple>
 800c306:	bb48      	cbnz	r0, 800c35c <_printf_float+0xd0>
 800c308:	2200      	movs	r2, #0
 800c30a:	2300      	movs	r3, #0
 800c30c:	4640      	mov	r0, r8
 800c30e:	4649      	mov	r1, r9
 800c310:	f7f4 fbec 	bl	8000aec <__aeabi_dcmplt>
 800c314:	b110      	cbz	r0, 800c31c <_printf_float+0x90>
 800c316:	232d      	movs	r3, #45	; 0x2d
 800c318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c31c:	4b93      	ldr	r3, [pc, #588]	; (800c56c <_printf_float+0x2e0>)
 800c31e:	4894      	ldr	r0, [pc, #592]	; (800c570 <_printf_float+0x2e4>)
 800c320:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c324:	bf94      	ite	ls
 800c326:	4698      	movls	r8, r3
 800c328:	4680      	movhi	r8, r0
 800c32a:	2303      	movs	r3, #3
 800c32c:	6123      	str	r3, [r4, #16]
 800c32e:	9b05      	ldr	r3, [sp, #20]
 800c330:	f023 0204 	bic.w	r2, r3, #4
 800c334:	6022      	str	r2, [r4, #0]
 800c336:	f04f 0900 	mov.w	r9, #0
 800c33a:	9700      	str	r7, [sp, #0]
 800c33c:	4633      	mov	r3, r6
 800c33e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c340:	4621      	mov	r1, r4
 800c342:	4628      	mov	r0, r5
 800c344:	f000 f9d8 	bl	800c6f8 <_printf_common>
 800c348:	3001      	adds	r0, #1
 800c34a:	f040 8090 	bne.w	800c46e <_printf_float+0x1e2>
 800c34e:	f04f 30ff 	mov.w	r0, #4294967295
 800c352:	b00d      	add	sp, #52	; 0x34
 800c354:	ecbd 8b02 	vpop	{d8}
 800c358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35c:	4642      	mov	r2, r8
 800c35e:	464b      	mov	r3, r9
 800c360:	4640      	mov	r0, r8
 800c362:	4649      	mov	r1, r9
 800c364:	f7f4 fbea 	bl	8000b3c <__aeabi_dcmpun>
 800c368:	b140      	cbz	r0, 800c37c <_printf_float+0xf0>
 800c36a:	464b      	mov	r3, r9
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	bfbc      	itt	lt
 800c370:	232d      	movlt	r3, #45	; 0x2d
 800c372:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c376:	487f      	ldr	r0, [pc, #508]	; (800c574 <_printf_float+0x2e8>)
 800c378:	4b7f      	ldr	r3, [pc, #508]	; (800c578 <_printf_float+0x2ec>)
 800c37a:	e7d1      	b.n	800c320 <_printf_float+0x94>
 800c37c:	6863      	ldr	r3, [r4, #4]
 800c37e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c382:	9206      	str	r2, [sp, #24]
 800c384:	1c5a      	adds	r2, r3, #1
 800c386:	d13f      	bne.n	800c408 <_printf_float+0x17c>
 800c388:	2306      	movs	r3, #6
 800c38a:	6063      	str	r3, [r4, #4]
 800c38c:	9b05      	ldr	r3, [sp, #20]
 800c38e:	6861      	ldr	r1, [r4, #4]
 800c390:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c394:	2300      	movs	r3, #0
 800c396:	9303      	str	r3, [sp, #12]
 800c398:	ab0a      	add	r3, sp, #40	; 0x28
 800c39a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c39e:	ab09      	add	r3, sp, #36	; 0x24
 800c3a0:	ec49 8b10 	vmov	d0, r8, r9
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	6022      	str	r2, [r4, #0]
 800c3a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f7ff fecd 	bl	800c14c <__cvt>
 800c3b2:	9b06      	ldr	r3, [sp, #24]
 800c3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3b6:	2b47      	cmp	r3, #71	; 0x47
 800c3b8:	4680      	mov	r8, r0
 800c3ba:	d108      	bne.n	800c3ce <_printf_float+0x142>
 800c3bc:	1cc8      	adds	r0, r1, #3
 800c3be:	db02      	blt.n	800c3c6 <_printf_float+0x13a>
 800c3c0:	6863      	ldr	r3, [r4, #4]
 800c3c2:	4299      	cmp	r1, r3
 800c3c4:	dd41      	ble.n	800c44a <_printf_float+0x1be>
 800c3c6:	f1ab 0b02 	sub.w	fp, fp, #2
 800c3ca:	fa5f fb8b 	uxtb.w	fp, fp
 800c3ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3d2:	d820      	bhi.n	800c416 <_printf_float+0x18a>
 800c3d4:	3901      	subs	r1, #1
 800c3d6:	465a      	mov	r2, fp
 800c3d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c3dc:	9109      	str	r1, [sp, #36]	; 0x24
 800c3de:	f7ff ff17 	bl	800c210 <__exponent>
 800c3e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3e4:	1813      	adds	r3, r2, r0
 800c3e6:	2a01      	cmp	r2, #1
 800c3e8:	4681      	mov	r9, r0
 800c3ea:	6123      	str	r3, [r4, #16]
 800c3ec:	dc02      	bgt.n	800c3f4 <_printf_float+0x168>
 800c3ee:	6822      	ldr	r2, [r4, #0]
 800c3f0:	07d2      	lsls	r2, r2, #31
 800c3f2:	d501      	bpl.n	800c3f8 <_printf_float+0x16c>
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	6123      	str	r3, [r4, #16]
 800c3f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d09c      	beq.n	800c33a <_printf_float+0xae>
 800c400:	232d      	movs	r3, #45	; 0x2d
 800c402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c406:	e798      	b.n	800c33a <_printf_float+0xae>
 800c408:	9a06      	ldr	r2, [sp, #24]
 800c40a:	2a47      	cmp	r2, #71	; 0x47
 800c40c:	d1be      	bne.n	800c38c <_printf_float+0x100>
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1bc      	bne.n	800c38c <_printf_float+0x100>
 800c412:	2301      	movs	r3, #1
 800c414:	e7b9      	b.n	800c38a <_printf_float+0xfe>
 800c416:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c41a:	d118      	bne.n	800c44e <_printf_float+0x1c2>
 800c41c:	2900      	cmp	r1, #0
 800c41e:	6863      	ldr	r3, [r4, #4]
 800c420:	dd0b      	ble.n	800c43a <_printf_float+0x1ae>
 800c422:	6121      	str	r1, [r4, #16]
 800c424:	b913      	cbnz	r3, 800c42c <_printf_float+0x1a0>
 800c426:	6822      	ldr	r2, [r4, #0]
 800c428:	07d0      	lsls	r0, r2, #31
 800c42a:	d502      	bpl.n	800c432 <_printf_float+0x1a6>
 800c42c:	3301      	adds	r3, #1
 800c42e:	440b      	add	r3, r1
 800c430:	6123      	str	r3, [r4, #16]
 800c432:	65a1      	str	r1, [r4, #88]	; 0x58
 800c434:	f04f 0900 	mov.w	r9, #0
 800c438:	e7de      	b.n	800c3f8 <_printf_float+0x16c>
 800c43a:	b913      	cbnz	r3, 800c442 <_printf_float+0x1b6>
 800c43c:	6822      	ldr	r2, [r4, #0]
 800c43e:	07d2      	lsls	r2, r2, #31
 800c440:	d501      	bpl.n	800c446 <_printf_float+0x1ba>
 800c442:	3302      	adds	r3, #2
 800c444:	e7f4      	b.n	800c430 <_printf_float+0x1a4>
 800c446:	2301      	movs	r3, #1
 800c448:	e7f2      	b.n	800c430 <_printf_float+0x1a4>
 800c44a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c450:	4299      	cmp	r1, r3
 800c452:	db05      	blt.n	800c460 <_printf_float+0x1d4>
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	6121      	str	r1, [r4, #16]
 800c458:	07d8      	lsls	r0, r3, #31
 800c45a:	d5ea      	bpl.n	800c432 <_printf_float+0x1a6>
 800c45c:	1c4b      	adds	r3, r1, #1
 800c45e:	e7e7      	b.n	800c430 <_printf_float+0x1a4>
 800c460:	2900      	cmp	r1, #0
 800c462:	bfd4      	ite	le
 800c464:	f1c1 0202 	rsble	r2, r1, #2
 800c468:	2201      	movgt	r2, #1
 800c46a:	4413      	add	r3, r2
 800c46c:	e7e0      	b.n	800c430 <_printf_float+0x1a4>
 800c46e:	6823      	ldr	r3, [r4, #0]
 800c470:	055a      	lsls	r2, r3, #21
 800c472:	d407      	bmi.n	800c484 <_printf_float+0x1f8>
 800c474:	6923      	ldr	r3, [r4, #16]
 800c476:	4642      	mov	r2, r8
 800c478:	4631      	mov	r1, r6
 800c47a:	4628      	mov	r0, r5
 800c47c:	47b8      	blx	r7
 800c47e:	3001      	adds	r0, #1
 800c480:	d12c      	bne.n	800c4dc <_printf_float+0x250>
 800c482:	e764      	b.n	800c34e <_printf_float+0xc2>
 800c484:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c488:	f240 80e0 	bls.w	800c64c <_printf_float+0x3c0>
 800c48c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c490:	2200      	movs	r2, #0
 800c492:	2300      	movs	r3, #0
 800c494:	f7f4 fb20 	bl	8000ad8 <__aeabi_dcmpeq>
 800c498:	2800      	cmp	r0, #0
 800c49a:	d034      	beq.n	800c506 <_printf_float+0x27a>
 800c49c:	4a37      	ldr	r2, [pc, #220]	; (800c57c <_printf_float+0x2f0>)
 800c49e:	2301      	movs	r3, #1
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	47b8      	blx	r7
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	f43f af51 	beq.w	800c34e <_printf_float+0xc2>
 800c4ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	db02      	blt.n	800c4ba <_printf_float+0x22e>
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	07d8      	lsls	r0, r3, #31
 800c4b8:	d510      	bpl.n	800c4dc <_printf_float+0x250>
 800c4ba:	ee18 3a10 	vmov	r3, s16
 800c4be:	4652      	mov	r2, sl
 800c4c0:	4631      	mov	r1, r6
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	47b8      	blx	r7
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	f43f af41 	beq.w	800c34e <_printf_float+0xc2>
 800c4cc:	f04f 0800 	mov.w	r8, #0
 800c4d0:	f104 091a 	add.w	r9, r4, #26
 800c4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	4543      	cmp	r3, r8
 800c4da:	dc09      	bgt.n	800c4f0 <_printf_float+0x264>
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	079b      	lsls	r3, r3, #30
 800c4e0:	f100 8105 	bmi.w	800c6ee <_printf_float+0x462>
 800c4e4:	68e0      	ldr	r0, [r4, #12]
 800c4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4e8:	4298      	cmp	r0, r3
 800c4ea:	bfb8      	it	lt
 800c4ec:	4618      	movlt	r0, r3
 800c4ee:	e730      	b.n	800c352 <_printf_float+0xc6>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	464a      	mov	r2, r9
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	47b8      	blx	r7
 800c4fa:	3001      	adds	r0, #1
 800c4fc:	f43f af27 	beq.w	800c34e <_printf_float+0xc2>
 800c500:	f108 0801 	add.w	r8, r8, #1
 800c504:	e7e6      	b.n	800c4d4 <_printf_float+0x248>
 800c506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	dc39      	bgt.n	800c580 <_printf_float+0x2f4>
 800c50c:	4a1b      	ldr	r2, [pc, #108]	; (800c57c <_printf_float+0x2f0>)
 800c50e:	2301      	movs	r3, #1
 800c510:	4631      	mov	r1, r6
 800c512:	4628      	mov	r0, r5
 800c514:	47b8      	blx	r7
 800c516:	3001      	adds	r0, #1
 800c518:	f43f af19 	beq.w	800c34e <_printf_float+0xc2>
 800c51c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c520:	4313      	orrs	r3, r2
 800c522:	d102      	bne.n	800c52a <_printf_float+0x29e>
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	07d9      	lsls	r1, r3, #31
 800c528:	d5d8      	bpl.n	800c4dc <_printf_float+0x250>
 800c52a:	ee18 3a10 	vmov	r3, s16
 800c52e:	4652      	mov	r2, sl
 800c530:	4631      	mov	r1, r6
 800c532:	4628      	mov	r0, r5
 800c534:	47b8      	blx	r7
 800c536:	3001      	adds	r0, #1
 800c538:	f43f af09 	beq.w	800c34e <_printf_float+0xc2>
 800c53c:	f04f 0900 	mov.w	r9, #0
 800c540:	f104 0a1a 	add.w	sl, r4, #26
 800c544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c546:	425b      	negs	r3, r3
 800c548:	454b      	cmp	r3, r9
 800c54a:	dc01      	bgt.n	800c550 <_printf_float+0x2c4>
 800c54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c54e:	e792      	b.n	800c476 <_printf_float+0x1ea>
 800c550:	2301      	movs	r3, #1
 800c552:	4652      	mov	r2, sl
 800c554:	4631      	mov	r1, r6
 800c556:	4628      	mov	r0, r5
 800c558:	47b8      	blx	r7
 800c55a:	3001      	adds	r0, #1
 800c55c:	f43f aef7 	beq.w	800c34e <_printf_float+0xc2>
 800c560:	f109 0901 	add.w	r9, r9, #1
 800c564:	e7ee      	b.n	800c544 <_printf_float+0x2b8>
 800c566:	bf00      	nop
 800c568:	7fefffff 	.word	0x7fefffff
 800c56c:	08011ce8 	.word	0x08011ce8
 800c570:	08011cec 	.word	0x08011cec
 800c574:	08011cf4 	.word	0x08011cf4
 800c578:	08011cf0 	.word	0x08011cf0
 800c57c:	08011cf8 	.word	0x08011cf8
 800c580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c582:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c584:	429a      	cmp	r2, r3
 800c586:	bfa8      	it	ge
 800c588:	461a      	movge	r2, r3
 800c58a:	2a00      	cmp	r2, #0
 800c58c:	4691      	mov	r9, r2
 800c58e:	dc37      	bgt.n	800c600 <_printf_float+0x374>
 800c590:	f04f 0b00 	mov.w	fp, #0
 800c594:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c598:	f104 021a 	add.w	r2, r4, #26
 800c59c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c59e:	9305      	str	r3, [sp, #20]
 800c5a0:	eba3 0309 	sub.w	r3, r3, r9
 800c5a4:	455b      	cmp	r3, fp
 800c5a6:	dc33      	bgt.n	800c610 <_printf_float+0x384>
 800c5a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	db3b      	blt.n	800c628 <_printf_float+0x39c>
 800c5b0:	6823      	ldr	r3, [r4, #0]
 800c5b2:	07da      	lsls	r2, r3, #31
 800c5b4:	d438      	bmi.n	800c628 <_printf_float+0x39c>
 800c5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5b8:	9a05      	ldr	r2, [sp, #20]
 800c5ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5bc:	1a9a      	subs	r2, r3, r2
 800c5be:	eba3 0901 	sub.w	r9, r3, r1
 800c5c2:	4591      	cmp	r9, r2
 800c5c4:	bfa8      	it	ge
 800c5c6:	4691      	movge	r9, r2
 800c5c8:	f1b9 0f00 	cmp.w	r9, #0
 800c5cc:	dc35      	bgt.n	800c63a <_printf_float+0x3ae>
 800c5ce:	f04f 0800 	mov.w	r8, #0
 800c5d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5d6:	f104 0a1a 	add.w	sl, r4, #26
 800c5da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5de:	1a9b      	subs	r3, r3, r2
 800c5e0:	eba3 0309 	sub.w	r3, r3, r9
 800c5e4:	4543      	cmp	r3, r8
 800c5e6:	f77f af79 	ble.w	800c4dc <_printf_float+0x250>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	4652      	mov	r2, sl
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	47b8      	blx	r7
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	f43f aeaa 	beq.w	800c34e <_printf_float+0xc2>
 800c5fa:	f108 0801 	add.w	r8, r8, #1
 800c5fe:	e7ec      	b.n	800c5da <_printf_float+0x34e>
 800c600:	4613      	mov	r3, r2
 800c602:	4631      	mov	r1, r6
 800c604:	4642      	mov	r2, r8
 800c606:	4628      	mov	r0, r5
 800c608:	47b8      	blx	r7
 800c60a:	3001      	adds	r0, #1
 800c60c:	d1c0      	bne.n	800c590 <_printf_float+0x304>
 800c60e:	e69e      	b.n	800c34e <_printf_float+0xc2>
 800c610:	2301      	movs	r3, #1
 800c612:	4631      	mov	r1, r6
 800c614:	4628      	mov	r0, r5
 800c616:	9205      	str	r2, [sp, #20]
 800c618:	47b8      	blx	r7
 800c61a:	3001      	adds	r0, #1
 800c61c:	f43f ae97 	beq.w	800c34e <_printf_float+0xc2>
 800c620:	9a05      	ldr	r2, [sp, #20]
 800c622:	f10b 0b01 	add.w	fp, fp, #1
 800c626:	e7b9      	b.n	800c59c <_printf_float+0x310>
 800c628:	ee18 3a10 	vmov	r3, s16
 800c62c:	4652      	mov	r2, sl
 800c62e:	4631      	mov	r1, r6
 800c630:	4628      	mov	r0, r5
 800c632:	47b8      	blx	r7
 800c634:	3001      	adds	r0, #1
 800c636:	d1be      	bne.n	800c5b6 <_printf_float+0x32a>
 800c638:	e689      	b.n	800c34e <_printf_float+0xc2>
 800c63a:	9a05      	ldr	r2, [sp, #20]
 800c63c:	464b      	mov	r3, r9
 800c63e:	4442      	add	r2, r8
 800c640:	4631      	mov	r1, r6
 800c642:	4628      	mov	r0, r5
 800c644:	47b8      	blx	r7
 800c646:	3001      	adds	r0, #1
 800c648:	d1c1      	bne.n	800c5ce <_printf_float+0x342>
 800c64a:	e680      	b.n	800c34e <_printf_float+0xc2>
 800c64c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c64e:	2a01      	cmp	r2, #1
 800c650:	dc01      	bgt.n	800c656 <_printf_float+0x3ca>
 800c652:	07db      	lsls	r3, r3, #31
 800c654:	d538      	bpl.n	800c6c8 <_printf_float+0x43c>
 800c656:	2301      	movs	r3, #1
 800c658:	4642      	mov	r2, r8
 800c65a:	4631      	mov	r1, r6
 800c65c:	4628      	mov	r0, r5
 800c65e:	47b8      	blx	r7
 800c660:	3001      	adds	r0, #1
 800c662:	f43f ae74 	beq.w	800c34e <_printf_float+0xc2>
 800c666:	ee18 3a10 	vmov	r3, s16
 800c66a:	4652      	mov	r2, sl
 800c66c:	4631      	mov	r1, r6
 800c66e:	4628      	mov	r0, r5
 800c670:	47b8      	blx	r7
 800c672:	3001      	adds	r0, #1
 800c674:	f43f ae6b 	beq.w	800c34e <_printf_float+0xc2>
 800c678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c67c:	2200      	movs	r2, #0
 800c67e:	2300      	movs	r3, #0
 800c680:	f7f4 fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c684:	b9d8      	cbnz	r0, 800c6be <_printf_float+0x432>
 800c686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c688:	f108 0201 	add.w	r2, r8, #1
 800c68c:	3b01      	subs	r3, #1
 800c68e:	4631      	mov	r1, r6
 800c690:	4628      	mov	r0, r5
 800c692:	47b8      	blx	r7
 800c694:	3001      	adds	r0, #1
 800c696:	d10e      	bne.n	800c6b6 <_printf_float+0x42a>
 800c698:	e659      	b.n	800c34e <_printf_float+0xc2>
 800c69a:	2301      	movs	r3, #1
 800c69c:	4652      	mov	r2, sl
 800c69e:	4631      	mov	r1, r6
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	47b8      	blx	r7
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	f43f ae52 	beq.w	800c34e <_printf_float+0xc2>
 800c6aa:	f108 0801 	add.w	r8, r8, #1
 800c6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	4543      	cmp	r3, r8
 800c6b4:	dcf1      	bgt.n	800c69a <_printf_float+0x40e>
 800c6b6:	464b      	mov	r3, r9
 800c6b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c6bc:	e6dc      	b.n	800c478 <_printf_float+0x1ec>
 800c6be:	f04f 0800 	mov.w	r8, #0
 800c6c2:	f104 0a1a 	add.w	sl, r4, #26
 800c6c6:	e7f2      	b.n	800c6ae <_printf_float+0x422>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	4642      	mov	r2, r8
 800c6cc:	e7df      	b.n	800c68e <_printf_float+0x402>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	464a      	mov	r2, r9
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b8      	blx	r7
 800c6d8:	3001      	adds	r0, #1
 800c6da:	f43f ae38 	beq.w	800c34e <_printf_float+0xc2>
 800c6de:	f108 0801 	add.w	r8, r8, #1
 800c6e2:	68e3      	ldr	r3, [r4, #12]
 800c6e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6e6:	1a5b      	subs	r3, r3, r1
 800c6e8:	4543      	cmp	r3, r8
 800c6ea:	dcf0      	bgt.n	800c6ce <_printf_float+0x442>
 800c6ec:	e6fa      	b.n	800c4e4 <_printf_float+0x258>
 800c6ee:	f04f 0800 	mov.w	r8, #0
 800c6f2:	f104 0919 	add.w	r9, r4, #25
 800c6f6:	e7f4      	b.n	800c6e2 <_printf_float+0x456>

0800c6f8 <_printf_common>:
 800c6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6fc:	4616      	mov	r6, r2
 800c6fe:	4699      	mov	r9, r3
 800c700:	688a      	ldr	r2, [r1, #8]
 800c702:	690b      	ldr	r3, [r1, #16]
 800c704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c708:	4293      	cmp	r3, r2
 800c70a:	bfb8      	it	lt
 800c70c:	4613      	movlt	r3, r2
 800c70e:	6033      	str	r3, [r6, #0]
 800c710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c714:	4607      	mov	r7, r0
 800c716:	460c      	mov	r4, r1
 800c718:	b10a      	cbz	r2, 800c71e <_printf_common+0x26>
 800c71a:	3301      	adds	r3, #1
 800c71c:	6033      	str	r3, [r6, #0]
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	0699      	lsls	r1, r3, #26
 800c722:	bf42      	ittt	mi
 800c724:	6833      	ldrmi	r3, [r6, #0]
 800c726:	3302      	addmi	r3, #2
 800c728:	6033      	strmi	r3, [r6, #0]
 800c72a:	6825      	ldr	r5, [r4, #0]
 800c72c:	f015 0506 	ands.w	r5, r5, #6
 800c730:	d106      	bne.n	800c740 <_printf_common+0x48>
 800c732:	f104 0a19 	add.w	sl, r4, #25
 800c736:	68e3      	ldr	r3, [r4, #12]
 800c738:	6832      	ldr	r2, [r6, #0]
 800c73a:	1a9b      	subs	r3, r3, r2
 800c73c:	42ab      	cmp	r3, r5
 800c73e:	dc26      	bgt.n	800c78e <_printf_common+0x96>
 800c740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c744:	1e13      	subs	r3, r2, #0
 800c746:	6822      	ldr	r2, [r4, #0]
 800c748:	bf18      	it	ne
 800c74a:	2301      	movne	r3, #1
 800c74c:	0692      	lsls	r2, r2, #26
 800c74e:	d42b      	bmi.n	800c7a8 <_printf_common+0xb0>
 800c750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c754:	4649      	mov	r1, r9
 800c756:	4638      	mov	r0, r7
 800c758:	47c0      	blx	r8
 800c75a:	3001      	adds	r0, #1
 800c75c:	d01e      	beq.n	800c79c <_printf_common+0xa4>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	68e5      	ldr	r5, [r4, #12]
 800c762:	6832      	ldr	r2, [r6, #0]
 800c764:	f003 0306 	and.w	r3, r3, #6
 800c768:	2b04      	cmp	r3, #4
 800c76a:	bf08      	it	eq
 800c76c:	1aad      	subeq	r5, r5, r2
 800c76e:	68a3      	ldr	r3, [r4, #8]
 800c770:	6922      	ldr	r2, [r4, #16]
 800c772:	bf0c      	ite	eq
 800c774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c778:	2500      	movne	r5, #0
 800c77a:	4293      	cmp	r3, r2
 800c77c:	bfc4      	itt	gt
 800c77e:	1a9b      	subgt	r3, r3, r2
 800c780:	18ed      	addgt	r5, r5, r3
 800c782:	2600      	movs	r6, #0
 800c784:	341a      	adds	r4, #26
 800c786:	42b5      	cmp	r5, r6
 800c788:	d11a      	bne.n	800c7c0 <_printf_common+0xc8>
 800c78a:	2000      	movs	r0, #0
 800c78c:	e008      	b.n	800c7a0 <_printf_common+0xa8>
 800c78e:	2301      	movs	r3, #1
 800c790:	4652      	mov	r2, sl
 800c792:	4649      	mov	r1, r9
 800c794:	4638      	mov	r0, r7
 800c796:	47c0      	blx	r8
 800c798:	3001      	adds	r0, #1
 800c79a:	d103      	bne.n	800c7a4 <_printf_common+0xac>
 800c79c:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a4:	3501      	adds	r5, #1
 800c7a6:	e7c6      	b.n	800c736 <_printf_common+0x3e>
 800c7a8:	18e1      	adds	r1, r4, r3
 800c7aa:	1c5a      	adds	r2, r3, #1
 800c7ac:	2030      	movs	r0, #48	; 0x30
 800c7ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7b2:	4422      	add	r2, r4
 800c7b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7bc:	3302      	adds	r3, #2
 800c7be:	e7c7      	b.n	800c750 <_printf_common+0x58>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	4622      	mov	r2, r4
 800c7c4:	4649      	mov	r1, r9
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	47c0      	blx	r8
 800c7ca:	3001      	adds	r0, #1
 800c7cc:	d0e6      	beq.n	800c79c <_printf_common+0xa4>
 800c7ce:	3601      	adds	r6, #1
 800c7d0:	e7d9      	b.n	800c786 <_printf_common+0x8e>
	...

0800c7d4 <_printf_i>:
 800c7d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d8:	7e0f      	ldrb	r7, [r1, #24]
 800c7da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7dc:	2f78      	cmp	r7, #120	; 0x78
 800c7de:	4691      	mov	r9, r2
 800c7e0:	4680      	mov	r8, r0
 800c7e2:	460c      	mov	r4, r1
 800c7e4:	469a      	mov	sl, r3
 800c7e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c7ea:	d807      	bhi.n	800c7fc <_printf_i+0x28>
 800c7ec:	2f62      	cmp	r7, #98	; 0x62
 800c7ee:	d80a      	bhi.n	800c806 <_printf_i+0x32>
 800c7f0:	2f00      	cmp	r7, #0
 800c7f2:	f000 80d8 	beq.w	800c9a6 <_printf_i+0x1d2>
 800c7f6:	2f58      	cmp	r7, #88	; 0x58
 800c7f8:	f000 80a3 	beq.w	800c942 <_printf_i+0x16e>
 800c7fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c804:	e03a      	b.n	800c87c <_printf_i+0xa8>
 800c806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c80a:	2b15      	cmp	r3, #21
 800c80c:	d8f6      	bhi.n	800c7fc <_printf_i+0x28>
 800c80e:	a101      	add	r1, pc, #4	; (adr r1, 800c814 <_printf_i+0x40>)
 800c810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c814:	0800c86d 	.word	0x0800c86d
 800c818:	0800c881 	.word	0x0800c881
 800c81c:	0800c7fd 	.word	0x0800c7fd
 800c820:	0800c7fd 	.word	0x0800c7fd
 800c824:	0800c7fd 	.word	0x0800c7fd
 800c828:	0800c7fd 	.word	0x0800c7fd
 800c82c:	0800c881 	.word	0x0800c881
 800c830:	0800c7fd 	.word	0x0800c7fd
 800c834:	0800c7fd 	.word	0x0800c7fd
 800c838:	0800c7fd 	.word	0x0800c7fd
 800c83c:	0800c7fd 	.word	0x0800c7fd
 800c840:	0800c98d 	.word	0x0800c98d
 800c844:	0800c8b1 	.word	0x0800c8b1
 800c848:	0800c96f 	.word	0x0800c96f
 800c84c:	0800c7fd 	.word	0x0800c7fd
 800c850:	0800c7fd 	.word	0x0800c7fd
 800c854:	0800c9af 	.word	0x0800c9af
 800c858:	0800c7fd 	.word	0x0800c7fd
 800c85c:	0800c8b1 	.word	0x0800c8b1
 800c860:	0800c7fd 	.word	0x0800c7fd
 800c864:	0800c7fd 	.word	0x0800c7fd
 800c868:	0800c977 	.word	0x0800c977
 800c86c:	682b      	ldr	r3, [r5, #0]
 800c86e:	1d1a      	adds	r2, r3, #4
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	602a      	str	r2, [r5, #0]
 800c874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c87c:	2301      	movs	r3, #1
 800c87e:	e0a3      	b.n	800c9c8 <_printf_i+0x1f4>
 800c880:	6820      	ldr	r0, [r4, #0]
 800c882:	6829      	ldr	r1, [r5, #0]
 800c884:	0606      	lsls	r6, r0, #24
 800c886:	f101 0304 	add.w	r3, r1, #4
 800c88a:	d50a      	bpl.n	800c8a2 <_printf_i+0xce>
 800c88c:	680e      	ldr	r6, [r1, #0]
 800c88e:	602b      	str	r3, [r5, #0]
 800c890:	2e00      	cmp	r6, #0
 800c892:	da03      	bge.n	800c89c <_printf_i+0xc8>
 800c894:	232d      	movs	r3, #45	; 0x2d
 800c896:	4276      	negs	r6, r6
 800c898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c89c:	485e      	ldr	r0, [pc, #376]	; (800ca18 <_printf_i+0x244>)
 800c89e:	230a      	movs	r3, #10
 800c8a0:	e019      	b.n	800c8d6 <_printf_i+0x102>
 800c8a2:	680e      	ldr	r6, [r1, #0]
 800c8a4:	602b      	str	r3, [r5, #0]
 800c8a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c8aa:	bf18      	it	ne
 800c8ac:	b236      	sxthne	r6, r6
 800c8ae:	e7ef      	b.n	800c890 <_printf_i+0xbc>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	6820      	ldr	r0, [r4, #0]
 800c8b4:	1d19      	adds	r1, r3, #4
 800c8b6:	6029      	str	r1, [r5, #0]
 800c8b8:	0601      	lsls	r1, r0, #24
 800c8ba:	d501      	bpl.n	800c8c0 <_printf_i+0xec>
 800c8bc:	681e      	ldr	r6, [r3, #0]
 800c8be:	e002      	b.n	800c8c6 <_printf_i+0xf2>
 800c8c0:	0646      	lsls	r6, r0, #25
 800c8c2:	d5fb      	bpl.n	800c8bc <_printf_i+0xe8>
 800c8c4:	881e      	ldrh	r6, [r3, #0]
 800c8c6:	4854      	ldr	r0, [pc, #336]	; (800ca18 <_printf_i+0x244>)
 800c8c8:	2f6f      	cmp	r7, #111	; 0x6f
 800c8ca:	bf0c      	ite	eq
 800c8cc:	2308      	moveq	r3, #8
 800c8ce:	230a      	movne	r3, #10
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8d6:	6865      	ldr	r5, [r4, #4]
 800c8d8:	60a5      	str	r5, [r4, #8]
 800c8da:	2d00      	cmp	r5, #0
 800c8dc:	bfa2      	ittt	ge
 800c8de:	6821      	ldrge	r1, [r4, #0]
 800c8e0:	f021 0104 	bicge.w	r1, r1, #4
 800c8e4:	6021      	strge	r1, [r4, #0]
 800c8e6:	b90e      	cbnz	r6, 800c8ec <_printf_i+0x118>
 800c8e8:	2d00      	cmp	r5, #0
 800c8ea:	d04d      	beq.n	800c988 <_printf_i+0x1b4>
 800c8ec:	4615      	mov	r5, r2
 800c8ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800c8f2:	fb03 6711 	mls	r7, r3, r1, r6
 800c8f6:	5dc7      	ldrb	r7, [r0, r7]
 800c8f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c8fc:	4637      	mov	r7, r6
 800c8fe:	42bb      	cmp	r3, r7
 800c900:	460e      	mov	r6, r1
 800c902:	d9f4      	bls.n	800c8ee <_printf_i+0x11a>
 800c904:	2b08      	cmp	r3, #8
 800c906:	d10b      	bne.n	800c920 <_printf_i+0x14c>
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	07de      	lsls	r6, r3, #31
 800c90c:	d508      	bpl.n	800c920 <_printf_i+0x14c>
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	6861      	ldr	r1, [r4, #4]
 800c912:	4299      	cmp	r1, r3
 800c914:	bfde      	ittt	le
 800c916:	2330      	movle	r3, #48	; 0x30
 800c918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c91c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c920:	1b52      	subs	r2, r2, r5
 800c922:	6122      	str	r2, [r4, #16]
 800c924:	f8cd a000 	str.w	sl, [sp]
 800c928:	464b      	mov	r3, r9
 800c92a:	aa03      	add	r2, sp, #12
 800c92c:	4621      	mov	r1, r4
 800c92e:	4640      	mov	r0, r8
 800c930:	f7ff fee2 	bl	800c6f8 <_printf_common>
 800c934:	3001      	adds	r0, #1
 800c936:	d14c      	bne.n	800c9d2 <_printf_i+0x1fe>
 800c938:	f04f 30ff 	mov.w	r0, #4294967295
 800c93c:	b004      	add	sp, #16
 800c93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c942:	4835      	ldr	r0, [pc, #212]	; (800ca18 <_printf_i+0x244>)
 800c944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c948:	6829      	ldr	r1, [r5, #0]
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c950:	6029      	str	r1, [r5, #0]
 800c952:	061d      	lsls	r5, r3, #24
 800c954:	d514      	bpl.n	800c980 <_printf_i+0x1ac>
 800c956:	07df      	lsls	r7, r3, #31
 800c958:	bf44      	itt	mi
 800c95a:	f043 0320 	orrmi.w	r3, r3, #32
 800c95e:	6023      	strmi	r3, [r4, #0]
 800c960:	b91e      	cbnz	r6, 800c96a <_printf_i+0x196>
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	f023 0320 	bic.w	r3, r3, #32
 800c968:	6023      	str	r3, [r4, #0]
 800c96a:	2310      	movs	r3, #16
 800c96c:	e7b0      	b.n	800c8d0 <_printf_i+0xfc>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	f043 0320 	orr.w	r3, r3, #32
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	2378      	movs	r3, #120	; 0x78
 800c978:	4828      	ldr	r0, [pc, #160]	; (800ca1c <_printf_i+0x248>)
 800c97a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c97e:	e7e3      	b.n	800c948 <_printf_i+0x174>
 800c980:	0659      	lsls	r1, r3, #25
 800c982:	bf48      	it	mi
 800c984:	b2b6      	uxthmi	r6, r6
 800c986:	e7e6      	b.n	800c956 <_printf_i+0x182>
 800c988:	4615      	mov	r5, r2
 800c98a:	e7bb      	b.n	800c904 <_printf_i+0x130>
 800c98c:	682b      	ldr	r3, [r5, #0]
 800c98e:	6826      	ldr	r6, [r4, #0]
 800c990:	6961      	ldr	r1, [r4, #20]
 800c992:	1d18      	adds	r0, r3, #4
 800c994:	6028      	str	r0, [r5, #0]
 800c996:	0635      	lsls	r5, r6, #24
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	d501      	bpl.n	800c9a0 <_printf_i+0x1cc>
 800c99c:	6019      	str	r1, [r3, #0]
 800c99e:	e002      	b.n	800c9a6 <_printf_i+0x1d2>
 800c9a0:	0670      	lsls	r0, r6, #25
 800c9a2:	d5fb      	bpl.n	800c99c <_printf_i+0x1c8>
 800c9a4:	8019      	strh	r1, [r3, #0]
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	6123      	str	r3, [r4, #16]
 800c9aa:	4615      	mov	r5, r2
 800c9ac:	e7ba      	b.n	800c924 <_printf_i+0x150>
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	1d1a      	adds	r2, r3, #4
 800c9b2:	602a      	str	r2, [r5, #0]
 800c9b4:	681d      	ldr	r5, [r3, #0]
 800c9b6:	6862      	ldr	r2, [r4, #4]
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	f7f3 fc18 	bl	80001f0 <memchr>
 800c9c0:	b108      	cbz	r0, 800c9c6 <_printf_i+0x1f2>
 800c9c2:	1b40      	subs	r0, r0, r5
 800c9c4:	6060      	str	r0, [r4, #4]
 800c9c6:	6863      	ldr	r3, [r4, #4]
 800c9c8:	6123      	str	r3, [r4, #16]
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9d0:	e7a8      	b.n	800c924 <_printf_i+0x150>
 800c9d2:	6923      	ldr	r3, [r4, #16]
 800c9d4:	462a      	mov	r2, r5
 800c9d6:	4649      	mov	r1, r9
 800c9d8:	4640      	mov	r0, r8
 800c9da:	47d0      	blx	sl
 800c9dc:	3001      	adds	r0, #1
 800c9de:	d0ab      	beq.n	800c938 <_printf_i+0x164>
 800c9e0:	6823      	ldr	r3, [r4, #0]
 800c9e2:	079b      	lsls	r3, r3, #30
 800c9e4:	d413      	bmi.n	800ca0e <_printf_i+0x23a>
 800c9e6:	68e0      	ldr	r0, [r4, #12]
 800c9e8:	9b03      	ldr	r3, [sp, #12]
 800c9ea:	4298      	cmp	r0, r3
 800c9ec:	bfb8      	it	lt
 800c9ee:	4618      	movlt	r0, r3
 800c9f0:	e7a4      	b.n	800c93c <_printf_i+0x168>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	4632      	mov	r2, r6
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	4640      	mov	r0, r8
 800c9fa:	47d0      	blx	sl
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	d09b      	beq.n	800c938 <_printf_i+0x164>
 800ca00:	3501      	adds	r5, #1
 800ca02:	68e3      	ldr	r3, [r4, #12]
 800ca04:	9903      	ldr	r1, [sp, #12]
 800ca06:	1a5b      	subs	r3, r3, r1
 800ca08:	42ab      	cmp	r3, r5
 800ca0a:	dcf2      	bgt.n	800c9f2 <_printf_i+0x21e>
 800ca0c:	e7eb      	b.n	800c9e6 <_printf_i+0x212>
 800ca0e:	2500      	movs	r5, #0
 800ca10:	f104 0619 	add.w	r6, r4, #25
 800ca14:	e7f5      	b.n	800ca02 <_printf_i+0x22e>
 800ca16:	bf00      	nop
 800ca18:	08011cfa 	.word	0x08011cfa
 800ca1c:	08011d0b 	.word	0x08011d0b

0800ca20 <_scanf_float>:
 800ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	b087      	sub	sp, #28
 800ca26:	4617      	mov	r7, r2
 800ca28:	9303      	str	r3, [sp, #12]
 800ca2a:	688b      	ldr	r3, [r1, #8]
 800ca2c:	1e5a      	subs	r2, r3, #1
 800ca2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ca32:	bf83      	ittte	hi
 800ca34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ca38:	195b      	addhi	r3, r3, r5
 800ca3a:	9302      	strhi	r3, [sp, #8]
 800ca3c:	2300      	movls	r3, #0
 800ca3e:	bf86      	itte	hi
 800ca40:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ca44:	608b      	strhi	r3, [r1, #8]
 800ca46:	9302      	strls	r3, [sp, #8]
 800ca48:	680b      	ldr	r3, [r1, #0]
 800ca4a:	468b      	mov	fp, r1
 800ca4c:	2500      	movs	r5, #0
 800ca4e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ca52:	f84b 3b1c 	str.w	r3, [fp], #28
 800ca56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ca5a:	4680      	mov	r8, r0
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	465e      	mov	r6, fp
 800ca60:	46aa      	mov	sl, r5
 800ca62:	46a9      	mov	r9, r5
 800ca64:	9501      	str	r5, [sp, #4]
 800ca66:	68a2      	ldr	r2, [r4, #8]
 800ca68:	b152      	cbz	r2, 800ca80 <_scanf_float+0x60>
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	2b4e      	cmp	r3, #78	; 0x4e
 800ca70:	d864      	bhi.n	800cb3c <_scanf_float+0x11c>
 800ca72:	2b40      	cmp	r3, #64	; 0x40
 800ca74:	d83c      	bhi.n	800caf0 <_scanf_float+0xd0>
 800ca76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ca7a:	b2c8      	uxtb	r0, r1
 800ca7c:	280e      	cmp	r0, #14
 800ca7e:	d93a      	bls.n	800caf6 <_scanf_float+0xd6>
 800ca80:	f1b9 0f00 	cmp.w	r9, #0
 800ca84:	d003      	beq.n	800ca8e <_scanf_float+0x6e>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca8c:	6023      	str	r3, [r4, #0]
 800ca8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca92:	f1ba 0f01 	cmp.w	sl, #1
 800ca96:	f200 8113 	bhi.w	800ccc0 <_scanf_float+0x2a0>
 800ca9a:	455e      	cmp	r6, fp
 800ca9c:	f200 8105 	bhi.w	800ccaa <_scanf_float+0x28a>
 800caa0:	2501      	movs	r5, #1
 800caa2:	4628      	mov	r0, r5
 800caa4:	b007      	add	sp, #28
 800caa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caaa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800caae:	2a0d      	cmp	r2, #13
 800cab0:	d8e6      	bhi.n	800ca80 <_scanf_float+0x60>
 800cab2:	a101      	add	r1, pc, #4	; (adr r1, 800cab8 <_scanf_float+0x98>)
 800cab4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cab8:	0800cbf7 	.word	0x0800cbf7
 800cabc:	0800ca81 	.word	0x0800ca81
 800cac0:	0800ca81 	.word	0x0800ca81
 800cac4:	0800ca81 	.word	0x0800ca81
 800cac8:	0800cc57 	.word	0x0800cc57
 800cacc:	0800cc2f 	.word	0x0800cc2f
 800cad0:	0800ca81 	.word	0x0800ca81
 800cad4:	0800ca81 	.word	0x0800ca81
 800cad8:	0800cc05 	.word	0x0800cc05
 800cadc:	0800ca81 	.word	0x0800ca81
 800cae0:	0800ca81 	.word	0x0800ca81
 800cae4:	0800ca81 	.word	0x0800ca81
 800cae8:	0800ca81 	.word	0x0800ca81
 800caec:	0800cbbd 	.word	0x0800cbbd
 800caf0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800caf4:	e7db      	b.n	800caae <_scanf_float+0x8e>
 800caf6:	290e      	cmp	r1, #14
 800caf8:	d8c2      	bhi.n	800ca80 <_scanf_float+0x60>
 800cafa:	a001      	add	r0, pc, #4	; (adr r0, 800cb00 <_scanf_float+0xe0>)
 800cafc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cb00:	0800cbaf 	.word	0x0800cbaf
 800cb04:	0800ca81 	.word	0x0800ca81
 800cb08:	0800cbaf 	.word	0x0800cbaf
 800cb0c:	0800cc43 	.word	0x0800cc43
 800cb10:	0800ca81 	.word	0x0800ca81
 800cb14:	0800cb5d 	.word	0x0800cb5d
 800cb18:	0800cb99 	.word	0x0800cb99
 800cb1c:	0800cb99 	.word	0x0800cb99
 800cb20:	0800cb99 	.word	0x0800cb99
 800cb24:	0800cb99 	.word	0x0800cb99
 800cb28:	0800cb99 	.word	0x0800cb99
 800cb2c:	0800cb99 	.word	0x0800cb99
 800cb30:	0800cb99 	.word	0x0800cb99
 800cb34:	0800cb99 	.word	0x0800cb99
 800cb38:	0800cb99 	.word	0x0800cb99
 800cb3c:	2b6e      	cmp	r3, #110	; 0x6e
 800cb3e:	d809      	bhi.n	800cb54 <_scanf_float+0x134>
 800cb40:	2b60      	cmp	r3, #96	; 0x60
 800cb42:	d8b2      	bhi.n	800caaa <_scanf_float+0x8a>
 800cb44:	2b54      	cmp	r3, #84	; 0x54
 800cb46:	d077      	beq.n	800cc38 <_scanf_float+0x218>
 800cb48:	2b59      	cmp	r3, #89	; 0x59
 800cb4a:	d199      	bne.n	800ca80 <_scanf_float+0x60>
 800cb4c:	2d07      	cmp	r5, #7
 800cb4e:	d197      	bne.n	800ca80 <_scanf_float+0x60>
 800cb50:	2508      	movs	r5, #8
 800cb52:	e029      	b.n	800cba8 <_scanf_float+0x188>
 800cb54:	2b74      	cmp	r3, #116	; 0x74
 800cb56:	d06f      	beq.n	800cc38 <_scanf_float+0x218>
 800cb58:	2b79      	cmp	r3, #121	; 0x79
 800cb5a:	e7f6      	b.n	800cb4a <_scanf_float+0x12a>
 800cb5c:	6821      	ldr	r1, [r4, #0]
 800cb5e:	05c8      	lsls	r0, r1, #23
 800cb60:	d51a      	bpl.n	800cb98 <_scanf_float+0x178>
 800cb62:	9b02      	ldr	r3, [sp, #8]
 800cb64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cb68:	6021      	str	r1, [r4, #0]
 800cb6a:	f109 0901 	add.w	r9, r9, #1
 800cb6e:	b11b      	cbz	r3, 800cb78 <_scanf_float+0x158>
 800cb70:	3b01      	subs	r3, #1
 800cb72:	3201      	adds	r2, #1
 800cb74:	9302      	str	r3, [sp, #8]
 800cb76:	60a2      	str	r2, [r4, #8]
 800cb78:	68a3      	ldr	r3, [r4, #8]
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	60a3      	str	r3, [r4, #8]
 800cb7e:	6923      	ldr	r3, [r4, #16]
 800cb80:	3301      	adds	r3, #1
 800cb82:	6123      	str	r3, [r4, #16]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	607b      	str	r3, [r7, #4]
 800cb8c:	f340 8084 	ble.w	800cc98 <_scanf_float+0x278>
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	3301      	adds	r3, #1
 800cb94:	603b      	str	r3, [r7, #0]
 800cb96:	e766      	b.n	800ca66 <_scanf_float+0x46>
 800cb98:	eb1a 0f05 	cmn.w	sl, r5
 800cb9c:	f47f af70 	bne.w	800ca80 <_scanf_float+0x60>
 800cba0:	6822      	ldr	r2, [r4, #0]
 800cba2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cba6:	6022      	str	r2, [r4, #0]
 800cba8:	f806 3b01 	strb.w	r3, [r6], #1
 800cbac:	e7e4      	b.n	800cb78 <_scanf_float+0x158>
 800cbae:	6822      	ldr	r2, [r4, #0]
 800cbb0:	0610      	lsls	r0, r2, #24
 800cbb2:	f57f af65 	bpl.w	800ca80 <_scanf_float+0x60>
 800cbb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbba:	e7f4      	b.n	800cba6 <_scanf_float+0x186>
 800cbbc:	f1ba 0f00 	cmp.w	sl, #0
 800cbc0:	d10e      	bne.n	800cbe0 <_scanf_float+0x1c0>
 800cbc2:	f1b9 0f00 	cmp.w	r9, #0
 800cbc6:	d10e      	bne.n	800cbe6 <_scanf_float+0x1c6>
 800cbc8:	6822      	ldr	r2, [r4, #0]
 800cbca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cbce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cbd2:	d108      	bne.n	800cbe6 <_scanf_float+0x1c6>
 800cbd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cbd8:	6022      	str	r2, [r4, #0]
 800cbda:	f04f 0a01 	mov.w	sl, #1
 800cbde:	e7e3      	b.n	800cba8 <_scanf_float+0x188>
 800cbe0:	f1ba 0f02 	cmp.w	sl, #2
 800cbe4:	d055      	beq.n	800cc92 <_scanf_float+0x272>
 800cbe6:	2d01      	cmp	r5, #1
 800cbe8:	d002      	beq.n	800cbf0 <_scanf_float+0x1d0>
 800cbea:	2d04      	cmp	r5, #4
 800cbec:	f47f af48 	bne.w	800ca80 <_scanf_float+0x60>
 800cbf0:	3501      	adds	r5, #1
 800cbf2:	b2ed      	uxtb	r5, r5
 800cbf4:	e7d8      	b.n	800cba8 <_scanf_float+0x188>
 800cbf6:	f1ba 0f01 	cmp.w	sl, #1
 800cbfa:	f47f af41 	bne.w	800ca80 <_scanf_float+0x60>
 800cbfe:	f04f 0a02 	mov.w	sl, #2
 800cc02:	e7d1      	b.n	800cba8 <_scanf_float+0x188>
 800cc04:	b97d      	cbnz	r5, 800cc26 <_scanf_float+0x206>
 800cc06:	f1b9 0f00 	cmp.w	r9, #0
 800cc0a:	f47f af3c 	bne.w	800ca86 <_scanf_float+0x66>
 800cc0e:	6822      	ldr	r2, [r4, #0]
 800cc10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cc14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cc18:	f47f af39 	bne.w	800ca8e <_scanf_float+0x6e>
 800cc1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cc20:	6022      	str	r2, [r4, #0]
 800cc22:	2501      	movs	r5, #1
 800cc24:	e7c0      	b.n	800cba8 <_scanf_float+0x188>
 800cc26:	2d03      	cmp	r5, #3
 800cc28:	d0e2      	beq.n	800cbf0 <_scanf_float+0x1d0>
 800cc2a:	2d05      	cmp	r5, #5
 800cc2c:	e7de      	b.n	800cbec <_scanf_float+0x1cc>
 800cc2e:	2d02      	cmp	r5, #2
 800cc30:	f47f af26 	bne.w	800ca80 <_scanf_float+0x60>
 800cc34:	2503      	movs	r5, #3
 800cc36:	e7b7      	b.n	800cba8 <_scanf_float+0x188>
 800cc38:	2d06      	cmp	r5, #6
 800cc3a:	f47f af21 	bne.w	800ca80 <_scanf_float+0x60>
 800cc3e:	2507      	movs	r5, #7
 800cc40:	e7b2      	b.n	800cba8 <_scanf_float+0x188>
 800cc42:	6822      	ldr	r2, [r4, #0]
 800cc44:	0591      	lsls	r1, r2, #22
 800cc46:	f57f af1b 	bpl.w	800ca80 <_scanf_float+0x60>
 800cc4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cc4e:	6022      	str	r2, [r4, #0]
 800cc50:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc54:	e7a8      	b.n	800cba8 <_scanf_float+0x188>
 800cc56:	6822      	ldr	r2, [r4, #0]
 800cc58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cc5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cc60:	d006      	beq.n	800cc70 <_scanf_float+0x250>
 800cc62:	0550      	lsls	r0, r2, #21
 800cc64:	f57f af0c 	bpl.w	800ca80 <_scanf_float+0x60>
 800cc68:	f1b9 0f00 	cmp.w	r9, #0
 800cc6c:	f43f af0f 	beq.w	800ca8e <_scanf_float+0x6e>
 800cc70:	0591      	lsls	r1, r2, #22
 800cc72:	bf58      	it	pl
 800cc74:	9901      	ldrpl	r1, [sp, #4]
 800cc76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cc7a:	bf58      	it	pl
 800cc7c:	eba9 0101 	subpl.w	r1, r9, r1
 800cc80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cc84:	bf58      	it	pl
 800cc86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cc8a:	6022      	str	r2, [r4, #0]
 800cc8c:	f04f 0900 	mov.w	r9, #0
 800cc90:	e78a      	b.n	800cba8 <_scanf_float+0x188>
 800cc92:	f04f 0a03 	mov.w	sl, #3
 800cc96:	e787      	b.n	800cba8 <_scanf_float+0x188>
 800cc98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cc9c:	4639      	mov	r1, r7
 800cc9e:	4640      	mov	r0, r8
 800cca0:	4798      	blx	r3
 800cca2:	2800      	cmp	r0, #0
 800cca4:	f43f aedf 	beq.w	800ca66 <_scanf_float+0x46>
 800cca8:	e6ea      	b.n	800ca80 <_scanf_float+0x60>
 800ccaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ccae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccb2:	463a      	mov	r2, r7
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	4798      	blx	r3
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	6123      	str	r3, [r4, #16]
 800ccbe:	e6ec      	b.n	800ca9a <_scanf_float+0x7a>
 800ccc0:	1e6b      	subs	r3, r5, #1
 800ccc2:	2b06      	cmp	r3, #6
 800ccc4:	d825      	bhi.n	800cd12 <_scanf_float+0x2f2>
 800ccc6:	2d02      	cmp	r5, #2
 800ccc8:	d836      	bhi.n	800cd38 <_scanf_float+0x318>
 800ccca:	455e      	cmp	r6, fp
 800cccc:	f67f aee8 	bls.w	800caa0 <_scanf_float+0x80>
 800ccd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ccd4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccd8:	463a      	mov	r2, r7
 800ccda:	4640      	mov	r0, r8
 800ccdc:	4798      	blx	r3
 800ccde:	6923      	ldr	r3, [r4, #16]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	6123      	str	r3, [r4, #16]
 800cce4:	e7f1      	b.n	800ccca <_scanf_float+0x2aa>
 800cce6:	9802      	ldr	r0, [sp, #8]
 800cce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ccec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ccf0:	9002      	str	r0, [sp, #8]
 800ccf2:	463a      	mov	r2, r7
 800ccf4:	4640      	mov	r0, r8
 800ccf6:	4798      	blx	r3
 800ccf8:	6923      	ldr	r3, [r4, #16]
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	6123      	str	r3, [r4, #16]
 800ccfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd02:	fa5f fa8a 	uxtb.w	sl, sl
 800cd06:	f1ba 0f02 	cmp.w	sl, #2
 800cd0a:	d1ec      	bne.n	800cce6 <_scanf_float+0x2c6>
 800cd0c:	3d03      	subs	r5, #3
 800cd0e:	b2ed      	uxtb	r5, r5
 800cd10:	1b76      	subs	r6, r6, r5
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	05da      	lsls	r2, r3, #23
 800cd16:	d52f      	bpl.n	800cd78 <_scanf_float+0x358>
 800cd18:	055b      	lsls	r3, r3, #21
 800cd1a:	d510      	bpl.n	800cd3e <_scanf_float+0x31e>
 800cd1c:	455e      	cmp	r6, fp
 800cd1e:	f67f aebf 	bls.w	800caa0 <_scanf_float+0x80>
 800cd22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd2a:	463a      	mov	r2, r7
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	4798      	blx	r3
 800cd30:	6923      	ldr	r3, [r4, #16]
 800cd32:	3b01      	subs	r3, #1
 800cd34:	6123      	str	r3, [r4, #16]
 800cd36:	e7f1      	b.n	800cd1c <_scanf_float+0x2fc>
 800cd38:	46aa      	mov	sl, r5
 800cd3a:	9602      	str	r6, [sp, #8]
 800cd3c:	e7df      	b.n	800ccfe <_scanf_float+0x2de>
 800cd3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd42:	6923      	ldr	r3, [r4, #16]
 800cd44:	2965      	cmp	r1, #101	; 0x65
 800cd46:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd4a:	f106 35ff 	add.w	r5, r6, #4294967295
 800cd4e:	6123      	str	r3, [r4, #16]
 800cd50:	d00c      	beq.n	800cd6c <_scanf_float+0x34c>
 800cd52:	2945      	cmp	r1, #69	; 0x45
 800cd54:	d00a      	beq.n	800cd6c <_scanf_float+0x34c>
 800cd56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd5a:	463a      	mov	r2, r7
 800cd5c:	4640      	mov	r0, r8
 800cd5e:	4798      	blx	r3
 800cd60:	6923      	ldr	r3, [r4, #16]
 800cd62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cd66:	3b01      	subs	r3, #1
 800cd68:	1eb5      	subs	r5, r6, #2
 800cd6a:	6123      	str	r3, [r4, #16]
 800cd6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd70:	463a      	mov	r2, r7
 800cd72:	4640      	mov	r0, r8
 800cd74:	4798      	blx	r3
 800cd76:	462e      	mov	r6, r5
 800cd78:	6825      	ldr	r5, [r4, #0]
 800cd7a:	f015 0510 	ands.w	r5, r5, #16
 800cd7e:	d159      	bne.n	800ce34 <_scanf_float+0x414>
 800cd80:	7035      	strb	r5, [r6, #0]
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd8c:	d11b      	bne.n	800cdc6 <_scanf_float+0x3a6>
 800cd8e:	9b01      	ldr	r3, [sp, #4]
 800cd90:	454b      	cmp	r3, r9
 800cd92:	eba3 0209 	sub.w	r2, r3, r9
 800cd96:	d123      	bne.n	800cde0 <_scanf_float+0x3c0>
 800cd98:	2200      	movs	r2, #0
 800cd9a:	4659      	mov	r1, fp
 800cd9c:	4640      	mov	r0, r8
 800cd9e:	f000 fea1 	bl	800dae4 <_strtod_r>
 800cda2:	6822      	ldr	r2, [r4, #0]
 800cda4:	9b03      	ldr	r3, [sp, #12]
 800cda6:	f012 0f02 	tst.w	r2, #2
 800cdaa:	ec57 6b10 	vmov	r6, r7, d0
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	d021      	beq.n	800cdf6 <_scanf_float+0x3d6>
 800cdb2:	9903      	ldr	r1, [sp, #12]
 800cdb4:	1d1a      	adds	r2, r3, #4
 800cdb6:	600a      	str	r2, [r1, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	e9c3 6700 	strd	r6, r7, [r3]
 800cdbe:	68e3      	ldr	r3, [r4, #12]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	60e3      	str	r3, [r4, #12]
 800cdc4:	e66d      	b.n	800caa2 <_scanf_float+0x82>
 800cdc6:	9b04      	ldr	r3, [sp, #16]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d0e5      	beq.n	800cd98 <_scanf_float+0x378>
 800cdcc:	9905      	ldr	r1, [sp, #20]
 800cdce:	230a      	movs	r3, #10
 800cdd0:	462a      	mov	r2, r5
 800cdd2:	3101      	adds	r1, #1
 800cdd4:	4640      	mov	r0, r8
 800cdd6:	f000 ff0d 	bl	800dbf4 <_strtol_r>
 800cdda:	9b04      	ldr	r3, [sp, #16]
 800cddc:	9e05      	ldr	r6, [sp, #20]
 800cdde:	1ac2      	subs	r2, r0, r3
 800cde0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cde4:	429e      	cmp	r6, r3
 800cde6:	bf28      	it	cs
 800cde8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cdec:	4912      	ldr	r1, [pc, #72]	; (800ce38 <_scanf_float+0x418>)
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f000 f82c 	bl	800ce4c <siprintf>
 800cdf4:	e7d0      	b.n	800cd98 <_scanf_float+0x378>
 800cdf6:	9903      	ldr	r1, [sp, #12]
 800cdf8:	f012 0f04 	tst.w	r2, #4
 800cdfc:	f103 0204 	add.w	r2, r3, #4
 800ce00:	600a      	str	r2, [r1, #0]
 800ce02:	d1d9      	bne.n	800cdb8 <_scanf_float+0x398>
 800ce04:	f8d3 8000 	ldr.w	r8, [r3]
 800ce08:	ee10 2a10 	vmov	r2, s0
 800ce0c:	ee10 0a10 	vmov	r0, s0
 800ce10:	463b      	mov	r3, r7
 800ce12:	4639      	mov	r1, r7
 800ce14:	f7f3 fe92 	bl	8000b3c <__aeabi_dcmpun>
 800ce18:	b128      	cbz	r0, 800ce26 <_scanf_float+0x406>
 800ce1a:	4808      	ldr	r0, [pc, #32]	; (800ce3c <_scanf_float+0x41c>)
 800ce1c:	f000 f810 	bl	800ce40 <nanf>
 800ce20:	ed88 0a00 	vstr	s0, [r8]
 800ce24:	e7cb      	b.n	800cdbe <_scanf_float+0x39e>
 800ce26:	4630      	mov	r0, r6
 800ce28:	4639      	mov	r1, r7
 800ce2a:	f7f3 fee5 	bl	8000bf8 <__aeabi_d2f>
 800ce2e:	f8c8 0000 	str.w	r0, [r8]
 800ce32:	e7c4      	b.n	800cdbe <_scanf_float+0x39e>
 800ce34:	2500      	movs	r5, #0
 800ce36:	e634      	b.n	800caa2 <_scanf_float+0x82>
 800ce38:	08011d1c 	.word	0x08011d1c
 800ce3c:	08012128 	.word	0x08012128

0800ce40 <nanf>:
 800ce40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ce48 <nanf+0x8>
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	7fc00000 	.word	0x7fc00000

0800ce4c <siprintf>:
 800ce4c:	b40e      	push	{r1, r2, r3}
 800ce4e:	b500      	push	{lr}
 800ce50:	b09c      	sub	sp, #112	; 0x70
 800ce52:	ab1d      	add	r3, sp, #116	; 0x74
 800ce54:	9002      	str	r0, [sp, #8]
 800ce56:	9006      	str	r0, [sp, #24]
 800ce58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce5c:	4809      	ldr	r0, [pc, #36]	; (800ce84 <siprintf+0x38>)
 800ce5e:	9107      	str	r1, [sp, #28]
 800ce60:	9104      	str	r1, [sp, #16]
 800ce62:	4909      	ldr	r1, [pc, #36]	; (800ce88 <siprintf+0x3c>)
 800ce64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce68:	9105      	str	r1, [sp, #20]
 800ce6a:	6800      	ldr	r0, [r0, #0]
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	a902      	add	r1, sp, #8
 800ce70:	f002 ff1a 	bl	800fca8 <_svfiprintf_r>
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	2200      	movs	r2, #0
 800ce78:	701a      	strb	r2, [r3, #0]
 800ce7a:	b01c      	add	sp, #112	; 0x70
 800ce7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce80:	b003      	add	sp, #12
 800ce82:	4770      	bx	lr
 800ce84:	200002cc 	.word	0x200002cc
 800ce88:	ffff0208 	.word	0xffff0208

0800ce8c <strcpy>:
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce92:	f803 2b01 	strb.w	r2, [r3], #1
 800ce96:	2a00      	cmp	r2, #0
 800ce98:	d1f9      	bne.n	800ce8e <strcpy+0x2>
 800ce9a:	4770      	bx	lr

0800ce9c <sulp>:
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	4604      	mov	r4, r0
 800cea0:	460d      	mov	r5, r1
 800cea2:	ec45 4b10 	vmov	d0, r4, r5
 800cea6:	4616      	mov	r6, r2
 800cea8:	f002 fc5c 	bl	800f764 <__ulp>
 800ceac:	ec51 0b10 	vmov	r0, r1, d0
 800ceb0:	b17e      	cbz	r6, 800ced2 <sulp+0x36>
 800ceb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ceb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	dd09      	ble.n	800ced2 <sulp+0x36>
 800cebe:	051b      	lsls	r3, r3, #20
 800cec0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cec4:	2400      	movs	r4, #0
 800cec6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ceca:	4622      	mov	r2, r4
 800cecc:	462b      	mov	r3, r5
 800cece:	f7f3 fb9b 	bl	8000608 <__aeabi_dmul>
 800ced2:	bd70      	pop	{r4, r5, r6, pc}
 800ced4:	0000      	movs	r0, r0
	...

0800ced8 <_strtod_l>:
 800ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	ed2d 8b02 	vpush	{d8}
 800cee0:	b09d      	sub	sp, #116	; 0x74
 800cee2:	461f      	mov	r7, r3
 800cee4:	2300      	movs	r3, #0
 800cee6:	9318      	str	r3, [sp, #96]	; 0x60
 800cee8:	4ba2      	ldr	r3, [pc, #648]	; (800d174 <_strtod_l+0x29c>)
 800ceea:	9213      	str	r2, [sp, #76]	; 0x4c
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	9305      	str	r3, [sp, #20]
 800cef0:	4604      	mov	r4, r0
 800cef2:	4618      	mov	r0, r3
 800cef4:	4688      	mov	r8, r1
 800cef6:	f7f3 f973 	bl	80001e0 <strlen>
 800cefa:	f04f 0a00 	mov.w	sl, #0
 800cefe:	4605      	mov	r5, r0
 800cf00:	f04f 0b00 	mov.w	fp, #0
 800cf04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cf08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf0a:	781a      	ldrb	r2, [r3, #0]
 800cf0c:	2a2b      	cmp	r2, #43	; 0x2b
 800cf0e:	d04e      	beq.n	800cfae <_strtod_l+0xd6>
 800cf10:	d83b      	bhi.n	800cf8a <_strtod_l+0xb2>
 800cf12:	2a0d      	cmp	r2, #13
 800cf14:	d834      	bhi.n	800cf80 <_strtod_l+0xa8>
 800cf16:	2a08      	cmp	r2, #8
 800cf18:	d834      	bhi.n	800cf84 <_strtod_l+0xac>
 800cf1a:	2a00      	cmp	r2, #0
 800cf1c:	d03e      	beq.n	800cf9c <_strtod_l+0xc4>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	930a      	str	r3, [sp, #40]	; 0x28
 800cf22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cf24:	7833      	ldrb	r3, [r6, #0]
 800cf26:	2b30      	cmp	r3, #48	; 0x30
 800cf28:	f040 80b0 	bne.w	800d08c <_strtod_l+0x1b4>
 800cf2c:	7873      	ldrb	r3, [r6, #1]
 800cf2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf32:	2b58      	cmp	r3, #88	; 0x58
 800cf34:	d168      	bne.n	800d008 <_strtod_l+0x130>
 800cf36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf38:	9301      	str	r3, [sp, #4]
 800cf3a:	ab18      	add	r3, sp, #96	; 0x60
 800cf3c:	9702      	str	r7, [sp, #8]
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	4a8d      	ldr	r2, [pc, #564]	; (800d178 <_strtod_l+0x2a0>)
 800cf42:	ab19      	add	r3, sp, #100	; 0x64
 800cf44:	a917      	add	r1, sp, #92	; 0x5c
 800cf46:	4620      	mov	r0, r4
 800cf48:	f001 fd74 	bl	800ea34 <__gethex>
 800cf4c:	f010 0707 	ands.w	r7, r0, #7
 800cf50:	4605      	mov	r5, r0
 800cf52:	d005      	beq.n	800cf60 <_strtod_l+0x88>
 800cf54:	2f06      	cmp	r7, #6
 800cf56:	d12c      	bne.n	800cfb2 <_strtod_l+0xda>
 800cf58:	3601      	adds	r6, #1
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	9617      	str	r6, [sp, #92]	; 0x5c
 800cf5e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f040 8590 	bne.w	800da88 <_strtod_l+0xbb0>
 800cf68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf6a:	b1eb      	cbz	r3, 800cfa8 <_strtod_l+0xd0>
 800cf6c:	4652      	mov	r2, sl
 800cf6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cf72:	ec43 2b10 	vmov	d0, r2, r3
 800cf76:	b01d      	add	sp, #116	; 0x74
 800cf78:	ecbd 8b02 	vpop	{d8}
 800cf7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf80:	2a20      	cmp	r2, #32
 800cf82:	d1cc      	bne.n	800cf1e <_strtod_l+0x46>
 800cf84:	3301      	adds	r3, #1
 800cf86:	9317      	str	r3, [sp, #92]	; 0x5c
 800cf88:	e7be      	b.n	800cf08 <_strtod_l+0x30>
 800cf8a:	2a2d      	cmp	r2, #45	; 0x2d
 800cf8c:	d1c7      	bne.n	800cf1e <_strtod_l+0x46>
 800cf8e:	2201      	movs	r2, #1
 800cf90:	920a      	str	r2, [sp, #40]	; 0x28
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf96:	785b      	ldrb	r3, [r3, #1]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1c2      	bne.n	800cf22 <_strtod_l+0x4a>
 800cf9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf9e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f040 856e 	bne.w	800da84 <_strtod_l+0xbac>
 800cfa8:	4652      	mov	r2, sl
 800cfaa:	465b      	mov	r3, fp
 800cfac:	e7e1      	b.n	800cf72 <_strtod_l+0x9a>
 800cfae:	2200      	movs	r2, #0
 800cfb0:	e7ee      	b.n	800cf90 <_strtod_l+0xb8>
 800cfb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cfb4:	b13a      	cbz	r2, 800cfc6 <_strtod_l+0xee>
 800cfb6:	2135      	movs	r1, #53	; 0x35
 800cfb8:	a81a      	add	r0, sp, #104	; 0x68
 800cfba:	f002 fcde 	bl	800f97a <__copybits>
 800cfbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f002 f89d 	bl	800f100 <_Bfree>
 800cfc6:	3f01      	subs	r7, #1
 800cfc8:	2f04      	cmp	r7, #4
 800cfca:	d806      	bhi.n	800cfda <_strtod_l+0x102>
 800cfcc:	e8df f007 	tbb	[pc, r7]
 800cfd0:	1714030a 	.word	0x1714030a
 800cfd4:	0a          	.byte	0x0a
 800cfd5:	00          	.byte	0x00
 800cfd6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cfda:	0728      	lsls	r0, r5, #28
 800cfdc:	d5c0      	bpl.n	800cf60 <_strtod_l+0x88>
 800cfde:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cfe2:	e7bd      	b.n	800cf60 <_strtod_l+0x88>
 800cfe4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cfe8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cfea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cfee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cff2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cff6:	e7f0      	b.n	800cfda <_strtod_l+0x102>
 800cff8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d17c <_strtod_l+0x2a4>
 800cffc:	e7ed      	b.n	800cfda <_strtod_l+0x102>
 800cffe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d002:	f04f 3aff 	mov.w	sl, #4294967295
 800d006:	e7e8      	b.n	800cfda <_strtod_l+0x102>
 800d008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d00e:	785b      	ldrb	r3, [r3, #1]
 800d010:	2b30      	cmp	r3, #48	; 0x30
 800d012:	d0f9      	beq.n	800d008 <_strtod_l+0x130>
 800d014:	2b00      	cmp	r3, #0
 800d016:	d0a3      	beq.n	800cf60 <_strtod_l+0x88>
 800d018:	2301      	movs	r3, #1
 800d01a:	f04f 0900 	mov.w	r9, #0
 800d01e:	9304      	str	r3, [sp, #16]
 800d020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d022:	9308      	str	r3, [sp, #32]
 800d024:	f8cd 901c 	str.w	r9, [sp, #28]
 800d028:	464f      	mov	r7, r9
 800d02a:	220a      	movs	r2, #10
 800d02c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d02e:	7806      	ldrb	r6, [r0, #0]
 800d030:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d034:	b2d9      	uxtb	r1, r3
 800d036:	2909      	cmp	r1, #9
 800d038:	d92a      	bls.n	800d090 <_strtod_l+0x1b8>
 800d03a:	9905      	ldr	r1, [sp, #20]
 800d03c:	462a      	mov	r2, r5
 800d03e:	f002 ff4b 	bl	800fed8 <strncmp>
 800d042:	b398      	cbz	r0, 800d0ac <_strtod_l+0x1d4>
 800d044:	2000      	movs	r0, #0
 800d046:	4632      	mov	r2, r6
 800d048:	463d      	mov	r5, r7
 800d04a:	9005      	str	r0, [sp, #20]
 800d04c:	4603      	mov	r3, r0
 800d04e:	2a65      	cmp	r2, #101	; 0x65
 800d050:	d001      	beq.n	800d056 <_strtod_l+0x17e>
 800d052:	2a45      	cmp	r2, #69	; 0x45
 800d054:	d118      	bne.n	800d088 <_strtod_l+0x1b0>
 800d056:	b91d      	cbnz	r5, 800d060 <_strtod_l+0x188>
 800d058:	9a04      	ldr	r2, [sp, #16]
 800d05a:	4302      	orrs	r2, r0
 800d05c:	d09e      	beq.n	800cf9c <_strtod_l+0xc4>
 800d05e:	2500      	movs	r5, #0
 800d060:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d064:	f108 0201 	add.w	r2, r8, #1
 800d068:	9217      	str	r2, [sp, #92]	; 0x5c
 800d06a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d06e:	2a2b      	cmp	r2, #43	; 0x2b
 800d070:	d075      	beq.n	800d15e <_strtod_l+0x286>
 800d072:	2a2d      	cmp	r2, #45	; 0x2d
 800d074:	d07b      	beq.n	800d16e <_strtod_l+0x296>
 800d076:	f04f 0c00 	mov.w	ip, #0
 800d07a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d07e:	2909      	cmp	r1, #9
 800d080:	f240 8082 	bls.w	800d188 <_strtod_l+0x2b0>
 800d084:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d088:	2600      	movs	r6, #0
 800d08a:	e09d      	b.n	800d1c8 <_strtod_l+0x2f0>
 800d08c:	2300      	movs	r3, #0
 800d08e:	e7c4      	b.n	800d01a <_strtod_l+0x142>
 800d090:	2f08      	cmp	r7, #8
 800d092:	bfd8      	it	le
 800d094:	9907      	ldrle	r1, [sp, #28]
 800d096:	f100 0001 	add.w	r0, r0, #1
 800d09a:	bfda      	itte	le
 800d09c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d0a0:	9307      	strle	r3, [sp, #28]
 800d0a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d0a6:	3701      	adds	r7, #1
 800d0a8:	9017      	str	r0, [sp, #92]	; 0x5c
 800d0aa:	e7bf      	b.n	800d02c <_strtod_l+0x154>
 800d0ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0ae:	195a      	adds	r2, r3, r5
 800d0b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d0b2:	5d5a      	ldrb	r2, [r3, r5]
 800d0b4:	2f00      	cmp	r7, #0
 800d0b6:	d037      	beq.n	800d128 <_strtod_l+0x250>
 800d0b8:	9005      	str	r0, [sp, #20]
 800d0ba:	463d      	mov	r5, r7
 800d0bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d0c0:	2b09      	cmp	r3, #9
 800d0c2:	d912      	bls.n	800d0ea <_strtod_l+0x212>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e7c2      	b.n	800d04e <_strtod_l+0x176>
 800d0c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0ca:	1c5a      	adds	r2, r3, #1
 800d0cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800d0ce:	785a      	ldrb	r2, [r3, #1]
 800d0d0:	3001      	adds	r0, #1
 800d0d2:	2a30      	cmp	r2, #48	; 0x30
 800d0d4:	d0f8      	beq.n	800d0c8 <_strtod_l+0x1f0>
 800d0d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d0da:	2b08      	cmp	r3, #8
 800d0dc:	f200 84d9 	bhi.w	800da92 <_strtod_l+0xbba>
 800d0e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0e2:	9005      	str	r0, [sp, #20]
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	9308      	str	r3, [sp, #32]
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	3a30      	subs	r2, #48	; 0x30
 800d0ec:	f100 0301 	add.w	r3, r0, #1
 800d0f0:	d014      	beq.n	800d11c <_strtod_l+0x244>
 800d0f2:	9905      	ldr	r1, [sp, #20]
 800d0f4:	4419      	add	r1, r3
 800d0f6:	9105      	str	r1, [sp, #20]
 800d0f8:	462b      	mov	r3, r5
 800d0fa:	eb00 0e05 	add.w	lr, r0, r5
 800d0fe:	210a      	movs	r1, #10
 800d100:	4573      	cmp	r3, lr
 800d102:	d113      	bne.n	800d12c <_strtod_l+0x254>
 800d104:	182b      	adds	r3, r5, r0
 800d106:	2b08      	cmp	r3, #8
 800d108:	f105 0501 	add.w	r5, r5, #1
 800d10c:	4405      	add	r5, r0
 800d10e:	dc1c      	bgt.n	800d14a <_strtod_l+0x272>
 800d110:	9907      	ldr	r1, [sp, #28]
 800d112:	230a      	movs	r3, #10
 800d114:	fb03 2301 	mla	r3, r3, r1, r2
 800d118:	9307      	str	r3, [sp, #28]
 800d11a:	2300      	movs	r3, #0
 800d11c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d11e:	1c51      	adds	r1, r2, #1
 800d120:	9117      	str	r1, [sp, #92]	; 0x5c
 800d122:	7852      	ldrb	r2, [r2, #1]
 800d124:	4618      	mov	r0, r3
 800d126:	e7c9      	b.n	800d0bc <_strtod_l+0x1e4>
 800d128:	4638      	mov	r0, r7
 800d12a:	e7d2      	b.n	800d0d2 <_strtod_l+0x1fa>
 800d12c:	2b08      	cmp	r3, #8
 800d12e:	dc04      	bgt.n	800d13a <_strtod_l+0x262>
 800d130:	9e07      	ldr	r6, [sp, #28]
 800d132:	434e      	muls	r6, r1
 800d134:	9607      	str	r6, [sp, #28]
 800d136:	3301      	adds	r3, #1
 800d138:	e7e2      	b.n	800d100 <_strtod_l+0x228>
 800d13a:	f103 0c01 	add.w	ip, r3, #1
 800d13e:	f1bc 0f10 	cmp.w	ip, #16
 800d142:	bfd8      	it	le
 800d144:	fb01 f909 	mulle.w	r9, r1, r9
 800d148:	e7f5      	b.n	800d136 <_strtod_l+0x25e>
 800d14a:	2d10      	cmp	r5, #16
 800d14c:	bfdc      	itt	le
 800d14e:	230a      	movle	r3, #10
 800d150:	fb03 2909 	mlale	r9, r3, r9, r2
 800d154:	e7e1      	b.n	800d11a <_strtod_l+0x242>
 800d156:	2300      	movs	r3, #0
 800d158:	9305      	str	r3, [sp, #20]
 800d15a:	2301      	movs	r3, #1
 800d15c:	e77c      	b.n	800d058 <_strtod_l+0x180>
 800d15e:	f04f 0c00 	mov.w	ip, #0
 800d162:	f108 0202 	add.w	r2, r8, #2
 800d166:	9217      	str	r2, [sp, #92]	; 0x5c
 800d168:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d16c:	e785      	b.n	800d07a <_strtod_l+0x1a2>
 800d16e:	f04f 0c01 	mov.w	ip, #1
 800d172:	e7f6      	b.n	800d162 <_strtod_l+0x28a>
 800d174:	08011f70 	.word	0x08011f70
 800d178:	08011d24 	.word	0x08011d24
 800d17c:	7ff00000 	.word	0x7ff00000
 800d180:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d182:	1c51      	adds	r1, r2, #1
 800d184:	9117      	str	r1, [sp, #92]	; 0x5c
 800d186:	7852      	ldrb	r2, [r2, #1]
 800d188:	2a30      	cmp	r2, #48	; 0x30
 800d18a:	d0f9      	beq.n	800d180 <_strtod_l+0x2a8>
 800d18c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d190:	2908      	cmp	r1, #8
 800d192:	f63f af79 	bhi.w	800d088 <_strtod_l+0x1b0>
 800d196:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d19a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d19c:	9206      	str	r2, [sp, #24]
 800d19e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d1a0:	1c51      	adds	r1, r2, #1
 800d1a2:	9117      	str	r1, [sp, #92]	; 0x5c
 800d1a4:	7852      	ldrb	r2, [r2, #1]
 800d1a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d1aa:	2e09      	cmp	r6, #9
 800d1ac:	d937      	bls.n	800d21e <_strtod_l+0x346>
 800d1ae:	9e06      	ldr	r6, [sp, #24]
 800d1b0:	1b89      	subs	r1, r1, r6
 800d1b2:	2908      	cmp	r1, #8
 800d1b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d1b8:	dc02      	bgt.n	800d1c0 <_strtod_l+0x2e8>
 800d1ba:	4576      	cmp	r6, lr
 800d1bc:	bfa8      	it	ge
 800d1be:	4676      	movge	r6, lr
 800d1c0:	f1bc 0f00 	cmp.w	ip, #0
 800d1c4:	d000      	beq.n	800d1c8 <_strtod_l+0x2f0>
 800d1c6:	4276      	negs	r6, r6
 800d1c8:	2d00      	cmp	r5, #0
 800d1ca:	d14d      	bne.n	800d268 <_strtod_l+0x390>
 800d1cc:	9904      	ldr	r1, [sp, #16]
 800d1ce:	4301      	orrs	r1, r0
 800d1d0:	f47f aec6 	bne.w	800cf60 <_strtod_l+0x88>
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f47f aee1 	bne.w	800cf9c <_strtod_l+0xc4>
 800d1da:	2a69      	cmp	r2, #105	; 0x69
 800d1dc:	d027      	beq.n	800d22e <_strtod_l+0x356>
 800d1de:	dc24      	bgt.n	800d22a <_strtod_l+0x352>
 800d1e0:	2a49      	cmp	r2, #73	; 0x49
 800d1e2:	d024      	beq.n	800d22e <_strtod_l+0x356>
 800d1e4:	2a4e      	cmp	r2, #78	; 0x4e
 800d1e6:	f47f aed9 	bne.w	800cf9c <_strtod_l+0xc4>
 800d1ea:	499f      	ldr	r1, [pc, #636]	; (800d468 <_strtod_l+0x590>)
 800d1ec:	a817      	add	r0, sp, #92	; 0x5c
 800d1ee:	f001 fe79 	bl	800eee4 <__match>
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	f43f aed2 	beq.w	800cf9c <_strtod_l+0xc4>
 800d1f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	2b28      	cmp	r3, #40	; 0x28
 800d1fe:	d12d      	bne.n	800d25c <_strtod_l+0x384>
 800d200:	499a      	ldr	r1, [pc, #616]	; (800d46c <_strtod_l+0x594>)
 800d202:	aa1a      	add	r2, sp, #104	; 0x68
 800d204:	a817      	add	r0, sp, #92	; 0x5c
 800d206:	f001 fe81 	bl	800ef0c <__hexnan>
 800d20a:	2805      	cmp	r0, #5
 800d20c:	d126      	bne.n	800d25c <_strtod_l+0x384>
 800d20e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d210:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d214:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d218:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d21c:	e6a0      	b.n	800cf60 <_strtod_l+0x88>
 800d21e:	210a      	movs	r1, #10
 800d220:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d224:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d228:	e7b9      	b.n	800d19e <_strtod_l+0x2c6>
 800d22a:	2a6e      	cmp	r2, #110	; 0x6e
 800d22c:	e7db      	b.n	800d1e6 <_strtod_l+0x30e>
 800d22e:	4990      	ldr	r1, [pc, #576]	; (800d470 <_strtod_l+0x598>)
 800d230:	a817      	add	r0, sp, #92	; 0x5c
 800d232:	f001 fe57 	bl	800eee4 <__match>
 800d236:	2800      	cmp	r0, #0
 800d238:	f43f aeb0 	beq.w	800cf9c <_strtod_l+0xc4>
 800d23c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d23e:	498d      	ldr	r1, [pc, #564]	; (800d474 <_strtod_l+0x59c>)
 800d240:	3b01      	subs	r3, #1
 800d242:	a817      	add	r0, sp, #92	; 0x5c
 800d244:	9317      	str	r3, [sp, #92]	; 0x5c
 800d246:	f001 fe4d 	bl	800eee4 <__match>
 800d24a:	b910      	cbnz	r0, 800d252 <_strtod_l+0x37a>
 800d24c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d24e:	3301      	adds	r3, #1
 800d250:	9317      	str	r3, [sp, #92]	; 0x5c
 800d252:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d484 <_strtod_l+0x5ac>
 800d256:	f04f 0a00 	mov.w	sl, #0
 800d25a:	e681      	b.n	800cf60 <_strtod_l+0x88>
 800d25c:	4886      	ldr	r0, [pc, #536]	; (800d478 <_strtod_l+0x5a0>)
 800d25e:	f002 fe23 	bl	800fea8 <nan>
 800d262:	ec5b ab10 	vmov	sl, fp, d0
 800d266:	e67b      	b.n	800cf60 <_strtod_l+0x88>
 800d268:	9b05      	ldr	r3, [sp, #20]
 800d26a:	9807      	ldr	r0, [sp, #28]
 800d26c:	1af3      	subs	r3, r6, r3
 800d26e:	2f00      	cmp	r7, #0
 800d270:	bf08      	it	eq
 800d272:	462f      	moveq	r7, r5
 800d274:	2d10      	cmp	r5, #16
 800d276:	9306      	str	r3, [sp, #24]
 800d278:	46a8      	mov	r8, r5
 800d27a:	bfa8      	it	ge
 800d27c:	f04f 0810 	movge.w	r8, #16
 800d280:	f7f3 f948 	bl	8000514 <__aeabi_ui2d>
 800d284:	2d09      	cmp	r5, #9
 800d286:	4682      	mov	sl, r0
 800d288:	468b      	mov	fp, r1
 800d28a:	dd13      	ble.n	800d2b4 <_strtod_l+0x3dc>
 800d28c:	4b7b      	ldr	r3, [pc, #492]	; (800d47c <_strtod_l+0x5a4>)
 800d28e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d292:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d296:	f7f3 f9b7 	bl	8000608 <__aeabi_dmul>
 800d29a:	4682      	mov	sl, r0
 800d29c:	4648      	mov	r0, r9
 800d29e:	468b      	mov	fp, r1
 800d2a0:	f7f3 f938 	bl	8000514 <__aeabi_ui2d>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	4650      	mov	r0, sl
 800d2aa:	4659      	mov	r1, fp
 800d2ac:	f7f2 fff6 	bl	800029c <__adddf3>
 800d2b0:	4682      	mov	sl, r0
 800d2b2:	468b      	mov	fp, r1
 800d2b4:	2d0f      	cmp	r5, #15
 800d2b6:	dc38      	bgt.n	800d32a <_strtod_l+0x452>
 800d2b8:	9b06      	ldr	r3, [sp, #24]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f43f ae50 	beq.w	800cf60 <_strtod_l+0x88>
 800d2c0:	dd24      	ble.n	800d30c <_strtod_l+0x434>
 800d2c2:	2b16      	cmp	r3, #22
 800d2c4:	dc0b      	bgt.n	800d2de <_strtod_l+0x406>
 800d2c6:	496d      	ldr	r1, [pc, #436]	; (800d47c <_strtod_l+0x5a4>)
 800d2c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d2cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2d0:	4652      	mov	r2, sl
 800d2d2:	465b      	mov	r3, fp
 800d2d4:	f7f3 f998 	bl	8000608 <__aeabi_dmul>
 800d2d8:	4682      	mov	sl, r0
 800d2da:	468b      	mov	fp, r1
 800d2dc:	e640      	b.n	800cf60 <_strtod_l+0x88>
 800d2de:	9a06      	ldr	r2, [sp, #24]
 800d2e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	db20      	blt.n	800d32a <_strtod_l+0x452>
 800d2e8:	4c64      	ldr	r4, [pc, #400]	; (800d47c <_strtod_l+0x5a4>)
 800d2ea:	f1c5 050f 	rsb	r5, r5, #15
 800d2ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d2f2:	4652      	mov	r2, sl
 800d2f4:	465b      	mov	r3, fp
 800d2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2fa:	f7f3 f985 	bl	8000608 <__aeabi_dmul>
 800d2fe:	9b06      	ldr	r3, [sp, #24]
 800d300:	1b5d      	subs	r5, r3, r5
 800d302:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d306:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d30a:	e7e3      	b.n	800d2d4 <_strtod_l+0x3fc>
 800d30c:	9b06      	ldr	r3, [sp, #24]
 800d30e:	3316      	adds	r3, #22
 800d310:	db0b      	blt.n	800d32a <_strtod_l+0x452>
 800d312:	9b05      	ldr	r3, [sp, #20]
 800d314:	1b9e      	subs	r6, r3, r6
 800d316:	4b59      	ldr	r3, [pc, #356]	; (800d47c <_strtod_l+0x5a4>)
 800d318:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d31c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d320:	4650      	mov	r0, sl
 800d322:	4659      	mov	r1, fp
 800d324:	f7f3 fa9a 	bl	800085c <__aeabi_ddiv>
 800d328:	e7d6      	b.n	800d2d8 <_strtod_l+0x400>
 800d32a:	9b06      	ldr	r3, [sp, #24]
 800d32c:	eba5 0808 	sub.w	r8, r5, r8
 800d330:	4498      	add	r8, r3
 800d332:	f1b8 0f00 	cmp.w	r8, #0
 800d336:	dd74      	ble.n	800d422 <_strtod_l+0x54a>
 800d338:	f018 030f 	ands.w	r3, r8, #15
 800d33c:	d00a      	beq.n	800d354 <_strtod_l+0x47c>
 800d33e:	494f      	ldr	r1, [pc, #316]	; (800d47c <_strtod_l+0x5a4>)
 800d340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d344:	4652      	mov	r2, sl
 800d346:	465b      	mov	r3, fp
 800d348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d34c:	f7f3 f95c 	bl	8000608 <__aeabi_dmul>
 800d350:	4682      	mov	sl, r0
 800d352:	468b      	mov	fp, r1
 800d354:	f038 080f 	bics.w	r8, r8, #15
 800d358:	d04f      	beq.n	800d3fa <_strtod_l+0x522>
 800d35a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d35e:	dd22      	ble.n	800d3a6 <_strtod_l+0x4ce>
 800d360:	2500      	movs	r5, #0
 800d362:	462e      	mov	r6, r5
 800d364:	9507      	str	r5, [sp, #28]
 800d366:	9505      	str	r5, [sp, #20]
 800d368:	2322      	movs	r3, #34	; 0x22
 800d36a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d484 <_strtod_l+0x5ac>
 800d36e:	6023      	str	r3, [r4, #0]
 800d370:	f04f 0a00 	mov.w	sl, #0
 800d374:	9b07      	ldr	r3, [sp, #28]
 800d376:	2b00      	cmp	r3, #0
 800d378:	f43f adf2 	beq.w	800cf60 <_strtod_l+0x88>
 800d37c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d37e:	4620      	mov	r0, r4
 800d380:	f001 febe 	bl	800f100 <_Bfree>
 800d384:	9905      	ldr	r1, [sp, #20]
 800d386:	4620      	mov	r0, r4
 800d388:	f001 feba 	bl	800f100 <_Bfree>
 800d38c:	4631      	mov	r1, r6
 800d38e:	4620      	mov	r0, r4
 800d390:	f001 feb6 	bl	800f100 <_Bfree>
 800d394:	9907      	ldr	r1, [sp, #28]
 800d396:	4620      	mov	r0, r4
 800d398:	f001 feb2 	bl	800f100 <_Bfree>
 800d39c:	4629      	mov	r1, r5
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f001 feae 	bl	800f100 <_Bfree>
 800d3a4:	e5dc      	b.n	800cf60 <_strtod_l+0x88>
 800d3a6:	4b36      	ldr	r3, [pc, #216]	; (800d480 <_strtod_l+0x5a8>)
 800d3a8:	9304      	str	r3, [sp, #16]
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d3b0:	4650      	mov	r0, sl
 800d3b2:	4659      	mov	r1, fp
 800d3b4:	4699      	mov	r9, r3
 800d3b6:	f1b8 0f01 	cmp.w	r8, #1
 800d3ba:	dc21      	bgt.n	800d400 <_strtod_l+0x528>
 800d3bc:	b10b      	cbz	r3, 800d3c2 <_strtod_l+0x4ea>
 800d3be:	4682      	mov	sl, r0
 800d3c0:	468b      	mov	fp, r1
 800d3c2:	4b2f      	ldr	r3, [pc, #188]	; (800d480 <_strtod_l+0x5a8>)
 800d3c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d3c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d3cc:	4652      	mov	r2, sl
 800d3ce:	465b      	mov	r3, fp
 800d3d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d3d4:	f7f3 f918 	bl	8000608 <__aeabi_dmul>
 800d3d8:	4b2a      	ldr	r3, [pc, #168]	; (800d484 <_strtod_l+0x5ac>)
 800d3da:	460a      	mov	r2, r1
 800d3dc:	400b      	ands	r3, r1
 800d3de:	492a      	ldr	r1, [pc, #168]	; (800d488 <_strtod_l+0x5b0>)
 800d3e0:	428b      	cmp	r3, r1
 800d3e2:	4682      	mov	sl, r0
 800d3e4:	d8bc      	bhi.n	800d360 <_strtod_l+0x488>
 800d3e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d3ea:	428b      	cmp	r3, r1
 800d3ec:	bf86      	itte	hi
 800d3ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d48c <_strtod_l+0x5b4>
 800d3f2:	f04f 3aff 	movhi.w	sl, #4294967295
 800d3f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	9304      	str	r3, [sp, #16]
 800d3fe:	e084      	b.n	800d50a <_strtod_l+0x632>
 800d400:	f018 0f01 	tst.w	r8, #1
 800d404:	d005      	beq.n	800d412 <_strtod_l+0x53a>
 800d406:	9b04      	ldr	r3, [sp, #16]
 800d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40c:	f7f3 f8fc 	bl	8000608 <__aeabi_dmul>
 800d410:	2301      	movs	r3, #1
 800d412:	9a04      	ldr	r2, [sp, #16]
 800d414:	3208      	adds	r2, #8
 800d416:	f109 0901 	add.w	r9, r9, #1
 800d41a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d41e:	9204      	str	r2, [sp, #16]
 800d420:	e7c9      	b.n	800d3b6 <_strtod_l+0x4de>
 800d422:	d0ea      	beq.n	800d3fa <_strtod_l+0x522>
 800d424:	f1c8 0800 	rsb	r8, r8, #0
 800d428:	f018 020f 	ands.w	r2, r8, #15
 800d42c:	d00a      	beq.n	800d444 <_strtod_l+0x56c>
 800d42e:	4b13      	ldr	r3, [pc, #76]	; (800d47c <_strtod_l+0x5a4>)
 800d430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d434:	4650      	mov	r0, sl
 800d436:	4659      	mov	r1, fp
 800d438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43c:	f7f3 fa0e 	bl	800085c <__aeabi_ddiv>
 800d440:	4682      	mov	sl, r0
 800d442:	468b      	mov	fp, r1
 800d444:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d448:	d0d7      	beq.n	800d3fa <_strtod_l+0x522>
 800d44a:	f1b8 0f1f 	cmp.w	r8, #31
 800d44e:	dd1f      	ble.n	800d490 <_strtod_l+0x5b8>
 800d450:	2500      	movs	r5, #0
 800d452:	462e      	mov	r6, r5
 800d454:	9507      	str	r5, [sp, #28]
 800d456:	9505      	str	r5, [sp, #20]
 800d458:	2322      	movs	r3, #34	; 0x22
 800d45a:	f04f 0a00 	mov.w	sl, #0
 800d45e:	f04f 0b00 	mov.w	fp, #0
 800d462:	6023      	str	r3, [r4, #0]
 800d464:	e786      	b.n	800d374 <_strtod_l+0x49c>
 800d466:	bf00      	nop
 800d468:	08011cf5 	.word	0x08011cf5
 800d46c:	08011d38 	.word	0x08011d38
 800d470:	08011ced 	.word	0x08011ced
 800d474:	08011e7c 	.word	0x08011e7c
 800d478:	08012128 	.word	0x08012128
 800d47c:	08012008 	.word	0x08012008
 800d480:	08011fe0 	.word	0x08011fe0
 800d484:	7ff00000 	.word	0x7ff00000
 800d488:	7ca00000 	.word	0x7ca00000
 800d48c:	7fefffff 	.word	0x7fefffff
 800d490:	f018 0310 	ands.w	r3, r8, #16
 800d494:	bf18      	it	ne
 800d496:	236a      	movne	r3, #106	; 0x6a
 800d498:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d848 <_strtod_l+0x970>
 800d49c:	9304      	str	r3, [sp, #16]
 800d49e:	4650      	mov	r0, sl
 800d4a0:	4659      	mov	r1, fp
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f018 0f01 	tst.w	r8, #1
 800d4a8:	d004      	beq.n	800d4b4 <_strtod_l+0x5dc>
 800d4aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d4ae:	f7f3 f8ab 	bl	8000608 <__aeabi_dmul>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d4b8:	f109 0908 	add.w	r9, r9, #8
 800d4bc:	d1f2      	bne.n	800d4a4 <_strtod_l+0x5cc>
 800d4be:	b10b      	cbz	r3, 800d4c4 <_strtod_l+0x5ec>
 800d4c0:	4682      	mov	sl, r0
 800d4c2:	468b      	mov	fp, r1
 800d4c4:	9b04      	ldr	r3, [sp, #16]
 800d4c6:	b1c3      	cbz	r3, 800d4fa <_strtod_l+0x622>
 800d4c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d4cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	4659      	mov	r1, fp
 800d4d4:	dd11      	ble.n	800d4fa <_strtod_l+0x622>
 800d4d6:	2b1f      	cmp	r3, #31
 800d4d8:	f340 8124 	ble.w	800d724 <_strtod_l+0x84c>
 800d4dc:	2b34      	cmp	r3, #52	; 0x34
 800d4de:	bfde      	ittt	le
 800d4e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d4e4:	f04f 33ff 	movle.w	r3, #4294967295
 800d4e8:	fa03 f202 	lslle.w	r2, r3, r2
 800d4ec:	f04f 0a00 	mov.w	sl, #0
 800d4f0:	bfcc      	ite	gt
 800d4f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d4f6:	ea02 0b01 	andle.w	fp, r2, r1
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	4650      	mov	r0, sl
 800d500:	4659      	mov	r1, fp
 800d502:	f7f3 fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 800d506:	2800      	cmp	r0, #0
 800d508:	d1a2      	bne.n	800d450 <_strtod_l+0x578>
 800d50a:	9b07      	ldr	r3, [sp, #28]
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	9908      	ldr	r1, [sp, #32]
 800d510:	462b      	mov	r3, r5
 800d512:	463a      	mov	r2, r7
 800d514:	4620      	mov	r0, r4
 800d516:	f001 fe5b 	bl	800f1d0 <__s2b>
 800d51a:	9007      	str	r0, [sp, #28]
 800d51c:	2800      	cmp	r0, #0
 800d51e:	f43f af1f 	beq.w	800d360 <_strtod_l+0x488>
 800d522:	9b05      	ldr	r3, [sp, #20]
 800d524:	1b9e      	subs	r6, r3, r6
 800d526:	9b06      	ldr	r3, [sp, #24]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	bfb4      	ite	lt
 800d52c:	4633      	movlt	r3, r6
 800d52e:	2300      	movge	r3, #0
 800d530:	930c      	str	r3, [sp, #48]	; 0x30
 800d532:	9b06      	ldr	r3, [sp, #24]
 800d534:	2500      	movs	r5, #0
 800d536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d53a:	9312      	str	r3, [sp, #72]	; 0x48
 800d53c:	462e      	mov	r6, r5
 800d53e:	9b07      	ldr	r3, [sp, #28]
 800d540:	4620      	mov	r0, r4
 800d542:	6859      	ldr	r1, [r3, #4]
 800d544:	f001 fd9c 	bl	800f080 <_Balloc>
 800d548:	9005      	str	r0, [sp, #20]
 800d54a:	2800      	cmp	r0, #0
 800d54c:	f43f af0c 	beq.w	800d368 <_strtod_l+0x490>
 800d550:	9b07      	ldr	r3, [sp, #28]
 800d552:	691a      	ldr	r2, [r3, #16]
 800d554:	3202      	adds	r2, #2
 800d556:	f103 010c 	add.w	r1, r3, #12
 800d55a:	0092      	lsls	r2, r2, #2
 800d55c:	300c      	adds	r0, #12
 800d55e:	f7fe fddf 	bl	800c120 <memcpy>
 800d562:	ec4b ab10 	vmov	d0, sl, fp
 800d566:	aa1a      	add	r2, sp, #104	; 0x68
 800d568:	a919      	add	r1, sp, #100	; 0x64
 800d56a:	4620      	mov	r0, r4
 800d56c:	f002 f976 	bl	800f85c <__d2b>
 800d570:	ec4b ab18 	vmov	d8, sl, fp
 800d574:	9018      	str	r0, [sp, #96]	; 0x60
 800d576:	2800      	cmp	r0, #0
 800d578:	f43f aef6 	beq.w	800d368 <_strtod_l+0x490>
 800d57c:	2101      	movs	r1, #1
 800d57e:	4620      	mov	r0, r4
 800d580:	f001 fec0 	bl	800f304 <__i2b>
 800d584:	4606      	mov	r6, r0
 800d586:	2800      	cmp	r0, #0
 800d588:	f43f aeee 	beq.w	800d368 <_strtod_l+0x490>
 800d58c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d58e:	9904      	ldr	r1, [sp, #16]
 800d590:	2b00      	cmp	r3, #0
 800d592:	bfab      	itete	ge
 800d594:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d596:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d598:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d59a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d59e:	bfac      	ite	ge
 800d5a0:	eb03 0902 	addge.w	r9, r3, r2
 800d5a4:	1ad7      	sublt	r7, r2, r3
 800d5a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d5a8:	eba3 0801 	sub.w	r8, r3, r1
 800d5ac:	4490      	add	r8, r2
 800d5ae:	4ba1      	ldr	r3, [pc, #644]	; (800d834 <_strtod_l+0x95c>)
 800d5b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d5b4:	4598      	cmp	r8, r3
 800d5b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d5ba:	f280 80c7 	bge.w	800d74c <_strtod_l+0x874>
 800d5be:	eba3 0308 	sub.w	r3, r3, r8
 800d5c2:	2b1f      	cmp	r3, #31
 800d5c4:	eba2 0203 	sub.w	r2, r2, r3
 800d5c8:	f04f 0101 	mov.w	r1, #1
 800d5cc:	f300 80b1 	bgt.w	800d732 <_strtod_l+0x85a>
 800d5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d5d4:	930d      	str	r3, [sp, #52]	; 0x34
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	9308      	str	r3, [sp, #32]
 800d5da:	eb09 0802 	add.w	r8, r9, r2
 800d5de:	9b04      	ldr	r3, [sp, #16]
 800d5e0:	45c1      	cmp	r9, r8
 800d5e2:	4417      	add	r7, r2
 800d5e4:	441f      	add	r7, r3
 800d5e6:	464b      	mov	r3, r9
 800d5e8:	bfa8      	it	ge
 800d5ea:	4643      	movge	r3, r8
 800d5ec:	42bb      	cmp	r3, r7
 800d5ee:	bfa8      	it	ge
 800d5f0:	463b      	movge	r3, r7
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	bfc2      	ittt	gt
 800d5f6:	eba8 0803 	subgt.w	r8, r8, r3
 800d5fa:	1aff      	subgt	r7, r7, r3
 800d5fc:	eba9 0903 	subgt.w	r9, r9, r3
 800d600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d602:	2b00      	cmp	r3, #0
 800d604:	dd17      	ble.n	800d636 <_strtod_l+0x75e>
 800d606:	4631      	mov	r1, r6
 800d608:	461a      	mov	r2, r3
 800d60a:	4620      	mov	r0, r4
 800d60c:	f001 ff3a 	bl	800f484 <__pow5mult>
 800d610:	4606      	mov	r6, r0
 800d612:	2800      	cmp	r0, #0
 800d614:	f43f aea8 	beq.w	800d368 <_strtod_l+0x490>
 800d618:	4601      	mov	r1, r0
 800d61a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d61c:	4620      	mov	r0, r4
 800d61e:	f001 fe87 	bl	800f330 <__multiply>
 800d622:	900b      	str	r0, [sp, #44]	; 0x2c
 800d624:	2800      	cmp	r0, #0
 800d626:	f43f ae9f 	beq.w	800d368 <_strtod_l+0x490>
 800d62a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d62c:	4620      	mov	r0, r4
 800d62e:	f001 fd67 	bl	800f100 <_Bfree>
 800d632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d634:	9318      	str	r3, [sp, #96]	; 0x60
 800d636:	f1b8 0f00 	cmp.w	r8, #0
 800d63a:	f300 808c 	bgt.w	800d756 <_strtod_l+0x87e>
 800d63e:	9b06      	ldr	r3, [sp, #24]
 800d640:	2b00      	cmp	r3, #0
 800d642:	dd08      	ble.n	800d656 <_strtod_l+0x77e>
 800d644:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d646:	9905      	ldr	r1, [sp, #20]
 800d648:	4620      	mov	r0, r4
 800d64a:	f001 ff1b 	bl	800f484 <__pow5mult>
 800d64e:	9005      	str	r0, [sp, #20]
 800d650:	2800      	cmp	r0, #0
 800d652:	f43f ae89 	beq.w	800d368 <_strtod_l+0x490>
 800d656:	2f00      	cmp	r7, #0
 800d658:	dd08      	ble.n	800d66c <_strtod_l+0x794>
 800d65a:	9905      	ldr	r1, [sp, #20]
 800d65c:	463a      	mov	r2, r7
 800d65e:	4620      	mov	r0, r4
 800d660:	f001 ff6a 	bl	800f538 <__lshift>
 800d664:	9005      	str	r0, [sp, #20]
 800d666:	2800      	cmp	r0, #0
 800d668:	f43f ae7e 	beq.w	800d368 <_strtod_l+0x490>
 800d66c:	f1b9 0f00 	cmp.w	r9, #0
 800d670:	dd08      	ble.n	800d684 <_strtod_l+0x7ac>
 800d672:	4631      	mov	r1, r6
 800d674:	464a      	mov	r2, r9
 800d676:	4620      	mov	r0, r4
 800d678:	f001 ff5e 	bl	800f538 <__lshift>
 800d67c:	4606      	mov	r6, r0
 800d67e:	2800      	cmp	r0, #0
 800d680:	f43f ae72 	beq.w	800d368 <_strtod_l+0x490>
 800d684:	9a05      	ldr	r2, [sp, #20]
 800d686:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d688:	4620      	mov	r0, r4
 800d68a:	f001 ffe1 	bl	800f650 <__mdiff>
 800d68e:	4605      	mov	r5, r0
 800d690:	2800      	cmp	r0, #0
 800d692:	f43f ae69 	beq.w	800d368 <_strtod_l+0x490>
 800d696:	68c3      	ldr	r3, [r0, #12]
 800d698:	930b      	str	r3, [sp, #44]	; 0x2c
 800d69a:	2300      	movs	r3, #0
 800d69c:	60c3      	str	r3, [r0, #12]
 800d69e:	4631      	mov	r1, r6
 800d6a0:	f001 ffba 	bl	800f618 <__mcmp>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	da60      	bge.n	800d76a <_strtod_l+0x892>
 800d6a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6aa:	ea53 030a 	orrs.w	r3, r3, sl
 800d6ae:	f040 8082 	bne.w	800d7b6 <_strtod_l+0x8de>
 800d6b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d17d      	bne.n	800d7b6 <_strtod_l+0x8de>
 800d6ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d6be:	0d1b      	lsrs	r3, r3, #20
 800d6c0:	051b      	lsls	r3, r3, #20
 800d6c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d6c6:	d976      	bls.n	800d7b6 <_strtod_l+0x8de>
 800d6c8:	696b      	ldr	r3, [r5, #20]
 800d6ca:	b913      	cbnz	r3, 800d6d2 <_strtod_l+0x7fa>
 800d6cc:	692b      	ldr	r3, [r5, #16]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	dd71      	ble.n	800d7b6 <_strtod_l+0x8de>
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f001 ff2e 	bl	800f538 <__lshift>
 800d6dc:	4631      	mov	r1, r6
 800d6de:	4605      	mov	r5, r0
 800d6e0:	f001 ff9a 	bl	800f618 <__mcmp>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	dd66      	ble.n	800d7b6 <_strtod_l+0x8de>
 800d6e8:	9904      	ldr	r1, [sp, #16]
 800d6ea:	4a53      	ldr	r2, [pc, #332]	; (800d838 <_strtod_l+0x960>)
 800d6ec:	465b      	mov	r3, fp
 800d6ee:	2900      	cmp	r1, #0
 800d6f0:	f000 8081 	beq.w	800d7f6 <_strtod_l+0x91e>
 800d6f4:	ea02 010b 	and.w	r1, r2, fp
 800d6f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d6fc:	dc7b      	bgt.n	800d7f6 <_strtod_l+0x91e>
 800d6fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d702:	f77f aea9 	ble.w	800d458 <_strtod_l+0x580>
 800d706:	4b4d      	ldr	r3, [pc, #308]	; (800d83c <_strtod_l+0x964>)
 800d708:	4650      	mov	r0, sl
 800d70a:	4659      	mov	r1, fp
 800d70c:	2200      	movs	r2, #0
 800d70e:	f7f2 ff7b 	bl	8000608 <__aeabi_dmul>
 800d712:	460b      	mov	r3, r1
 800d714:	4303      	orrs	r3, r0
 800d716:	bf08      	it	eq
 800d718:	2322      	moveq	r3, #34	; 0x22
 800d71a:	4682      	mov	sl, r0
 800d71c:	468b      	mov	fp, r1
 800d71e:	bf08      	it	eq
 800d720:	6023      	streq	r3, [r4, #0]
 800d722:	e62b      	b.n	800d37c <_strtod_l+0x4a4>
 800d724:	f04f 32ff 	mov.w	r2, #4294967295
 800d728:	fa02 f303 	lsl.w	r3, r2, r3
 800d72c:	ea03 0a0a 	and.w	sl, r3, sl
 800d730:	e6e3      	b.n	800d4fa <_strtod_l+0x622>
 800d732:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d736:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d73a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d73e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d742:	fa01 f308 	lsl.w	r3, r1, r8
 800d746:	9308      	str	r3, [sp, #32]
 800d748:	910d      	str	r1, [sp, #52]	; 0x34
 800d74a:	e746      	b.n	800d5da <_strtod_l+0x702>
 800d74c:	2300      	movs	r3, #0
 800d74e:	9308      	str	r3, [sp, #32]
 800d750:	2301      	movs	r3, #1
 800d752:	930d      	str	r3, [sp, #52]	; 0x34
 800d754:	e741      	b.n	800d5da <_strtod_l+0x702>
 800d756:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d758:	4642      	mov	r2, r8
 800d75a:	4620      	mov	r0, r4
 800d75c:	f001 feec 	bl	800f538 <__lshift>
 800d760:	9018      	str	r0, [sp, #96]	; 0x60
 800d762:	2800      	cmp	r0, #0
 800d764:	f47f af6b 	bne.w	800d63e <_strtod_l+0x766>
 800d768:	e5fe      	b.n	800d368 <_strtod_l+0x490>
 800d76a:	465f      	mov	r7, fp
 800d76c:	d16e      	bne.n	800d84c <_strtod_l+0x974>
 800d76e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d770:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d774:	b342      	cbz	r2, 800d7c8 <_strtod_l+0x8f0>
 800d776:	4a32      	ldr	r2, [pc, #200]	; (800d840 <_strtod_l+0x968>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d128      	bne.n	800d7ce <_strtod_l+0x8f6>
 800d77c:	9b04      	ldr	r3, [sp, #16]
 800d77e:	4651      	mov	r1, sl
 800d780:	b1eb      	cbz	r3, 800d7be <_strtod_l+0x8e6>
 800d782:	4b2d      	ldr	r3, [pc, #180]	; (800d838 <_strtod_l+0x960>)
 800d784:	403b      	ands	r3, r7
 800d786:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d78a:	f04f 32ff 	mov.w	r2, #4294967295
 800d78e:	d819      	bhi.n	800d7c4 <_strtod_l+0x8ec>
 800d790:	0d1b      	lsrs	r3, r3, #20
 800d792:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d796:	fa02 f303 	lsl.w	r3, r2, r3
 800d79a:	4299      	cmp	r1, r3
 800d79c:	d117      	bne.n	800d7ce <_strtod_l+0x8f6>
 800d79e:	4b29      	ldr	r3, [pc, #164]	; (800d844 <_strtod_l+0x96c>)
 800d7a0:	429f      	cmp	r7, r3
 800d7a2:	d102      	bne.n	800d7aa <_strtod_l+0x8d2>
 800d7a4:	3101      	adds	r1, #1
 800d7a6:	f43f addf 	beq.w	800d368 <_strtod_l+0x490>
 800d7aa:	4b23      	ldr	r3, [pc, #140]	; (800d838 <_strtod_l+0x960>)
 800d7ac:	403b      	ands	r3, r7
 800d7ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d7b2:	f04f 0a00 	mov.w	sl, #0
 800d7b6:	9b04      	ldr	r3, [sp, #16]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1a4      	bne.n	800d706 <_strtod_l+0x82e>
 800d7bc:	e5de      	b.n	800d37c <_strtod_l+0x4a4>
 800d7be:	f04f 33ff 	mov.w	r3, #4294967295
 800d7c2:	e7ea      	b.n	800d79a <_strtod_l+0x8c2>
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	e7e8      	b.n	800d79a <_strtod_l+0x8c2>
 800d7c8:	ea53 030a 	orrs.w	r3, r3, sl
 800d7cc:	d08c      	beq.n	800d6e8 <_strtod_l+0x810>
 800d7ce:	9b08      	ldr	r3, [sp, #32]
 800d7d0:	b1db      	cbz	r3, 800d80a <_strtod_l+0x932>
 800d7d2:	423b      	tst	r3, r7
 800d7d4:	d0ef      	beq.n	800d7b6 <_strtod_l+0x8de>
 800d7d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7d8:	9a04      	ldr	r2, [sp, #16]
 800d7da:	4650      	mov	r0, sl
 800d7dc:	4659      	mov	r1, fp
 800d7de:	b1c3      	cbz	r3, 800d812 <_strtod_l+0x93a>
 800d7e0:	f7ff fb5c 	bl	800ce9c <sulp>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	ec51 0b18 	vmov	r0, r1, d8
 800d7ec:	f7f2 fd56 	bl	800029c <__adddf3>
 800d7f0:	4682      	mov	sl, r0
 800d7f2:	468b      	mov	fp, r1
 800d7f4:	e7df      	b.n	800d7b6 <_strtod_l+0x8de>
 800d7f6:	4013      	ands	r3, r2
 800d7f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d7fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d800:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d804:	f04f 3aff 	mov.w	sl, #4294967295
 800d808:	e7d5      	b.n	800d7b6 <_strtod_l+0x8de>
 800d80a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d80c:	ea13 0f0a 	tst.w	r3, sl
 800d810:	e7e0      	b.n	800d7d4 <_strtod_l+0x8fc>
 800d812:	f7ff fb43 	bl	800ce9c <sulp>
 800d816:	4602      	mov	r2, r0
 800d818:	460b      	mov	r3, r1
 800d81a:	ec51 0b18 	vmov	r0, r1, d8
 800d81e:	f7f2 fd3b 	bl	8000298 <__aeabi_dsub>
 800d822:	2200      	movs	r2, #0
 800d824:	2300      	movs	r3, #0
 800d826:	4682      	mov	sl, r0
 800d828:	468b      	mov	fp, r1
 800d82a:	f7f3 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d0c1      	beq.n	800d7b6 <_strtod_l+0x8de>
 800d832:	e611      	b.n	800d458 <_strtod_l+0x580>
 800d834:	fffffc02 	.word	0xfffffc02
 800d838:	7ff00000 	.word	0x7ff00000
 800d83c:	39500000 	.word	0x39500000
 800d840:	000fffff 	.word	0x000fffff
 800d844:	7fefffff 	.word	0x7fefffff
 800d848:	08011d50 	.word	0x08011d50
 800d84c:	4631      	mov	r1, r6
 800d84e:	4628      	mov	r0, r5
 800d850:	f002 f860 	bl	800f914 <__ratio>
 800d854:	ec59 8b10 	vmov	r8, r9, d0
 800d858:	ee10 0a10 	vmov	r0, s0
 800d85c:	2200      	movs	r2, #0
 800d85e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d862:	4649      	mov	r1, r9
 800d864:	f7f3 f94c 	bl	8000b00 <__aeabi_dcmple>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d07a      	beq.n	800d962 <_strtod_l+0xa8a>
 800d86c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d04a      	beq.n	800d908 <_strtod_l+0xa30>
 800d872:	4b95      	ldr	r3, [pc, #596]	; (800dac8 <_strtod_l+0xbf0>)
 800d874:	2200      	movs	r2, #0
 800d876:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d87a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dac8 <_strtod_l+0xbf0>
 800d87e:	f04f 0800 	mov.w	r8, #0
 800d882:	4b92      	ldr	r3, [pc, #584]	; (800dacc <_strtod_l+0xbf4>)
 800d884:	403b      	ands	r3, r7
 800d886:	930d      	str	r3, [sp, #52]	; 0x34
 800d888:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d88a:	4b91      	ldr	r3, [pc, #580]	; (800dad0 <_strtod_l+0xbf8>)
 800d88c:	429a      	cmp	r2, r3
 800d88e:	f040 80b0 	bne.w	800d9f2 <_strtod_l+0xb1a>
 800d892:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d896:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d89a:	ec4b ab10 	vmov	d0, sl, fp
 800d89e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d8a2:	f001 ff5f 	bl	800f764 <__ulp>
 800d8a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d8aa:	ec53 2b10 	vmov	r2, r3, d0
 800d8ae:	f7f2 feab 	bl	8000608 <__aeabi_dmul>
 800d8b2:	4652      	mov	r2, sl
 800d8b4:	465b      	mov	r3, fp
 800d8b6:	f7f2 fcf1 	bl	800029c <__adddf3>
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	4983      	ldr	r1, [pc, #524]	; (800dacc <_strtod_l+0xbf4>)
 800d8be:	4a85      	ldr	r2, [pc, #532]	; (800dad4 <_strtod_l+0xbfc>)
 800d8c0:	4019      	ands	r1, r3
 800d8c2:	4291      	cmp	r1, r2
 800d8c4:	4682      	mov	sl, r0
 800d8c6:	d960      	bls.n	800d98a <_strtod_l+0xab2>
 800d8c8:	ee18 3a90 	vmov	r3, s17
 800d8cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d104      	bne.n	800d8de <_strtod_l+0xa06>
 800d8d4:	ee18 3a10 	vmov	r3, s16
 800d8d8:	3301      	adds	r3, #1
 800d8da:	f43f ad45 	beq.w	800d368 <_strtod_l+0x490>
 800d8de:	f8df b200 	ldr.w	fp, [pc, #512]	; 800dae0 <_strtod_l+0xc08>
 800d8e2:	f04f 3aff 	mov.w	sl, #4294967295
 800d8e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f001 fc09 	bl	800f100 <_Bfree>
 800d8ee:	9905      	ldr	r1, [sp, #20]
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f001 fc05 	bl	800f100 <_Bfree>
 800d8f6:	4631      	mov	r1, r6
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f001 fc01 	bl	800f100 <_Bfree>
 800d8fe:	4629      	mov	r1, r5
 800d900:	4620      	mov	r0, r4
 800d902:	f001 fbfd 	bl	800f100 <_Bfree>
 800d906:	e61a      	b.n	800d53e <_strtod_l+0x666>
 800d908:	f1ba 0f00 	cmp.w	sl, #0
 800d90c:	d11b      	bne.n	800d946 <_strtod_l+0xa6e>
 800d90e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d912:	b9f3      	cbnz	r3, 800d952 <_strtod_l+0xa7a>
 800d914:	4b6c      	ldr	r3, [pc, #432]	; (800dac8 <_strtod_l+0xbf0>)
 800d916:	2200      	movs	r2, #0
 800d918:	4640      	mov	r0, r8
 800d91a:	4649      	mov	r1, r9
 800d91c:	f7f3 f8e6 	bl	8000aec <__aeabi_dcmplt>
 800d920:	b9d0      	cbnz	r0, 800d958 <_strtod_l+0xa80>
 800d922:	4640      	mov	r0, r8
 800d924:	4649      	mov	r1, r9
 800d926:	4b6c      	ldr	r3, [pc, #432]	; (800dad8 <_strtod_l+0xc00>)
 800d928:	2200      	movs	r2, #0
 800d92a:	f7f2 fe6d 	bl	8000608 <__aeabi_dmul>
 800d92e:	4680      	mov	r8, r0
 800d930:	4689      	mov	r9, r1
 800d932:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d936:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d93a:	9315      	str	r3, [sp, #84]	; 0x54
 800d93c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d940:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d944:	e79d      	b.n	800d882 <_strtod_l+0x9aa>
 800d946:	f1ba 0f01 	cmp.w	sl, #1
 800d94a:	d102      	bne.n	800d952 <_strtod_l+0xa7a>
 800d94c:	2f00      	cmp	r7, #0
 800d94e:	f43f ad83 	beq.w	800d458 <_strtod_l+0x580>
 800d952:	4b62      	ldr	r3, [pc, #392]	; (800dadc <_strtod_l+0xc04>)
 800d954:	2200      	movs	r2, #0
 800d956:	e78e      	b.n	800d876 <_strtod_l+0x99e>
 800d958:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800dad8 <_strtod_l+0xc00>
 800d95c:	f04f 0800 	mov.w	r8, #0
 800d960:	e7e7      	b.n	800d932 <_strtod_l+0xa5a>
 800d962:	4b5d      	ldr	r3, [pc, #372]	; (800dad8 <_strtod_l+0xc00>)
 800d964:	4640      	mov	r0, r8
 800d966:	4649      	mov	r1, r9
 800d968:	2200      	movs	r2, #0
 800d96a:	f7f2 fe4d 	bl	8000608 <__aeabi_dmul>
 800d96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d970:	4680      	mov	r8, r0
 800d972:	4689      	mov	r9, r1
 800d974:	b933      	cbnz	r3, 800d984 <_strtod_l+0xaac>
 800d976:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d97a:	900e      	str	r0, [sp, #56]	; 0x38
 800d97c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d97e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d982:	e7dd      	b.n	800d940 <_strtod_l+0xa68>
 800d984:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d988:	e7f9      	b.n	800d97e <_strtod_l+0xaa6>
 800d98a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d98e:	9b04      	ldr	r3, [sp, #16]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d1a8      	bne.n	800d8e6 <_strtod_l+0xa0e>
 800d994:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d99a:	0d1b      	lsrs	r3, r3, #20
 800d99c:	051b      	lsls	r3, r3, #20
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d1a1      	bne.n	800d8e6 <_strtod_l+0xa0e>
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	4649      	mov	r1, r9
 800d9a6:	f7f3 f98f 	bl	8000cc8 <__aeabi_d2lz>
 800d9aa:	f7f2 fdff 	bl	80005ac <__aeabi_l2d>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	f7f2 fc6f 	bl	8000298 <__aeabi_dsub>
 800d9ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9c0:	ea43 030a 	orr.w	r3, r3, sl
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	4680      	mov	r8, r0
 800d9c8:	4689      	mov	r9, r1
 800d9ca:	d055      	beq.n	800da78 <_strtod_l+0xba0>
 800d9cc:	a336      	add	r3, pc, #216	; (adr r3, 800daa8 <_strtod_l+0xbd0>)
 800d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d2:	f7f3 f88b 	bl	8000aec <__aeabi_dcmplt>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	f47f acd0 	bne.w	800d37c <_strtod_l+0x4a4>
 800d9dc:	a334      	add	r3, pc, #208	; (adr r3, 800dab0 <_strtod_l+0xbd8>)
 800d9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e2:	4640      	mov	r0, r8
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	f7f3 f89f 	bl	8000b28 <__aeabi_dcmpgt>
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	f43f af7b 	beq.w	800d8e6 <_strtod_l+0xa0e>
 800d9f0:	e4c4      	b.n	800d37c <_strtod_l+0x4a4>
 800d9f2:	9b04      	ldr	r3, [sp, #16]
 800d9f4:	b333      	cbz	r3, 800da44 <_strtod_l+0xb6c>
 800d9f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d9fc:	d822      	bhi.n	800da44 <_strtod_l+0xb6c>
 800d9fe:	a32e      	add	r3, pc, #184	; (adr r3, 800dab8 <_strtod_l+0xbe0>)
 800da00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da04:	4640      	mov	r0, r8
 800da06:	4649      	mov	r1, r9
 800da08:	f7f3 f87a 	bl	8000b00 <__aeabi_dcmple>
 800da0c:	b1a0      	cbz	r0, 800da38 <_strtod_l+0xb60>
 800da0e:	4649      	mov	r1, r9
 800da10:	4640      	mov	r0, r8
 800da12:	f7f3 f8d1 	bl	8000bb8 <__aeabi_d2uiz>
 800da16:	2801      	cmp	r0, #1
 800da18:	bf38      	it	cc
 800da1a:	2001      	movcc	r0, #1
 800da1c:	f7f2 fd7a 	bl	8000514 <__aeabi_ui2d>
 800da20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da22:	4680      	mov	r8, r0
 800da24:	4689      	mov	r9, r1
 800da26:	bb23      	cbnz	r3, 800da72 <_strtod_l+0xb9a>
 800da28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da2c:	9010      	str	r0, [sp, #64]	; 0x40
 800da2e:	9311      	str	r3, [sp, #68]	; 0x44
 800da30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800da34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800da38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800da40:	1a9b      	subs	r3, r3, r2
 800da42:	9309      	str	r3, [sp, #36]	; 0x24
 800da44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da48:	eeb0 0a48 	vmov.f32	s0, s16
 800da4c:	eef0 0a68 	vmov.f32	s1, s17
 800da50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da54:	f001 fe86 	bl	800f764 <__ulp>
 800da58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da5c:	ec53 2b10 	vmov	r2, r3, d0
 800da60:	f7f2 fdd2 	bl	8000608 <__aeabi_dmul>
 800da64:	ec53 2b18 	vmov	r2, r3, d8
 800da68:	f7f2 fc18 	bl	800029c <__adddf3>
 800da6c:	4682      	mov	sl, r0
 800da6e:	468b      	mov	fp, r1
 800da70:	e78d      	b.n	800d98e <_strtod_l+0xab6>
 800da72:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800da76:	e7db      	b.n	800da30 <_strtod_l+0xb58>
 800da78:	a311      	add	r3, pc, #68	; (adr r3, 800dac0 <_strtod_l+0xbe8>)
 800da7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7e:	f7f3 f835 	bl	8000aec <__aeabi_dcmplt>
 800da82:	e7b2      	b.n	800d9ea <_strtod_l+0xb12>
 800da84:	2300      	movs	r3, #0
 800da86:	930a      	str	r3, [sp, #40]	; 0x28
 800da88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800da8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	f7ff ba6b 	b.w	800cf68 <_strtod_l+0x90>
 800da92:	2a65      	cmp	r2, #101	; 0x65
 800da94:	f43f ab5f 	beq.w	800d156 <_strtod_l+0x27e>
 800da98:	2a45      	cmp	r2, #69	; 0x45
 800da9a:	f43f ab5c 	beq.w	800d156 <_strtod_l+0x27e>
 800da9e:	2301      	movs	r3, #1
 800daa0:	f7ff bb94 	b.w	800d1cc <_strtod_l+0x2f4>
 800daa4:	f3af 8000 	nop.w
 800daa8:	94a03595 	.word	0x94a03595
 800daac:	3fdfffff 	.word	0x3fdfffff
 800dab0:	35afe535 	.word	0x35afe535
 800dab4:	3fe00000 	.word	0x3fe00000
 800dab8:	ffc00000 	.word	0xffc00000
 800dabc:	41dfffff 	.word	0x41dfffff
 800dac0:	94a03595 	.word	0x94a03595
 800dac4:	3fcfffff 	.word	0x3fcfffff
 800dac8:	3ff00000 	.word	0x3ff00000
 800dacc:	7ff00000 	.word	0x7ff00000
 800dad0:	7fe00000 	.word	0x7fe00000
 800dad4:	7c9fffff 	.word	0x7c9fffff
 800dad8:	3fe00000 	.word	0x3fe00000
 800dadc:	bff00000 	.word	0xbff00000
 800dae0:	7fefffff 	.word	0x7fefffff

0800dae4 <_strtod_r>:
 800dae4:	4b01      	ldr	r3, [pc, #4]	; (800daec <_strtod_r+0x8>)
 800dae6:	f7ff b9f7 	b.w	800ced8 <_strtod_l>
 800daea:	bf00      	nop
 800daec:	20000334 	.word	0x20000334

0800daf0 <_strtol_l.constprop.0>:
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daf6:	d001      	beq.n	800dafc <_strtol_l.constprop.0+0xc>
 800daf8:	2b24      	cmp	r3, #36	; 0x24
 800dafa:	d906      	bls.n	800db0a <_strtol_l.constprop.0+0x1a>
 800dafc:	f7fe fae6 	bl	800c0cc <__errno>
 800db00:	2316      	movs	r3, #22
 800db02:	6003      	str	r3, [r0, #0]
 800db04:	2000      	movs	r0, #0
 800db06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dbf0 <_strtol_l.constprop.0+0x100>
 800db0e:	460d      	mov	r5, r1
 800db10:	462e      	mov	r6, r5
 800db12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db16:	f814 700c 	ldrb.w	r7, [r4, ip]
 800db1a:	f017 0708 	ands.w	r7, r7, #8
 800db1e:	d1f7      	bne.n	800db10 <_strtol_l.constprop.0+0x20>
 800db20:	2c2d      	cmp	r4, #45	; 0x2d
 800db22:	d132      	bne.n	800db8a <_strtol_l.constprop.0+0x9a>
 800db24:	782c      	ldrb	r4, [r5, #0]
 800db26:	2701      	movs	r7, #1
 800db28:	1cb5      	adds	r5, r6, #2
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d05b      	beq.n	800dbe6 <_strtol_l.constprop.0+0xf6>
 800db2e:	2b10      	cmp	r3, #16
 800db30:	d109      	bne.n	800db46 <_strtol_l.constprop.0+0x56>
 800db32:	2c30      	cmp	r4, #48	; 0x30
 800db34:	d107      	bne.n	800db46 <_strtol_l.constprop.0+0x56>
 800db36:	782c      	ldrb	r4, [r5, #0]
 800db38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800db3c:	2c58      	cmp	r4, #88	; 0x58
 800db3e:	d14d      	bne.n	800dbdc <_strtol_l.constprop.0+0xec>
 800db40:	786c      	ldrb	r4, [r5, #1]
 800db42:	2310      	movs	r3, #16
 800db44:	3502      	adds	r5, #2
 800db46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800db4a:	f108 38ff 	add.w	r8, r8, #4294967295
 800db4e:	f04f 0c00 	mov.w	ip, #0
 800db52:	fbb8 f9f3 	udiv	r9, r8, r3
 800db56:	4666      	mov	r6, ip
 800db58:	fb03 8a19 	mls	sl, r3, r9, r8
 800db5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800db60:	f1be 0f09 	cmp.w	lr, #9
 800db64:	d816      	bhi.n	800db94 <_strtol_l.constprop.0+0xa4>
 800db66:	4674      	mov	r4, lr
 800db68:	42a3      	cmp	r3, r4
 800db6a:	dd24      	ble.n	800dbb6 <_strtol_l.constprop.0+0xc6>
 800db6c:	f1bc 0f00 	cmp.w	ip, #0
 800db70:	db1e      	blt.n	800dbb0 <_strtol_l.constprop.0+0xc0>
 800db72:	45b1      	cmp	r9, r6
 800db74:	d31c      	bcc.n	800dbb0 <_strtol_l.constprop.0+0xc0>
 800db76:	d101      	bne.n	800db7c <_strtol_l.constprop.0+0x8c>
 800db78:	45a2      	cmp	sl, r4
 800db7a:	db19      	blt.n	800dbb0 <_strtol_l.constprop.0+0xc0>
 800db7c:	fb06 4603 	mla	r6, r6, r3, r4
 800db80:	f04f 0c01 	mov.w	ip, #1
 800db84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db88:	e7e8      	b.n	800db5c <_strtol_l.constprop.0+0x6c>
 800db8a:	2c2b      	cmp	r4, #43	; 0x2b
 800db8c:	bf04      	itt	eq
 800db8e:	782c      	ldrbeq	r4, [r5, #0]
 800db90:	1cb5      	addeq	r5, r6, #2
 800db92:	e7ca      	b.n	800db2a <_strtol_l.constprop.0+0x3a>
 800db94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800db98:	f1be 0f19 	cmp.w	lr, #25
 800db9c:	d801      	bhi.n	800dba2 <_strtol_l.constprop.0+0xb2>
 800db9e:	3c37      	subs	r4, #55	; 0x37
 800dba0:	e7e2      	b.n	800db68 <_strtol_l.constprop.0+0x78>
 800dba2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dba6:	f1be 0f19 	cmp.w	lr, #25
 800dbaa:	d804      	bhi.n	800dbb6 <_strtol_l.constprop.0+0xc6>
 800dbac:	3c57      	subs	r4, #87	; 0x57
 800dbae:	e7db      	b.n	800db68 <_strtol_l.constprop.0+0x78>
 800dbb0:	f04f 3cff 	mov.w	ip, #4294967295
 800dbb4:	e7e6      	b.n	800db84 <_strtol_l.constprop.0+0x94>
 800dbb6:	f1bc 0f00 	cmp.w	ip, #0
 800dbba:	da05      	bge.n	800dbc8 <_strtol_l.constprop.0+0xd8>
 800dbbc:	2322      	movs	r3, #34	; 0x22
 800dbbe:	6003      	str	r3, [r0, #0]
 800dbc0:	4646      	mov	r6, r8
 800dbc2:	b942      	cbnz	r2, 800dbd6 <_strtol_l.constprop.0+0xe6>
 800dbc4:	4630      	mov	r0, r6
 800dbc6:	e79e      	b.n	800db06 <_strtol_l.constprop.0+0x16>
 800dbc8:	b107      	cbz	r7, 800dbcc <_strtol_l.constprop.0+0xdc>
 800dbca:	4276      	negs	r6, r6
 800dbcc:	2a00      	cmp	r2, #0
 800dbce:	d0f9      	beq.n	800dbc4 <_strtol_l.constprop.0+0xd4>
 800dbd0:	f1bc 0f00 	cmp.w	ip, #0
 800dbd4:	d000      	beq.n	800dbd8 <_strtol_l.constprop.0+0xe8>
 800dbd6:	1e69      	subs	r1, r5, #1
 800dbd8:	6011      	str	r1, [r2, #0]
 800dbda:	e7f3      	b.n	800dbc4 <_strtol_l.constprop.0+0xd4>
 800dbdc:	2430      	movs	r4, #48	; 0x30
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d1b1      	bne.n	800db46 <_strtol_l.constprop.0+0x56>
 800dbe2:	2308      	movs	r3, #8
 800dbe4:	e7af      	b.n	800db46 <_strtol_l.constprop.0+0x56>
 800dbe6:	2c30      	cmp	r4, #48	; 0x30
 800dbe8:	d0a5      	beq.n	800db36 <_strtol_l.constprop.0+0x46>
 800dbea:	230a      	movs	r3, #10
 800dbec:	e7ab      	b.n	800db46 <_strtol_l.constprop.0+0x56>
 800dbee:	bf00      	nop
 800dbf0:	08011d79 	.word	0x08011d79

0800dbf4 <_strtol_r>:
 800dbf4:	f7ff bf7c 	b.w	800daf0 <_strtol_l.constprop.0>

0800dbf8 <_vsniprintf_r>:
 800dbf8:	b530      	push	{r4, r5, lr}
 800dbfa:	4614      	mov	r4, r2
 800dbfc:	2c00      	cmp	r4, #0
 800dbfe:	b09b      	sub	sp, #108	; 0x6c
 800dc00:	4605      	mov	r5, r0
 800dc02:	461a      	mov	r2, r3
 800dc04:	da05      	bge.n	800dc12 <_vsniprintf_r+0x1a>
 800dc06:	238b      	movs	r3, #139	; 0x8b
 800dc08:	6003      	str	r3, [r0, #0]
 800dc0a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0e:	b01b      	add	sp, #108	; 0x6c
 800dc10:	bd30      	pop	{r4, r5, pc}
 800dc12:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dc16:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dc1a:	bf14      	ite	ne
 800dc1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc20:	4623      	moveq	r3, r4
 800dc22:	9302      	str	r3, [sp, #8]
 800dc24:	9305      	str	r3, [sp, #20]
 800dc26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc2a:	9100      	str	r1, [sp, #0]
 800dc2c:	9104      	str	r1, [sp, #16]
 800dc2e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dc32:	4669      	mov	r1, sp
 800dc34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dc36:	f002 f837 	bl	800fca8 <_svfiprintf_r>
 800dc3a:	1c43      	adds	r3, r0, #1
 800dc3c:	bfbc      	itt	lt
 800dc3e:	238b      	movlt	r3, #139	; 0x8b
 800dc40:	602b      	strlt	r3, [r5, #0]
 800dc42:	2c00      	cmp	r4, #0
 800dc44:	d0e3      	beq.n	800dc0e <_vsniprintf_r+0x16>
 800dc46:	9b00      	ldr	r3, [sp, #0]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	701a      	strb	r2, [r3, #0]
 800dc4c:	e7df      	b.n	800dc0e <_vsniprintf_r+0x16>
	...

0800dc50 <vsniprintf>:
 800dc50:	b507      	push	{r0, r1, r2, lr}
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	4613      	mov	r3, r2
 800dc56:	460a      	mov	r2, r1
 800dc58:	4601      	mov	r1, r0
 800dc5a:	4803      	ldr	r0, [pc, #12]	; (800dc68 <vsniprintf+0x18>)
 800dc5c:	6800      	ldr	r0, [r0, #0]
 800dc5e:	f7ff ffcb 	bl	800dbf8 <_vsniprintf_r>
 800dc62:	b003      	add	sp, #12
 800dc64:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc68:	200002cc 	.word	0x200002cc

0800dc6c <quorem>:
 800dc6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc70:	6903      	ldr	r3, [r0, #16]
 800dc72:	690c      	ldr	r4, [r1, #16]
 800dc74:	42a3      	cmp	r3, r4
 800dc76:	4607      	mov	r7, r0
 800dc78:	f2c0 8081 	blt.w	800dd7e <quorem+0x112>
 800dc7c:	3c01      	subs	r4, #1
 800dc7e:	f101 0814 	add.w	r8, r1, #20
 800dc82:	f100 0514 	add.w	r5, r0, #20
 800dc86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc8a:	9301      	str	r3, [sp, #4]
 800dc8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc94:	3301      	adds	r3, #1
 800dc96:	429a      	cmp	r2, r3
 800dc98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dca0:	fbb2 f6f3 	udiv	r6, r2, r3
 800dca4:	d331      	bcc.n	800dd0a <quorem+0x9e>
 800dca6:	f04f 0e00 	mov.w	lr, #0
 800dcaa:	4640      	mov	r0, r8
 800dcac:	46ac      	mov	ip, r5
 800dcae:	46f2      	mov	sl, lr
 800dcb0:	f850 2b04 	ldr.w	r2, [r0], #4
 800dcb4:	b293      	uxth	r3, r2
 800dcb6:	fb06 e303 	mla	r3, r6, r3, lr
 800dcba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	ebaa 0303 	sub.w	r3, sl, r3
 800dcc4:	f8dc a000 	ldr.w	sl, [ip]
 800dcc8:	0c12      	lsrs	r2, r2, #16
 800dcca:	fa13 f38a 	uxtah	r3, r3, sl
 800dcce:	fb06 e202 	mla	r2, r6, r2, lr
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	9b00      	ldr	r3, [sp, #0]
 800dcd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dcda:	b292      	uxth	r2, r2
 800dcdc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dce4:	f8bd 3000 	ldrh.w	r3, [sp]
 800dce8:	4581      	cmp	r9, r0
 800dcea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcee:	f84c 3b04 	str.w	r3, [ip], #4
 800dcf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dcf6:	d2db      	bcs.n	800dcb0 <quorem+0x44>
 800dcf8:	f855 300b 	ldr.w	r3, [r5, fp]
 800dcfc:	b92b      	cbnz	r3, 800dd0a <quorem+0x9e>
 800dcfe:	9b01      	ldr	r3, [sp, #4]
 800dd00:	3b04      	subs	r3, #4
 800dd02:	429d      	cmp	r5, r3
 800dd04:	461a      	mov	r2, r3
 800dd06:	d32e      	bcc.n	800dd66 <quorem+0xfa>
 800dd08:	613c      	str	r4, [r7, #16]
 800dd0a:	4638      	mov	r0, r7
 800dd0c:	f001 fc84 	bl	800f618 <__mcmp>
 800dd10:	2800      	cmp	r0, #0
 800dd12:	db24      	blt.n	800dd5e <quorem+0xf2>
 800dd14:	3601      	adds	r6, #1
 800dd16:	4628      	mov	r0, r5
 800dd18:	f04f 0c00 	mov.w	ip, #0
 800dd1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd20:	f8d0 e000 	ldr.w	lr, [r0]
 800dd24:	b293      	uxth	r3, r2
 800dd26:	ebac 0303 	sub.w	r3, ip, r3
 800dd2a:	0c12      	lsrs	r2, r2, #16
 800dd2c:	fa13 f38e 	uxtah	r3, r3, lr
 800dd30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd3e:	45c1      	cmp	r9, r8
 800dd40:	f840 3b04 	str.w	r3, [r0], #4
 800dd44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd48:	d2e8      	bcs.n	800dd1c <quorem+0xb0>
 800dd4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd52:	b922      	cbnz	r2, 800dd5e <quorem+0xf2>
 800dd54:	3b04      	subs	r3, #4
 800dd56:	429d      	cmp	r5, r3
 800dd58:	461a      	mov	r2, r3
 800dd5a:	d30a      	bcc.n	800dd72 <quorem+0x106>
 800dd5c:	613c      	str	r4, [r7, #16]
 800dd5e:	4630      	mov	r0, r6
 800dd60:	b003      	add	sp, #12
 800dd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd66:	6812      	ldr	r2, [r2, #0]
 800dd68:	3b04      	subs	r3, #4
 800dd6a:	2a00      	cmp	r2, #0
 800dd6c:	d1cc      	bne.n	800dd08 <quorem+0x9c>
 800dd6e:	3c01      	subs	r4, #1
 800dd70:	e7c7      	b.n	800dd02 <quorem+0x96>
 800dd72:	6812      	ldr	r2, [r2, #0]
 800dd74:	3b04      	subs	r3, #4
 800dd76:	2a00      	cmp	r2, #0
 800dd78:	d1f0      	bne.n	800dd5c <quorem+0xf0>
 800dd7a:	3c01      	subs	r4, #1
 800dd7c:	e7eb      	b.n	800dd56 <quorem+0xea>
 800dd7e:	2000      	movs	r0, #0
 800dd80:	e7ee      	b.n	800dd60 <quorem+0xf4>
 800dd82:	0000      	movs	r0, r0
 800dd84:	0000      	movs	r0, r0
	...

0800dd88 <_dtoa_r>:
 800dd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	ed2d 8b04 	vpush	{d8-d9}
 800dd90:	ec57 6b10 	vmov	r6, r7, d0
 800dd94:	b093      	sub	sp, #76	; 0x4c
 800dd96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dd9c:	9106      	str	r1, [sp, #24]
 800dd9e:	ee10 aa10 	vmov	sl, s0
 800dda2:	4604      	mov	r4, r0
 800dda4:	9209      	str	r2, [sp, #36]	; 0x24
 800dda6:	930c      	str	r3, [sp, #48]	; 0x30
 800dda8:	46bb      	mov	fp, r7
 800ddaa:	b975      	cbnz	r5, 800ddca <_dtoa_r+0x42>
 800ddac:	2010      	movs	r0, #16
 800ddae:	f001 f94d 	bl	800f04c <malloc>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	6260      	str	r0, [r4, #36]	; 0x24
 800ddb6:	b920      	cbnz	r0, 800ddc2 <_dtoa_r+0x3a>
 800ddb8:	4ba7      	ldr	r3, [pc, #668]	; (800e058 <_dtoa_r+0x2d0>)
 800ddba:	21ea      	movs	r1, #234	; 0xea
 800ddbc:	48a7      	ldr	r0, [pc, #668]	; (800e05c <_dtoa_r+0x2d4>)
 800ddbe:	f002 f8ad 	bl	800ff1c <__assert_func>
 800ddc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ddc6:	6005      	str	r5, [r0, #0]
 800ddc8:	60c5      	str	r5, [r0, #12]
 800ddca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddcc:	6819      	ldr	r1, [r3, #0]
 800ddce:	b151      	cbz	r1, 800dde6 <_dtoa_r+0x5e>
 800ddd0:	685a      	ldr	r2, [r3, #4]
 800ddd2:	604a      	str	r2, [r1, #4]
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	4093      	lsls	r3, r2
 800ddd8:	608b      	str	r3, [r1, #8]
 800ddda:	4620      	mov	r0, r4
 800dddc:	f001 f990 	bl	800f100 <_Bfree>
 800dde0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dde2:	2200      	movs	r2, #0
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	1e3b      	subs	r3, r7, #0
 800dde8:	bfaa      	itet	ge
 800ddea:	2300      	movge	r3, #0
 800ddec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ddf0:	f8c8 3000 	strge.w	r3, [r8]
 800ddf4:	4b9a      	ldr	r3, [pc, #616]	; (800e060 <_dtoa_r+0x2d8>)
 800ddf6:	bfbc      	itt	lt
 800ddf8:	2201      	movlt	r2, #1
 800ddfa:	f8c8 2000 	strlt.w	r2, [r8]
 800ddfe:	ea33 030b 	bics.w	r3, r3, fp
 800de02:	d11b      	bne.n	800de3c <_dtoa_r+0xb4>
 800de04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de06:	f242 730f 	movw	r3, #9999	; 0x270f
 800de0a:	6013      	str	r3, [r2, #0]
 800de0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de10:	4333      	orrs	r3, r6
 800de12:	f000 8592 	beq.w	800e93a <_dtoa_r+0xbb2>
 800de16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de18:	b963      	cbnz	r3, 800de34 <_dtoa_r+0xac>
 800de1a:	4b92      	ldr	r3, [pc, #584]	; (800e064 <_dtoa_r+0x2dc>)
 800de1c:	e022      	b.n	800de64 <_dtoa_r+0xdc>
 800de1e:	4b92      	ldr	r3, [pc, #584]	; (800e068 <_dtoa_r+0x2e0>)
 800de20:	9301      	str	r3, [sp, #4]
 800de22:	3308      	adds	r3, #8
 800de24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de26:	6013      	str	r3, [r2, #0]
 800de28:	9801      	ldr	r0, [sp, #4]
 800de2a:	b013      	add	sp, #76	; 0x4c
 800de2c:	ecbd 8b04 	vpop	{d8-d9}
 800de30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de34:	4b8b      	ldr	r3, [pc, #556]	; (800e064 <_dtoa_r+0x2dc>)
 800de36:	9301      	str	r3, [sp, #4]
 800de38:	3303      	adds	r3, #3
 800de3a:	e7f3      	b.n	800de24 <_dtoa_r+0x9c>
 800de3c:	2200      	movs	r2, #0
 800de3e:	2300      	movs	r3, #0
 800de40:	4650      	mov	r0, sl
 800de42:	4659      	mov	r1, fp
 800de44:	f7f2 fe48 	bl	8000ad8 <__aeabi_dcmpeq>
 800de48:	ec4b ab19 	vmov	d9, sl, fp
 800de4c:	4680      	mov	r8, r0
 800de4e:	b158      	cbz	r0, 800de68 <_dtoa_r+0xe0>
 800de50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de52:	2301      	movs	r3, #1
 800de54:	6013      	str	r3, [r2, #0]
 800de56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f000 856b 	beq.w	800e934 <_dtoa_r+0xbac>
 800de5e:	4883      	ldr	r0, [pc, #524]	; (800e06c <_dtoa_r+0x2e4>)
 800de60:	6018      	str	r0, [r3, #0]
 800de62:	1e43      	subs	r3, r0, #1
 800de64:	9301      	str	r3, [sp, #4]
 800de66:	e7df      	b.n	800de28 <_dtoa_r+0xa0>
 800de68:	ec4b ab10 	vmov	d0, sl, fp
 800de6c:	aa10      	add	r2, sp, #64	; 0x40
 800de6e:	a911      	add	r1, sp, #68	; 0x44
 800de70:	4620      	mov	r0, r4
 800de72:	f001 fcf3 	bl	800f85c <__d2b>
 800de76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800de7a:	ee08 0a10 	vmov	s16, r0
 800de7e:	2d00      	cmp	r5, #0
 800de80:	f000 8084 	beq.w	800df8c <_dtoa_r+0x204>
 800de84:	ee19 3a90 	vmov	r3, s19
 800de88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800de90:	4656      	mov	r6, sl
 800de92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800de96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800de9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800de9e:	4b74      	ldr	r3, [pc, #464]	; (800e070 <_dtoa_r+0x2e8>)
 800dea0:	2200      	movs	r2, #0
 800dea2:	4630      	mov	r0, r6
 800dea4:	4639      	mov	r1, r7
 800dea6:	f7f2 f9f7 	bl	8000298 <__aeabi_dsub>
 800deaa:	a365      	add	r3, pc, #404	; (adr r3, 800e040 <_dtoa_r+0x2b8>)
 800deac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb0:	f7f2 fbaa 	bl	8000608 <__aeabi_dmul>
 800deb4:	a364      	add	r3, pc, #400	; (adr r3, 800e048 <_dtoa_r+0x2c0>)
 800deb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deba:	f7f2 f9ef 	bl	800029c <__adddf3>
 800debe:	4606      	mov	r6, r0
 800dec0:	4628      	mov	r0, r5
 800dec2:	460f      	mov	r7, r1
 800dec4:	f7f2 fb36 	bl	8000534 <__aeabi_i2d>
 800dec8:	a361      	add	r3, pc, #388	; (adr r3, 800e050 <_dtoa_r+0x2c8>)
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	f7f2 fb9b 	bl	8000608 <__aeabi_dmul>
 800ded2:	4602      	mov	r2, r0
 800ded4:	460b      	mov	r3, r1
 800ded6:	4630      	mov	r0, r6
 800ded8:	4639      	mov	r1, r7
 800deda:	f7f2 f9df 	bl	800029c <__adddf3>
 800dede:	4606      	mov	r6, r0
 800dee0:	460f      	mov	r7, r1
 800dee2:	f7f2 fe41 	bl	8000b68 <__aeabi_d2iz>
 800dee6:	2200      	movs	r2, #0
 800dee8:	9000      	str	r0, [sp, #0]
 800deea:	2300      	movs	r3, #0
 800deec:	4630      	mov	r0, r6
 800deee:	4639      	mov	r1, r7
 800def0:	f7f2 fdfc 	bl	8000aec <__aeabi_dcmplt>
 800def4:	b150      	cbz	r0, 800df0c <_dtoa_r+0x184>
 800def6:	9800      	ldr	r0, [sp, #0]
 800def8:	f7f2 fb1c 	bl	8000534 <__aeabi_i2d>
 800defc:	4632      	mov	r2, r6
 800defe:	463b      	mov	r3, r7
 800df00:	f7f2 fdea 	bl	8000ad8 <__aeabi_dcmpeq>
 800df04:	b910      	cbnz	r0, 800df0c <_dtoa_r+0x184>
 800df06:	9b00      	ldr	r3, [sp, #0]
 800df08:	3b01      	subs	r3, #1
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	9b00      	ldr	r3, [sp, #0]
 800df0e:	2b16      	cmp	r3, #22
 800df10:	d85a      	bhi.n	800dfc8 <_dtoa_r+0x240>
 800df12:	9a00      	ldr	r2, [sp, #0]
 800df14:	4b57      	ldr	r3, [pc, #348]	; (800e074 <_dtoa_r+0x2ec>)
 800df16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1e:	ec51 0b19 	vmov	r0, r1, d9
 800df22:	f7f2 fde3 	bl	8000aec <__aeabi_dcmplt>
 800df26:	2800      	cmp	r0, #0
 800df28:	d050      	beq.n	800dfcc <_dtoa_r+0x244>
 800df2a:	9b00      	ldr	r3, [sp, #0]
 800df2c:	3b01      	subs	r3, #1
 800df2e:	9300      	str	r3, [sp, #0]
 800df30:	2300      	movs	r3, #0
 800df32:	930b      	str	r3, [sp, #44]	; 0x2c
 800df34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df36:	1b5d      	subs	r5, r3, r5
 800df38:	1e6b      	subs	r3, r5, #1
 800df3a:	9305      	str	r3, [sp, #20]
 800df3c:	bf45      	ittet	mi
 800df3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800df42:	9304      	strmi	r3, [sp, #16]
 800df44:	2300      	movpl	r3, #0
 800df46:	2300      	movmi	r3, #0
 800df48:	bf4c      	ite	mi
 800df4a:	9305      	strmi	r3, [sp, #20]
 800df4c:	9304      	strpl	r3, [sp, #16]
 800df4e:	9b00      	ldr	r3, [sp, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	db3d      	blt.n	800dfd0 <_dtoa_r+0x248>
 800df54:	9b05      	ldr	r3, [sp, #20]
 800df56:	9a00      	ldr	r2, [sp, #0]
 800df58:	920a      	str	r2, [sp, #40]	; 0x28
 800df5a:	4413      	add	r3, r2
 800df5c:	9305      	str	r3, [sp, #20]
 800df5e:	2300      	movs	r3, #0
 800df60:	9307      	str	r3, [sp, #28]
 800df62:	9b06      	ldr	r3, [sp, #24]
 800df64:	2b09      	cmp	r3, #9
 800df66:	f200 8089 	bhi.w	800e07c <_dtoa_r+0x2f4>
 800df6a:	2b05      	cmp	r3, #5
 800df6c:	bfc4      	itt	gt
 800df6e:	3b04      	subgt	r3, #4
 800df70:	9306      	strgt	r3, [sp, #24]
 800df72:	9b06      	ldr	r3, [sp, #24]
 800df74:	f1a3 0302 	sub.w	r3, r3, #2
 800df78:	bfcc      	ite	gt
 800df7a:	2500      	movgt	r5, #0
 800df7c:	2501      	movle	r5, #1
 800df7e:	2b03      	cmp	r3, #3
 800df80:	f200 8087 	bhi.w	800e092 <_dtoa_r+0x30a>
 800df84:	e8df f003 	tbb	[pc, r3]
 800df88:	59383a2d 	.word	0x59383a2d
 800df8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800df90:	441d      	add	r5, r3
 800df92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800df96:	2b20      	cmp	r3, #32
 800df98:	bfc1      	itttt	gt
 800df9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800df9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dfa2:	fa0b f303 	lslgt.w	r3, fp, r3
 800dfa6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dfaa:	bfda      	itte	le
 800dfac:	f1c3 0320 	rsble	r3, r3, #32
 800dfb0:	fa06 f003 	lslle.w	r0, r6, r3
 800dfb4:	4318      	orrgt	r0, r3
 800dfb6:	f7f2 faad 	bl	8000514 <__aeabi_ui2d>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	4606      	mov	r6, r0
 800dfbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dfc2:	3d01      	subs	r5, #1
 800dfc4:	930e      	str	r3, [sp, #56]	; 0x38
 800dfc6:	e76a      	b.n	800de9e <_dtoa_r+0x116>
 800dfc8:	2301      	movs	r3, #1
 800dfca:	e7b2      	b.n	800df32 <_dtoa_r+0x1aa>
 800dfcc:	900b      	str	r0, [sp, #44]	; 0x2c
 800dfce:	e7b1      	b.n	800df34 <_dtoa_r+0x1ac>
 800dfd0:	9b04      	ldr	r3, [sp, #16]
 800dfd2:	9a00      	ldr	r2, [sp, #0]
 800dfd4:	1a9b      	subs	r3, r3, r2
 800dfd6:	9304      	str	r3, [sp, #16]
 800dfd8:	4253      	negs	r3, r2
 800dfda:	9307      	str	r3, [sp, #28]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	930a      	str	r3, [sp, #40]	; 0x28
 800dfe0:	e7bf      	b.n	800df62 <_dtoa_r+0x1da>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	9308      	str	r3, [sp, #32]
 800dfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	dc55      	bgt.n	800e098 <_dtoa_r+0x310>
 800dfec:	2301      	movs	r3, #1
 800dfee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dff2:	461a      	mov	r2, r3
 800dff4:	9209      	str	r2, [sp, #36]	; 0x24
 800dff6:	e00c      	b.n	800e012 <_dtoa_r+0x28a>
 800dff8:	2301      	movs	r3, #1
 800dffa:	e7f3      	b.n	800dfe4 <_dtoa_r+0x25c>
 800dffc:	2300      	movs	r3, #0
 800dffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e000:	9308      	str	r3, [sp, #32]
 800e002:	9b00      	ldr	r3, [sp, #0]
 800e004:	4413      	add	r3, r2
 800e006:	9302      	str	r3, [sp, #8]
 800e008:	3301      	adds	r3, #1
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	9303      	str	r3, [sp, #12]
 800e00e:	bfb8      	it	lt
 800e010:	2301      	movlt	r3, #1
 800e012:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e014:	2200      	movs	r2, #0
 800e016:	6042      	str	r2, [r0, #4]
 800e018:	2204      	movs	r2, #4
 800e01a:	f102 0614 	add.w	r6, r2, #20
 800e01e:	429e      	cmp	r6, r3
 800e020:	6841      	ldr	r1, [r0, #4]
 800e022:	d93d      	bls.n	800e0a0 <_dtoa_r+0x318>
 800e024:	4620      	mov	r0, r4
 800e026:	f001 f82b 	bl	800f080 <_Balloc>
 800e02a:	9001      	str	r0, [sp, #4]
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d13b      	bne.n	800e0a8 <_dtoa_r+0x320>
 800e030:	4b11      	ldr	r3, [pc, #68]	; (800e078 <_dtoa_r+0x2f0>)
 800e032:	4602      	mov	r2, r0
 800e034:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e038:	e6c0      	b.n	800ddbc <_dtoa_r+0x34>
 800e03a:	2301      	movs	r3, #1
 800e03c:	e7df      	b.n	800dffe <_dtoa_r+0x276>
 800e03e:	bf00      	nop
 800e040:	636f4361 	.word	0x636f4361
 800e044:	3fd287a7 	.word	0x3fd287a7
 800e048:	8b60c8b3 	.word	0x8b60c8b3
 800e04c:	3fc68a28 	.word	0x3fc68a28
 800e050:	509f79fb 	.word	0x509f79fb
 800e054:	3fd34413 	.word	0x3fd34413
 800e058:	08011e86 	.word	0x08011e86
 800e05c:	08011e9d 	.word	0x08011e9d
 800e060:	7ff00000 	.word	0x7ff00000
 800e064:	08011e82 	.word	0x08011e82
 800e068:	08011e79 	.word	0x08011e79
 800e06c:	08011cf9 	.word	0x08011cf9
 800e070:	3ff80000 	.word	0x3ff80000
 800e074:	08012008 	.word	0x08012008
 800e078:	08011ef8 	.word	0x08011ef8
 800e07c:	2501      	movs	r5, #1
 800e07e:	2300      	movs	r3, #0
 800e080:	9306      	str	r3, [sp, #24]
 800e082:	9508      	str	r5, [sp, #32]
 800e084:	f04f 33ff 	mov.w	r3, #4294967295
 800e088:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e08c:	2200      	movs	r2, #0
 800e08e:	2312      	movs	r3, #18
 800e090:	e7b0      	b.n	800dff4 <_dtoa_r+0x26c>
 800e092:	2301      	movs	r3, #1
 800e094:	9308      	str	r3, [sp, #32]
 800e096:	e7f5      	b.n	800e084 <_dtoa_r+0x2fc>
 800e098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e09a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e09e:	e7b8      	b.n	800e012 <_dtoa_r+0x28a>
 800e0a0:	3101      	adds	r1, #1
 800e0a2:	6041      	str	r1, [r0, #4]
 800e0a4:	0052      	lsls	r2, r2, #1
 800e0a6:	e7b8      	b.n	800e01a <_dtoa_r+0x292>
 800e0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0aa:	9a01      	ldr	r2, [sp, #4]
 800e0ac:	601a      	str	r2, [r3, #0]
 800e0ae:	9b03      	ldr	r3, [sp, #12]
 800e0b0:	2b0e      	cmp	r3, #14
 800e0b2:	f200 809d 	bhi.w	800e1f0 <_dtoa_r+0x468>
 800e0b6:	2d00      	cmp	r5, #0
 800e0b8:	f000 809a 	beq.w	800e1f0 <_dtoa_r+0x468>
 800e0bc:	9b00      	ldr	r3, [sp, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	dd32      	ble.n	800e128 <_dtoa_r+0x3a0>
 800e0c2:	4ab7      	ldr	r2, [pc, #732]	; (800e3a0 <_dtoa_r+0x618>)
 800e0c4:	f003 030f 	and.w	r3, r3, #15
 800e0c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e0cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0d0:	9b00      	ldr	r3, [sp, #0]
 800e0d2:	05d8      	lsls	r0, r3, #23
 800e0d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e0d8:	d516      	bpl.n	800e108 <_dtoa_r+0x380>
 800e0da:	4bb2      	ldr	r3, [pc, #712]	; (800e3a4 <_dtoa_r+0x61c>)
 800e0dc:	ec51 0b19 	vmov	r0, r1, d9
 800e0e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0e4:	f7f2 fbba 	bl	800085c <__aeabi_ddiv>
 800e0e8:	f007 070f 	and.w	r7, r7, #15
 800e0ec:	4682      	mov	sl, r0
 800e0ee:	468b      	mov	fp, r1
 800e0f0:	2503      	movs	r5, #3
 800e0f2:	4eac      	ldr	r6, [pc, #688]	; (800e3a4 <_dtoa_r+0x61c>)
 800e0f4:	b957      	cbnz	r7, 800e10c <_dtoa_r+0x384>
 800e0f6:	4642      	mov	r2, r8
 800e0f8:	464b      	mov	r3, r9
 800e0fa:	4650      	mov	r0, sl
 800e0fc:	4659      	mov	r1, fp
 800e0fe:	f7f2 fbad 	bl	800085c <__aeabi_ddiv>
 800e102:	4682      	mov	sl, r0
 800e104:	468b      	mov	fp, r1
 800e106:	e028      	b.n	800e15a <_dtoa_r+0x3d2>
 800e108:	2502      	movs	r5, #2
 800e10a:	e7f2      	b.n	800e0f2 <_dtoa_r+0x36a>
 800e10c:	07f9      	lsls	r1, r7, #31
 800e10e:	d508      	bpl.n	800e122 <_dtoa_r+0x39a>
 800e110:	4640      	mov	r0, r8
 800e112:	4649      	mov	r1, r9
 800e114:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e118:	f7f2 fa76 	bl	8000608 <__aeabi_dmul>
 800e11c:	3501      	adds	r5, #1
 800e11e:	4680      	mov	r8, r0
 800e120:	4689      	mov	r9, r1
 800e122:	107f      	asrs	r7, r7, #1
 800e124:	3608      	adds	r6, #8
 800e126:	e7e5      	b.n	800e0f4 <_dtoa_r+0x36c>
 800e128:	f000 809b 	beq.w	800e262 <_dtoa_r+0x4da>
 800e12c:	9b00      	ldr	r3, [sp, #0]
 800e12e:	4f9d      	ldr	r7, [pc, #628]	; (800e3a4 <_dtoa_r+0x61c>)
 800e130:	425e      	negs	r6, r3
 800e132:	4b9b      	ldr	r3, [pc, #620]	; (800e3a0 <_dtoa_r+0x618>)
 800e134:	f006 020f 	and.w	r2, r6, #15
 800e138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e140:	ec51 0b19 	vmov	r0, r1, d9
 800e144:	f7f2 fa60 	bl	8000608 <__aeabi_dmul>
 800e148:	1136      	asrs	r6, r6, #4
 800e14a:	4682      	mov	sl, r0
 800e14c:	468b      	mov	fp, r1
 800e14e:	2300      	movs	r3, #0
 800e150:	2502      	movs	r5, #2
 800e152:	2e00      	cmp	r6, #0
 800e154:	d17a      	bne.n	800e24c <_dtoa_r+0x4c4>
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1d3      	bne.n	800e102 <_dtoa_r+0x37a>
 800e15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f000 8082 	beq.w	800e266 <_dtoa_r+0x4de>
 800e162:	4b91      	ldr	r3, [pc, #580]	; (800e3a8 <_dtoa_r+0x620>)
 800e164:	2200      	movs	r2, #0
 800e166:	4650      	mov	r0, sl
 800e168:	4659      	mov	r1, fp
 800e16a:	f7f2 fcbf 	bl	8000aec <__aeabi_dcmplt>
 800e16e:	2800      	cmp	r0, #0
 800e170:	d079      	beq.n	800e266 <_dtoa_r+0x4de>
 800e172:	9b03      	ldr	r3, [sp, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d076      	beq.n	800e266 <_dtoa_r+0x4de>
 800e178:	9b02      	ldr	r3, [sp, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	dd36      	ble.n	800e1ec <_dtoa_r+0x464>
 800e17e:	9b00      	ldr	r3, [sp, #0]
 800e180:	4650      	mov	r0, sl
 800e182:	4659      	mov	r1, fp
 800e184:	1e5f      	subs	r7, r3, #1
 800e186:	2200      	movs	r2, #0
 800e188:	4b88      	ldr	r3, [pc, #544]	; (800e3ac <_dtoa_r+0x624>)
 800e18a:	f7f2 fa3d 	bl	8000608 <__aeabi_dmul>
 800e18e:	9e02      	ldr	r6, [sp, #8]
 800e190:	4682      	mov	sl, r0
 800e192:	468b      	mov	fp, r1
 800e194:	3501      	adds	r5, #1
 800e196:	4628      	mov	r0, r5
 800e198:	f7f2 f9cc 	bl	8000534 <__aeabi_i2d>
 800e19c:	4652      	mov	r2, sl
 800e19e:	465b      	mov	r3, fp
 800e1a0:	f7f2 fa32 	bl	8000608 <__aeabi_dmul>
 800e1a4:	4b82      	ldr	r3, [pc, #520]	; (800e3b0 <_dtoa_r+0x628>)
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f7f2 f878 	bl	800029c <__adddf3>
 800e1ac:	46d0      	mov	r8, sl
 800e1ae:	46d9      	mov	r9, fp
 800e1b0:	4682      	mov	sl, r0
 800e1b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e1b6:	2e00      	cmp	r6, #0
 800e1b8:	d158      	bne.n	800e26c <_dtoa_r+0x4e4>
 800e1ba:	4b7e      	ldr	r3, [pc, #504]	; (800e3b4 <_dtoa_r+0x62c>)
 800e1bc:	2200      	movs	r2, #0
 800e1be:	4640      	mov	r0, r8
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	f7f2 f869 	bl	8000298 <__aeabi_dsub>
 800e1c6:	4652      	mov	r2, sl
 800e1c8:	465b      	mov	r3, fp
 800e1ca:	4680      	mov	r8, r0
 800e1cc:	4689      	mov	r9, r1
 800e1ce:	f7f2 fcab 	bl	8000b28 <__aeabi_dcmpgt>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	f040 8295 	bne.w	800e702 <_dtoa_r+0x97a>
 800e1d8:	4652      	mov	r2, sl
 800e1da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e1de:	4640      	mov	r0, r8
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	f7f2 fc83 	bl	8000aec <__aeabi_dcmplt>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	f040 8289 	bne.w	800e6fe <_dtoa_r+0x976>
 800e1ec:	ec5b ab19 	vmov	sl, fp, d9
 800e1f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f2c0 8148 	blt.w	800e488 <_dtoa_r+0x700>
 800e1f8:	9a00      	ldr	r2, [sp, #0]
 800e1fa:	2a0e      	cmp	r2, #14
 800e1fc:	f300 8144 	bgt.w	800e488 <_dtoa_r+0x700>
 800e200:	4b67      	ldr	r3, [pc, #412]	; (800e3a0 <_dtoa_r+0x618>)
 800e202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e206:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f280 80d5 	bge.w	800e3bc <_dtoa_r+0x634>
 800e212:	9b03      	ldr	r3, [sp, #12]
 800e214:	2b00      	cmp	r3, #0
 800e216:	f300 80d1 	bgt.w	800e3bc <_dtoa_r+0x634>
 800e21a:	f040 826f 	bne.w	800e6fc <_dtoa_r+0x974>
 800e21e:	4b65      	ldr	r3, [pc, #404]	; (800e3b4 <_dtoa_r+0x62c>)
 800e220:	2200      	movs	r2, #0
 800e222:	4640      	mov	r0, r8
 800e224:	4649      	mov	r1, r9
 800e226:	f7f2 f9ef 	bl	8000608 <__aeabi_dmul>
 800e22a:	4652      	mov	r2, sl
 800e22c:	465b      	mov	r3, fp
 800e22e:	f7f2 fc71 	bl	8000b14 <__aeabi_dcmpge>
 800e232:	9e03      	ldr	r6, [sp, #12]
 800e234:	4637      	mov	r7, r6
 800e236:	2800      	cmp	r0, #0
 800e238:	f040 8245 	bne.w	800e6c6 <_dtoa_r+0x93e>
 800e23c:	9d01      	ldr	r5, [sp, #4]
 800e23e:	2331      	movs	r3, #49	; 0x31
 800e240:	f805 3b01 	strb.w	r3, [r5], #1
 800e244:	9b00      	ldr	r3, [sp, #0]
 800e246:	3301      	adds	r3, #1
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	e240      	b.n	800e6ce <_dtoa_r+0x946>
 800e24c:	07f2      	lsls	r2, r6, #31
 800e24e:	d505      	bpl.n	800e25c <_dtoa_r+0x4d4>
 800e250:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e254:	f7f2 f9d8 	bl	8000608 <__aeabi_dmul>
 800e258:	3501      	adds	r5, #1
 800e25a:	2301      	movs	r3, #1
 800e25c:	1076      	asrs	r6, r6, #1
 800e25e:	3708      	adds	r7, #8
 800e260:	e777      	b.n	800e152 <_dtoa_r+0x3ca>
 800e262:	2502      	movs	r5, #2
 800e264:	e779      	b.n	800e15a <_dtoa_r+0x3d2>
 800e266:	9f00      	ldr	r7, [sp, #0]
 800e268:	9e03      	ldr	r6, [sp, #12]
 800e26a:	e794      	b.n	800e196 <_dtoa_r+0x40e>
 800e26c:	9901      	ldr	r1, [sp, #4]
 800e26e:	4b4c      	ldr	r3, [pc, #304]	; (800e3a0 <_dtoa_r+0x618>)
 800e270:	4431      	add	r1, r6
 800e272:	910d      	str	r1, [sp, #52]	; 0x34
 800e274:	9908      	ldr	r1, [sp, #32]
 800e276:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e27a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e27e:	2900      	cmp	r1, #0
 800e280:	d043      	beq.n	800e30a <_dtoa_r+0x582>
 800e282:	494d      	ldr	r1, [pc, #308]	; (800e3b8 <_dtoa_r+0x630>)
 800e284:	2000      	movs	r0, #0
 800e286:	f7f2 fae9 	bl	800085c <__aeabi_ddiv>
 800e28a:	4652      	mov	r2, sl
 800e28c:	465b      	mov	r3, fp
 800e28e:	f7f2 f803 	bl	8000298 <__aeabi_dsub>
 800e292:	9d01      	ldr	r5, [sp, #4]
 800e294:	4682      	mov	sl, r0
 800e296:	468b      	mov	fp, r1
 800e298:	4649      	mov	r1, r9
 800e29a:	4640      	mov	r0, r8
 800e29c:	f7f2 fc64 	bl	8000b68 <__aeabi_d2iz>
 800e2a0:	4606      	mov	r6, r0
 800e2a2:	f7f2 f947 	bl	8000534 <__aeabi_i2d>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	4640      	mov	r0, r8
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	f7f1 fff3 	bl	8000298 <__aeabi_dsub>
 800e2b2:	3630      	adds	r6, #48	; 0x30
 800e2b4:	f805 6b01 	strb.w	r6, [r5], #1
 800e2b8:	4652      	mov	r2, sl
 800e2ba:	465b      	mov	r3, fp
 800e2bc:	4680      	mov	r8, r0
 800e2be:	4689      	mov	r9, r1
 800e2c0:	f7f2 fc14 	bl	8000aec <__aeabi_dcmplt>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	d163      	bne.n	800e390 <_dtoa_r+0x608>
 800e2c8:	4642      	mov	r2, r8
 800e2ca:	464b      	mov	r3, r9
 800e2cc:	4936      	ldr	r1, [pc, #216]	; (800e3a8 <_dtoa_r+0x620>)
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	f7f1 ffe2 	bl	8000298 <__aeabi_dsub>
 800e2d4:	4652      	mov	r2, sl
 800e2d6:	465b      	mov	r3, fp
 800e2d8:	f7f2 fc08 	bl	8000aec <__aeabi_dcmplt>
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	f040 80b5 	bne.w	800e44c <_dtoa_r+0x6c4>
 800e2e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2e4:	429d      	cmp	r5, r3
 800e2e6:	d081      	beq.n	800e1ec <_dtoa_r+0x464>
 800e2e8:	4b30      	ldr	r3, [pc, #192]	; (800e3ac <_dtoa_r+0x624>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	4650      	mov	r0, sl
 800e2ee:	4659      	mov	r1, fp
 800e2f0:	f7f2 f98a 	bl	8000608 <__aeabi_dmul>
 800e2f4:	4b2d      	ldr	r3, [pc, #180]	; (800e3ac <_dtoa_r+0x624>)
 800e2f6:	4682      	mov	sl, r0
 800e2f8:	468b      	mov	fp, r1
 800e2fa:	4640      	mov	r0, r8
 800e2fc:	4649      	mov	r1, r9
 800e2fe:	2200      	movs	r2, #0
 800e300:	f7f2 f982 	bl	8000608 <__aeabi_dmul>
 800e304:	4680      	mov	r8, r0
 800e306:	4689      	mov	r9, r1
 800e308:	e7c6      	b.n	800e298 <_dtoa_r+0x510>
 800e30a:	4650      	mov	r0, sl
 800e30c:	4659      	mov	r1, fp
 800e30e:	f7f2 f97b 	bl	8000608 <__aeabi_dmul>
 800e312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e314:	9d01      	ldr	r5, [sp, #4]
 800e316:	930f      	str	r3, [sp, #60]	; 0x3c
 800e318:	4682      	mov	sl, r0
 800e31a:	468b      	mov	fp, r1
 800e31c:	4649      	mov	r1, r9
 800e31e:	4640      	mov	r0, r8
 800e320:	f7f2 fc22 	bl	8000b68 <__aeabi_d2iz>
 800e324:	4606      	mov	r6, r0
 800e326:	f7f2 f905 	bl	8000534 <__aeabi_i2d>
 800e32a:	3630      	adds	r6, #48	; 0x30
 800e32c:	4602      	mov	r2, r0
 800e32e:	460b      	mov	r3, r1
 800e330:	4640      	mov	r0, r8
 800e332:	4649      	mov	r1, r9
 800e334:	f7f1 ffb0 	bl	8000298 <__aeabi_dsub>
 800e338:	f805 6b01 	strb.w	r6, [r5], #1
 800e33c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e33e:	429d      	cmp	r5, r3
 800e340:	4680      	mov	r8, r0
 800e342:	4689      	mov	r9, r1
 800e344:	f04f 0200 	mov.w	r2, #0
 800e348:	d124      	bne.n	800e394 <_dtoa_r+0x60c>
 800e34a:	4b1b      	ldr	r3, [pc, #108]	; (800e3b8 <_dtoa_r+0x630>)
 800e34c:	4650      	mov	r0, sl
 800e34e:	4659      	mov	r1, fp
 800e350:	f7f1 ffa4 	bl	800029c <__adddf3>
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4640      	mov	r0, r8
 800e35a:	4649      	mov	r1, r9
 800e35c:	f7f2 fbe4 	bl	8000b28 <__aeabi_dcmpgt>
 800e360:	2800      	cmp	r0, #0
 800e362:	d173      	bne.n	800e44c <_dtoa_r+0x6c4>
 800e364:	4652      	mov	r2, sl
 800e366:	465b      	mov	r3, fp
 800e368:	4913      	ldr	r1, [pc, #76]	; (800e3b8 <_dtoa_r+0x630>)
 800e36a:	2000      	movs	r0, #0
 800e36c:	f7f1 ff94 	bl	8000298 <__aeabi_dsub>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	4640      	mov	r0, r8
 800e376:	4649      	mov	r1, r9
 800e378:	f7f2 fbb8 	bl	8000aec <__aeabi_dcmplt>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	f43f af35 	beq.w	800e1ec <_dtoa_r+0x464>
 800e382:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e384:	1e6b      	subs	r3, r5, #1
 800e386:	930f      	str	r3, [sp, #60]	; 0x3c
 800e388:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e38c:	2b30      	cmp	r3, #48	; 0x30
 800e38e:	d0f8      	beq.n	800e382 <_dtoa_r+0x5fa>
 800e390:	9700      	str	r7, [sp, #0]
 800e392:	e049      	b.n	800e428 <_dtoa_r+0x6a0>
 800e394:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <_dtoa_r+0x624>)
 800e396:	f7f2 f937 	bl	8000608 <__aeabi_dmul>
 800e39a:	4680      	mov	r8, r0
 800e39c:	4689      	mov	r9, r1
 800e39e:	e7bd      	b.n	800e31c <_dtoa_r+0x594>
 800e3a0:	08012008 	.word	0x08012008
 800e3a4:	08011fe0 	.word	0x08011fe0
 800e3a8:	3ff00000 	.word	0x3ff00000
 800e3ac:	40240000 	.word	0x40240000
 800e3b0:	401c0000 	.word	0x401c0000
 800e3b4:	40140000 	.word	0x40140000
 800e3b8:	3fe00000 	.word	0x3fe00000
 800e3bc:	9d01      	ldr	r5, [sp, #4]
 800e3be:	4656      	mov	r6, sl
 800e3c0:	465f      	mov	r7, fp
 800e3c2:	4642      	mov	r2, r8
 800e3c4:	464b      	mov	r3, r9
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	f7f2 fa47 	bl	800085c <__aeabi_ddiv>
 800e3ce:	f7f2 fbcb 	bl	8000b68 <__aeabi_d2iz>
 800e3d2:	4682      	mov	sl, r0
 800e3d4:	f7f2 f8ae 	bl	8000534 <__aeabi_i2d>
 800e3d8:	4642      	mov	r2, r8
 800e3da:	464b      	mov	r3, r9
 800e3dc:	f7f2 f914 	bl	8000608 <__aeabi_dmul>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	4639      	mov	r1, r7
 800e3e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e3ec:	f7f1 ff54 	bl	8000298 <__aeabi_dsub>
 800e3f0:	f805 6b01 	strb.w	r6, [r5], #1
 800e3f4:	9e01      	ldr	r6, [sp, #4]
 800e3f6:	9f03      	ldr	r7, [sp, #12]
 800e3f8:	1bae      	subs	r6, r5, r6
 800e3fa:	42b7      	cmp	r7, r6
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	d135      	bne.n	800e46e <_dtoa_r+0x6e6>
 800e402:	f7f1 ff4b 	bl	800029c <__adddf3>
 800e406:	4642      	mov	r2, r8
 800e408:	464b      	mov	r3, r9
 800e40a:	4606      	mov	r6, r0
 800e40c:	460f      	mov	r7, r1
 800e40e:	f7f2 fb8b 	bl	8000b28 <__aeabi_dcmpgt>
 800e412:	b9d0      	cbnz	r0, 800e44a <_dtoa_r+0x6c2>
 800e414:	4642      	mov	r2, r8
 800e416:	464b      	mov	r3, r9
 800e418:	4630      	mov	r0, r6
 800e41a:	4639      	mov	r1, r7
 800e41c:	f7f2 fb5c 	bl	8000ad8 <__aeabi_dcmpeq>
 800e420:	b110      	cbz	r0, 800e428 <_dtoa_r+0x6a0>
 800e422:	f01a 0f01 	tst.w	sl, #1
 800e426:	d110      	bne.n	800e44a <_dtoa_r+0x6c2>
 800e428:	4620      	mov	r0, r4
 800e42a:	ee18 1a10 	vmov	r1, s16
 800e42e:	f000 fe67 	bl	800f100 <_Bfree>
 800e432:	2300      	movs	r3, #0
 800e434:	9800      	ldr	r0, [sp, #0]
 800e436:	702b      	strb	r3, [r5, #0]
 800e438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e43a:	3001      	adds	r0, #1
 800e43c:	6018      	str	r0, [r3, #0]
 800e43e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e440:	2b00      	cmp	r3, #0
 800e442:	f43f acf1 	beq.w	800de28 <_dtoa_r+0xa0>
 800e446:	601d      	str	r5, [r3, #0]
 800e448:	e4ee      	b.n	800de28 <_dtoa_r+0xa0>
 800e44a:	9f00      	ldr	r7, [sp, #0]
 800e44c:	462b      	mov	r3, r5
 800e44e:	461d      	mov	r5, r3
 800e450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e454:	2a39      	cmp	r2, #57	; 0x39
 800e456:	d106      	bne.n	800e466 <_dtoa_r+0x6de>
 800e458:	9a01      	ldr	r2, [sp, #4]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d1f7      	bne.n	800e44e <_dtoa_r+0x6c6>
 800e45e:	9901      	ldr	r1, [sp, #4]
 800e460:	2230      	movs	r2, #48	; 0x30
 800e462:	3701      	adds	r7, #1
 800e464:	700a      	strb	r2, [r1, #0]
 800e466:	781a      	ldrb	r2, [r3, #0]
 800e468:	3201      	adds	r2, #1
 800e46a:	701a      	strb	r2, [r3, #0]
 800e46c:	e790      	b.n	800e390 <_dtoa_r+0x608>
 800e46e:	4ba6      	ldr	r3, [pc, #664]	; (800e708 <_dtoa_r+0x980>)
 800e470:	2200      	movs	r2, #0
 800e472:	f7f2 f8c9 	bl	8000608 <__aeabi_dmul>
 800e476:	2200      	movs	r2, #0
 800e478:	2300      	movs	r3, #0
 800e47a:	4606      	mov	r6, r0
 800e47c:	460f      	mov	r7, r1
 800e47e:	f7f2 fb2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800e482:	2800      	cmp	r0, #0
 800e484:	d09d      	beq.n	800e3c2 <_dtoa_r+0x63a>
 800e486:	e7cf      	b.n	800e428 <_dtoa_r+0x6a0>
 800e488:	9a08      	ldr	r2, [sp, #32]
 800e48a:	2a00      	cmp	r2, #0
 800e48c:	f000 80d7 	beq.w	800e63e <_dtoa_r+0x8b6>
 800e490:	9a06      	ldr	r2, [sp, #24]
 800e492:	2a01      	cmp	r2, #1
 800e494:	f300 80ba 	bgt.w	800e60c <_dtoa_r+0x884>
 800e498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e49a:	2a00      	cmp	r2, #0
 800e49c:	f000 80b2 	beq.w	800e604 <_dtoa_r+0x87c>
 800e4a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e4a4:	9e07      	ldr	r6, [sp, #28]
 800e4a6:	9d04      	ldr	r5, [sp, #16]
 800e4a8:	9a04      	ldr	r2, [sp, #16]
 800e4aa:	441a      	add	r2, r3
 800e4ac:	9204      	str	r2, [sp, #16]
 800e4ae:	9a05      	ldr	r2, [sp, #20]
 800e4b0:	2101      	movs	r1, #1
 800e4b2:	441a      	add	r2, r3
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	9205      	str	r2, [sp, #20]
 800e4b8:	f000 ff24 	bl	800f304 <__i2b>
 800e4bc:	4607      	mov	r7, r0
 800e4be:	2d00      	cmp	r5, #0
 800e4c0:	dd0c      	ble.n	800e4dc <_dtoa_r+0x754>
 800e4c2:	9b05      	ldr	r3, [sp, #20]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	dd09      	ble.n	800e4dc <_dtoa_r+0x754>
 800e4c8:	42ab      	cmp	r3, r5
 800e4ca:	9a04      	ldr	r2, [sp, #16]
 800e4cc:	bfa8      	it	ge
 800e4ce:	462b      	movge	r3, r5
 800e4d0:	1ad2      	subs	r2, r2, r3
 800e4d2:	9204      	str	r2, [sp, #16]
 800e4d4:	9a05      	ldr	r2, [sp, #20]
 800e4d6:	1aed      	subs	r5, r5, r3
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	9305      	str	r3, [sp, #20]
 800e4dc:	9b07      	ldr	r3, [sp, #28]
 800e4de:	b31b      	cbz	r3, 800e528 <_dtoa_r+0x7a0>
 800e4e0:	9b08      	ldr	r3, [sp, #32]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f000 80af 	beq.w	800e646 <_dtoa_r+0x8be>
 800e4e8:	2e00      	cmp	r6, #0
 800e4ea:	dd13      	ble.n	800e514 <_dtoa_r+0x78c>
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	4632      	mov	r2, r6
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	f000 ffc7 	bl	800f484 <__pow5mult>
 800e4f6:	ee18 2a10 	vmov	r2, s16
 800e4fa:	4601      	mov	r1, r0
 800e4fc:	4607      	mov	r7, r0
 800e4fe:	4620      	mov	r0, r4
 800e500:	f000 ff16 	bl	800f330 <__multiply>
 800e504:	ee18 1a10 	vmov	r1, s16
 800e508:	4680      	mov	r8, r0
 800e50a:	4620      	mov	r0, r4
 800e50c:	f000 fdf8 	bl	800f100 <_Bfree>
 800e510:	ee08 8a10 	vmov	s16, r8
 800e514:	9b07      	ldr	r3, [sp, #28]
 800e516:	1b9a      	subs	r2, r3, r6
 800e518:	d006      	beq.n	800e528 <_dtoa_r+0x7a0>
 800e51a:	ee18 1a10 	vmov	r1, s16
 800e51e:	4620      	mov	r0, r4
 800e520:	f000 ffb0 	bl	800f484 <__pow5mult>
 800e524:	ee08 0a10 	vmov	s16, r0
 800e528:	2101      	movs	r1, #1
 800e52a:	4620      	mov	r0, r4
 800e52c:	f000 feea 	bl	800f304 <__i2b>
 800e530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e532:	2b00      	cmp	r3, #0
 800e534:	4606      	mov	r6, r0
 800e536:	f340 8088 	ble.w	800e64a <_dtoa_r+0x8c2>
 800e53a:	461a      	mov	r2, r3
 800e53c:	4601      	mov	r1, r0
 800e53e:	4620      	mov	r0, r4
 800e540:	f000 ffa0 	bl	800f484 <__pow5mult>
 800e544:	9b06      	ldr	r3, [sp, #24]
 800e546:	2b01      	cmp	r3, #1
 800e548:	4606      	mov	r6, r0
 800e54a:	f340 8081 	ble.w	800e650 <_dtoa_r+0x8c8>
 800e54e:	f04f 0800 	mov.w	r8, #0
 800e552:	6933      	ldr	r3, [r6, #16]
 800e554:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e558:	6918      	ldr	r0, [r3, #16]
 800e55a:	f000 fe83 	bl	800f264 <__hi0bits>
 800e55e:	f1c0 0020 	rsb	r0, r0, #32
 800e562:	9b05      	ldr	r3, [sp, #20]
 800e564:	4418      	add	r0, r3
 800e566:	f010 001f 	ands.w	r0, r0, #31
 800e56a:	f000 8092 	beq.w	800e692 <_dtoa_r+0x90a>
 800e56e:	f1c0 0320 	rsb	r3, r0, #32
 800e572:	2b04      	cmp	r3, #4
 800e574:	f340 808a 	ble.w	800e68c <_dtoa_r+0x904>
 800e578:	f1c0 001c 	rsb	r0, r0, #28
 800e57c:	9b04      	ldr	r3, [sp, #16]
 800e57e:	4403      	add	r3, r0
 800e580:	9304      	str	r3, [sp, #16]
 800e582:	9b05      	ldr	r3, [sp, #20]
 800e584:	4403      	add	r3, r0
 800e586:	4405      	add	r5, r0
 800e588:	9305      	str	r3, [sp, #20]
 800e58a:	9b04      	ldr	r3, [sp, #16]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	dd07      	ble.n	800e5a0 <_dtoa_r+0x818>
 800e590:	ee18 1a10 	vmov	r1, s16
 800e594:	461a      	mov	r2, r3
 800e596:	4620      	mov	r0, r4
 800e598:	f000 ffce 	bl	800f538 <__lshift>
 800e59c:	ee08 0a10 	vmov	s16, r0
 800e5a0:	9b05      	ldr	r3, [sp, #20]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	dd05      	ble.n	800e5b2 <_dtoa_r+0x82a>
 800e5a6:	4631      	mov	r1, r6
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 ffc4 	bl	800f538 <__lshift>
 800e5b0:	4606      	mov	r6, r0
 800e5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d06e      	beq.n	800e696 <_dtoa_r+0x90e>
 800e5b8:	ee18 0a10 	vmov	r0, s16
 800e5bc:	4631      	mov	r1, r6
 800e5be:	f001 f82b 	bl	800f618 <__mcmp>
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	da67      	bge.n	800e696 <_dtoa_r+0x90e>
 800e5c6:	9b00      	ldr	r3, [sp, #0]
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	ee18 1a10 	vmov	r1, s16
 800e5ce:	9300      	str	r3, [sp, #0]
 800e5d0:	220a      	movs	r2, #10
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	f000 fdb5 	bl	800f144 <__multadd>
 800e5da:	9b08      	ldr	r3, [sp, #32]
 800e5dc:	ee08 0a10 	vmov	s16, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f000 81b1 	beq.w	800e948 <_dtoa_r+0xbc0>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	4639      	mov	r1, r7
 800e5ea:	220a      	movs	r2, #10
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	f000 fda9 	bl	800f144 <__multadd>
 800e5f2:	9b02      	ldr	r3, [sp, #8]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	4607      	mov	r7, r0
 800e5f8:	f300 808e 	bgt.w	800e718 <_dtoa_r+0x990>
 800e5fc:	9b06      	ldr	r3, [sp, #24]
 800e5fe:	2b02      	cmp	r3, #2
 800e600:	dc51      	bgt.n	800e6a6 <_dtoa_r+0x91e>
 800e602:	e089      	b.n	800e718 <_dtoa_r+0x990>
 800e604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e606:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e60a:	e74b      	b.n	800e4a4 <_dtoa_r+0x71c>
 800e60c:	9b03      	ldr	r3, [sp, #12]
 800e60e:	1e5e      	subs	r6, r3, #1
 800e610:	9b07      	ldr	r3, [sp, #28]
 800e612:	42b3      	cmp	r3, r6
 800e614:	bfbf      	itttt	lt
 800e616:	9b07      	ldrlt	r3, [sp, #28]
 800e618:	9607      	strlt	r6, [sp, #28]
 800e61a:	1af2      	sublt	r2, r6, r3
 800e61c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e61e:	bfb6      	itet	lt
 800e620:	189b      	addlt	r3, r3, r2
 800e622:	1b9e      	subge	r6, r3, r6
 800e624:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e626:	9b03      	ldr	r3, [sp, #12]
 800e628:	bfb8      	it	lt
 800e62a:	2600      	movlt	r6, #0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	bfb7      	itett	lt
 800e630:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e634:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e638:	1a9d      	sublt	r5, r3, r2
 800e63a:	2300      	movlt	r3, #0
 800e63c:	e734      	b.n	800e4a8 <_dtoa_r+0x720>
 800e63e:	9e07      	ldr	r6, [sp, #28]
 800e640:	9d04      	ldr	r5, [sp, #16]
 800e642:	9f08      	ldr	r7, [sp, #32]
 800e644:	e73b      	b.n	800e4be <_dtoa_r+0x736>
 800e646:	9a07      	ldr	r2, [sp, #28]
 800e648:	e767      	b.n	800e51a <_dtoa_r+0x792>
 800e64a:	9b06      	ldr	r3, [sp, #24]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	dc18      	bgt.n	800e682 <_dtoa_r+0x8fa>
 800e650:	f1ba 0f00 	cmp.w	sl, #0
 800e654:	d115      	bne.n	800e682 <_dtoa_r+0x8fa>
 800e656:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e65a:	b993      	cbnz	r3, 800e682 <_dtoa_r+0x8fa>
 800e65c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e660:	0d1b      	lsrs	r3, r3, #20
 800e662:	051b      	lsls	r3, r3, #20
 800e664:	b183      	cbz	r3, 800e688 <_dtoa_r+0x900>
 800e666:	9b04      	ldr	r3, [sp, #16]
 800e668:	3301      	adds	r3, #1
 800e66a:	9304      	str	r3, [sp, #16]
 800e66c:	9b05      	ldr	r3, [sp, #20]
 800e66e:	3301      	adds	r3, #1
 800e670:	9305      	str	r3, [sp, #20]
 800e672:	f04f 0801 	mov.w	r8, #1
 800e676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f47f af6a 	bne.w	800e552 <_dtoa_r+0x7ca>
 800e67e:	2001      	movs	r0, #1
 800e680:	e76f      	b.n	800e562 <_dtoa_r+0x7da>
 800e682:	f04f 0800 	mov.w	r8, #0
 800e686:	e7f6      	b.n	800e676 <_dtoa_r+0x8ee>
 800e688:	4698      	mov	r8, r3
 800e68a:	e7f4      	b.n	800e676 <_dtoa_r+0x8ee>
 800e68c:	f43f af7d 	beq.w	800e58a <_dtoa_r+0x802>
 800e690:	4618      	mov	r0, r3
 800e692:	301c      	adds	r0, #28
 800e694:	e772      	b.n	800e57c <_dtoa_r+0x7f4>
 800e696:	9b03      	ldr	r3, [sp, #12]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	dc37      	bgt.n	800e70c <_dtoa_r+0x984>
 800e69c:	9b06      	ldr	r3, [sp, #24]
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	dd34      	ble.n	800e70c <_dtoa_r+0x984>
 800e6a2:	9b03      	ldr	r3, [sp, #12]
 800e6a4:	9302      	str	r3, [sp, #8]
 800e6a6:	9b02      	ldr	r3, [sp, #8]
 800e6a8:	b96b      	cbnz	r3, 800e6c6 <_dtoa_r+0x93e>
 800e6aa:	4631      	mov	r1, r6
 800e6ac:	2205      	movs	r2, #5
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	f000 fd48 	bl	800f144 <__multadd>
 800e6b4:	4601      	mov	r1, r0
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	ee18 0a10 	vmov	r0, s16
 800e6bc:	f000 ffac 	bl	800f618 <__mcmp>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	f73f adbb 	bgt.w	800e23c <_dtoa_r+0x4b4>
 800e6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6c8:	9d01      	ldr	r5, [sp, #4]
 800e6ca:	43db      	mvns	r3, r3
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	f04f 0800 	mov.w	r8, #0
 800e6d2:	4631      	mov	r1, r6
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f000 fd13 	bl	800f100 <_Bfree>
 800e6da:	2f00      	cmp	r7, #0
 800e6dc:	f43f aea4 	beq.w	800e428 <_dtoa_r+0x6a0>
 800e6e0:	f1b8 0f00 	cmp.w	r8, #0
 800e6e4:	d005      	beq.n	800e6f2 <_dtoa_r+0x96a>
 800e6e6:	45b8      	cmp	r8, r7
 800e6e8:	d003      	beq.n	800e6f2 <_dtoa_r+0x96a>
 800e6ea:	4641      	mov	r1, r8
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f000 fd07 	bl	800f100 <_Bfree>
 800e6f2:	4639      	mov	r1, r7
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	f000 fd03 	bl	800f100 <_Bfree>
 800e6fa:	e695      	b.n	800e428 <_dtoa_r+0x6a0>
 800e6fc:	2600      	movs	r6, #0
 800e6fe:	4637      	mov	r7, r6
 800e700:	e7e1      	b.n	800e6c6 <_dtoa_r+0x93e>
 800e702:	9700      	str	r7, [sp, #0]
 800e704:	4637      	mov	r7, r6
 800e706:	e599      	b.n	800e23c <_dtoa_r+0x4b4>
 800e708:	40240000 	.word	0x40240000
 800e70c:	9b08      	ldr	r3, [sp, #32]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f000 80ca 	beq.w	800e8a8 <_dtoa_r+0xb20>
 800e714:	9b03      	ldr	r3, [sp, #12]
 800e716:	9302      	str	r3, [sp, #8]
 800e718:	2d00      	cmp	r5, #0
 800e71a:	dd05      	ble.n	800e728 <_dtoa_r+0x9a0>
 800e71c:	4639      	mov	r1, r7
 800e71e:	462a      	mov	r2, r5
 800e720:	4620      	mov	r0, r4
 800e722:	f000 ff09 	bl	800f538 <__lshift>
 800e726:	4607      	mov	r7, r0
 800e728:	f1b8 0f00 	cmp.w	r8, #0
 800e72c:	d05b      	beq.n	800e7e6 <_dtoa_r+0xa5e>
 800e72e:	6879      	ldr	r1, [r7, #4]
 800e730:	4620      	mov	r0, r4
 800e732:	f000 fca5 	bl	800f080 <_Balloc>
 800e736:	4605      	mov	r5, r0
 800e738:	b928      	cbnz	r0, 800e746 <_dtoa_r+0x9be>
 800e73a:	4b87      	ldr	r3, [pc, #540]	; (800e958 <_dtoa_r+0xbd0>)
 800e73c:	4602      	mov	r2, r0
 800e73e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e742:	f7ff bb3b 	b.w	800ddbc <_dtoa_r+0x34>
 800e746:	693a      	ldr	r2, [r7, #16]
 800e748:	3202      	adds	r2, #2
 800e74a:	0092      	lsls	r2, r2, #2
 800e74c:	f107 010c 	add.w	r1, r7, #12
 800e750:	300c      	adds	r0, #12
 800e752:	f7fd fce5 	bl	800c120 <memcpy>
 800e756:	2201      	movs	r2, #1
 800e758:	4629      	mov	r1, r5
 800e75a:	4620      	mov	r0, r4
 800e75c:	f000 feec 	bl	800f538 <__lshift>
 800e760:	9b01      	ldr	r3, [sp, #4]
 800e762:	f103 0901 	add.w	r9, r3, #1
 800e766:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e76a:	4413      	add	r3, r2
 800e76c:	9305      	str	r3, [sp, #20]
 800e76e:	f00a 0301 	and.w	r3, sl, #1
 800e772:	46b8      	mov	r8, r7
 800e774:	9304      	str	r3, [sp, #16]
 800e776:	4607      	mov	r7, r0
 800e778:	4631      	mov	r1, r6
 800e77a:	ee18 0a10 	vmov	r0, s16
 800e77e:	f7ff fa75 	bl	800dc6c <quorem>
 800e782:	4641      	mov	r1, r8
 800e784:	9002      	str	r0, [sp, #8]
 800e786:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e78a:	ee18 0a10 	vmov	r0, s16
 800e78e:	f000 ff43 	bl	800f618 <__mcmp>
 800e792:	463a      	mov	r2, r7
 800e794:	9003      	str	r0, [sp, #12]
 800e796:	4631      	mov	r1, r6
 800e798:	4620      	mov	r0, r4
 800e79a:	f000 ff59 	bl	800f650 <__mdiff>
 800e79e:	68c2      	ldr	r2, [r0, #12]
 800e7a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	bb02      	cbnz	r2, 800e7ea <_dtoa_r+0xa62>
 800e7a8:	4601      	mov	r1, r0
 800e7aa:	ee18 0a10 	vmov	r0, s16
 800e7ae:	f000 ff33 	bl	800f618 <__mcmp>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	9207      	str	r2, [sp, #28]
 800e7ba:	f000 fca1 	bl	800f100 <_Bfree>
 800e7be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e7c2:	ea43 0102 	orr.w	r1, r3, r2
 800e7c6:	9b04      	ldr	r3, [sp, #16]
 800e7c8:	430b      	orrs	r3, r1
 800e7ca:	464d      	mov	r5, r9
 800e7cc:	d10f      	bne.n	800e7ee <_dtoa_r+0xa66>
 800e7ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e7d2:	d02a      	beq.n	800e82a <_dtoa_r+0xaa2>
 800e7d4:	9b03      	ldr	r3, [sp, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	dd02      	ble.n	800e7e0 <_dtoa_r+0xa58>
 800e7da:	9b02      	ldr	r3, [sp, #8]
 800e7dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e7e0:	f88b a000 	strb.w	sl, [fp]
 800e7e4:	e775      	b.n	800e6d2 <_dtoa_r+0x94a>
 800e7e6:	4638      	mov	r0, r7
 800e7e8:	e7ba      	b.n	800e760 <_dtoa_r+0x9d8>
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	e7e2      	b.n	800e7b4 <_dtoa_r+0xa2c>
 800e7ee:	9b03      	ldr	r3, [sp, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	db04      	blt.n	800e7fe <_dtoa_r+0xa76>
 800e7f4:	9906      	ldr	r1, [sp, #24]
 800e7f6:	430b      	orrs	r3, r1
 800e7f8:	9904      	ldr	r1, [sp, #16]
 800e7fa:	430b      	orrs	r3, r1
 800e7fc:	d122      	bne.n	800e844 <_dtoa_r+0xabc>
 800e7fe:	2a00      	cmp	r2, #0
 800e800:	ddee      	ble.n	800e7e0 <_dtoa_r+0xa58>
 800e802:	ee18 1a10 	vmov	r1, s16
 800e806:	2201      	movs	r2, #1
 800e808:	4620      	mov	r0, r4
 800e80a:	f000 fe95 	bl	800f538 <__lshift>
 800e80e:	4631      	mov	r1, r6
 800e810:	ee08 0a10 	vmov	s16, r0
 800e814:	f000 ff00 	bl	800f618 <__mcmp>
 800e818:	2800      	cmp	r0, #0
 800e81a:	dc03      	bgt.n	800e824 <_dtoa_r+0xa9c>
 800e81c:	d1e0      	bne.n	800e7e0 <_dtoa_r+0xa58>
 800e81e:	f01a 0f01 	tst.w	sl, #1
 800e822:	d0dd      	beq.n	800e7e0 <_dtoa_r+0xa58>
 800e824:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e828:	d1d7      	bne.n	800e7da <_dtoa_r+0xa52>
 800e82a:	2339      	movs	r3, #57	; 0x39
 800e82c:	f88b 3000 	strb.w	r3, [fp]
 800e830:	462b      	mov	r3, r5
 800e832:	461d      	mov	r5, r3
 800e834:	3b01      	subs	r3, #1
 800e836:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e83a:	2a39      	cmp	r2, #57	; 0x39
 800e83c:	d071      	beq.n	800e922 <_dtoa_r+0xb9a>
 800e83e:	3201      	adds	r2, #1
 800e840:	701a      	strb	r2, [r3, #0]
 800e842:	e746      	b.n	800e6d2 <_dtoa_r+0x94a>
 800e844:	2a00      	cmp	r2, #0
 800e846:	dd07      	ble.n	800e858 <_dtoa_r+0xad0>
 800e848:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e84c:	d0ed      	beq.n	800e82a <_dtoa_r+0xaa2>
 800e84e:	f10a 0301 	add.w	r3, sl, #1
 800e852:	f88b 3000 	strb.w	r3, [fp]
 800e856:	e73c      	b.n	800e6d2 <_dtoa_r+0x94a>
 800e858:	9b05      	ldr	r3, [sp, #20]
 800e85a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e85e:	4599      	cmp	r9, r3
 800e860:	d047      	beq.n	800e8f2 <_dtoa_r+0xb6a>
 800e862:	ee18 1a10 	vmov	r1, s16
 800e866:	2300      	movs	r3, #0
 800e868:	220a      	movs	r2, #10
 800e86a:	4620      	mov	r0, r4
 800e86c:	f000 fc6a 	bl	800f144 <__multadd>
 800e870:	45b8      	cmp	r8, r7
 800e872:	ee08 0a10 	vmov	s16, r0
 800e876:	f04f 0300 	mov.w	r3, #0
 800e87a:	f04f 020a 	mov.w	r2, #10
 800e87e:	4641      	mov	r1, r8
 800e880:	4620      	mov	r0, r4
 800e882:	d106      	bne.n	800e892 <_dtoa_r+0xb0a>
 800e884:	f000 fc5e 	bl	800f144 <__multadd>
 800e888:	4680      	mov	r8, r0
 800e88a:	4607      	mov	r7, r0
 800e88c:	f109 0901 	add.w	r9, r9, #1
 800e890:	e772      	b.n	800e778 <_dtoa_r+0x9f0>
 800e892:	f000 fc57 	bl	800f144 <__multadd>
 800e896:	4639      	mov	r1, r7
 800e898:	4680      	mov	r8, r0
 800e89a:	2300      	movs	r3, #0
 800e89c:	220a      	movs	r2, #10
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f000 fc50 	bl	800f144 <__multadd>
 800e8a4:	4607      	mov	r7, r0
 800e8a6:	e7f1      	b.n	800e88c <_dtoa_r+0xb04>
 800e8a8:	9b03      	ldr	r3, [sp, #12]
 800e8aa:	9302      	str	r3, [sp, #8]
 800e8ac:	9d01      	ldr	r5, [sp, #4]
 800e8ae:	ee18 0a10 	vmov	r0, s16
 800e8b2:	4631      	mov	r1, r6
 800e8b4:	f7ff f9da 	bl	800dc6c <quorem>
 800e8b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e8bc:	9b01      	ldr	r3, [sp, #4]
 800e8be:	f805 ab01 	strb.w	sl, [r5], #1
 800e8c2:	1aea      	subs	r2, r5, r3
 800e8c4:	9b02      	ldr	r3, [sp, #8]
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	dd09      	ble.n	800e8de <_dtoa_r+0xb56>
 800e8ca:	ee18 1a10 	vmov	r1, s16
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	220a      	movs	r2, #10
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f000 fc36 	bl	800f144 <__multadd>
 800e8d8:	ee08 0a10 	vmov	s16, r0
 800e8dc:	e7e7      	b.n	800e8ae <_dtoa_r+0xb26>
 800e8de:	9b02      	ldr	r3, [sp, #8]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	bfc8      	it	gt
 800e8e4:	461d      	movgt	r5, r3
 800e8e6:	9b01      	ldr	r3, [sp, #4]
 800e8e8:	bfd8      	it	le
 800e8ea:	2501      	movle	r5, #1
 800e8ec:	441d      	add	r5, r3
 800e8ee:	f04f 0800 	mov.w	r8, #0
 800e8f2:	ee18 1a10 	vmov	r1, s16
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f000 fe1d 	bl	800f538 <__lshift>
 800e8fe:	4631      	mov	r1, r6
 800e900:	ee08 0a10 	vmov	s16, r0
 800e904:	f000 fe88 	bl	800f618 <__mcmp>
 800e908:	2800      	cmp	r0, #0
 800e90a:	dc91      	bgt.n	800e830 <_dtoa_r+0xaa8>
 800e90c:	d102      	bne.n	800e914 <_dtoa_r+0xb8c>
 800e90e:	f01a 0f01 	tst.w	sl, #1
 800e912:	d18d      	bne.n	800e830 <_dtoa_r+0xaa8>
 800e914:	462b      	mov	r3, r5
 800e916:	461d      	mov	r5, r3
 800e918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e91c:	2a30      	cmp	r2, #48	; 0x30
 800e91e:	d0fa      	beq.n	800e916 <_dtoa_r+0xb8e>
 800e920:	e6d7      	b.n	800e6d2 <_dtoa_r+0x94a>
 800e922:	9a01      	ldr	r2, [sp, #4]
 800e924:	429a      	cmp	r2, r3
 800e926:	d184      	bne.n	800e832 <_dtoa_r+0xaaa>
 800e928:	9b00      	ldr	r3, [sp, #0]
 800e92a:	3301      	adds	r3, #1
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	2331      	movs	r3, #49	; 0x31
 800e930:	7013      	strb	r3, [r2, #0]
 800e932:	e6ce      	b.n	800e6d2 <_dtoa_r+0x94a>
 800e934:	4b09      	ldr	r3, [pc, #36]	; (800e95c <_dtoa_r+0xbd4>)
 800e936:	f7ff ba95 	b.w	800de64 <_dtoa_r+0xdc>
 800e93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f47f aa6e 	bne.w	800de1e <_dtoa_r+0x96>
 800e942:	4b07      	ldr	r3, [pc, #28]	; (800e960 <_dtoa_r+0xbd8>)
 800e944:	f7ff ba8e 	b.w	800de64 <_dtoa_r+0xdc>
 800e948:	9b02      	ldr	r3, [sp, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	dcae      	bgt.n	800e8ac <_dtoa_r+0xb24>
 800e94e:	9b06      	ldr	r3, [sp, #24]
 800e950:	2b02      	cmp	r3, #2
 800e952:	f73f aea8 	bgt.w	800e6a6 <_dtoa_r+0x91e>
 800e956:	e7a9      	b.n	800e8ac <_dtoa_r+0xb24>
 800e958:	08011ef8 	.word	0x08011ef8
 800e95c:	08011cf8 	.word	0x08011cf8
 800e960:	08011e79 	.word	0x08011e79

0800e964 <rshift>:
 800e964:	6903      	ldr	r3, [r0, #16]
 800e966:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e96a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e96e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e972:	f100 0414 	add.w	r4, r0, #20
 800e976:	dd45      	ble.n	800ea04 <rshift+0xa0>
 800e978:	f011 011f 	ands.w	r1, r1, #31
 800e97c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e980:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e984:	d10c      	bne.n	800e9a0 <rshift+0x3c>
 800e986:	f100 0710 	add.w	r7, r0, #16
 800e98a:	4629      	mov	r1, r5
 800e98c:	42b1      	cmp	r1, r6
 800e98e:	d334      	bcc.n	800e9fa <rshift+0x96>
 800e990:	1a9b      	subs	r3, r3, r2
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	1eea      	subs	r2, r5, #3
 800e996:	4296      	cmp	r6, r2
 800e998:	bf38      	it	cc
 800e99a:	2300      	movcc	r3, #0
 800e99c:	4423      	add	r3, r4
 800e99e:	e015      	b.n	800e9cc <rshift+0x68>
 800e9a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e9a4:	f1c1 0820 	rsb	r8, r1, #32
 800e9a8:	40cf      	lsrs	r7, r1
 800e9aa:	f105 0e04 	add.w	lr, r5, #4
 800e9ae:	46a1      	mov	r9, r4
 800e9b0:	4576      	cmp	r6, lr
 800e9b2:	46f4      	mov	ip, lr
 800e9b4:	d815      	bhi.n	800e9e2 <rshift+0x7e>
 800e9b6:	1a9a      	subs	r2, r3, r2
 800e9b8:	0092      	lsls	r2, r2, #2
 800e9ba:	3a04      	subs	r2, #4
 800e9bc:	3501      	adds	r5, #1
 800e9be:	42ae      	cmp	r6, r5
 800e9c0:	bf38      	it	cc
 800e9c2:	2200      	movcc	r2, #0
 800e9c4:	18a3      	adds	r3, r4, r2
 800e9c6:	50a7      	str	r7, [r4, r2]
 800e9c8:	b107      	cbz	r7, 800e9cc <rshift+0x68>
 800e9ca:	3304      	adds	r3, #4
 800e9cc:	1b1a      	subs	r2, r3, r4
 800e9ce:	42a3      	cmp	r3, r4
 800e9d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e9d4:	bf08      	it	eq
 800e9d6:	2300      	moveq	r3, #0
 800e9d8:	6102      	str	r2, [r0, #16]
 800e9da:	bf08      	it	eq
 800e9dc:	6143      	streq	r3, [r0, #20]
 800e9de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9e2:	f8dc c000 	ldr.w	ip, [ip]
 800e9e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800e9ea:	ea4c 0707 	orr.w	r7, ip, r7
 800e9ee:	f849 7b04 	str.w	r7, [r9], #4
 800e9f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e9f6:	40cf      	lsrs	r7, r1
 800e9f8:	e7da      	b.n	800e9b0 <rshift+0x4c>
 800e9fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800e9fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea02:	e7c3      	b.n	800e98c <rshift+0x28>
 800ea04:	4623      	mov	r3, r4
 800ea06:	e7e1      	b.n	800e9cc <rshift+0x68>

0800ea08 <__hexdig_fun>:
 800ea08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ea0c:	2b09      	cmp	r3, #9
 800ea0e:	d802      	bhi.n	800ea16 <__hexdig_fun+0xe>
 800ea10:	3820      	subs	r0, #32
 800ea12:	b2c0      	uxtb	r0, r0
 800ea14:	4770      	bx	lr
 800ea16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ea1a:	2b05      	cmp	r3, #5
 800ea1c:	d801      	bhi.n	800ea22 <__hexdig_fun+0x1a>
 800ea1e:	3847      	subs	r0, #71	; 0x47
 800ea20:	e7f7      	b.n	800ea12 <__hexdig_fun+0xa>
 800ea22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ea26:	2b05      	cmp	r3, #5
 800ea28:	d801      	bhi.n	800ea2e <__hexdig_fun+0x26>
 800ea2a:	3827      	subs	r0, #39	; 0x27
 800ea2c:	e7f1      	b.n	800ea12 <__hexdig_fun+0xa>
 800ea2e:	2000      	movs	r0, #0
 800ea30:	4770      	bx	lr
	...

0800ea34 <__gethex>:
 800ea34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea38:	ed2d 8b02 	vpush	{d8}
 800ea3c:	b089      	sub	sp, #36	; 0x24
 800ea3e:	ee08 0a10 	vmov	s16, r0
 800ea42:	9304      	str	r3, [sp, #16]
 800ea44:	4bb4      	ldr	r3, [pc, #720]	; (800ed18 <__gethex+0x2e4>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	468b      	mov	fp, r1
 800ea4e:	4690      	mov	r8, r2
 800ea50:	f7f1 fbc6 	bl	80001e0 <strlen>
 800ea54:	9b01      	ldr	r3, [sp, #4]
 800ea56:	f8db 2000 	ldr.w	r2, [fp]
 800ea5a:	4403      	add	r3, r0
 800ea5c:	4682      	mov	sl, r0
 800ea5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ea62:	9305      	str	r3, [sp, #20]
 800ea64:	1c93      	adds	r3, r2, #2
 800ea66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ea6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ea6e:	32fe      	adds	r2, #254	; 0xfe
 800ea70:	18d1      	adds	r1, r2, r3
 800ea72:	461f      	mov	r7, r3
 800ea74:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea78:	9100      	str	r1, [sp, #0]
 800ea7a:	2830      	cmp	r0, #48	; 0x30
 800ea7c:	d0f8      	beq.n	800ea70 <__gethex+0x3c>
 800ea7e:	f7ff ffc3 	bl	800ea08 <__hexdig_fun>
 800ea82:	4604      	mov	r4, r0
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d13a      	bne.n	800eafe <__gethex+0xca>
 800ea88:	9901      	ldr	r1, [sp, #4]
 800ea8a:	4652      	mov	r2, sl
 800ea8c:	4638      	mov	r0, r7
 800ea8e:	f001 fa23 	bl	800fed8 <strncmp>
 800ea92:	4605      	mov	r5, r0
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d168      	bne.n	800eb6a <__gethex+0x136>
 800ea98:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ea9c:	eb07 060a 	add.w	r6, r7, sl
 800eaa0:	f7ff ffb2 	bl	800ea08 <__hexdig_fun>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d062      	beq.n	800eb6e <__gethex+0x13a>
 800eaa8:	4633      	mov	r3, r6
 800eaaa:	7818      	ldrb	r0, [r3, #0]
 800eaac:	2830      	cmp	r0, #48	; 0x30
 800eaae:	461f      	mov	r7, r3
 800eab0:	f103 0301 	add.w	r3, r3, #1
 800eab4:	d0f9      	beq.n	800eaaa <__gethex+0x76>
 800eab6:	f7ff ffa7 	bl	800ea08 <__hexdig_fun>
 800eaba:	2301      	movs	r3, #1
 800eabc:	fab0 f480 	clz	r4, r0
 800eac0:	0964      	lsrs	r4, r4, #5
 800eac2:	4635      	mov	r5, r6
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	463a      	mov	r2, r7
 800eac8:	4616      	mov	r6, r2
 800eaca:	3201      	adds	r2, #1
 800eacc:	7830      	ldrb	r0, [r6, #0]
 800eace:	f7ff ff9b 	bl	800ea08 <__hexdig_fun>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d1f8      	bne.n	800eac8 <__gethex+0x94>
 800ead6:	9901      	ldr	r1, [sp, #4]
 800ead8:	4652      	mov	r2, sl
 800eada:	4630      	mov	r0, r6
 800eadc:	f001 f9fc 	bl	800fed8 <strncmp>
 800eae0:	b980      	cbnz	r0, 800eb04 <__gethex+0xd0>
 800eae2:	b94d      	cbnz	r5, 800eaf8 <__gethex+0xc4>
 800eae4:	eb06 050a 	add.w	r5, r6, sl
 800eae8:	462a      	mov	r2, r5
 800eaea:	4616      	mov	r6, r2
 800eaec:	3201      	adds	r2, #1
 800eaee:	7830      	ldrb	r0, [r6, #0]
 800eaf0:	f7ff ff8a 	bl	800ea08 <__hexdig_fun>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d1f8      	bne.n	800eaea <__gethex+0xb6>
 800eaf8:	1bad      	subs	r5, r5, r6
 800eafa:	00ad      	lsls	r5, r5, #2
 800eafc:	e004      	b.n	800eb08 <__gethex+0xd4>
 800eafe:	2400      	movs	r4, #0
 800eb00:	4625      	mov	r5, r4
 800eb02:	e7e0      	b.n	800eac6 <__gethex+0x92>
 800eb04:	2d00      	cmp	r5, #0
 800eb06:	d1f7      	bne.n	800eaf8 <__gethex+0xc4>
 800eb08:	7833      	ldrb	r3, [r6, #0]
 800eb0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eb0e:	2b50      	cmp	r3, #80	; 0x50
 800eb10:	d13b      	bne.n	800eb8a <__gethex+0x156>
 800eb12:	7873      	ldrb	r3, [r6, #1]
 800eb14:	2b2b      	cmp	r3, #43	; 0x2b
 800eb16:	d02c      	beq.n	800eb72 <__gethex+0x13e>
 800eb18:	2b2d      	cmp	r3, #45	; 0x2d
 800eb1a:	d02e      	beq.n	800eb7a <__gethex+0x146>
 800eb1c:	1c71      	adds	r1, r6, #1
 800eb1e:	f04f 0900 	mov.w	r9, #0
 800eb22:	7808      	ldrb	r0, [r1, #0]
 800eb24:	f7ff ff70 	bl	800ea08 <__hexdig_fun>
 800eb28:	1e43      	subs	r3, r0, #1
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	2b18      	cmp	r3, #24
 800eb2e:	d82c      	bhi.n	800eb8a <__gethex+0x156>
 800eb30:	f1a0 0210 	sub.w	r2, r0, #16
 800eb34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb38:	f7ff ff66 	bl	800ea08 <__hexdig_fun>
 800eb3c:	1e43      	subs	r3, r0, #1
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b18      	cmp	r3, #24
 800eb42:	d91d      	bls.n	800eb80 <__gethex+0x14c>
 800eb44:	f1b9 0f00 	cmp.w	r9, #0
 800eb48:	d000      	beq.n	800eb4c <__gethex+0x118>
 800eb4a:	4252      	negs	r2, r2
 800eb4c:	4415      	add	r5, r2
 800eb4e:	f8cb 1000 	str.w	r1, [fp]
 800eb52:	b1e4      	cbz	r4, 800eb8e <__gethex+0x15a>
 800eb54:	9b00      	ldr	r3, [sp, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	bf14      	ite	ne
 800eb5a:	2700      	movne	r7, #0
 800eb5c:	2706      	moveq	r7, #6
 800eb5e:	4638      	mov	r0, r7
 800eb60:	b009      	add	sp, #36	; 0x24
 800eb62:	ecbd 8b02 	vpop	{d8}
 800eb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb6a:	463e      	mov	r6, r7
 800eb6c:	4625      	mov	r5, r4
 800eb6e:	2401      	movs	r4, #1
 800eb70:	e7ca      	b.n	800eb08 <__gethex+0xd4>
 800eb72:	f04f 0900 	mov.w	r9, #0
 800eb76:	1cb1      	adds	r1, r6, #2
 800eb78:	e7d3      	b.n	800eb22 <__gethex+0xee>
 800eb7a:	f04f 0901 	mov.w	r9, #1
 800eb7e:	e7fa      	b.n	800eb76 <__gethex+0x142>
 800eb80:	230a      	movs	r3, #10
 800eb82:	fb03 0202 	mla	r2, r3, r2, r0
 800eb86:	3a10      	subs	r2, #16
 800eb88:	e7d4      	b.n	800eb34 <__gethex+0x100>
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	e7df      	b.n	800eb4e <__gethex+0x11a>
 800eb8e:	1bf3      	subs	r3, r6, r7
 800eb90:	3b01      	subs	r3, #1
 800eb92:	4621      	mov	r1, r4
 800eb94:	2b07      	cmp	r3, #7
 800eb96:	dc0b      	bgt.n	800ebb0 <__gethex+0x17c>
 800eb98:	ee18 0a10 	vmov	r0, s16
 800eb9c:	f000 fa70 	bl	800f080 <_Balloc>
 800eba0:	4604      	mov	r4, r0
 800eba2:	b940      	cbnz	r0, 800ebb6 <__gethex+0x182>
 800eba4:	4b5d      	ldr	r3, [pc, #372]	; (800ed1c <__gethex+0x2e8>)
 800eba6:	4602      	mov	r2, r0
 800eba8:	21de      	movs	r1, #222	; 0xde
 800ebaa:	485d      	ldr	r0, [pc, #372]	; (800ed20 <__gethex+0x2ec>)
 800ebac:	f001 f9b6 	bl	800ff1c <__assert_func>
 800ebb0:	3101      	adds	r1, #1
 800ebb2:	105b      	asrs	r3, r3, #1
 800ebb4:	e7ee      	b.n	800eb94 <__gethex+0x160>
 800ebb6:	f100 0914 	add.w	r9, r0, #20
 800ebba:	f04f 0b00 	mov.w	fp, #0
 800ebbe:	f1ca 0301 	rsb	r3, sl, #1
 800ebc2:	f8cd 9008 	str.w	r9, [sp, #8]
 800ebc6:	f8cd b000 	str.w	fp, [sp]
 800ebca:	9306      	str	r3, [sp, #24]
 800ebcc:	42b7      	cmp	r7, r6
 800ebce:	d340      	bcc.n	800ec52 <__gethex+0x21e>
 800ebd0:	9802      	ldr	r0, [sp, #8]
 800ebd2:	9b00      	ldr	r3, [sp, #0]
 800ebd4:	f840 3b04 	str.w	r3, [r0], #4
 800ebd8:	eba0 0009 	sub.w	r0, r0, r9
 800ebdc:	1080      	asrs	r0, r0, #2
 800ebde:	0146      	lsls	r6, r0, #5
 800ebe0:	6120      	str	r0, [r4, #16]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 fb3e 	bl	800f264 <__hi0bits>
 800ebe8:	1a30      	subs	r0, r6, r0
 800ebea:	f8d8 6000 	ldr.w	r6, [r8]
 800ebee:	42b0      	cmp	r0, r6
 800ebf0:	dd63      	ble.n	800ecba <__gethex+0x286>
 800ebf2:	1b87      	subs	r7, r0, r6
 800ebf4:	4639      	mov	r1, r7
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	f000 fee2 	bl	800f9c0 <__any_on>
 800ebfc:	4682      	mov	sl, r0
 800ebfe:	b1a8      	cbz	r0, 800ec2c <__gethex+0x1f8>
 800ec00:	1e7b      	subs	r3, r7, #1
 800ec02:	1159      	asrs	r1, r3, #5
 800ec04:	f003 021f 	and.w	r2, r3, #31
 800ec08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ec0c:	f04f 0a01 	mov.w	sl, #1
 800ec10:	fa0a f202 	lsl.w	r2, sl, r2
 800ec14:	420a      	tst	r2, r1
 800ec16:	d009      	beq.n	800ec2c <__gethex+0x1f8>
 800ec18:	4553      	cmp	r3, sl
 800ec1a:	dd05      	ble.n	800ec28 <__gethex+0x1f4>
 800ec1c:	1eb9      	subs	r1, r7, #2
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f000 fece 	bl	800f9c0 <__any_on>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d145      	bne.n	800ecb4 <__gethex+0x280>
 800ec28:	f04f 0a02 	mov.w	sl, #2
 800ec2c:	4639      	mov	r1, r7
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f7ff fe98 	bl	800e964 <rshift>
 800ec34:	443d      	add	r5, r7
 800ec36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec3a:	42ab      	cmp	r3, r5
 800ec3c:	da4c      	bge.n	800ecd8 <__gethex+0x2a4>
 800ec3e:	ee18 0a10 	vmov	r0, s16
 800ec42:	4621      	mov	r1, r4
 800ec44:	f000 fa5c 	bl	800f100 <_Bfree>
 800ec48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	6013      	str	r3, [r2, #0]
 800ec4e:	27a3      	movs	r7, #163	; 0xa3
 800ec50:	e785      	b.n	800eb5e <__gethex+0x12a>
 800ec52:	1e73      	subs	r3, r6, #1
 800ec54:	9a05      	ldr	r2, [sp, #20]
 800ec56:	9303      	str	r3, [sp, #12]
 800ec58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d019      	beq.n	800ec94 <__gethex+0x260>
 800ec60:	f1bb 0f20 	cmp.w	fp, #32
 800ec64:	d107      	bne.n	800ec76 <__gethex+0x242>
 800ec66:	9b02      	ldr	r3, [sp, #8]
 800ec68:	9a00      	ldr	r2, [sp, #0]
 800ec6a:	f843 2b04 	str.w	r2, [r3], #4
 800ec6e:	9302      	str	r3, [sp, #8]
 800ec70:	2300      	movs	r3, #0
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	469b      	mov	fp, r3
 800ec76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ec7a:	f7ff fec5 	bl	800ea08 <__hexdig_fun>
 800ec7e:	9b00      	ldr	r3, [sp, #0]
 800ec80:	f000 000f 	and.w	r0, r0, #15
 800ec84:	fa00 f00b 	lsl.w	r0, r0, fp
 800ec88:	4303      	orrs	r3, r0
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	f10b 0b04 	add.w	fp, fp, #4
 800ec90:	9b03      	ldr	r3, [sp, #12]
 800ec92:	e00d      	b.n	800ecb0 <__gethex+0x27c>
 800ec94:	9b03      	ldr	r3, [sp, #12]
 800ec96:	9a06      	ldr	r2, [sp, #24]
 800ec98:	4413      	add	r3, r2
 800ec9a:	42bb      	cmp	r3, r7
 800ec9c:	d3e0      	bcc.n	800ec60 <__gethex+0x22c>
 800ec9e:	4618      	mov	r0, r3
 800eca0:	9901      	ldr	r1, [sp, #4]
 800eca2:	9307      	str	r3, [sp, #28]
 800eca4:	4652      	mov	r2, sl
 800eca6:	f001 f917 	bl	800fed8 <strncmp>
 800ecaa:	9b07      	ldr	r3, [sp, #28]
 800ecac:	2800      	cmp	r0, #0
 800ecae:	d1d7      	bne.n	800ec60 <__gethex+0x22c>
 800ecb0:	461e      	mov	r6, r3
 800ecb2:	e78b      	b.n	800ebcc <__gethex+0x198>
 800ecb4:	f04f 0a03 	mov.w	sl, #3
 800ecb8:	e7b8      	b.n	800ec2c <__gethex+0x1f8>
 800ecba:	da0a      	bge.n	800ecd2 <__gethex+0x29e>
 800ecbc:	1a37      	subs	r7, r6, r0
 800ecbe:	4621      	mov	r1, r4
 800ecc0:	ee18 0a10 	vmov	r0, s16
 800ecc4:	463a      	mov	r2, r7
 800ecc6:	f000 fc37 	bl	800f538 <__lshift>
 800ecca:	1bed      	subs	r5, r5, r7
 800eccc:	4604      	mov	r4, r0
 800ecce:	f100 0914 	add.w	r9, r0, #20
 800ecd2:	f04f 0a00 	mov.w	sl, #0
 800ecd6:	e7ae      	b.n	800ec36 <__gethex+0x202>
 800ecd8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ecdc:	42a8      	cmp	r0, r5
 800ecde:	dd72      	ble.n	800edc6 <__gethex+0x392>
 800ece0:	1b45      	subs	r5, r0, r5
 800ece2:	42ae      	cmp	r6, r5
 800ece4:	dc36      	bgt.n	800ed54 <__gethex+0x320>
 800ece6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	d02a      	beq.n	800ed44 <__gethex+0x310>
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d02c      	beq.n	800ed4c <__gethex+0x318>
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d11c      	bne.n	800ed30 <__gethex+0x2fc>
 800ecf6:	42ae      	cmp	r6, r5
 800ecf8:	d11a      	bne.n	800ed30 <__gethex+0x2fc>
 800ecfa:	2e01      	cmp	r6, #1
 800ecfc:	d112      	bne.n	800ed24 <__gethex+0x2f0>
 800ecfe:	9a04      	ldr	r2, [sp, #16]
 800ed00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed04:	6013      	str	r3, [r2, #0]
 800ed06:	2301      	movs	r3, #1
 800ed08:	6123      	str	r3, [r4, #16]
 800ed0a:	f8c9 3000 	str.w	r3, [r9]
 800ed0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ed10:	2762      	movs	r7, #98	; 0x62
 800ed12:	601c      	str	r4, [r3, #0]
 800ed14:	e723      	b.n	800eb5e <__gethex+0x12a>
 800ed16:	bf00      	nop
 800ed18:	08011f70 	.word	0x08011f70
 800ed1c:	08011ef8 	.word	0x08011ef8
 800ed20:	08011f09 	.word	0x08011f09
 800ed24:	1e71      	subs	r1, r6, #1
 800ed26:	4620      	mov	r0, r4
 800ed28:	f000 fe4a 	bl	800f9c0 <__any_on>
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	d1e6      	bne.n	800ecfe <__gethex+0x2ca>
 800ed30:	ee18 0a10 	vmov	r0, s16
 800ed34:	4621      	mov	r1, r4
 800ed36:	f000 f9e3 	bl	800f100 <_Bfree>
 800ed3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	6013      	str	r3, [r2, #0]
 800ed40:	2750      	movs	r7, #80	; 0x50
 800ed42:	e70c      	b.n	800eb5e <__gethex+0x12a>
 800ed44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d1f2      	bne.n	800ed30 <__gethex+0x2fc>
 800ed4a:	e7d8      	b.n	800ecfe <__gethex+0x2ca>
 800ed4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d1d5      	bne.n	800ecfe <__gethex+0x2ca>
 800ed52:	e7ed      	b.n	800ed30 <__gethex+0x2fc>
 800ed54:	1e6f      	subs	r7, r5, #1
 800ed56:	f1ba 0f00 	cmp.w	sl, #0
 800ed5a:	d131      	bne.n	800edc0 <__gethex+0x38c>
 800ed5c:	b127      	cbz	r7, 800ed68 <__gethex+0x334>
 800ed5e:	4639      	mov	r1, r7
 800ed60:	4620      	mov	r0, r4
 800ed62:	f000 fe2d 	bl	800f9c0 <__any_on>
 800ed66:	4682      	mov	sl, r0
 800ed68:	117b      	asrs	r3, r7, #5
 800ed6a:	2101      	movs	r1, #1
 800ed6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ed70:	f007 071f 	and.w	r7, r7, #31
 800ed74:	fa01 f707 	lsl.w	r7, r1, r7
 800ed78:	421f      	tst	r7, r3
 800ed7a:	4629      	mov	r1, r5
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	bf18      	it	ne
 800ed80:	f04a 0a02 	orrne.w	sl, sl, #2
 800ed84:	1b76      	subs	r6, r6, r5
 800ed86:	f7ff fded 	bl	800e964 <rshift>
 800ed8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ed8e:	2702      	movs	r7, #2
 800ed90:	f1ba 0f00 	cmp.w	sl, #0
 800ed94:	d048      	beq.n	800ee28 <__gethex+0x3f4>
 800ed96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed9a:	2b02      	cmp	r3, #2
 800ed9c:	d015      	beq.n	800edca <__gethex+0x396>
 800ed9e:	2b03      	cmp	r3, #3
 800eda0:	d017      	beq.n	800edd2 <__gethex+0x39e>
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d109      	bne.n	800edba <__gethex+0x386>
 800eda6:	f01a 0f02 	tst.w	sl, #2
 800edaa:	d006      	beq.n	800edba <__gethex+0x386>
 800edac:	f8d9 0000 	ldr.w	r0, [r9]
 800edb0:	ea4a 0a00 	orr.w	sl, sl, r0
 800edb4:	f01a 0f01 	tst.w	sl, #1
 800edb8:	d10e      	bne.n	800edd8 <__gethex+0x3a4>
 800edba:	f047 0710 	orr.w	r7, r7, #16
 800edbe:	e033      	b.n	800ee28 <__gethex+0x3f4>
 800edc0:	f04f 0a01 	mov.w	sl, #1
 800edc4:	e7d0      	b.n	800ed68 <__gethex+0x334>
 800edc6:	2701      	movs	r7, #1
 800edc8:	e7e2      	b.n	800ed90 <__gethex+0x35c>
 800edca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edcc:	f1c3 0301 	rsb	r3, r3, #1
 800edd0:	9315      	str	r3, [sp, #84]	; 0x54
 800edd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d0f0      	beq.n	800edba <__gethex+0x386>
 800edd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eddc:	f104 0314 	add.w	r3, r4, #20
 800ede0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ede4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ede8:	f04f 0c00 	mov.w	ip, #0
 800edec:	4618      	mov	r0, r3
 800edee:	f853 2b04 	ldr.w	r2, [r3], #4
 800edf2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800edf6:	d01c      	beq.n	800ee32 <__gethex+0x3fe>
 800edf8:	3201      	adds	r2, #1
 800edfa:	6002      	str	r2, [r0, #0]
 800edfc:	2f02      	cmp	r7, #2
 800edfe:	f104 0314 	add.w	r3, r4, #20
 800ee02:	d13f      	bne.n	800ee84 <__gethex+0x450>
 800ee04:	f8d8 2000 	ldr.w	r2, [r8]
 800ee08:	3a01      	subs	r2, #1
 800ee0a:	42b2      	cmp	r2, r6
 800ee0c:	d10a      	bne.n	800ee24 <__gethex+0x3f0>
 800ee0e:	1171      	asrs	r1, r6, #5
 800ee10:	2201      	movs	r2, #1
 800ee12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee16:	f006 061f 	and.w	r6, r6, #31
 800ee1a:	fa02 f606 	lsl.w	r6, r2, r6
 800ee1e:	421e      	tst	r6, r3
 800ee20:	bf18      	it	ne
 800ee22:	4617      	movne	r7, r2
 800ee24:	f047 0720 	orr.w	r7, r7, #32
 800ee28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee2a:	601c      	str	r4, [r3, #0]
 800ee2c:	9b04      	ldr	r3, [sp, #16]
 800ee2e:	601d      	str	r5, [r3, #0]
 800ee30:	e695      	b.n	800eb5e <__gethex+0x12a>
 800ee32:	4299      	cmp	r1, r3
 800ee34:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee38:	d8d8      	bhi.n	800edec <__gethex+0x3b8>
 800ee3a:	68a3      	ldr	r3, [r4, #8]
 800ee3c:	459b      	cmp	fp, r3
 800ee3e:	db19      	blt.n	800ee74 <__gethex+0x440>
 800ee40:	6861      	ldr	r1, [r4, #4]
 800ee42:	ee18 0a10 	vmov	r0, s16
 800ee46:	3101      	adds	r1, #1
 800ee48:	f000 f91a 	bl	800f080 <_Balloc>
 800ee4c:	4681      	mov	r9, r0
 800ee4e:	b918      	cbnz	r0, 800ee58 <__gethex+0x424>
 800ee50:	4b1a      	ldr	r3, [pc, #104]	; (800eebc <__gethex+0x488>)
 800ee52:	4602      	mov	r2, r0
 800ee54:	2184      	movs	r1, #132	; 0x84
 800ee56:	e6a8      	b.n	800ebaa <__gethex+0x176>
 800ee58:	6922      	ldr	r2, [r4, #16]
 800ee5a:	3202      	adds	r2, #2
 800ee5c:	f104 010c 	add.w	r1, r4, #12
 800ee60:	0092      	lsls	r2, r2, #2
 800ee62:	300c      	adds	r0, #12
 800ee64:	f7fd f95c 	bl	800c120 <memcpy>
 800ee68:	4621      	mov	r1, r4
 800ee6a:	ee18 0a10 	vmov	r0, s16
 800ee6e:	f000 f947 	bl	800f100 <_Bfree>
 800ee72:	464c      	mov	r4, r9
 800ee74:	6923      	ldr	r3, [r4, #16]
 800ee76:	1c5a      	adds	r2, r3, #1
 800ee78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee7c:	6122      	str	r2, [r4, #16]
 800ee7e:	2201      	movs	r2, #1
 800ee80:	615a      	str	r2, [r3, #20]
 800ee82:	e7bb      	b.n	800edfc <__gethex+0x3c8>
 800ee84:	6922      	ldr	r2, [r4, #16]
 800ee86:	455a      	cmp	r2, fp
 800ee88:	dd0b      	ble.n	800eea2 <__gethex+0x46e>
 800ee8a:	2101      	movs	r1, #1
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f7ff fd69 	bl	800e964 <rshift>
 800ee92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee96:	3501      	adds	r5, #1
 800ee98:	42ab      	cmp	r3, r5
 800ee9a:	f6ff aed0 	blt.w	800ec3e <__gethex+0x20a>
 800ee9e:	2701      	movs	r7, #1
 800eea0:	e7c0      	b.n	800ee24 <__gethex+0x3f0>
 800eea2:	f016 061f 	ands.w	r6, r6, #31
 800eea6:	d0fa      	beq.n	800ee9e <__gethex+0x46a>
 800eea8:	4453      	add	r3, sl
 800eeaa:	f1c6 0620 	rsb	r6, r6, #32
 800eeae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eeb2:	f000 f9d7 	bl	800f264 <__hi0bits>
 800eeb6:	42b0      	cmp	r0, r6
 800eeb8:	dbe7      	blt.n	800ee8a <__gethex+0x456>
 800eeba:	e7f0      	b.n	800ee9e <__gethex+0x46a>
 800eebc:	08011ef8 	.word	0x08011ef8

0800eec0 <L_shift>:
 800eec0:	f1c2 0208 	rsb	r2, r2, #8
 800eec4:	0092      	lsls	r2, r2, #2
 800eec6:	b570      	push	{r4, r5, r6, lr}
 800eec8:	f1c2 0620 	rsb	r6, r2, #32
 800eecc:	6843      	ldr	r3, [r0, #4]
 800eece:	6804      	ldr	r4, [r0, #0]
 800eed0:	fa03 f506 	lsl.w	r5, r3, r6
 800eed4:	432c      	orrs	r4, r5
 800eed6:	40d3      	lsrs	r3, r2
 800eed8:	6004      	str	r4, [r0, #0]
 800eeda:	f840 3f04 	str.w	r3, [r0, #4]!
 800eede:	4288      	cmp	r0, r1
 800eee0:	d3f4      	bcc.n	800eecc <L_shift+0xc>
 800eee2:	bd70      	pop	{r4, r5, r6, pc}

0800eee4 <__match>:
 800eee4:	b530      	push	{r4, r5, lr}
 800eee6:	6803      	ldr	r3, [r0, #0]
 800eee8:	3301      	adds	r3, #1
 800eeea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeee:	b914      	cbnz	r4, 800eef6 <__match+0x12>
 800eef0:	6003      	str	r3, [r0, #0]
 800eef2:	2001      	movs	r0, #1
 800eef4:	bd30      	pop	{r4, r5, pc}
 800eef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eefa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eefe:	2d19      	cmp	r5, #25
 800ef00:	bf98      	it	ls
 800ef02:	3220      	addls	r2, #32
 800ef04:	42a2      	cmp	r2, r4
 800ef06:	d0f0      	beq.n	800eeea <__match+0x6>
 800ef08:	2000      	movs	r0, #0
 800ef0a:	e7f3      	b.n	800eef4 <__match+0x10>

0800ef0c <__hexnan>:
 800ef0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef10:	680b      	ldr	r3, [r1, #0]
 800ef12:	115e      	asrs	r6, r3, #5
 800ef14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef18:	f013 031f 	ands.w	r3, r3, #31
 800ef1c:	b087      	sub	sp, #28
 800ef1e:	bf18      	it	ne
 800ef20:	3604      	addne	r6, #4
 800ef22:	2500      	movs	r5, #0
 800ef24:	1f37      	subs	r7, r6, #4
 800ef26:	4690      	mov	r8, r2
 800ef28:	6802      	ldr	r2, [r0, #0]
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	4682      	mov	sl, r0
 800ef2e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef32:	46b9      	mov	r9, r7
 800ef34:	463c      	mov	r4, r7
 800ef36:	9502      	str	r5, [sp, #8]
 800ef38:	46ab      	mov	fp, r5
 800ef3a:	7851      	ldrb	r1, [r2, #1]
 800ef3c:	1c53      	adds	r3, r2, #1
 800ef3e:	9303      	str	r3, [sp, #12]
 800ef40:	b341      	cbz	r1, 800ef94 <__hexnan+0x88>
 800ef42:	4608      	mov	r0, r1
 800ef44:	9205      	str	r2, [sp, #20]
 800ef46:	9104      	str	r1, [sp, #16]
 800ef48:	f7ff fd5e 	bl	800ea08 <__hexdig_fun>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d14f      	bne.n	800eff0 <__hexnan+0xe4>
 800ef50:	9904      	ldr	r1, [sp, #16]
 800ef52:	9a05      	ldr	r2, [sp, #20]
 800ef54:	2920      	cmp	r1, #32
 800ef56:	d818      	bhi.n	800ef8a <__hexnan+0x7e>
 800ef58:	9b02      	ldr	r3, [sp, #8]
 800ef5a:	459b      	cmp	fp, r3
 800ef5c:	dd13      	ble.n	800ef86 <__hexnan+0x7a>
 800ef5e:	454c      	cmp	r4, r9
 800ef60:	d206      	bcs.n	800ef70 <__hexnan+0x64>
 800ef62:	2d07      	cmp	r5, #7
 800ef64:	dc04      	bgt.n	800ef70 <__hexnan+0x64>
 800ef66:	462a      	mov	r2, r5
 800ef68:	4649      	mov	r1, r9
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f7ff ffa8 	bl	800eec0 <L_shift>
 800ef70:	4544      	cmp	r4, r8
 800ef72:	d950      	bls.n	800f016 <__hexnan+0x10a>
 800ef74:	2300      	movs	r3, #0
 800ef76:	f1a4 0904 	sub.w	r9, r4, #4
 800ef7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef7e:	f8cd b008 	str.w	fp, [sp, #8]
 800ef82:	464c      	mov	r4, r9
 800ef84:	461d      	mov	r5, r3
 800ef86:	9a03      	ldr	r2, [sp, #12]
 800ef88:	e7d7      	b.n	800ef3a <__hexnan+0x2e>
 800ef8a:	2929      	cmp	r1, #41	; 0x29
 800ef8c:	d156      	bne.n	800f03c <__hexnan+0x130>
 800ef8e:	3202      	adds	r2, #2
 800ef90:	f8ca 2000 	str.w	r2, [sl]
 800ef94:	f1bb 0f00 	cmp.w	fp, #0
 800ef98:	d050      	beq.n	800f03c <__hexnan+0x130>
 800ef9a:	454c      	cmp	r4, r9
 800ef9c:	d206      	bcs.n	800efac <__hexnan+0xa0>
 800ef9e:	2d07      	cmp	r5, #7
 800efa0:	dc04      	bgt.n	800efac <__hexnan+0xa0>
 800efa2:	462a      	mov	r2, r5
 800efa4:	4649      	mov	r1, r9
 800efa6:	4620      	mov	r0, r4
 800efa8:	f7ff ff8a 	bl	800eec0 <L_shift>
 800efac:	4544      	cmp	r4, r8
 800efae:	d934      	bls.n	800f01a <__hexnan+0x10e>
 800efb0:	f1a8 0204 	sub.w	r2, r8, #4
 800efb4:	4623      	mov	r3, r4
 800efb6:	f853 1b04 	ldr.w	r1, [r3], #4
 800efba:	f842 1f04 	str.w	r1, [r2, #4]!
 800efbe:	429f      	cmp	r7, r3
 800efc0:	d2f9      	bcs.n	800efb6 <__hexnan+0xaa>
 800efc2:	1b3b      	subs	r3, r7, r4
 800efc4:	f023 0303 	bic.w	r3, r3, #3
 800efc8:	3304      	adds	r3, #4
 800efca:	3401      	adds	r4, #1
 800efcc:	3e03      	subs	r6, #3
 800efce:	42b4      	cmp	r4, r6
 800efd0:	bf88      	it	hi
 800efd2:	2304      	movhi	r3, #4
 800efd4:	4443      	add	r3, r8
 800efd6:	2200      	movs	r2, #0
 800efd8:	f843 2b04 	str.w	r2, [r3], #4
 800efdc:	429f      	cmp	r7, r3
 800efde:	d2fb      	bcs.n	800efd8 <__hexnan+0xcc>
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	b91b      	cbnz	r3, 800efec <__hexnan+0xe0>
 800efe4:	4547      	cmp	r7, r8
 800efe6:	d127      	bne.n	800f038 <__hexnan+0x12c>
 800efe8:	2301      	movs	r3, #1
 800efea:	603b      	str	r3, [r7, #0]
 800efec:	2005      	movs	r0, #5
 800efee:	e026      	b.n	800f03e <__hexnan+0x132>
 800eff0:	3501      	adds	r5, #1
 800eff2:	2d08      	cmp	r5, #8
 800eff4:	f10b 0b01 	add.w	fp, fp, #1
 800eff8:	dd06      	ble.n	800f008 <__hexnan+0xfc>
 800effa:	4544      	cmp	r4, r8
 800effc:	d9c3      	bls.n	800ef86 <__hexnan+0x7a>
 800effe:	2300      	movs	r3, #0
 800f000:	f844 3c04 	str.w	r3, [r4, #-4]
 800f004:	2501      	movs	r5, #1
 800f006:	3c04      	subs	r4, #4
 800f008:	6822      	ldr	r2, [r4, #0]
 800f00a:	f000 000f 	and.w	r0, r0, #15
 800f00e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f012:	6022      	str	r2, [r4, #0]
 800f014:	e7b7      	b.n	800ef86 <__hexnan+0x7a>
 800f016:	2508      	movs	r5, #8
 800f018:	e7b5      	b.n	800ef86 <__hexnan+0x7a>
 800f01a:	9b01      	ldr	r3, [sp, #4]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d0df      	beq.n	800efe0 <__hexnan+0xd4>
 800f020:	f04f 32ff 	mov.w	r2, #4294967295
 800f024:	f1c3 0320 	rsb	r3, r3, #32
 800f028:	fa22 f303 	lsr.w	r3, r2, r3
 800f02c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f030:	401a      	ands	r2, r3
 800f032:	f846 2c04 	str.w	r2, [r6, #-4]
 800f036:	e7d3      	b.n	800efe0 <__hexnan+0xd4>
 800f038:	3f04      	subs	r7, #4
 800f03a:	e7d1      	b.n	800efe0 <__hexnan+0xd4>
 800f03c:	2004      	movs	r0, #4
 800f03e:	b007      	add	sp, #28
 800f040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f044 <_localeconv_r>:
 800f044:	4800      	ldr	r0, [pc, #0]	; (800f048 <_localeconv_r+0x4>)
 800f046:	4770      	bx	lr
 800f048:	20000424 	.word	0x20000424

0800f04c <malloc>:
 800f04c:	4b02      	ldr	r3, [pc, #8]	; (800f058 <malloc+0xc>)
 800f04e:	4601      	mov	r1, r0
 800f050:	6818      	ldr	r0, [r3, #0]
 800f052:	f000 bd59 	b.w	800fb08 <_malloc_r>
 800f056:	bf00      	nop
 800f058:	200002cc 	.word	0x200002cc

0800f05c <__ascii_mbtowc>:
 800f05c:	b082      	sub	sp, #8
 800f05e:	b901      	cbnz	r1, 800f062 <__ascii_mbtowc+0x6>
 800f060:	a901      	add	r1, sp, #4
 800f062:	b142      	cbz	r2, 800f076 <__ascii_mbtowc+0x1a>
 800f064:	b14b      	cbz	r3, 800f07a <__ascii_mbtowc+0x1e>
 800f066:	7813      	ldrb	r3, [r2, #0]
 800f068:	600b      	str	r3, [r1, #0]
 800f06a:	7812      	ldrb	r2, [r2, #0]
 800f06c:	1e10      	subs	r0, r2, #0
 800f06e:	bf18      	it	ne
 800f070:	2001      	movne	r0, #1
 800f072:	b002      	add	sp, #8
 800f074:	4770      	bx	lr
 800f076:	4610      	mov	r0, r2
 800f078:	e7fb      	b.n	800f072 <__ascii_mbtowc+0x16>
 800f07a:	f06f 0001 	mvn.w	r0, #1
 800f07e:	e7f8      	b.n	800f072 <__ascii_mbtowc+0x16>

0800f080 <_Balloc>:
 800f080:	b570      	push	{r4, r5, r6, lr}
 800f082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f084:	4604      	mov	r4, r0
 800f086:	460d      	mov	r5, r1
 800f088:	b976      	cbnz	r6, 800f0a8 <_Balloc+0x28>
 800f08a:	2010      	movs	r0, #16
 800f08c:	f7ff ffde 	bl	800f04c <malloc>
 800f090:	4602      	mov	r2, r0
 800f092:	6260      	str	r0, [r4, #36]	; 0x24
 800f094:	b920      	cbnz	r0, 800f0a0 <_Balloc+0x20>
 800f096:	4b18      	ldr	r3, [pc, #96]	; (800f0f8 <_Balloc+0x78>)
 800f098:	4818      	ldr	r0, [pc, #96]	; (800f0fc <_Balloc+0x7c>)
 800f09a:	2166      	movs	r1, #102	; 0x66
 800f09c:	f000 ff3e 	bl	800ff1c <__assert_func>
 800f0a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0a4:	6006      	str	r6, [r0, #0]
 800f0a6:	60c6      	str	r6, [r0, #12]
 800f0a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f0aa:	68f3      	ldr	r3, [r6, #12]
 800f0ac:	b183      	cbz	r3, 800f0d0 <_Balloc+0x50>
 800f0ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f0b6:	b9b8      	cbnz	r0, 800f0e8 <_Balloc+0x68>
 800f0b8:	2101      	movs	r1, #1
 800f0ba:	fa01 f605 	lsl.w	r6, r1, r5
 800f0be:	1d72      	adds	r2, r6, #5
 800f0c0:	0092      	lsls	r2, r2, #2
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	f000 fc9d 	bl	800fa02 <_calloc_r>
 800f0c8:	b160      	cbz	r0, 800f0e4 <_Balloc+0x64>
 800f0ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f0ce:	e00e      	b.n	800f0ee <_Balloc+0x6e>
 800f0d0:	2221      	movs	r2, #33	; 0x21
 800f0d2:	2104      	movs	r1, #4
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f000 fc94 	bl	800fa02 <_calloc_r>
 800f0da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0dc:	60f0      	str	r0, [r6, #12]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1e4      	bne.n	800f0ae <_Balloc+0x2e>
 800f0e4:	2000      	movs	r0, #0
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}
 800f0e8:	6802      	ldr	r2, [r0, #0]
 800f0ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f0f4:	e7f7      	b.n	800f0e6 <_Balloc+0x66>
 800f0f6:	bf00      	nop
 800f0f8:	08011e86 	.word	0x08011e86
 800f0fc:	08011f84 	.word	0x08011f84

0800f100 <_Bfree>:
 800f100:	b570      	push	{r4, r5, r6, lr}
 800f102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f104:	4605      	mov	r5, r0
 800f106:	460c      	mov	r4, r1
 800f108:	b976      	cbnz	r6, 800f128 <_Bfree+0x28>
 800f10a:	2010      	movs	r0, #16
 800f10c:	f7ff ff9e 	bl	800f04c <malloc>
 800f110:	4602      	mov	r2, r0
 800f112:	6268      	str	r0, [r5, #36]	; 0x24
 800f114:	b920      	cbnz	r0, 800f120 <_Bfree+0x20>
 800f116:	4b09      	ldr	r3, [pc, #36]	; (800f13c <_Bfree+0x3c>)
 800f118:	4809      	ldr	r0, [pc, #36]	; (800f140 <_Bfree+0x40>)
 800f11a:	218a      	movs	r1, #138	; 0x8a
 800f11c:	f000 fefe 	bl	800ff1c <__assert_func>
 800f120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f124:	6006      	str	r6, [r0, #0]
 800f126:	60c6      	str	r6, [r0, #12]
 800f128:	b13c      	cbz	r4, 800f13a <_Bfree+0x3a>
 800f12a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f12c:	6862      	ldr	r2, [r4, #4]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f134:	6021      	str	r1, [r4, #0]
 800f136:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f13a:	bd70      	pop	{r4, r5, r6, pc}
 800f13c:	08011e86 	.word	0x08011e86
 800f140:	08011f84 	.word	0x08011f84

0800f144 <__multadd>:
 800f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f148:	690d      	ldr	r5, [r1, #16]
 800f14a:	4607      	mov	r7, r0
 800f14c:	460c      	mov	r4, r1
 800f14e:	461e      	mov	r6, r3
 800f150:	f101 0c14 	add.w	ip, r1, #20
 800f154:	2000      	movs	r0, #0
 800f156:	f8dc 3000 	ldr.w	r3, [ip]
 800f15a:	b299      	uxth	r1, r3
 800f15c:	fb02 6101 	mla	r1, r2, r1, r6
 800f160:	0c1e      	lsrs	r6, r3, #16
 800f162:	0c0b      	lsrs	r3, r1, #16
 800f164:	fb02 3306 	mla	r3, r2, r6, r3
 800f168:	b289      	uxth	r1, r1
 800f16a:	3001      	adds	r0, #1
 800f16c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f170:	4285      	cmp	r5, r0
 800f172:	f84c 1b04 	str.w	r1, [ip], #4
 800f176:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f17a:	dcec      	bgt.n	800f156 <__multadd+0x12>
 800f17c:	b30e      	cbz	r6, 800f1c2 <__multadd+0x7e>
 800f17e:	68a3      	ldr	r3, [r4, #8]
 800f180:	42ab      	cmp	r3, r5
 800f182:	dc19      	bgt.n	800f1b8 <__multadd+0x74>
 800f184:	6861      	ldr	r1, [r4, #4]
 800f186:	4638      	mov	r0, r7
 800f188:	3101      	adds	r1, #1
 800f18a:	f7ff ff79 	bl	800f080 <_Balloc>
 800f18e:	4680      	mov	r8, r0
 800f190:	b928      	cbnz	r0, 800f19e <__multadd+0x5a>
 800f192:	4602      	mov	r2, r0
 800f194:	4b0c      	ldr	r3, [pc, #48]	; (800f1c8 <__multadd+0x84>)
 800f196:	480d      	ldr	r0, [pc, #52]	; (800f1cc <__multadd+0x88>)
 800f198:	21b5      	movs	r1, #181	; 0xb5
 800f19a:	f000 febf 	bl	800ff1c <__assert_func>
 800f19e:	6922      	ldr	r2, [r4, #16]
 800f1a0:	3202      	adds	r2, #2
 800f1a2:	f104 010c 	add.w	r1, r4, #12
 800f1a6:	0092      	lsls	r2, r2, #2
 800f1a8:	300c      	adds	r0, #12
 800f1aa:	f7fc ffb9 	bl	800c120 <memcpy>
 800f1ae:	4621      	mov	r1, r4
 800f1b0:	4638      	mov	r0, r7
 800f1b2:	f7ff ffa5 	bl	800f100 <_Bfree>
 800f1b6:	4644      	mov	r4, r8
 800f1b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f1bc:	3501      	adds	r5, #1
 800f1be:	615e      	str	r6, [r3, #20]
 800f1c0:	6125      	str	r5, [r4, #16]
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c8:	08011ef8 	.word	0x08011ef8
 800f1cc:	08011f84 	.word	0x08011f84

0800f1d0 <__s2b>:
 800f1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d4:	460c      	mov	r4, r1
 800f1d6:	4615      	mov	r5, r2
 800f1d8:	461f      	mov	r7, r3
 800f1da:	2209      	movs	r2, #9
 800f1dc:	3308      	adds	r3, #8
 800f1de:	4606      	mov	r6, r0
 800f1e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	db09      	blt.n	800f200 <__s2b+0x30>
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	f7ff ff47 	bl	800f080 <_Balloc>
 800f1f2:	b940      	cbnz	r0, 800f206 <__s2b+0x36>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	4b19      	ldr	r3, [pc, #100]	; (800f25c <__s2b+0x8c>)
 800f1f8:	4819      	ldr	r0, [pc, #100]	; (800f260 <__s2b+0x90>)
 800f1fa:	21ce      	movs	r1, #206	; 0xce
 800f1fc:	f000 fe8e 	bl	800ff1c <__assert_func>
 800f200:	0052      	lsls	r2, r2, #1
 800f202:	3101      	adds	r1, #1
 800f204:	e7f0      	b.n	800f1e8 <__s2b+0x18>
 800f206:	9b08      	ldr	r3, [sp, #32]
 800f208:	6143      	str	r3, [r0, #20]
 800f20a:	2d09      	cmp	r5, #9
 800f20c:	f04f 0301 	mov.w	r3, #1
 800f210:	6103      	str	r3, [r0, #16]
 800f212:	dd16      	ble.n	800f242 <__s2b+0x72>
 800f214:	f104 0909 	add.w	r9, r4, #9
 800f218:	46c8      	mov	r8, r9
 800f21a:	442c      	add	r4, r5
 800f21c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f220:	4601      	mov	r1, r0
 800f222:	3b30      	subs	r3, #48	; 0x30
 800f224:	220a      	movs	r2, #10
 800f226:	4630      	mov	r0, r6
 800f228:	f7ff ff8c 	bl	800f144 <__multadd>
 800f22c:	45a0      	cmp	r8, r4
 800f22e:	d1f5      	bne.n	800f21c <__s2b+0x4c>
 800f230:	f1a5 0408 	sub.w	r4, r5, #8
 800f234:	444c      	add	r4, r9
 800f236:	1b2d      	subs	r5, r5, r4
 800f238:	1963      	adds	r3, r4, r5
 800f23a:	42bb      	cmp	r3, r7
 800f23c:	db04      	blt.n	800f248 <__s2b+0x78>
 800f23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f242:	340a      	adds	r4, #10
 800f244:	2509      	movs	r5, #9
 800f246:	e7f6      	b.n	800f236 <__s2b+0x66>
 800f248:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f24c:	4601      	mov	r1, r0
 800f24e:	3b30      	subs	r3, #48	; 0x30
 800f250:	220a      	movs	r2, #10
 800f252:	4630      	mov	r0, r6
 800f254:	f7ff ff76 	bl	800f144 <__multadd>
 800f258:	e7ee      	b.n	800f238 <__s2b+0x68>
 800f25a:	bf00      	nop
 800f25c:	08011ef8 	.word	0x08011ef8
 800f260:	08011f84 	.word	0x08011f84

0800f264 <__hi0bits>:
 800f264:	0c03      	lsrs	r3, r0, #16
 800f266:	041b      	lsls	r3, r3, #16
 800f268:	b9d3      	cbnz	r3, 800f2a0 <__hi0bits+0x3c>
 800f26a:	0400      	lsls	r0, r0, #16
 800f26c:	2310      	movs	r3, #16
 800f26e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f272:	bf04      	itt	eq
 800f274:	0200      	lsleq	r0, r0, #8
 800f276:	3308      	addeq	r3, #8
 800f278:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f27c:	bf04      	itt	eq
 800f27e:	0100      	lsleq	r0, r0, #4
 800f280:	3304      	addeq	r3, #4
 800f282:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f286:	bf04      	itt	eq
 800f288:	0080      	lsleq	r0, r0, #2
 800f28a:	3302      	addeq	r3, #2
 800f28c:	2800      	cmp	r0, #0
 800f28e:	db05      	blt.n	800f29c <__hi0bits+0x38>
 800f290:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f294:	f103 0301 	add.w	r3, r3, #1
 800f298:	bf08      	it	eq
 800f29a:	2320      	moveq	r3, #32
 800f29c:	4618      	mov	r0, r3
 800f29e:	4770      	bx	lr
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	e7e4      	b.n	800f26e <__hi0bits+0xa>

0800f2a4 <__lo0bits>:
 800f2a4:	6803      	ldr	r3, [r0, #0]
 800f2a6:	f013 0207 	ands.w	r2, r3, #7
 800f2aa:	4601      	mov	r1, r0
 800f2ac:	d00b      	beq.n	800f2c6 <__lo0bits+0x22>
 800f2ae:	07da      	lsls	r2, r3, #31
 800f2b0:	d423      	bmi.n	800f2fa <__lo0bits+0x56>
 800f2b2:	0798      	lsls	r0, r3, #30
 800f2b4:	bf49      	itett	mi
 800f2b6:	085b      	lsrmi	r3, r3, #1
 800f2b8:	089b      	lsrpl	r3, r3, #2
 800f2ba:	2001      	movmi	r0, #1
 800f2bc:	600b      	strmi	r3, [r1, #0]
 800f2be:	bf5c      	itt	pl
 800f2c0:	600b      	strpl	r3, [r1, #0]
 800f2c2:	2002      	movpl	r0, #2
 800f2c4:	4770      	bx	lr
 800f2c6:	b298      	uxth	r0, r3
 800f2c8:	b9a8      	cbnz	r0, 800f2f6 <__lo0bits+0x52>
 800f2ca:	0c1b      	lsrs	r3, r3, #16
 800f2cc:	2010      	movs	r0, #16
 800f2ce:	b2da      	uxtb	r2, r3
 800f2d0:	b90a      	cbnz	r2, 800f2d6 <__lo0bits+0x32>
 800f2d2:	3008      	adds	r0, #8
 800f2d4:	0a1b      	lsrs	r3, r3, #8
 800f2d6:	071a      	lsls	r2, r3, #28
 800f2d8:	bf04      	itt	eq
 800f2da:	091b      	lsreq	r3, r3, #4
 800f2dc:	3004      	addeq	r0, #4
 800f2de:	079a      	lsls	r2, r3, #30
 800f2e0:	bf04      	itt	eq
 800f2e2:	089b      	lsreq	r3, r3, #2
 800f2e4:	3002      	addeq	r0, #2
 800f2e6:	07da      	lsls	r2, r3, #31
 800f2e8:	d403      	bmi.n	800f2f2 <__lo0bits+0x4e>
 800f2ea:	085b      	lsrs	r3, r3, #1
 800f2ec:	f100 0001 	add.w	r0, r0, #1
 800f2f0:	d005      	beq.n	800f2fe <__lo0bits+0x5a>
 800f2f2:	600b      	str	r3, [r1, #0]
 800f2f4:	4770      	bx	lr
 800f2f6:	4610      	mov	r0, r2
 800f2f8:	e7e9      	b.n	800f2ce <__lo0bits+0x2a>
 800f2fa:	2000      	movs	r0, #0
 800f2fc:	4770      	bx	lr
 800f2fe:	2020      	movs	r0, #32
 800f300:	4770      	bx	lr
	...

0800f304 <__i2b>:
 800f304:	b510      	push	{r4, lr}
 800f306:	460c      	mov	r4, r1
 800f308:	2101      	movs	r1, #1
 800f30a:	f7ff feb9 	bl	800f080 <_Balloc>
 800f30e:	4602      	mov	r2, r0
 800f310:	b928      	cbnz	r0, 800f31e <__i2b+0x1a>
 800f312:	4b05      	ldr	r3, [pc, #20]	; (800f328 <__i2b+0x24>)
 800f314:	4805      	ldr	r0, [pc, #20]	; (800f32c <__i2b+0x28>)
 800f316:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f31a:	f000 fdff 	bl	800ff1c <__assert_func>
 800f31e:	2301      	movs	r3, #1
 800f320:	6144      	str	r4, [r0, #20]
 800f322:	6103      	str	r3, [r0, #16]
 800f324:	bd10      	pop	{r4, pc}
 800f326:	bf00      	nop
 800f328:	08011ef8 	.word	0x08011ef8
 800f32c:	08011f84 	.word	0x08011f84

0800f330 <__multiply>:
 800f330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f334:	4691      	mov	r9, r2
 800f336:	690a      	ldr	r2, [r1, #16]
 800f338:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	bfb8      	it	lt
 800f340:	460b      	movlt	r3, r1
 800f342:	460c      	mov	r4, r1
 800f344:	bfbc      	itt	lt
 800f346:	464c      	movlt	r4, r9
 800f348:	4699      	movlt	r9, r3
 800f34a:	6927      	ldr	r7, [r4, #16]
 800f34c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f350:	68a3      	ldr	r3, [r4, #8]
 800f352:	6861      	ldr	r1, [r4, #4]
 800f354:	eb07 060a 	add.w	r6, r7, sl
 800f358:	42b3      	cmp	r3, r6
 800f35a:	b085      	sub	sp, #20
 800f35c:	bfb8      	it	lt
 800f35e:	3101      	addlt	r1, #1
 800f360:	f7ff fe8e 	bl	800f080 <_Balloc>
 800f364:	b930      	cbnz	r0, 800f374 <__multiply+0x44>
 800f366:	4602      	mov	r2, r0
 800f368:	4b44      	ldr	r3, [pc, #272]	; (800f47c <__multiply+0x14c>)
 800f36a:	4845      	ldr	r0, [pc, #276]	; (800f480 <__multiply+0x150>)
 800f36c:	f240 115d 	movw	r1, #349	; 0x15d
 800f370:	f000 fdd4 	bl	800ff1c <__assert_func>
 800f374:	f100 0514 	add.w	r5, r0, #20
 800f378:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f37c:	462b      	mov	r3, r5
 800f37e:	2200      	movs	r2, #0
 800f380:	4543      	cmp	r3, r8
 800f382:	d321      	bcc.n	800f3c8 <__multiply+0x98>
 800f384:	f104 0314 	add.w	r3, r4, #20
 800f388:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f38c:	f109 0314 	add.w	r3, r9, #20
 800f390:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f394:	9202      	str	r2, [sp, #8]
 800f396:	1b3a      	subs	r2, r7, r4
 800f398:	3a15      	subs	r2, #21
 800f39a:	f022 0203 	bic.w	r2, r2, #3
 800f39e:	3204      	adds	r2, #4
 800f3a0:	f104 0115 	add.w	r1, r4, #21
 800f3a4:	428f      	cmp	r7, r1
 800f3a6:	bf38      	it	cc
 800f3a8:	2204      	movcc	r2, #4
 800f3aa:	9201      	str	r2, [sp, #4]
 800f3ac:	9a02      	ldr	r2, [sp, #8]
 800f3ae:	9303      	str	r3, [sp, #12]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d80c      	bhi.n	800f3ce <__multiply+0x9e>
 800f3b4:	2e00      	cmp	r6, #0
 800f3b6:	dd03      	ble.n	800f3c0 <__multiply+0x90>
 800f3b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d05a      	beq.n	800f476 <__multiply+0x146>
 800f3c0:	6106      	str	r6, [r0, #16]
 800f3c2:	b005      	add	sp, #20
 800f3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c8:	f843 2b04 	str.w	r2, [r3], #4
 800f3cc:	e7d8      	b.n	800f380 <__multiply+0x50>
 800f3ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800f3d2:	f1ba 0f00 	cmp.w	sl, #0
 800f3d6:	d024      	beq.n	800f422 <__multiply+0xf2>
 800f3d8:	f104 0e14 	add.w	lr, r4, #20
 800f3dc:	46a9      	mov	r9, r5
 800f3de:	f04f 0c00 	mov.w	ip, #0
 800f3e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f3e6:	f8d9 1000 	ldr.w	r1, [r9]
 800f3ea:	fa1f fb82 	uxth.w	fp, r2
 800f3ee:	b289      	uxth	r1, r1
 800f3f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800f3f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f3f8:	f8d9 2000 	ldr.w	r2, [r9]
 800f3fc:	4461      	add	r1, ip
 800f3fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f402:	fb0a c20b 	mla	r2, sl, fp, ip
 800f406:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f40a:	b289      	uxth	r1, r1
 800f40c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f410:	4577      	cmp	r7, lr
 800f412:	f849 1b04 	str.w	r1, [r9], #4
 800f416:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f41a:	d8e2      	bhi.n	800f3e2 <__multiply+0xb2>
 800f41c:	9a01      	ldr	r2, [sp, #4]
 800f41e:	f845 c002 	str.w	ip, [r5, r2]
 800f422:	9a03      	ldr	r2, [sp, #12]
 800f424:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f428:	3304      	adds	r3, #4
 800f42a:	f1b9 0f00 	cmp.w	r9, #0
 800f42e:	d020      	beq.n	800f472 <__multiply+0x142>
 800f430:	6829      	ldr	r1, [r5, #0]
 800f432:	f104 0c14 	add.w	ip, r4, #20
 800f436:	46ae      	mov	lr, r5
 800f438:	f04f 0a00 	mov.w	sl, #0
 800f43c:	f8bc b000 	ldrh.w	fp, [ip]
 800f440:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f444:	fb09 220b 	mla	r2, r9, fp, r2
 800f448:	4492      	add	sl, r2
 800f44a:	b289      	uxth	r1, r1
 800f44c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f450:	f84e 1b04 	str.w	r1, [lr], #4
 800f454:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f458:	f8be 1000 	ldrh.w	r1, [lr]
 800f45c:	0c12      	lsrs	r2, r2, #16
 800f45e:	fb09 1102 	mla	r1, r9, r2, r1
 800f462:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f466:	4567      	cmp	r7, ip
 800f468:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f46c:	d8e6      	bhi.n	800f43c <__multiply+0x10c>
 800f46e:	9a01      	ldr	r2, [sp, #4]
 800f470:	50a9      	str	r1, [r5, r2]
 800f472:	3504      	adds	r5, #4
 800f474:	e79a      	b.n	800f3ac <__multiply+0x7c>
 800f476:	3e01      	subs	r6, #1
 800f478:	e79c      	b.n	800f3b4 <__multiply+0x84>
 800f47a:	bf00      	nop
 800f47c:	08011ef8 	.word	0x08011ef8
 800f480:	08011f84 	.word	0x08011f84

0800f484 <__pow5mult>:
 800f484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f488:	4615      	mov	r5, r2
 800f48a:	f012 0203 	ands.w	r2, r2, #3
 800f48e:	4606      	mov	r6, r0
 800f490:	460f      	mov	r7, r1
 800f492:	d007      	beq.n	800f4a4 <__pow5mult+0x20>
 800f494:	4c25      	ldr	r4, [pc, #148]	; (800f52c <__pow5mult+0xa8>)
 800f496:	3a01      	subs	r2, #1
 800f498:	2300      	movs	r3, #0
 800f49a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f49e:	f7ff fe51 	bl	800f144 <__multadd>
 800f4a2:	4607      	mov	r7, r0
 800f4a4:	10ad      	asrs	r5, r5, #2
 800f4a6:	d03d      	beq.n	800f524 <__pow5mult+0xa0>
 800f4a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f4aa:	b97c      	cbnz	r4, 800f4cc <__pow5mult+0x48>
 800f4ac:	2010      	movs	r0, #16
 800f4ae:	f7ff fdcd 	bl	800f04c <malloc>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	6270      	str	r0, [r6, #36]	; 0x24
 800f4b6:	b928      	cbnz	r0, 800f4c4 <__pow5mult+0x40>
 800f4b8:	4b1d      	ldr	r3, [pc, #116]	; (800f530 <__pow5mult+0xac>)
 800f4ba:	481e      	ldr	r0, [pc, #120]	; (800f534 <__pow5mult+0xb0>)
 800f4bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f4c0:	f000 fd2c 	bl	800ff1c <__assert_func>
 800f4c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f4c8:	6004      	str	r4, [r0, #0]
 800f4ca:	60c4      	str	r4, [r0, #12]
 800f4cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f4d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f4d4:	b94c      	cbnz	r4, 800f4ea <__pow5mult+0x66>
 800f4d6:	f240 2171 	movw	r1, #625	; 0x271
 800f4da:	4630      	mov	r0, r6
 800f4dc:	f7ff ff12 	bl	800f304 <__i2b>
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	6003      	str	r3, [r0, #0]
 800f4ea:	f04f 0900 	mov.w	r9, #0
 800f4ee:	07eb      	lsls	r3, r5, #31
 800f4f0:	d50a      	bpl.n	800f508 <__pow5mult+0x84>
 800f4f2:	4639      	mov	r1, r7
 800f4f4:	4622      	mov	r2, r4
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	f7ff ff1a 	bl	800f330 <__multiply>
 800f4fc:	4639      	mov	r1, r7
 800f4fe:	4680      	mov	r8, r0
 800f500:	4630      	mov	r0, r6
 800f502:	f7ff fdfd 	bl	800f100 <_Bfree>
 800f506:	4647      	mov	r7, r8
 800f508:	106d      	asrs	r5, r5, #1
 800f50a:	d00b      	beq.n	800f524 <__pow5mult+0xa0>
 800f50c:	6820      	ldr	r0, [r4, #0]
 800f50e:	b938      	cbnz	r0, 800f520 <__pow5mult+0x9c>
 800f510:	4622      	mov	r2, r4
 800f512:	4621      	mov	r1, r4
 800f514:	4630      	mov	r0, r6
 800f516:	f7ff ff0b 	bl	800f330 <__multiply>
 800f51a:	6020      	str	r0, [r4, #0]
 800f51c:	f8c0 9000 	str.w	r9, [r0]
 800f520:	4604      	mov	r4, r0
 800f522:	e7e4      	b.n	800f4ee <__pow5mult+0x6a>
 800f524:	4638      	mov	r0, r7
 800f526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f52a:	bf00      	nop
 800f52c:	080120d0 	.word	0x080120d0
 800f530:	08011e86 	.word	0x08011e86
 800f534:	08011f84 	.word	0x08011f84

0800f538 <__lshift>:
 800f538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f53c:	460c      	mov	r4, r1
 800f53e:	6849      	ldr	r1, [r1, #4]
 800f540:	6923      	ldr	r3, [r4, #16]
 800f542:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f546:	68a3      	ldr	r3, [r4, #8]
 800f548:	4607      	mov	r7, r0
 800f54a:	4691      	mov	r9, r2
 800f54c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f550:	f108 0601 	add.w	r6, r8, #1
 800f554:	42b3      	cmp	r3, r6
 800f556:	db0b      	blt.n	800f570 <__lshift+0x38>
 800f558:	4638      	mov	r0, r7
 800f55a:	f7ff fd91 	bl	800f080 <_Balloc>
 800f55e:	4605      	mov	r5, r0
 800f560:	b948      	cbnz	r0, 800f576 <__lshift+0x3e>
 800f562:	4602      	mov	r2, r0
 800f564:	4b2a      	ldr	r3, [pc, #168]	; (800f610 <__lshift+0xd8>)
 800f566:	482b      	ldr	r0, [pc, #172]	; (800f614 <__lshift+0xdc>)
 800f568:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f56c:	f000 fcd6 	bl	800ff1c <__assert_func>
 800f570:	3101      	adds	r1, #1
 800f572:	005b      	lsls	r3, r3, #1
 800f574:	e7ee      	b.n	800f554 <__lshift+0x1c>
 800f576:	2300      	movs	r3, #0
 800f578:	f100 0114 	add.w	r1, r0, #20
 800f57c:	f100 0210 	add.w	r2, r0, #16
 800f580:	4618      	mov	r0, r3
 800f582:	4553      	cmp	r3, sl
 800f584:	db37      	blt.n	800f5f6 <__lshift+0xbe>
 800f586:	6920      	ldr	r0, [r4, #16]
 800f588:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f58c:	f104 0314 	add.w	r3, r4, #20
 800f590:	f019 091f 	ands.w	r9, r9, #31
 800f594:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f598:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f59c:	d02f      	beq.n	800f5fe <__lshift+0xc6>
 800f59e:	f1c9 0e20 	rsb	lr, r9, #32
 800f5a2:	468a      	mov	sl, r1
 800f5a4:	f04f 0c00 	mov.w	ip, #0
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	fa02 f209 	lsl.w	r2, r2, r9
 800f5ae:	ea42 020c 	orr.w	r2, r2, ip
 800f5b2:	f84a 2b04 	str.w	r2, [sl], #4
 800f5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ba:	4298      	cmp	r0, r3
 800f5bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f5c0:	d8f2      	bhi.n	800f5a8 <__lshift+0x70>
 800f5c2:	1b03      	subs	r3, r0, r4
 800f5c4:	3b15      	subs	r3, #21
 800f5c6:	f023 0303 	bic.w	r3, r3, #3
 800f5ca:	3304      	adds	r3, #4
 800f5cc:	f104 0215 	add.w	r2, r4, #21
 800f5d0:	4290      	cmp	r0, r2
 800f5d2:	bf38      	it	cc
 800f5d4:	2304      	movcc	r3, #4
 800f5d6:	f841 c003 	str.w	ip, [r1, r3]
 800f5da:	f1bc 0f00 	cmp.w	ip, #0
 800f5de:	d001      	beq.n	800f5e4 <__lshift+0xac>
 800f5e0:	f108 0602 	add.w	r6, r8, #2
 800f5e4:	3e01      	subs	r6, #1
 800f5e6:	4638      	mov	r0, r7
 800f5e8:	612e      	str	r6, [r5, #16]
 800f5ea:	4621      	mov	r1, r4
 800f5ec:	f7ff fd88 	bl	800f100 <_Bfree>
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	e7c1      	b.n	800f582 <__lshift+0x4a>
 800f5fe:	3904      	subs	r1, #4
 800f600:	f853 2b04 	ldr.w	r2, [r3], #4
 800f604:	f841 2f04 	str.w	r2, [r1, #4]!
 800f608:	4298      	cmp	r0, r3
 800f60a:	d8f9      	bhi.n	800f600 <__lshift+0xc8>
 800f60c:	e7ea      	b.n	800f5e4 <__lshift+0xac>
 800f60e:	bf00      	nop
 800f610:	08011ef8 	.word	0x08011ef8
 800f614:	08011f84 	.word	0x08011f84

0800f618 <__mcmp>:
 800f618:	b530      	push	{r4, r5, lr}
 800f61a:	6902      	ldr	r2, [r0, #16]
 800f61c:	690c      	ldr	r4, [r1, #16]
 800f61e:	1b12      	subs	r2, r2, r4
 800f620:	d10e      	bne.n	800f640 <__mcmp+0x28>
 800f622:	f100 0314 	add.w	r3, r0, #20
 800f626:	3114      	adds	r1, #20
 800f628:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f62c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f630:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f634:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f638:	42a5      	cmp	r5, r4
 800f63a:	d003      	beq.n	800f644 <__mcmp+0x2c>
 800f63c:	d305      	bcc.n	800f64a <__mcmp+0x32>
 800f63e:	2201      	movs	r2, #1
 800f640:	4610      	mov	r0, r2
 800f642:	bd30      	pop	{r4, r5, pc}
 800f644:	4283      	cmp	r3, r0
 800f646:	d3f3      	bcc.n	800f630 <__mcmp+0x18>
 800f648:	e7fa      	b.n	800f640 <__mcmp+0x28>
 800f64a:	f04f 32ff 	mov.w	r2, #4294967295
 800f64e:	e7f7      	b.n	800f640 <__mcmp+0x28>

0800f650 <__mdiff>:
 800f650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f654:	460c      	mov	r4, r1
 800f656:	4606      	mov	r6, r0
 800f658:	4611      	mov	r1, r2
 800f65a:	4620      	mov	r0, r4
 800f65c:	4690      	mov	r8, r2
 800f65e:	f7ff ffdb 	bl	800f618 <__mcmp>
 800f662:	1e05      	subs	r5, r0, #0
 800f664:	d110      	bne.n	800f688 <__mdiff+0x38>
 800f666:	4629      	mov	r1, r5
 800f668:	4630      	mov	r0, r6
 800f66a:	f7ff fd09 	bl	800f080 <_Balloc>
 800f66e:	b930      	cbnz	r0, 800f67e <__mdiff+0x2e>
 800f670:	4b3a      	ldr	r3, [pc, #232]	; (800f75c <__mdiff+0x10c>)
 800f672:	4602      	mov	r2, r0
 800f674:	f240 2132 	movw	r1, #562	; 0x232
 800f678:	4839      	ldr	r0, [pc, #228]	; (800f760 <__mdiff+0x110>)
 800f67a:	f000 fc4f 	bl	800ff1c <__assert_func>
 800f67e:	2301      	movs	r3, #1
 800f680:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f688:	bfa4      	itt	ge
 800f68a:	4643      	movge	r3, r8
 800f68c:	46a0      	movge	r8, r4
 800f68e:	4630      	mov	r0, r6
 800f690:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f694:	bfa6      	itte	ge
 800f696:	461c      	movge	r4, r3
 800f698:	2500      	movge	r5, #0
 800f69a:	2501      	movlt	r5, #1
 800f69c:	f7ff fcf0 	bl	800f080 <_Balloc>
 800f6a0:	b920      	cbnz	r0, 800f6ac <__mdiff+0x5c>
 800f6a2:	4b2e      	ldr	r3, [pc, #184]	; (800f75c <__mdiff+0x10c>)
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f6aa:	e7e5      	b.n	800f678 <__mdiff+0x28>
 800f6ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f6b0:	6926      	ldr	r6, [r4, #16]
 800f6b2:	60c5      	str	r5, [r0, #12]
 800f6b4:	f104 0914 	add.w	r9, r4, #20
 800f6b8:	f108 0514 	add.w	r5, r8, #20
 800f6bc:	f100 0e14 	add.w	lr, r0, #20
 800f6c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f6c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f6c8:	f108 0210 	add.w	r2, r8, #16
 800f6cc:	46f2      	mov	sl, lr
 800f6ce:	2100      	movs	r1, #0
 800f6d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f6d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f6d8:	fa1f f883 	uxth.w	r8, r3
 800f6dc:	fa11 f18b 	uxtah	r1, r1, fp
 800f6e0:	0c1b      	lsrs	r3, r3, #16
 800f6e2:	eba1 0808 	sub.w	r8, r1, r8
 800f6e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f6ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f6ee:	fa1f f888 	uxth.w	r8, r8
 800f6f2:	1419      	asrs	r1, r3, #16
 800f6f4:	454e      	cmp	r6, r9
 800f6f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f6fa:	f84a 3b04 	str.w	r3, [sl], #4
 800f6fe:	d8e7      	bhi.n	800f6d0 <__mdiff+0x80>
 800f700:	1b33      	subs	r3, r6, r4
 800f702:	3b15      	subs	r3, #21
 800f704:	f023 0303 	bic.w	r3, r3, #3
 800f708:	3304      	adds	r3, #4
 800f70a:	3415      	adds	r4, #21
 800f70c:	42a6      	cmp	r6, r4
 800f70e:	bf38      	it	cc
 800f710:	2304      	movcc	r3, #4
 800f712:	441d      	add	r5, r3
 800f714:	4473      	add	r3, lr
 800f716:	469e      	mov	lr, r3
 800f718:	462e      	mov	r6, r5
 800f71a:	4566      	cmp	r6, ip
 800f71c:	d30e      	bcc.n	800f73c <__mdiff+0xec>
 800f71e:	f10c 0203 	add.w	r2, ip, #3
 800f722:	1b52      	subs	r2, r2, r5
 800f724:	f022 0203 	bic.w	r2, r2, #3
 800f728:	3d03      	subs	r5, #3
 800f72a:	45ac      	cmp	ip, r5
 800f72c:	bf38      	it	cc
 800f72e:	2200      	movcc	r2, #0
 800f730:	441a      	add	r2, r3
 800f732:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f736:	b17b      	cbz	r3, 800f758 <__mdiff+0x108>
 800f738:	6107      	str	r7, [r0, #16]
 800f73a:	e7a3      	b.n	800f684 <__mdiff+0x34>
 800f73c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f740:	fa11 f288 	uxtah	r2, r1, r8
 800f744:	1414      	asrs	r4, r2, #16
 800f746:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f74a:	b292      	uxth	r2, r2
 800f74c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f750:	f84e 2b04 	str.w	r2, [lr], #4
 800f754:	1421      	asrs	r1, r4, #16
 800f756:	e7e0      	b.n	800f71a <__mdiff+0xca>
 800f758:	3f01      	subs	r7, #1
 800f75a:	e7ea      	b.n	800f732 <__mdiff+0xe2>
 800f75c:	08011ef8 	.word	0x08011ef8
 800f760:	08011f84 	.word	0x08011f84

0800f764 <__ulp>:
 800f764:	b082      	sub	sp, #8
 800f766:	ed8d 0b00 	vstr	d0, [sp]
 800f76a:	9b01      	ldr	r3, [sp, #4]
 800f76c:	4912      	ldr	r1, [pc, #72]	; (800f7b8 <__ulp+0x54>)
 800f76e:	4019      	ands	r1, r3
 800f770:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f774:	2900      	cmp	r1, #0
 800f776:	dd05      	ble.n	800f784 <__ulp+0x20>
 800f778:	2200      	movs	r2, #0
 800f77a:	460b      	mov	r3, r1
 800f77c:	ec43 2b10 	vmov	d0, r2, r3
 800f780:	b002      	add	sp, #8
 800f782:	4770      	bx	lr
 800f784:	4249      	negs	r1, r1
 800f786:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f78a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f78e:	f04f 0200 	mov.w	r2, #0
 800f792:	f04f 0300 	mov.w	r3, #0
 800f796:	da04      	bge.n	800f7a2 <__ulp+0x3e>
 800f798:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f79c:	fa41 f300 	asr.w	r3, r1, r0
 800f7a0:	e7ec      	b.n	800f77c <__ulp+0x18>
 800f7a2:	f1a0 0114 	sub.w	r1, r0, #20
 800f7a6:	291e      	cmp	r1, #30
 800f7a8:	bfda      	itte	le
 800f7aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f7ae:	fa20 f101 	lsrle.w	r1, r0, r1
 800f7b2:	2101      	movgt	r1, #1
 800f7b4:	460a      	mov	r2, r1
 800f7b6:	e7e1      	b.n	800f77c <__ulp+0x18>
 800f7b8:	7ff00000 	.word	0x7ff00000

0800f7bc <__b2d>:
 800f7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7be:	6905      	ldr	r5, [r0, #16]
 800f7c0:	f100 0714 	add.w	r7, r0, #20
 800f7c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f7c8:	1f2e      	subs	r6, r5, #4
 800f7ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	f7ff fd48 	bl	800f264 <__hi0bits>
 800f7d4:	f1c0 0320 	rsb	r3, r0, #32
 800f7d8:	280a      	cmp	r0, #10
 800f7da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f858 <__b2d+0x9c>
 800f7de:	600b      	str	r3, [r1, #0]
 800f7e0:	dc14      	bgt.n	800f80c <__b2d+0x50>
 800f7e2:	f1c0 0e0b 	rsb	lr, r0, #11
 800f7e6:	fa24 f10e 	lsr.w	r1, r4, lr
 800f7ea:	42b7      	cmp	r7, r6
 800f7ec:	ea41 030c 	orr.w	r3, r1, ip
 800f7f0:	bf34      	ite	cc
 800f7f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f7f6:	2100      	movcs	r1, #0
 800f7f8:	3015      	adds	r0, #21
 800f7fa:	fa04 f000 	lsl.w	r0, r4, r0
 800f7fe:	fa21 f10e 	lsr.w	r1, r1, lr
 800f802:	ea40 0201 	orr.w	r2, r0, r1
 800f806:	ec43 2b10 	vmov	d0, r2, r3
 800f80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f80c:	42b7      	cmp	r7, r6
 800f80e:	bf3a      	itte	cc
 800f810:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f814:	f1a5 0608 	subcc.w	r6, r5, #8
 800f818:	2100      	movcs	r1, #0
 800f81a:	380b      	subs	r0, #11
 800f81c:	d017      	beq.n	800f84e <__b2d+0x92>
 800f81e:	f1c0 0c20 	rsb	ip, r0, #32
 800f822:	fa04 f500 	lsl.w	r5, r4, r0
 800f826:	42be      	cmp	r6, r7
 800f828:	fa21 f40c 	lsr.w	r4, r1, ip
 800f82c:	ea45 0504 	orr.w	r5, r5, r4
 800f830:	bf8c      	ite	hi
 800f832:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f836:	2400      	movls	r4, #0
 800f838:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f83c:	fa01 f000 	lsl.w	r0, r1, r0
 800f840:	fa24 f40c 	lsr.w	r4, r4, ip
 800f844:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f848:	ea40 0204 	orr.w	r2, r0, r4
 800f84c:	e7db      	b.n	800f806 <__b2d+0x4a>
 800f84e:	ea44 030c 	orr.w	r3, r4, ip
 800f852:	460a      	mov	r2, r1
 800f854:	e7d7      	b.n	800f806 <__b2d+0x4a>
 800f856:	bf00      	nop
 800f858:	3ff00000 	.word	0x3ff00000

0800f85c <__d2b>:
 800f85c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f860:	4689      	mov	r9, r1
 800f862:	2101      	movs	r1, #1
 800f864:	ec57 6b10 	vmov	r6, r7, d0
 800f868:	4690      	mov	r8, r2
 800f86a:	f7ff fc09 	bl	800f080 <_Balloc>
 800f86e:	4604      	mov	r4, r0
 800f870:	b930      	cbnz	r0, 800f880 <__d2b+0x24>
 800f872:	4602      	mov	r2, r0
 800f874:	4b25      	ldr	r3, [pc, #148]	; (800f90c <__d2b+0xb0>)
 800f876:	4826      	ldr	r0, [pc, #152]	; (800f910 <__d2b+0xb4>)
 800f878:	f240 310a 	movw	r1, #778	; 0x30a
 800f87c:	f000 fb4e 	bl	800ff1c <__assert_func>
 800f880:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f884:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f888:	bb35      	cbnz	r5, 800f8d8 <__d2b+0x7c>
 800f88a:	2e00      	cmp	r6, #0
 800f88c:	9301      	str	r3, [sp, #4]
 800f88e:	d028      	beq.n	800f8e2 <__d2b+0x86>
 800f890:	4668      	mov	r0, sp
 800f892:	9600      	str	r6, [sp, #0]
 800f894:	f7ff fd06 	bl	800f2a4 <__lo0bits>
 800f898:	9900      	ldr	r1, [sp, #0]
 800f89a:	b300      	cbz	r0, 800f8de <__d2b+0x82>
 800f89c:	9a01      	ldr	r2, [sp, #4]
 800f89e:	f1c0 0320 	rsb	r3, r0, #32
 800f8a2:	fa02 f303 	lsl.w	r3, r2, r3
 800f8a6:	430b      	orrs	r3, r1
 800f8a8:	40c2      	lsrs	r2, r0
 800f8aa:	6163      	str	r3, [r4, #20]
 800f8ac:	9201      	str	r2, [sp, #4]
 800f8ae:	9b01      	ldr	r3, [sp, #4]
 800f8b0:	61a3      	str	r3, [r4, #24]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	bf14      	ite	ne
 800f8b6:	2202      	movne	r2, #2
 800f8b8:	2201      	moveq	r2, #1
 800f8ba:	6122      	str	r2, [r4, #16]
 800f8bc:	b1d5      	cbz	r5, 800f8f4 <__d2b+0x98>
 800f8be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f8c2:	4405      	add	r5, r0
 800f8c4:	f8c9 5000 	str.w	r5, [r9]
 800f8c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f8cc:	f8c8 0000 	str.w	r0, [r8]
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	b003      	add	sp, #12
 800f8d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f8dc:	e7d5      	b.n	800f88a <__d2b+0x2e>
 800f8de:	6161      	str	r1, [r4, #20]
 800f8e0:	e7e5      	b.n	800f8ae <__d2b+0x52>
 800f8e2:	a801      	add	r0, sp, #4
 800f8e4:	f7ff fcde 	bl	800f2a4 <__lo0bits>
 800f8e8:	9b01      	ldr	r3, [sp, #4]
 800f8ea:	6163      	str	r3, [r4, #20]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	6122      	str	r2, [r4, #16]
 800f8f0:	3020      	adds	r0, #32
 800f8f2:	e7e3      	b.n	800f8bc <__d2b+0x60>
 800f8f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f8f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f8fc:	f8c9 0000 	str.w	r0, [r9]
 800f900:	6918      	ldr	r0, [r3, #16]
 800f902:	f7ff fcaf 	bl	800f264 <__hi0bits>
 800f906:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f90a:	e7df      	b.n	800f8cc <__d2b+0x70>
 800f90c:	08011ef8 	.word	0x08011ef8
 800f910:	08011f84 	.word	0x08011f84

0800f914 <__ratio>:
 800f914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f918:	4688      	mov	r8, r1
 800f91a:	4669      	mov	r1, sp
 800f91c:	4681      	mov	r9, r0
 800f91e:	f7ff ff4d 	bl	800f7bc <__b2d>
 800f922:	a901      	add	r1, sp, #4
 800f924:	4640      	mov	r0, r8
 800f926:	ec55 4b10 	vmov	r4, r5, d0
 800f92a:	f7ff ff47 	bl	800f7bc <__b2d>
 800f92e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f932:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f936:	eba3 0c02 	sub.w	ip, r3, r2
 800f93a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f93e:	1a9b      	subs	r3, r3, r2
 800f940:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f944:	ec51 0b10 	vmov	r0, r1, d0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	bfd6      	itet	le
 800f94c:	460a      	movle	r2, r1
 800f94e:	462a      	movgt	r2, r5
 800f950:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f954:	468b      	mov	fp, r1
 800f956:	462f      	mov	r7, r5
 800f958:	bfd4      	ite	le
 800f95a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f95e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f962:	4620      	mov	r0, r4
 800f964:	ee10 2a10 	vmov	r2, s0
 800f968:	465b      	mov	r3, fp
 800f96a:	4639      	mov	r1, r7
 800f96c:	f7f0 ff76 	bl	800085c <__aeabi_ddiv>
 800f970:	ec41 0b10 	vmov	d0, r0, r1
 800f974:	b003      	add	sp, #12
 800f976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f97a <__copybits>:
 800f97a:	3901      	subs	r1, #1
 800f97c:	b570      	push	{r4, r5, r6, lr}
 800f97e:	1149      	asrs	r1, r1, #5
 800f980:	6914      	ldr	r4, [r2, #16]
 800f982:	3101      	adds	r1, #1
 800f984:	f102 0314 	add.w	r3, r2, #20
 800f988:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f98c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f990:	1f05      	subs	r5, r0, #4
 800f992:	42a3      	cmp	r3, r4
 800f994:	d30c      	bcc.n	800f9b0 <__copybits+0x36>
 800f996:	1aa3      	subs	r3, r4, r2
 800f998:	3b11      	subs	r3, #17
 800f99a:	f023 0303 	bic.w	r3, r3, #3
 800f99e:	3211      	adds	r2, #17
 800f9a0:	42a2      	cmp	r2, r4
 800f9a2:	bf88      	it	hi
 800f9a4:	2300      	movhi	r3, #0
 800f9a6:	4418      	add	r0, r3
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	4288      	cmp	r0, r1
 800f9ac:	d305      	bcc.n	800f9ba <__copybits+0x40>
 800f9ae:	bd70      	pop	{r4, r5, r6, pc}
 800f9b0:	f853 6b04 	ldr.w	r6, [r3], #4
 800f9b4:	f845 6f04 	str.w	r6, [r5, #4]!
 800f9b8:	e7eb      	b.n	800f992 <__copybits+0x18>
 800f9ba:	f840 3b04 	str.w	r3, [r0], #4
 800f9be:	e7f4      	b.n	800f9aa <__copybits+0x30>

0800f9c0 <__any_on>:
 800f9c0:	f100 0214 	add.w	r2, r0, #20
 800f9c4:	6900      	ldr	r0, [r0, #16]
 800f9c6:	114b      	asrs	r3, r1, #5
 800f9c8:	4298      	cmp	r0, r3
 800f9ca:	b510      	push	{r4, lr}
 800f9cc:	db11      	blt.n	800f9f2 <__any_on+0x32>
 800f9ce:	dd0a      	ble.n	800f9e6 <__any_on+0x26>
 800f9d0:	f011 011f 	ands.w	r1, r1, #31
 800f9d4:	d007      	beq.n	800f9e6 <__any_on+0x26>
 800f9d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f9da:	fa24 f001 	lsr.w	r0, r4, r1
 800f9de:	fa00 f101 	lsl.w	r1, r0, r1
 800f9e2:	428c      	cmp	r4, r1
 800f9e4:	d10b      	bne.n	800f9fe <__any_on+0x3e>
 800f9e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d803      	bhi.n	800f9f6 <__any_on+0x36>
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	bd10      	pop	{r4, pc}
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	e7f7      	b.n	800f9e6 <__any_on+0x26>
 800f9f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9fa:	2900      	cmp	r1, #0
 800f9fc:	d0f5      	beq.n	800f9ea <__any_on+0x2a>
 800f9fe:	2001      	movs	r0, #1
 800fa00:	e7f6      	b.n	800f9f0 <__any_on+0x30>

0800fa02 <_calloc_r>:
 800fa02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa04:	fba1 2402 	umull	r2, r4, r1, r2
 800fa08:	b94c      	cbnz	r4, 800fa1e <_calloc_r+0x1c>
 800fa0a:	4611      	mov	r1, r2
 800fa0c:	9201      	str	r2, [sp, #4]
 800fa0e:	f000 f87b 	bl	800fb08 <_malloc_r>
 800fa12:	9a01      	ldr	r2, [sp, #4]
 800fa14:	4605      	mov	r5, r0
 800fa16:	b930      	cbnz	r0, 800fa26 <_calloc_r+0x24>
 800fa18:	4628      	mov	r0, r5
 800fa1a:	b003      	add	sp, #12
 800fa1c:	bd30      	pop	{r4, r5, pc}
 800fa1e:	220c      	movs	r2, #12
 800fa20:	6002      	str	r2, [r0, #0]
 800fa22:	2500      	movs	r5, #0
 800fa24:	e7f8      	b.n	800fa18 <_calloc_r+0x16>
 800fa26:	4621      	mov	r1, r4
 800fa28:	f7fc fb88 	bl	800c13c <memset>
 800fa2c:	e7f4      	b.n	800fa18 <_calloc_r+0x16>
	...

0800fa30 <_free_r>:
 800fa30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa32:	2900      	cmp	r1, #0
 800fa34:	d044      	beq.n	800fac0 <_free_r+0x90>
 800fa36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa3a:	9001      	str	r0, [sp, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	f1a1 0404 	sub.w	r4, r1, #4
 800fa42:	bfb8      	it	lt
 800fa44:	18e4      	addlt	r4, r4, r3
 800fa46:	f000 fab3 	bl	800ffb0 <__malloc_lock>
 800fa4a:	4a1e      	ldr	r2, [pc, #120]	; (800fac4 <_free_r+0x94>)
 800fa4c:	9801      	ldr	r0, [sp, #4]
 800fa4e:	6813      	ldr	r3, [r2, #0]
 800fa50:	b933      	cbnz	r3, 800fa60 <_free_r+0x30>
 800fa52:	6063      	str	r3, [r4, #4]
 800fa54:	6014      	str	r4, [r2, #0]
 800fa56:	b003      	add	sp, #12
 800fa58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa5c:	f000 baae 	b.w	800ffbc <__malloc_unlock>
 800fa60:	42a3      	cmp	r3, r4
 800fa62:	d908      	bls.n	800fa76 <_free_r+0x46>
 800fa64:	6825      	ldr	r5, [r4, #0]
 800fa66:	1961      	adds	r1, r4, r5
 800fa68:	428b      	cmp	r3, r1
 800fa6a:	bf01      	itttt	eq
 800fa6c:	6819      	ldreq	r1, [r3, #0]
 800fa6e:	685b      	ldreq	r3, [r3, #4]
 800fa70:	1949      	addeq	r1, r1, r5
 800fa72:	6021      	streq	r1, [r4, #0]
 800fa74:	e7ed      	b.n	800fa52 <_free_r+0x22>
 800fa76:	461a      	mov	r2, r3
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	b10b      	cbz	r3, 800fa80 <_free_r+0x50>
 800fa7c:	42a3      	cmp	r3, r4
 800fa7e:	d9fa      	bls.n	800fa76 <_free_r+0x46>
 800fa80:	6811      	ldr	r1, [r2, #0]
 800fa82:	1855      	adds	r5, r2, r1
 800fa84:	42a5      	cmp	r5, r4
 800fa86:	d10b      	bne.n	800faa0 <_free_r+0x70>
 800fa88:	6824      	ldr	r4, [r4, #0]
 800fa8a:	4421      	add	r1, r4
 800fa8c:	1854      	adds	r4, r2, r1
 800fa8e:	42a3      	cmp	r3, r4
 800fa90:	6011      	str	r1, [r2, #0]
 800fa92:	d1e0      	bne.n	800fa56 <_free_r+0x26>
 800fa94:	681c      	ldr	r4, [r3, #0]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	6053      	str	r3, [r2, #4]
 800fa9a:	4421      	add	r1, r4
 800fa9c:	6011      	str	r1, [r2, #0]
 800fa9e:	e7da      	b.n	800fa56 <_free_r+0x26>
 800faa0:	d902      	bls.n	800faa8 <_free_r+0x78>
 800faa2:	230c      	movs	r3, #12
 800faa4:	6003      	str	r3, [r0, #0]
 800faa6:	e7d6      	b.n	800fa56 <_free_r+0x26>
 800faa8:	6825      	ldr	r5, [r4, #0]
 800faaa:	1961      	adds	r1, r4, r5
 800faac:	428b      	cmp	r3, r1
 800faae:	bf04      	itt	eq
 800fab0:	6819      	ldreq	r1, [r3, #0]
 800fab2:	685b      	ldreq	r3, [r3, #4]
 800fab4:	6063      	str	r3, [r4, #4]
 800fab6:	bf04      	itt	eq
 800fab8:	1949      	addeq	r1, r1, r5
 800faba:	6021      	streq	r1, [r4, #0]
 800fabc:	6054      	str	r4, [r2, #4]
 800fabe:	e7ca      	b.n	800fa56 <_free_r+0x26>
 800fac0:	b003      	add	sp, #12
 800fac2:	bd30      	pop	{r4, r5, pc}
 800fac4:	20001270 	.word	0x20001270

0800fac8 <sbrk_aligned>:
 800fac8:	b570      	push	{r4, r5, r6, lr}
 800faca:	4e0e      	ldr	r6, [pc, #56]	; (800fb04 <sbrk_aligned+0x3c>)
 800facc:	460c      	mov	r4, r1
 800face:	6831      	ldr	r1, [r6, #0]
 800fad0:	4605      	mov	r5, r0
 800fad2:	b911      	cbnz	r1, 800fada <sbrk_aligned+0x12>
 800fad4:	f000 f9f0 	bl	800feb8 <_sbrk_r>
 800fad8:	6030      	str	r0, [r6, #0]
 800fada:	4621      	mov	r1, r4
 800fadc:	4628      	mov	r0, r5
 800fade:	f000 f9eb 	bl	800feb8 <_sbrk_r>
 800fae2:	1c43      	adds	r3, r0, #1
 800fae4:	d00a      	beq.n	800fafc <sbrk_aligned+0x34>
 800fae6:	1cc4      	adds	r4, r0, #3
 800fae8:	f024 0403 	bic.w	r4, r4, #3
 800faec:	42a0      	cmp	r0, r4
 800faee:	d007      	beq.n	800fb00 <sbrk_aligned+0x38>
 800faf0:	1a21      	subs	r1, r4, r0
 800faf2:	4628      	mov	r0, r5
 800faf4:	f000 f9e0 	bl	800feb8 <_sbrk_r>
 800faf8:	3001      	adds	r0, #1
 800fafa:	d101      	bne.n	800fb00 <sbrk_aligned+0x38>
 800fafc:	f04f 34ff 	mov.w	r4, #4294967295
 800fb00:	4620      	mov	r0, r4
 800fb02:	bd70      	pop	{r4, r5, r6, pc}
 800fb04:	20001274 	.word	0x20001274

0800fb08 <_malloc_r>:
 800fb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb0c:	1ccd      	adds	r5, r1, #3
 800fb0e:	f025 0503 	bic.w	r5, r5, #3
 800fb12:	3508      	adds	r5, #8
 800fb14:	2d0c      	cmp	r5, #12
 800fb16:	bf38      	it	cc
 800fb18:	250c      	movcc	r5, #12
 800fb1a:	2d00      	cmp	r5, #0
 800fb1c:	4607      	mov	r7, r0
 800fb1e:	db01      	blt.n	800fb24 <_malloc_r+0x1c>
 800fb20:	42a9      	cmp	r1, r5
 800fb22:	d905      	bls.n	800fb30 <_malloc_r+0x28>
 800fb24:	230c      	movs	r3, #12
 800fb26:	603b      	str	r3, [r7, #0]
 800fb28:	2600      	movs	r6, #0
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb30:	4e2e      	ldr	r6, [pc, #184]	; (800fbec <_malloc_r+0xe4>)
 800fb32:	f000 fa3d 	bl	800ffb0 <__malloc_lock>
 800fb36:	6833      	ldr	r3, [r6, #0]
 800fb38:	461c      	mov	r4, r3
 800fb3a:	bb34      	cbnz	r4, 800fb8a <_malloc_r+0x82>
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	4638      	mov	r0, r7
 800fb40:	f7ff ffc2 	bl	800fac8 <sbrk_aligned>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	4604      	mov	r4, r0
 800fb48:	d14d      	bne.n	800fbe6 <_malloc_r+0xde>
 800fb4a:	6834      	ldr	r4, [r6, #0]
 800fb4c:	4626      	mov	r6, r4
 800fb4e:	2e00      	cmp	r6, #0
 800fb50:	d140      	bne.n	800fbd4 <_malloc_r+0xcc>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	4631      	mov	r1, r6
 800fb56:	4638      	mov	r0, r7
 800fb58:	eb04 0803 	add.w	r8, r4, r3
 800fb5c:	f000 f9ac 	bl	800feb8 <_sbrk_r>
 800fb60:	4580      	cmp	r8, r0
 800fb62:	d13a      	bne.n	800fbda <_malloc_r+0xd2>
 800fb64:	6821      	ldr	r1, [r4, #0]
 800fb66:	3503      	adds	r5, #3
 800fb68:	1a6d      	subs	r5, r5, r1
 800fb6a:	f025 0503 	bic.w	r5, r5, #3
 800fb6e:	3508      	adds	r5, #8
 800fb70:	2d0c      	cmp	r5, #12
 800fb72:	bf38      	it	cc
 800fb74:	250c      	movcc	r5, #12
 800fb76:	4629      	mov	r1, r5
 800fb78:	4638      	mov	r0, r7
 800fb7a:	f7ff ffa5 	bl	800fac8 <sbrk_aligned>
 800fb7e:	3001      	adds	r0, #1
 800fb80:	d02b      	beq.n	800fbda <_malloc_r+0xd2>
 800fb82:	6823      	ldr	r3, [r4, #0]
 800fb84:	442b      	add	r3, r5
 800fb86:	6023      	str	r3, [r4, #0]
 800fb88:	e00e      	b.n	800fba8 <_malloc_r+0xa0>
 800fb8a:	6822      	ldr	r2, [r4, #0]
 800fb8c:	1b52      	subs	r2, r2, r5
 800fb8e:	d41e      	bmi.n	800fbce <_malloc_r+0xc6>
 800fb90:	2a0b      	cmp	r2, #11
 800fb92:	d916      	bls.n	800fbc2 <_malloc_r+0xba>
 800fb94:	1961      	adds	r1, r4, r5
 800fb96:	42a3      	cmp	r3, r4
 800fb98:	6025      	str	r5, [r4, #0]
 800fb9a:	bf18      	it	ne
 800fb9c:	6059      	strne	r1, [r3, #4]
 800fb9e:	6863      	ldr	r3, [r4, #4]
 800fba0:	bf08      	it	eq
 800fba2:	6031      	streq	r1, [r6, #0]
 800fba4:	5162      	str	r2, [r4, r5]
 800fba6:	604b      	str	r3, [r1, #4]
 800fba8:	4638      	mov	r0, r7
 800fbaa:	f104 060b 	add.w	r6, r4, #11
 800fbae:	f000 fa05 	bl	800ffbc <__malloc_unlock>
 800fbb2:	f026 0607 	bic.w	r6, r6, #7
 800fbb6:	1d23      	adds	r3, r4, #4
 800fbb8:	1af2      	subs	r2, r6, r3
 800fbba:	d0b6      	beq.n	800fb2a <_malloc_r+0x22>
 800fbbc:	1b9b      	subs	r3, r3, r6
 800fbbe:	50a3      	str	r3, [r4, r2]
 800fbc0:	e7b3      	b.n	800fb2a <_malloc_r+0x22>
 800fbc2:	6862      	ldr	r2, [r4, #4]
 800fbc4:	42a3      	cmp	r3, r4
 800fbc6:	bf0c      	ite	eq
 800fbc8:	6032      	streq	r2, [r6, #0]
 800fbca:	605a      	strne	r2, [r3, #4]
 800fbcc:	e7ec      	b.n	800fba8 <_malloc_r+0xa0>
 800fbce:	4623      	mov	r3, r4
 800fbd0:	6864      	ldr	r4, [r4, #4]
 800fbd2:	e7b2      	b.n	800fb3a <_malloc_r+0x32>
 800fbd4:	4634      	mov	r4, r6
 800fbd6:	6876      	ldr	r6, [r6, #4]
 800fbd8:	e7b9      	b.n	800fb4e <_malloc_r+0x46>
 800fbda:	230c      	movs	r3, #12
 800fbdc:	603b      	str	r3, [r7, #0]
 800fbde:	4638      	mov	r0, r7
 800fbe0:	f000 f9ec 	bl	800ffbc <__malloc_unlock>
 800fbe4:	e7a1      	b.n	800fb2a <_malloc_r+0x22>
 800fbe6:	6025      	str	r5, [r4, #0]
 800fbe8:	e7de      	b.n	800fba8 <_malloc_r+0xa0>
 800fbea:	bf00      	nop
 800fbec:	20001270 	.word	0x20001270

0800fbf0 <__ssputs_r>:
 800fbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf4:	688e      	ldr	r6, [r1, #8]
 800fbf6:	429e      	cmp	r6, r3
 800fbf8:	4682      	mov	sl, r0
 800fbfa:	460c      	mov	r4, r1
 800fbfc:	4690      	mov	r8, r2
 800fbfe:	461f      	mov	r7, r3
 800fc00:	d838      	bhi.n	800fc74 <__ssputs_r+0x84>
 800fc02:	898a      	ldrh	r2, [r1, #12]
 800fc04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc08:	d032      	beq.n	800fc70 <__ssputs_r+0x80>
 800fc0a:	6825      	ldr	r5, [r4, #0]
 800fc0c:	6909      	ldr	r1, [r1, #16]
 800fc0e:	eba5 0901 	sub.w	r9, r5, r1
 800fc12:	6965      	ldr	r5, [r4, #20]
 800fc14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	444b      	add	r3, r9
 800fc20:	106d      	asrs	r5, r5, #1
 800fc22:	429d      	cmp	r5, r3
 800fc24:	bf38      	it	cc
 800fc26:	461d      	movcc	r5, r3
 800fc28:	0553      	lsls	r3, r2, #21
 800fc2a:	d531      	bpl.n	800fc90 <__ssputs_r+0xa0>
 800fc2c:	4629      	mov	r1, r5
 800fc2e:	f7ff ff6b 	bl	800fb08 <_malloc_r>
 800fc32:	4606      	mov	r6, r0
 800fc34:	b950      	cbnz	r0, 800fc4c <__ssputs_r+0x5c>
 800fc36:	230c      	movs	r3, #12
 800fc38:	f8ca 3000 	str.w	r3, [sl]
 800fc3c:	89a3      	ldrh	r3, [r4, #12]
 800fc3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc42:	81a3      	strh	r3, [r4, #12]
 800fc44:	f04f 30ff 	mov.w	r0, #4294967295
 800fc48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc4c:	6921      	ldr	r1, [r4, #16]
 800fc4e:	464a      	mov	r2, r9
 800fc50:	f7fc fa66 	bl	800c120 <memcpy>
 800fc54:	89a3      	ldrh	r3, [r4, #12]
 800fc56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc5e:	81a3      	strh	r3, [r4, #12]
 800fc60:	6126      	str	r6, [r4, #16]
 800fc62:	6165      	str	r5, [r4, #20]
 800fc64:	444e      	add	r6, r9
 800fc66:	eba5 0509 	sub.w	r5, r5, r9
 800fc6a:	6026      	str	r6, [r4, #0]
 800fc6c:	60a5      	str	r5, [r4, #8]
 800fc6e:	463e      	mov	r6, r7
 800fc70:	42be      	cmp	r6, r7
 800fc72:	d900      	bls.n	800fc76 <__ssputs_r+0x86>
 800fc74:	463e      	mov	r6, r7
 800fc76:	6820      	ldr	r0, [r4, #0]
 800fc78:	4632      	mov	r2, r6
 800fc7a:	4641      	mov	r1, r8
 800fc7c:	f000 f97e 	bl	800ff7c <memmove>
 800fc80:	68a3      	ldr	r3, [r4, #8]
 800fc82:	1b9b      	subs	r3, r3, r6
 800fc84:	60a3      	str	r3, [r4, #8]
 800fc86:	6823      	ldr	r3, [r4, #0]
 800fc88:	4433      	add	r3, r6
 800fc8a:	6023      	str	r3, [r4, #0]
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	e7db      	b.n	800fc48 <__ssputs_r+0x58>
 800fc90:	462a      	mov	r2, r5
 800fc92:	f000 f999 	bl	800ffc8 <_realloc_r>
 800fc96:	4606      	mov	r6, r0
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d1e1      	bne.n	800fc60 <__ssputs_r+0x70>
 800fc9c:	6921      	ldr	r1, [r4, #16]
 800fc9e:	4650      	mov	r0, sl
 800fca0:	f7ff fec6 	bl	800fa30 <_free_r>
 800fca4:	e7c7      	b.n	800fc36 <__ssputs_r+0x46>
	...

0800fca8 <_svfiprintf_r>:
 800fca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	4698      	mov	r8, r3
 800fcae:	898b      	ldrh	r3, [r1, #12]
 800fcb0:	061b      	lsls	r3, r3, #24
 800fcb2:	b09d      	sub	sp, #116	; 0x74
 800fcb4:	4607      	mov	r7, r0
 800fcb6:	460d      	mov	r5, r1
 800fcb8:	4614      	mov	r4, r2
 800fcba:	d50e      	bpl.n	800fcda <_svfiprintf_r+0x32>
 800fcbc:	690b      	ldr	r3, [r1, #16]
 800fcbe:	b963      	cbnz	r3, 800fcda <_svfiprintf_r+0x32>
 800fcc0:	2140      	movs	r1, #64	; 0x40
 800fcc2:	f7ff ff21 	bl	800fb08 <_malloc_r>
 800fcc6:	6028      	str	r0, [r5, #0]
 800fcc8:	6128      	str	r0, [r5, #16]
 800fcca:	b920      	cbnz	r0, 800fcd6 <_svfiprintf_r+0x2e>
 800fccc:	230c      	movs	r3, #12
 800fcce:	603b      	str	r3, [r7, #0]
 800fcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd4:	e0d1      	b.n	800fe7a <_svfiprintf_r+0x1d2>
 800fcd6:	2340      	movs	r3, #64	; 0x40
 800fcd8:	616b      	str	r3, [r5, #20]
 800fcda:	2300      	movs	r3, #0
 800fcdc:	9309      	str	r3, [sp, #36]	; 0x24
 800fcde:	2320      	movs	r3, #32
 800fce0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fce4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fce8:	2330      	movs	r3, #48	; 0x30
 800fcea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fe94 <_svfiprintf_r+0x1ec>
 800fcee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcf2:	f04f 0901 	mov.w	r9, #1
 800fcf6:	4623      	mov	r3, r4
 800fcf8:	469a      	mov	sl, r3
 800fcfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcfe:	b10a      	cbz	r2, 800fd04 <_svfiprintf_r+0x5c>
 800fd00:	2a25      	cmp	r2, #37	; 0x25
 800fd02:	d1f9      	bne.n	800fcf8 <_svfiprintf_r+0x50>
 800fd04:	ebba 0b04 	subs.w	fp, sl, r4
 800fd08:	d00b      	beq.n	800fd22 <_svfiprintf_r+0x7a>
 800fd0a:	465b      	mov	r3, fp
 800fd0c:	4622      	mov	r2, r4
 800fd0e:	4629      	mov	r1, r5
 800fd10:	4638      	mov	r0, r7
 800fd12:	f7ff ff6d 	bl	800fbf0 <__ssputs_r>
 800fd16:	3001      	adds	r0, #1
 800fd18:	f000 80aa 	beq.w	800fe70 <_svfiprintf_r+0x1c8>
 800fd1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd1e:	445a      	add	r2, fp
 800fd20:	9209      	str	r2, [sp, #36]	; 0x24
 800fd22:	f89a 3000 	ldrb.w	r3, [sl]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f000 80a2 	beq.w	800fe70 <_svfiprintf_r+0x1c8>
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd36:	f10a 0a01 	add.w	sl, sl, #1
 800fd3a:	9304      	str	r3, [sp, #16]
 800fd3c:	9307      	str	r3, [sp, #28]
 800fd3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd42:	931a      	str	r3, [sp, #104]	; 0x68
 800fd44:	4654      	mov	r4, sl
 800fd46:	2205      	movs	r2, #5
 800fd48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd4c:	4851      	ldr	r0, [pc, #324]	; (800fe94 <_svfiprintf_r+0x1ec>)
 800fd4e:	f7f0 fa4f 	bl	80001f0 <memchr>
 800fd52:	9a04      	ldr	r2, [sp, #16]
 800fd54:	b9d8      	cbnz	r0, 800fd8e <_svfiprintf_r+0xe6>
 800fd56:	06d0      	lsls	r0, r2, #27
 800fd58:	bf44      	itt	mi
 800fd5a:	2320      	movmi	r3, #32
 800fd5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd60:	0711      	lsls	r1, r2, #28
 800fd62:	bf44      	itt	mi
 800fd64:	232b      	movmi	r3, #43	; 0x2b
 800fd66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd6a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd6e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd70:	d015      	beq.n	800fd9e <_svfiprintf_r+0xf6>
 800fd72:	9a07      	ldr	r2, [sp, #28]
 800fd74:	4654      	mov	r4, sl
 800fd76:	2000      	movs	r0, #0
 800fd78:	f04f 0c0a 	mov.w	ip, #10
 800fd7c:	4621      	mov	r1, r4
 800fd7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd82:	3b30      	subs	r3, #48	; 0x30
 800fd84:	2b09      	cmp	r3, #9
 800fd86:	d94e      	bls.n	800fe26 <_svfiprintf_r+0x17e>
 800fd88:	b1b0      	cbz	r0, 800fdb8 <_svfiprintf_r+0x110>
 800fd8a:	9207      	str	r2, [sp, #28]
 800fd8c:	e014      	b.n	800fdb8 <_svfiprintf_r+0x110>
 800fd8e:	eba0 0308 	sub.w	r3, r0, r8
 800fd92:	fa09 f303 	lsl.w	r3, r9, r3
 800fd96:	4313      	orrs	r3, r2
 800fd98:	9304      	str	r3, [sp, #16]
 800fd9a:	46a2      	mov	sl, r4
 800fd9c:	e7d2      	b.n	800fd44 <_svfiprintf_r+0x9c>
 800fd9e:	9b03      	ldr	r3, [sp, #12]
 800fda0:	1d19      	adds	r1, r3, #4
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	9103      	str	r1, [sp, #12]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	bfbb      	ittet	lt
 800fdaa:	425b      	neglt	r3, r3
 800fdac:	f042 0202 	orrlt.w	r2, r2, #2
 800fdb0:	9307      	strge	r3, [sp, #28]
 800fdb2:	9307      	strlt	r3, [sp, #28]
 800fdb4:	bfb8      	it	lt
 800fdb6:	9204      	strlt	r2, [sp, #16]
 800fdb8:	7823      	ldrb	r3, [r4, #0]
 800fdba:	2b2e      	cmp	r3, #46	; 0x2e
 800fdbc:	d10c      	bne.n	800fdd8 <_svfiprintf_r+0x130>
 800fdbe:	7863      	ldrb	r3, [r4, #1]
 800fdc0:	2b2a      	cmp	r3, #42	; 0x2a
 800fdc2:	d135      	bne.n	800fe30 <_svfiprintf_r+0x188>
 800fdc4:	9b03      	ldr	r3, [sp, #12]
 800fdc6:	1d1a      	adds	r2, r3, #4
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	9203      	str	r2, [sp, #12]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	bfb8      	it	lt
 800fdd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdd4:	3402      	adds	r4, #2
 800fdd6:	9305      	str	r3, [sp, #20]
 800fdd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fea4 <_svfiprintf_r+0x1fc>
 800fddc:	7821      	ldrb	r1, [r4, #0]
 800fdde:	2203      	movs	r2, #3
 800fde0:	4650      	mov	r0, sl
 800fde2:	f7f0 fa05 	bl	80001f0 <memchr>
 800fde6:	b140      	cbz	r0, 800fdfa <_svfiprintf_r+0x152>
 800fde8:	2340      	movs	r3, #64	; 0x40
 800fdea:	eba0 000a 	sub.w	r0, r0, sl
 800fdee:	fa03 f000 	lsl.w	r0, r3, r0
 800fdf2:	9b04      	ldr	r3, [sp, #16]
 800fdf4:	4303      	orrs	r3, r0
 800fdf6:	3401      	adds	r4, #1
 800fdf8:	9304      	str	r3, [sp, #16]
 800fdfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdfe:	4826      	ldr	r0, [pc, #152]	; (800fe98 <_svfiprintf_r+0x1f0>)
 800fe00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe04:	2206      	movs	r2, #6
 800fe06:	f7f0 f9f3 	bl	80001f0 <memchr>
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	d038      	beq.n	800fe80 <_svfiprintf_r+0x1d8>
 800fe0e:	4b23      	ldr	r3, [pc, #140]	; (800fe9c <_svfiprintf_r+0x1f4>)
 800fe10:	bb1b      	cbnz	r3, 800fe5a <_svfiprintf_r+0x1b2>
 800fe12:	9b03      	ldr	r3, [sp, #12]
 800fe14:	3307      	adds	r3, #7
 800fe16:	f023 0307 	bic.w	r3, r3, #7
 800fe1a:	3308      	adds	r3, #8
 800fe1c:	9303      	str	r3, [sp, #12]
 800fe1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe20:	4433      	add	r3, r6
 800fe22:	9309      	str	r3, [sp, #36]	; 0x24
 800fe24:	e767      	b.n	800fcf6 <_svfiprintf_r+0x4e>
 800fe26:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe2a:	460c      	mov	r4, r1
 800fe2c:	2001      	movs	r0, #1
 800fe2e:	e7a5      	b.n	800fd7c <_svfiprintf_r+0xd4>
 800fe30:	2300      	movs	r3, #0
 800fe32:	3401      	adds	r4, #1
 800fe34:	9305      	str	r3, [sp, #20]
 800fe36:	4619      	mov	r1, r3
 800fe38:	f04f 0c0a 	mov.w	ip, #10
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe42:	3a30      	subs	r2, #48	; 0x30
 800fe44:	2a09      	cmp	r2, #9
 800fe46:	d903      	bls.n	800fe50 <_svfiprintf_r+0x1a8>
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d0c5      	beq.n	800fdd8 <_svfiprintf_r+0x130>
 800fe4c:	9105      	str	r1, [sp, #20]
 800fe4e:	e7c3      	b.n	800fdd8 <_svfiprintf_r+0x130>
 800fe50:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe54:	4604      	mov	r4, r0
 800fe56:	2301      	movs	r3, #1
 800fe58:	e7f0      	b.n	800fe3c <_svfiprintf_r+0x194>
 800fe5a:	ab03      	add	r3, sp, #12
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	462a      	mov	r2, r5
 800fe60:	4b0f      	ldr	r3, [pc, #60]	; (800fea0 <_svfiprintf_r+0x1f8>)
 800fe62:	a904      	add	r1, sp, #16
 800fe64:	4638      	mov	r0, r7
 800fe66:	f7fc fa11 	bl	800c28c <_printf_float>
 800fe6a:	1c42      	adds	r2, r0, #1
 800fe6c:	4606      	mov	r6, r0
 800fe6e:	d1d6      	bne.n	800fe1e <_svfiprintf_r+0x176>
 800fe70:	89ab      	ldrh	r3, [r5, #12]
 800fe72:	065b      	lsls	r3, r3, #25
 800fe74:	f53f af2c 	bmi.w	800fcd0 <_svfiprintf_r+0x28>
 800fe78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe7a:	b01d      	add	sp, #116	; 0x74
 800fe7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe80:	ab03      	add	r3, sp, #12
 800fe82:	9300      	str	r3, [sp, #0]
 800fe84:	462a      	mov	r2, r5
 800fe86:	4b06      	ldr	r3, [pc, #24]	; (800fea0 <_svfiprintf_r+0x1f8>)
 800fe88:	a904      	add	r1, sp, #16
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	f7fc fca2 	bl	800c7d4 <_printf_i>
 800fe90:	e7eb      	b.n	800fe6a <_svfiprintf_r+0x1c2>
 800fe92:	bf00      	nop
 800fe94:	080120dc 	.word	0x080120dc
 800fe98:	080120e6 	.word	0x080120e6
 800fe9c:	0800c28d 	.word	0x0800c28d
 800fea0:	0800fbf1 	.word	0x0800fbf1
 800fea4:	080120e2 	.word	0x080120e2

0800fea8 <nan>:
 800fea8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800feb0 <nan+0x8>
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop
 800feb0:	00000000 	.word	0x00000000
 800feb4:	7ff80000 	.word	0x7ff80000

0800feb8 <_sbrk_r>:
 800feb8:	b538      	push	{r3, r4, r5, lr}
 800feba:	4d06      	ldr	r5, [pc, #24]	; (800fed4 <_sbrk_r+0x1c>)
 800febc:	2300      	movs	r3, #0
 800febe:	4604      	mov	r4, r0
 800fec0:	4608      	mov	r0, r1
 800fec2:	602b      	str	r3, [r5, #0]
 800fec4:	f7f2 fede 	bl	8002c84 <_sbrk>
 800fec8:	1c43      	adds	r3, r0, #1
 800feca:	d102      	bne.n	800fed2 <_sbrk_r+0x1a>
 800fecc:	682b      	ldr	r3, [r5, #0]
 800fece:	b103      	cbz	r3, 800fed2 <_sbrk_r+0x1a>
 800fed0:	6023      	str	r3, [r4, #0]
 800fed2:	bd38      	pop	{r3, r4, r5, pc}
 800fed4:	20001278 	.word	0x20001278

0800fed8 <strncmp>:
 800fed8:	b510      	push	{r4, lr}
 800feda:	b17a      	cbz	r2, 800fefc <strncmp+0x24>
 800fedc:	4603      	mov	r3, r0
 800fede:	3901      	subs	r1, #1
 800fee0:	1884      	adds	r4, r0, r2
 800fee2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fee6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800feea:	4290      	cmp	r0, r2
 800feec:	d101      	bne.n	800fef2 <strncmp+0x1a>
 800feee:	42a3      	cmp	r3, r4
 800fef0:	d101      	bne.n	800fef6 <strncmp+0x1e>
 800fef2:	1a80      	subs	r0, r0, r2
 800fef4:	bd10      	pop	{r4, pc}
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d1f3      	bne.n	800fee2 <strncmp+0xa>
 800fefa:	e7fa      	b.n	800fef2 <strncmp+0x1a>
 800fefc:	4610      	mov	r0, r2
 800fefe:	e7f9      	b.n	800fef4 <strncmp+0x1c>

0800ff00 <__ascii_wctomb>:
 800ff00:	b149      	cbz	r1, 800ff16 <__ascii_wctomb+0x16>
 800ff02:	2aff      	cmp	r2, #255	; 0xff
 800ff04:	bf85      	ittet	hi
 800ff06:	238a      	movhi	r3, #138	; 0x8a
 800ff08:	6003      	strhi	r3, [r0, #0]
 800ff0a:	700a      	strbls	r2, [r1, #0]
 800ff0c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ff10:	bf98      	it	ls
 800ff12:	2001      	movls	r0, #1
 800ff14:	4770      	bx	lr
 800ff16:	4608      	mov	r0, r1
 800ff18:	4770      	bx	lr
	...

0800ff1c <__assert_func>:
 800ff1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff1e:	4614      	mov	r4, r2
 800ff20:	461a      	mov	r2, r3
 800ff22:	4b09      	ldr	r3, [pc, #36]	; (800ff48 <__assert_func+0x2c>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4605      	mov	r5, r0
 800ff28:	68d8      	ldr	r0, [r3, #12]
 800ff2a:	b14c      	cbz	r4, 800ff40 <__assert_func+0x24>
 800ff2c:	4b07      	ldr	r3, [pc, #28]	; (800ff4c <__assert_func+0x30>)
 800ff2e:	9100      	str	r1, [sp, #0]
 800ff30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff34:	4906      	ldr	r1, [pc, #24]	; (800ff50 <__assert_func+0x34>)
 800ff36:	462b      	mov	r3, r5
 800ff38:	f000 f80e 	bl	800ff58 <fiprintf>
 800ff3c:	f000 fa8c 	bl	8010458 <abort>
 800ff40:	4b04      	ldr	r3, [pc, #16]	; (800ff54 <__assert_func+0x38>)
 800ff42:	461c      	mov	r4, r3
 800ff44:	e7f3      	b.n	800ff2e <__assert_func+0x12>
 800ff46:	bf00      	nop
 800ff48:	200002cc 	.word	0x200002cc
 800ff4c:	080120ed 	.word	0x080120ed
 800ff50:	080120fa 	.word	0x080120fa
 800ff54:	08012128 	.word	0x08012128

0800ff58 <fiprintf>:
 800ff58:	b40e      	push	{r1, r2, r3}
 800ff5a:	b503      	push	{r0, r1, lr}
 800ff5c:	4601      	mov	r1, r0
 800ff5e:	ab03      	add	r3, sp, #12
 800ff60:	4805      	ldr	r0, [pc, #20]	; (800ff78 <fiprintf+0x20>)
 800ff62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff66:	6800      	ldr	r0, [r0, #0]
 800ff68:	9301      	str	r3, [sp, #4]
 800ff6a:	f000 f885 	bl	8010078 <_vfiprintf_r>
 800ff6e:	b002      	add	sp, #8
 800ff70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff74:	b003      	add	sp, #12
 800ff76:	4770      	bx	lr
 800ff78:	200002cc 	.word	0x200002cc

0800ff7c <memmove>:
 800ff7c:	4288      	cmp	r0, r1
 800ff7e:	b510      	push	{r4, lr}
 800ff80:	eb01 0402 	add.w	r4, r1, r2
 800ff84:	d902      	bls.n	800ff8c <memmove+0x10>
 800ff86:	4284      	cmp	r4, r0
 800ff88:	4623      	mov	r3, r4
 800ff8a:	d807      	bhi.n	800ff9c <memmove+0x20>
 800ff8c:	1e43      	subs	r3, r0, #1
 800ff8e:	42a1      	cmp	r1, r4
 800ff90:	d008      	beq.n	800ffa4 <memmove+0x28>
 800ff92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff9a:	e7f8      	b.n	800ff8e <memmove+0x12>
 800ff9c:	4402      	add	r2, r0
 800ff9e:	4601      	mov	r1, r0
 800ffa0:	428a      	cmp	r2, r1
 800ffa2:	d100      	bne.n	800ffa6 <memmove+0x2a>
 800ffa4:	bd10      	pop	{r4, pc}
 800ffa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffae:	e7f7      	b.n	800ffa0 <memmove+0x24>

0800ffb0 <__malloc_lock>:
 800ffb0:	4801      	ldr	r0, [pc, #4]	; (800ffb8 <__malloc_lock+0x8>)
 800ffb2:	f000 bc11 	b.w	80107d8 <__retarget_lock_acquire_recursive>
 800ffb6:	bf00      	nop
 800ffb8:	2000127c 	.word	0x2000127c

0800ffbc <__malloc_unlock>:
 800ffbc:	4801      	ldr	r0, [pc, #4]	; (800ffc4 <__malloc_unlock+0x8>)
 800ffbe:	f000 bc0c 	b.w	80107da <__retarget_lock_release_recursive>
 800ffc2:	bf00      	nop
 800ffc4:	2000127c 	.word	0x2000127c

0800ffc8 <_realloc_r>:
 800ffc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffcc:	4680      	mov	r8, r0
 800ffce:	4614      	mov	r4, r2
 800ffd0:	460e      	mov	r6, r1
 800ffd2:	b921      	cbnz	r1, 800ffde <_realloc_r+0x16>
 800ffd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd8:	4611      	mov	r1, r2
 800ffda:	f7ff bd95 	b.w	800fb08 <_malloc_r>
 800ffde:	b92a      	cbnz	r2, 800ffec <_realloc_r+0x24>
 800ffe0:	f7ff fd26 	bl	800fa30 <_free_r>
 800ffe4:	4625      	mov	r5, r4
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffec:	f000 fc5c 	bl	80108a8 <_malloc_usable_size_r>
 800fff0:	4284      	cmp	r4, r0
 800fff2:	4607      	mov	r7, r0
 800fff4:	d802      	bhi.n	800fffc <_realloc_r+0x34>
 800fff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fffa:	d812      	bhi.n	8010022 <_realloc_r+0x5a>
 800fffc:	4621      	mov	r1, r4
 800fffe:	4640      	mov	r0, r8
 8010000:	f7ff fd82 	bl	800fb08 <_malloc_r>
 8010004:	4605      	mov	r5, r0
 8010006:	2800      	cmp	r0, #0
 8010008:	d0ed      	beq.n	800ffe6 <_realloc_r+0x1e>
 801000a:	42bc      	cmp	r4, r7
 801000c:	4622      	mov	r2, r4
 801000e:	4631      	mov	r1, r6
 8010010:	bf28      	it	cs
 8010012:	463a      	movcs	r2, r7
 8010014:	f7fc f884 	bl	800c120 <memcpy>
 8010018:	4631      	mov	r1, r6
 801001a:	4640      	mov	r0, r8
 801001c:	f7ff fd08 	bl	800fa30 <_free_r>
 8010020:	e7e1      	b.n	800ffe6 <_realloc_r+0x1e>
 8010022:	4635      	mov	r5, r6
 8010024:	e7df      	b.n	800ffe6 <_realloc_r+0x1e>

08010026 <__sfputc_r>:
 8010026:	6893      	ldr	r3, [r2, #8]
 8010028:	3b01      	subs	r3, #1
 801002a:	2b00      	cmp	r3, #0
 801002c:	b410      	push	{r4}
 801002e:	6093      	str	r3, [r2, #8]
 8010030:	da08      	bge.n	8010044 <__sfputc_r+0x1e>
 8010032:	6994      	ldr	r4, [r2, #24]
 8010034:	42a3      	cmp	r3, r4
 8010036:	db01      	blt.n	801003c <__sfputc_r+0x16>
 8010038:	290a      	cmp	r1, #10
 801003a:	d103      	bne.n	8010044 <__sfputc_r+0x1e>
 801003c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010040:	f000 b94a 	b.w	80102d8 <__swbuf_r>
 8010044:	6813      	ldr	r3, [r2, #0]
 8010046:	1c58      	adds	r0, r3, #1
 8010048:	6010      	str	r0, [r2, #0]
 801004a:	7019      	strb	r1, [r3, #0]
 801004c:	4608      	mov	r0, r1
 801004e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010052:	4770      	bx	lr

08010054 <__sfputs_r>:
 8010054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010056:	4606      	mov	r6, r0
 8010058:	460f      	mov	r7, r1
 801005a:	4614      	mov	r4, r2
 801005c:	18d5      	adds	r5, r2, r3
 801005e:	42ac      	cmp	r4, r5
 8010060:	d101      	bne.n	8010066 <__sfputs_r+0x12>
 8010062:	2000      	movs	r0, #0
 8010064:	e007      	b.n	8010076 <__sfputs_r+0x22>
 8010066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801006a:	463a      	mov	r2, r7
 801006c:	4630      	mov	r0, r6
 801006e:	f7ff ffda 	bl	8010026 <__sfputc_r>
 8010072:	1c43      	adds	r3, r0, #1
 8010074:	d1f3      	bne.n	801005e <__sfputs_r+0xa>
 8010076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010078 <_vfiprintf_r>:
 8010078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801007c:	460d      	mov	r5, r1
 801007e:	b09d      	sub	sp, #116	; 0x74
 8010080:	4614      	mov	r4, r2
 8010082:	4698      	mov	r8, r3
 8010084:	4606      	mov	r6, r0
 8010086:	b118      	cbz	r0, 8010090 <_vfiprintf_r+0x18>
 8010088:	6983      	ldr	r3, [r0, #24]
 801008a:	b90b      	cbnz	r3, 8010090 <_vfiprintf_r+0x18>
 801008c:	f000 fb06 	bl	801069c <__sinit>
 8010090:	4b89      	ldr	r3, [pc, #548]	; (80102b8 <_vfiprintf_r+0x240>)
 8010092:	429d      	cmp	r5, r3
 8010094:	d11b      	bne.n	80100ce <_vfiprintf_r+0x56>
 8010096:	6875      	ldr	r5, [r6, #4]
 8010098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801009a:	07d9      	lsls	r1, r3, #31
 801009c:	d405      	bmi.n	80100aa <_vfiprintf_r+0x32>
 801009e:	89ab      	ldrh	r3, [r5, #12]
 80100a0:	059a      	lsls	r2, r3, #22
 80100a2:	d402      	bmi.n	80100aa <_vfiprintf_r+0x32>
 80100a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100a6:	f000 fb97 	bl	80107d8 <__retarget_lock_acquire_recursive>
 80100aa:	89ab      	ldrh	r3, [r5, #12]
 80100ac:	071b      	lsls	r3, r3, #28
 80100ae:	d501      	bpl.n	80100b4 <_vfiprintf_r+0x3c>
 80100b0:	692b      	ldr	r3, [r5, #16]
 80100b2:	b9eb      	cbnz	r3, 80100f0 <_vfiprintf_r+0x78>
 80100b4:	4629      	mov	r1, r5
 80100b6:	4630      	mov	r0, r6
 80100b8:	f000 f960 	bl	801037c <__swsetup_r>
 80100bc:	b1c0      	cbz	r0, 80100f0 <_vfiprintf_r+0x78>
 80100be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100c0:	07dc      	lsls	r4, r3, #31
 80100c2:	d50e      	bpl.n	80100e2 <_vfiprintf_r+0x6a>
 80100c4:	f04f 30ff 	mov.w	r0, #4294967295
 80100c8:	b01d      	add	sp, #116	; 0x74
 80100ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ce:	4b7b      	ldr	r3, [pc, #492]	; (80102bc <_vfiprintf_r+0x244>)
 80100d0:	429d      	cmp	r5, r3
 80100d2:	d101      	bne.n	80100d8 <_vfiprintf_r+0x60>
 80100d4:	68b5      	ldr	r5, [r6, #8]
 80100d6:	e7df      	b.n	8010098 <_vfiprintf_r+0x20>
 80100d8:	4b79      	ldr	r3, [pc, #484]	; (80102c0 <_vfiprintf_r+0x248>)
 80100da:	429d      	cmp	r5, r3
 80100dc:	bf08      	it	eq
 80100de:	68f5      	ldreq	r5, [r6, #12]
 80100e0:	e7da      	b.n	8010098 <_vfiprintf_r+0x20>
 80100e2:	89ab      	ldrh	r3, [r5, #12]
 80100e4:	0598      	lsls	r0, r3, #22
 80100e6:	d4ed      	bmi.n	80100c4 <_vfiprintf_r+0x4c>
 80100e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100ea:	f000 fb76 	bl	80107da <__retarget_lock_release_recursive>
 80100ee:	e7e9      	b.n	80100c4 <_vfiprintf_r+0x4c>
 80100f0:	2300      	movs	r3, #0
 80100f2:	9309      	str	r3, [sp, #36]	; 0x24
 80100f4:	2320      	movs	r3, #32
 80100f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80100fe:	2330      	movs	r3, #48	; 0x30
 8010100:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102c4 <_vfiprintf_r+0x24c>
 8010104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010108:	f04f 0901 	mov.w	r9, #1
 801010c:	4623      	mov	r3, r4
 801010e:	469a      	mov	sl, r3
 8010110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010114:	b10a      	cbz	r2, 801011a <_vfiprintf_r+0xa2>
 8010116:	2a25      	cmp	r2, #37	; 0x25
 8010118:	d1f9      	bne.n	801010e <_vfiprintf_r+0x96>
 801011a:	ebba 0b04 	subs.w	fp, sl, r4
 801011e:	d00b      	beq.n	8010138 <_vfiprintf_r+0xc0>
 8010120:	465b      	mov	r3, fp
 8010122:	4622      	mov	r2, r4
 8010124:	4629      	mov	r1, r5
 8010126:	4630      	mov	r0, r6
 8010128:	f7ff ff94 	bl	8010054 <__sfputs_r>
 801012c:	3001      	adds	r0, #1
 801012e:	f000 80aa 	beq.w	8010286 <_vfiprintf_r+0x20e>
 8010132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010134:	445a      	add	r2, fp
 8010136:	9209      	str	r2, [sp, #36]	; 0x24
 8010138:	f89a 3000 	ldrb.w	r3, [sl]
 801013c:	2b00      	cmp	r3, #0
 801013e:	f000 80a2 	beq.w	8010286 <_vfiprintf_r+0x20e>
 8010142:	2300      	movs	r3, #0
 8010144:	f04f 32ff 	mov.w	r2, #4294967295
 8010148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801014c:	f10a 0a01 	add.w	sl, sl, #1
 8010150:	9304      	str	r3, [sp, #16]
 8010152:	9307      	str	r3, [sp, #28]
 8010154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010158:	931a      	str	r3, [sp, #104]	; 0x68
 801015a:	4654      	mov	r4, sl
 801015c:	2205      	movs	r2, #5
 801015e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010162:	4858      	ldr	r0, [pc, #352]	; (80102c4 <_vfiprintf_r+0x24c>)
 8010164:	f7f0 f844 	bl	80001f0 <memchr>
 8010168:	9a04      	ldr	r2, [sp, #16]
 801016a:	b9d8      	cbnz	r0, 80101a4 <_vfiprintf_r+0x12c>
 801016c:	06d1      	lsls	r1, r2, #27
 801016e:	bf44      	itt	mi
 8010170:	2320      	movmi	r3, #32
 8010172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010176:	0713      	lsls	r3, r2, #28
 8010178:	bf44      	itt	mi
 801017a:	232b      	movmi	r3, #43	; 0x2b
 801017c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010180:	f89a 3000 	ldrb.w	r3, [sl]
 8010184:	2b2a      	cmp	r3, #42	; 0x2a
 8010186:	d015      	beq.n	80101b4 <_vfiprintf_r+0x13c>
 8010188:	9a07      	ldr	r2, [sp, #28]
 801018a:	4654      	mov	r4, sl
 801018c:	2000      	movs	r0, #0
 801018e:	f04f 0c0a 	mov.w	ip, #10
 8010192:	4621      	mov	r1, r4
 8010194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010198:	3b30      	subs	r3, #48	; 0x30
 801019a:	2b09      	cmp	r3, #9
 801019c:	d94e      	bls.n	801023c <_vfiprintf_r+0x1c4>
 801019e:	b1b0      	cbz	r0, 80101ce <_vfiprintf_r+0x156>
 80101a0:	9207      	str	r2, [sp, #28]
 80101a2:	e014      	b.n	80101ce <_vfiprintf_r+0x156>
 80101a4:	eba0 0308 	sub.w	r3, r0, r8
 80101a8:	fa09 f303 	lsl.w	r3, r9, r3
 80101ac:	4313      	orrs	r3, r2
 80101ae:	9304      	str	r3, [sp, #16]
 80101b0:	46a2      	mov	sl, r4
 80101b2:	e7d2      	b.n	801015a <_vfiprintf_r+0xe2>
 80101b4:	9b03      	ldr	r3, [sp, #12]
 80101b6:	1d19      	adds	r1, r3, #4
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	9103      	str	r1, [sp, #12]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	bfbb      	ittet	lt
 80101c0:	425b      	neglt	r3, r3
 80101c2:	f042 0202 	orrlt.w	r2, r2, #2
 80101c6:	9307      	strge	r3, [sp, #28]
 80101c8:	9307      	strlt	r3, [sp, #28]
 80101ca:	bfb8      	it	lt
 80101cc:	9204      	strlt	r2, [sp, #16]
 80101ce:	7823      	ldrb	r3, [r4, #0]
 80101d0:	2b2e      	cmp	r3, #46	; 0x2e
 80101d2:	d10c      	bne.n	80101ee <_vfiprintf_r+0x176>
 80101d4:	7863      	ldrb	r3, [r4, #1]
 80101d6:	2b2a      	cmp	r3, #42	; 0x2a
 80101d8:	d135      	bne.n	8010246 <_vfiprintf_r+0x1ce>
 80101da:	9b03      	ldr	r3, [sp, #12]
 80101dc:	1d1a      	adds	r2, r3, #4
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	9203      	str	r2, [sp, #12]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	bfb8      	it	lt
 80101e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80101ea:	3402      	adds	r4, #2
 80101ec:	9305      	str	r3, [sp, #20]
 80101ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80102d4 <_vfiprintf_r+0x25c>
 80101f2:	7821      	ldrb	r1, [r4, #0]
 80101f4:	2203      	movs	r2, #3
 80101f6:	4650      	mov	r0, sl
 80101f8:	f7ef fffa 	bl	80001f0 <memchr>
 80101fc:	b140      	cbz	r0, 8010210 <_vfiprintf_r+0x198>
 80101fe:	2340      	movs	r3, #64	; 0x40
 8010200:	eba0 000a 	sub.w	r0, r0, sl
 8010204:	fa03 f000 	lsl.w	r0, r3, r0
 8010208:	9b04      	ldr	r3, [sp, #16]
 801020a:	4303      	orrs	r3, r0
 801020c:	3401      	adds	r4, #1
 801020e:	9304      	str	r3, [sp, #16]
 8010210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010214:	482c      	ldr	r0, [pc, #176]	; (80102c8 <_vfiprintf_r+0x250>)
 8010216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801021a:	2206      	movs	r2, #6
 801021c:	f7ef ffe8 	bl	80001f0 <memchr>
 8010220:	2800      	cmp	r0, #0
 8010222:	d03f      	beq.n	80102a4 <_vfiprintf_r+0x22c>
 8010224:	4b29      	ldr	r3, [pc, #164]	; (80102cc <_vfiprintf_r+0x254>)
 8010226:	bb1b      	cbnz	r3, 8010270 <_vfiprintf_r+0x1f8>
 8010228:	9b03      	ldr	r3, [sp, #12]
 801022a:	3307      	adds	r3, #7
 801022c:	f023 0307 	bic.w	r3, r3, #7
 8010230:	3308      	adds	r3, #8
 8010232:	9303      	str	r3, [sp, #12]
 8010234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010236:	443b      	add	r3, r7
 8010238:	9309      	str	r3, [sp, #36]	; 0x24
 801023a:	e767      	b.n	801010c <_vfiprintf_r+0x94>
 801023c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010240:	460c      	mov	r4, r1
 8010242:	2001      	movs	r0, #1
 8010244:	e7a5      	b.n	8010192 <_vfiprintf_r+0x11a>
 8010246:	2300      	movs	r3, #0
 8010248:	3401      	adds	r4, #1
 801024a:	9305      	str	r3, [sp, #20]
 801024c:	4619      	mov	r1, r3
 801024e:	f04f 0c0a 	mov.w	ip, #10
 8010252:	4620      	mov	r0, r4
 8010254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010258:	3a30      	subs	r2, #48	; 0x30
 801025a:	2a09      	cmp	r2, #9
 801025c:	d903      	bls.n	8010266 <_vfiprintf_r+0x1ee>
 801025e:	2b00      	cmp	r3, #0
 8010260:	d0c5      	beq.n	80101ee <_vfiprintf_r+0x176>
 8010262:	9105      	str	r1, [sp, #20]
 8010264:	e7c3      	b.n	80101ee <_vfiprintf_r+0x176>
 8010266:	fb0c 2101 	mla	r1, ip, r1, r2
 801026a:	4604      	mov	r4, r0
 801026c:	2301      	movs	r3, #1
 801026e:	e7f0      	b.n	8010252 <_vfiprintf_r+0x1da>
 8010270:	ab03      	add	r3, sp, #12
 8010272:	9300      	str	r3, [sp, #0]
 8010274:	462a      	mov	r2, r5
 8010276:	4b16      	ldr	r3, [pc, #88]	; (80102d0 <_vfiprintf_r+0x258>)
 8010278:	a904      	add	r1, sp, #16
 801027a:	4630      	mov	r0, r6
 801027c:	f7fc f806 	bl	800c28c <_printf_float>
 8010280:	4607      	mov	r7, r0
 8010282:	1c78      	adds	r0, r7, #1
 8010284:	d1d6      	bne.n	8010234 <_vfiprintf_r+0x1bc>
 8010286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010288:	07d9      	lsls	r1, r3, #31
 801028a:	d405      	bmi.n	8010298 <_vfiprintf_r+0x220>
 801028c:	89ab      	ldrh	r3, [r5, #12]
 801028e:	059a      	lsls	r2, r3, #22
 8010290:	d402      	bmi.n	8010298 <_vfiprintf_r+0x220>
 8010292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010294:	f000 faa1 	bl	80107da <__retarget_lock_release_recursive>
 8010298:	89ab      	ldrh	r3, [r5, #12]
 801029a:	065b      	lsls	r3, r3, #25
 801029c:	f53f af12 	bmi.w	80100c4 <_vfiprintf_r+0x4c>
 80102a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102a2:	e711      	b.n	80100c8 <_vfiprintf_r+0x50>
 80102a4:	ab03      	add	r3, sp, #12
 80102a6:	9300      	str	r3, [sp, #0]
 80102a8:	462a      	mov	r2, r5
 80102aa:	4b09      	ldr	r3, [pc, #36]	; (80102d0 <_vfiprintf_r+0x258>)
 80102ac:	a904      	add	r1, sp, #16
 80102ae:	4630      	mov	r0, r6
 80102b0:	f7fc fa90 	bl	800c7d4 <_printf_i>
 80102b4:	e7e4      	b.n	8010280 <_vfiprintf_r+0x208>
 80102b6:	bf00      	nop
 80102b8:	0801214c 	.word	0x0801214c
 80102bc:	0801216c 	.word	0x0801216c
 80102c0:	0801212c 	.word	0x0801212c
 80102c4:	080120dc 	.word	0x080120dc
 80102c8:	080120e6 	.word	0x080120e6
 80102cc:	0800c28d 	.word	0x0800c28d
 80102d0:	08010055 	.word	0x08010055
 80102d4:	080120e2 	.word	0x080120e2

080102d8 <__swbuf_r>:
 80102d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102da:	460e      	mov	r6, r1
 80102dc:	4614      	mov	r4, r2
 80102de:	4605      	mov	r5, r0
 80102e0:	b118      	cbz	r0, 80102ea <__swbuf_r+0x12>
 80102e2:	6983      	ldr	r3, [r0, #24]
 80102e4:	b90b      	cbnz	r3, 80102ea <__swbuf_r+0x12>
 80102e6:	f000 f9d9 	bl	801069c <__sinit>
 80102ea:	4b21      	ldr	r3, [pc, #132]	; (8010370 <__swbuf_r+0x98>)
 80102ec:	429c      	cmp	r4, r3
 80102ee:	d12b      	bne.n	8010348 <__swbuf_r+0x70>
 80102f0:	686c      	ldr	r4, [r5, #4]
 80102f2:	69a3      	ldr	r3, [r4, #24]
 80102f4:	60a3      	str	r3, [r4, #8]
 80102f6:	89a3      	ldrh	r3, [r4, #12]
 80102f8:	071a      	lsls	r2, r3, #28
 80102fa:	d52f      	bpl.n	801035c <__swbuf_r+0x84>
 80102fc:	6923      	ldr	r3, [r4, #16]
 80102fe:	b36b      	cbz	r3, 801035c <__swbuf_r+0x84>
 8010300:	6923      	ldr	r3, [r4, #16]
 8010302:	6820      	ldr	r0, [r4, #0]
 8010304:	1ac0      	subs	r0, r0, r3
 8010306:	6963      	ldr	r3, [r4, #20]
 8010308:	b2f6      	uxtb	r6, r6
 801030a:	4283      	cmp	r3, r0
 801030c:	4637      	mov	r7, r6
 801030e:	dc04      	bgt.n	801031a <__swbuf_r+0x42>
 8010310:	4621      	mov	r1, r4
 8010312:	4628      	mov	r0, r5
 8010314:	f000 f92e 	bl	8010574 <_fflush_r>
 8010318:	bb30      	cbnz	r0, 8010368 <__swbuf_r+0x90>
 801031a:	68a3      	ldr	r3, [r4, #8]
 801031c:	3b01      	subs	r3, #1
 801031e:	60a3      	str	r3, [r4, #8]
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	1c5a      	adds	r2, r3, #1
 8010324:	6022      	str	r2, [r4, #0]
 8010326:	701e      	strb	r6, [r3, #0]
 8010328:	6963      	ldr	r3, [r4, #20]
 801032a:	3001      	adds	r0, #1
 801032c:	4283      	cmp	r3, r0
 801032e:	d004      	beq.n	801033a <__swbuf_r+0x62>
 8010330:	89a3      	ldrh	r3, [r4, #12]
 8010332:	07db      	lsls	r3, r3, #31
 8010334:	d506      	bpl.n	8010344 <__swbuf_r+0x6c>
 8010336:	2e0a      	cmp	r6, #10
 8010338:	d104      	bne.n	8010344 <__swbuf_r+0x6c>
 801033a:	4621      	mov	r1, r4
 801033c:	4628      	mov	r0, r5
 801033e:	f000 f919 	bl	8010574 <_fflush_r>
 8010342:	b988      	cbnz	r0, 8010368 <__swbuf_r+0x90>
 8010344:	4638      	mov	r0, r7
 8010346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010348:	4b0a      	ldr	r3, [pc, #40]	; (8010374 <__swbuf_r+0x9c>)
 801034a:	429c      	cmp	r4, r3
 801034c:	d101      	bne.n	8010352 <__swbuf_r+0x7a>
 801034e:	68ac      	ldr	r4, [r5, #8]
 8010350:	e7cf      	b.n	80102f2 <__swbuf_r+0x1a>
 8010352:	4b09      	ldr	r3, [pc, #36]	; (8010378 <__swbuf_r+0xa0>)
 8010354:	429c      	cmp	r4, r3
 8010356:	bf08      	it	eq
 8010358:	68ec      	ldreq	r4, [r5, #12]
 801035a:	e7ca      	b.n	80102f2 <__swbuf_r+0x1a>
 801035c:	4621      	mov	r1, r4
 801035e:	4628      	mov	r0, r5
 8010360:	f000 f80c 	bl	801037c <__swsetup_r>
 8010364:	2800      	cmp	r0, #0
 8010366:	d0cb      	beq.n	8010300 <__swbuf_r+0x28>
 8010368:	f04f 37ff 	mov.w	r7, #4294967295
 801036c:	e7ea      	b.n	8010344 <__swbuf_r+0x6c>
 801036e:	bf00      	nop
 8010370:	0801214c 	.word	0x0801214c
 8010374:	0801216c 	.word	0x0801216c
 8010378:	0801212c 	.word	0x0801212c

0801037c <__swsetup_r>:
 801037c:	4b32      	ldr	r3, [pc, #200]	; (8010448 <__swsetup_r+0xcc>)
 801037e:	b570      	push	{r4, r5, r6, lr}
 8010380:	681d      	ldr	r5, [r3, #0]
 8010382:	4606      	mov	r6, r0
 8010384:	460c      	mov	r4, r1
 8010386:	b125      	cbz	r5, 8010392 <__swsetup_r+0x16>
 8010388:	69ab      	ldr	r3, [r5, #24]
 801038a:	b913      	cbnz	r3, 8010392 <__swsetup_r+0x16>
 801038c:	4628      	mov	r0, r5
 801038e:	f000 f985 	bl	801069c <__sinit>
 8010392:	4b2e      	ldr	r3, [pc, #184]	; (801044c <__swsetup_r+0xd0>)
 8010394:	429c      	cmp	r4, r3
 8010396:	d10f      	bne.n	80103b8 <__swsetup_r+0x3c>
 8010398:	686c      	ldr	r4, [r5, #4]
 801039a:	89a3      	ldrh	r3, [r4, #12]
 801039c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103a0:	0719      	lsls	r1, r3, #28
 80103a2:	d42c      	bmi.n	80103fe <__swsetup_r+0x82>
 80103a4:	06dd      	lsls	r5, r3, #27
 80103a6:	d411      	bmi.n	80103cc <__swsetup_r+0x50>
 80103a8:	2309      	movs	r3, #9
 80103aa:	6033      	str	r3, [r6, #0]
 80103ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103b0:	81a3      	strh	r3, [r4, #12]
 80103b2:	f04f 30ff 	mov.w	r0, #4294967295
 80103b6:	e03e      	b.n	8010436 <__swsetup_r+0xba>
 80103b8:	4b25      	ldr	r3, [pc, #148]	; (8010450 <__swsetup_r+0xd4>)
 80103ba:	429c      	cmp	r4, r3
 80103bc:	d101      	bne.n	80103c2 <__swsetup_r+0x46>
 80103be:	68ac      	ldr	r4, [r5, #8]
 80103c0:	e7eb      	b.n	801039a <__swsetup_r+0x1e>
 80103c2:	4b24      	ldr	r3, [pc, #144]	; (8010454 <__swsetup_r+0xd8>)
 80103c4:	429c      	cmp	r4, r3
 80103c6:	bf08      	it	eq
 80103c8:	68ec      	ldreq	r4, [r5, #12]
 80103ca:	e7e6      	b.n	801039a <__swsetup_r+0x1e>
 80103cc:	0758      	lsls	r0, r3, #29
 80103ce:	d512      	bpl.n	80103f6 <__swsetup_r+0x7a>
 80103d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103d2:	b141      	cbz	r1, 80103e6 <__swsetup_r+0x6a>
 80103d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103d8:	4299      	cmp	r1, r3
 80103da:	d002      	beq.n	80103e2 <__swsetup_r+0x66>
 80103dc:	4630      	mov	r0, r6
 80103de:	f7ff fb27 	bl	800fa30 <_free_r>
 80103e2:	2300      	movs	r3, #0
 80103e4:	6363      	str	r3, [r4, #52]	; 0x34
 80103e6:	89a3      	ldrh	r3, [r4, #12]
 80103e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80103ec:	81a3      	strh	r3, [r4, #12]
 80103ee:	2300      	movs	r3, #0
 80103f0:	6063      	str	r3, [r4, #4]
 80103f2:	6923      	ldr	r3, [r4, #16]
 80103f4:	6023      	str	r3, [r4, #0]
 80103f6:	89a3      	ldrh	r3, [r4, #12]
 80103f8:	f043 0308 	orr.w	r3, r3, #8
 80103fc:	81a3      	strh	r3, [r4, #12]
 80103fe:	6923      	ldr	r3, [r4, #16]
 8010400:	b94b      	cbnz	r3, 8010416 <__swsetup_r+0x9a>
 8010402:	89a3      	ldrh	r3, [r4, #12]
 8010404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801040c:	d003      	beq.n	8010416 <__swsetup_r+0x9a>
 801040e:	4621      	mov	r1, r4
 8010410:	4630      	mov	r0, r6
 8010412:	f000 fa09 	bl	8010828 <__smakebuf_r>
 8010416:	89a0      	ldrh	r0, [r4, #12]
 8010418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801041c:	f010 0301 	ands.w	r3, r0, #1
 8010420:	d00a      	beq.n	8010438 <__swsetup_r+0xbc>
 8010422:	2300      	movs	r3, #0
 8010424:	60a3      	str	r3, [r4, #8]
 8010426:	6963      	ldr	r3, [r4, #20]
 8010428:	425b      	negs	r3, r3
 801042a:	61a3      	str	r3, [r4, #24]
 801042c:	6923      	ldr	r3, [r4, #16]
 801042e:	b943      	cbnz	r3, 8010442 <__swsetup_r+0xc6>
 8010430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010434:	d1ba      	bne.n	80103ac <__swsetup_r+0x30>
 8010436:	bd70      	pop	{r4, r5, r6, pc}
 8010438:	0781      	lsls	r1, r0, #30
 801043a:	bf58      	it	pl
 801043c:	6963      	ldrpl	r3, [r4, #20]
 801043e:	60a3      	str	r3, [r4, #8]
 8010440:	e7f4      	b.n	801042c <__swsetup_r+0xb0>
 8010442:	2000      	movs	r0, #0
 8010444:	e7f7      	b.n	8010436 <__swsetup_r+0xba>
 8010446:	bf00      	nop
 8010448:	200002cc 	.word	0x200002cc
 801044c:	0801214c 	.word	0x0801214c
 8010450:	0801216c 	.word	0x0801216c
 8010454:	0801212c 	.word	0x0801212c

08010458 <abort>:
 8010458:	b508      	push	{r3, lr}
 801045a:	2006      	movs	r0, #6
 801045c:	f000 fa54 	bl	8010908 <raise>
 8010460:	2001      	movs	r0, #1
 8010462:	f7f2 fb97 	bl	8002b94 <_exit>
	...

08010468 <__sflush_r>:
 8010468:	898a      	ldrh	r2, [r1, #12]
 801046a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801046e:	4605      	mov	r5, r0
 8010470:	0710      	lsls	r0, r2, #28
 8010472:	460c      	mov	r4, r1
 8010474:	d458      	bmi.n	8010528 <__sflush_r+0xc0>
 8010476:	684b      	ldr	r3, [r1, #4]
 8010478:	2b00      	cmp	r3, #0
 801047a:	dc05      	bgt.n	8010488 <__sflush_r+0x20>
 801047c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801047e:	2b00      	cmp	r3, #0
 8010480:	dc02      	bgt.n	8010488 <__sflush_r+0x20>
 8010482:	2000      	movs	r0, #0
 8010484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801048a:	2e00      	cmp	r6, #0
 801048c:	d0f9      	beq.n	8010482 <__sflush_r+0x1a>
 801048e:	2300      	movs	r3, #0
 8010490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010494:	682f      	ldr	r7, [r5, #0]
 8010496:	602b      	str	r3, [r5, #0]
 8010498:	d032      	beq.n	8010500 <__sflush_r+0x98>
 801049a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801049c:	89a3      	ldrh	r3, [r4, #12]
 801049e:	075a      	lsls	r2, r3, #29
 80104a0:	d505      	bpl.n	80104ae <__sflush_r+0x46>
 80104a2:	6863      	ldr	r3, [r4, #4]
 80104a4:	1ac0      	subs	r0, r0, r3
 80104a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104a8:	b10b      	cbz	r3, 80104ae <__sflush_r+0x46>
 80104aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104ac:	1ac0      	subs	r0, r0, r3
 80104ae:	2300      	movs	r3, #0
 80104b0:	4602      	mov	r2, r0
 80104b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104b4:	6a21      	ldr	r1, [r4, #32]
 80104b6:	4628      	mov	r0, r5
 80104b8:	47b0      	blx	r6
 80104ba:	1c43      	adds	r3, r0, #1
 80104bc:	89a3      	ldrh	r3, [r4, #12]
 80104be:	d106      	bne.n	80104ce <__sflush_r+0x66>
 80104c0:	6829      	ldr	r1, [r5, #0]
 80104c2:	291d      	cmp	r1, #29
 80104c4:	d82c      	bhi.n	8010520 <__sflush_r+0xb8>
 80104c6:	4a2a      	ldr	r2, [pc, #168]	; (8010570 <__sflush_r+0x108>)
 80104c8:	40ca      	lsrs	r2, r1
 80104ca:	07d6      	lsls	r6, r2, #31
 80104cc:	d528      	bpl.n	8010520 <__sflush_r+0xb8>
 80104ce:	2200      	movs	r2, #0
 80104d0:	6062      	str	r2, [r4, #4]
 80104d2:	04d9      	lsls	r1, r3, #19
 80104d4:	6922      	ldr	r2, [r4, #16]
 80104d6:	6022      	str	r2, [r4, #0]
 80104d8:	d504      	bpl.n	80104e4 <__sflush_r+0x7c>
 80104da:	1c42      	adds	r2, r0, #1
 80104dc:	d101      	bne.n	80104e2 <__sflush_r+0x7a>
 80104de:	682b      	ldr	r3, [r5, #0]
 80104e0:	b903      	cbnz	r3, 80104e4 <__sflush_r+0x7c>
 80104e2:	6560      	str	r0, [r4, #84]	; 0x54
 80104e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104e6:	602f      	str	r7, [r5, #0]
 80104e8:	2900      	cmp	r1, #0
 80104ea:	d0ca      	beq.n	8010482 <__sflush_r+0x1a>
 80104ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104f0:	4299      	cmp	r1, r3
 80104f2:	d002      	beq.n	80104fa <__sflush_r+0x92>
 80104f4:	4628      	mov	r0, r5
 80104f6:	f7ff fa9b 	bl	800fa30 <_free_r>
 80104fa:	2000      	movs	r0, #0
 80104fc:	6360      	str	r0, [r4, #52]	; 0x34
 80104fe:	e7c1      	b.n	8010484 <__sflush_r+0x1c>
 8010500:	6a21      	ldr	r1, [r4, #32]
 8010502:	2301      	movs	r3, #1
 8010504:	4628      	mov	r0, r5
 8010506:	47b0      	blx	r6
 8010508:	1c41      	adds	r1, r0, #1
 801050a:	d1c7      	bne.n	801049c <__sflush_r+0x34>
 801050c:	682b      	ldr	r3, [r5, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d0c4      	beq.n	801049c <__sflush_r+0x34>
 8010512:	2b1d      	cmp	r3, #29
 8010514:	d001      	beq.n	801051a <__sflush_r+0xb2>
 8010516:	2b16      	cmp	r3, #22
 8010518:	d101      	bne.n	801051e <__sflush_r+0xb6>
 801051a:	602f      	str	r7, [r5, #0]
 801051c:	e7b1      	b.n	8010482 <__sflush_r+0x1a>
 801051e:	89a3      	ldrh	r3, [r4, #12]
 8010520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010524:	81a3      	strh	r3, [r4, #12]
 8010526:	e7ad      	b.n	8010484 <__sflush_r+0x1c>
 8010528:	690f      	ldr	r7, [r1, #16]
 801052a:	2f00      	cmp	r7, #0
 801052c:	d0a9      	beq.n	8010482 <__sflush_r+0x1a>
 801052e:	0793      	lsls	r3, r2, #30
 8010530:	680e      	ldr	r6, [r1, #0]
 8010532:	bf08      	it	eq
 8010534:	694b      	ldreq	r3, [r1, #20]
 8010536:	600f      	str	r7, [r1, #0]
 8010538:	bf18      	it	ne
 801053a:	2300      	movne	r3, #0
 801053c:	eba6 0807 	sub.w	r8, r6, r7
 8010540:	608b      	str	r3, [r1, #8]
 8010542:	f1b8 0f00 	cmp.w	r8, #0
 8010546:	dd9c      	ble.n	8010482 <__sflush_r+0x1a>
 8010548:	6a21      	ldr	r1, [r4, #32]
 801054a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801054c:	4643      	mov	r3, r8
 801054e:	463a      	mov	r2, r7
 8010550:	4628      	mov	r0, r5
 8010552:	47b0      	blx	r6
 8010554:	2800      	cmp	r0, #0
 8010556:	dc06      	bgt.n	8010566 <__sflush_r+0xfe>
 8010558:	89a3      	ldrh	r3, [r4, #12]
 801055a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801055e:	81a3      	strh	r3, [r4, #12]
 8010560:	f04f 30ff 	mov.w	r0, #4294967295
 8010564:	e78e      	b.n	8010484 <__sflush_r+0x1c>
 8010566:	4407      	add	r7, r0
 8010568:	eba8 0800 	sub.w	r8, r8, r0
 801056c:	e7e9      	b.n	8010542 <__sflush_r+0xda>
 801056e:	bf00      	nop
 8010570:	20400001 	.word	0x20400001

08010574 <_fflush_r>:
 8010574:	b538      	push	{r3, r4, r5, lr}
 8010576:	690b      	ldr	r3, [r1, #16]
 8010578:	4605      	mov	r5, r0
 801057a:	460c      	mov	r4, r1
 801057c:	b913      	cbnz	r3, 8010584 <_fflush_r+0x10>
 801057e:	2500      	movs	r5, #0
 8010580:	4628      	mov	r0, r5
 8010582:	bd38      	pop	{r3, r4, r5, pc}
 8010584:	b118      	cbz	r0, 801058e <_fflush_r+0x1a>
 8010586:	6983      	ldr	r3, [r0, #24]
 8010588:	b90b      	cbnz	r3, 801058e <_fflush_r+0x1a>
 801058a:	f000 f887 	bl	801069c <__sinit>
 801058e:	4b14      	ldr	r3, [pc, #80]	; (80105e0 <_fflush_r+0x6c>)
 8010590:	429c      	cmp	r4, r3
 8010592:	d11b      	bne.n	80105cc <_fflush_r+0x58>
 8010594:	686c      	ldr	r4, [r5, #4]
 8010596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d0ef      	beq.n	801057e <_fflush_r+0xa>
 801059e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105a0:	07d0      	lsls	r0, r2, #31
 80105a2:	d404      	bmi.n	80105ae <_fflush_r+0x3a>
 80105a4:	0599      	lsls	r1, r3, #22
 80105a6:	d402      	bmi.n	80105ae <_fflush_r+0x3a>
 80105a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105aa:	f000 f915 	bl	80107d8 <__retarget_lock_acquire_recursive>
 80105ae:	4628      	mov	r0, r5
 80105b0:	4621      	mov	r1, r4
 80105b2:	f7ff ff59 	bl	8010468 <__sflush_r>
 80105b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105b8:	07da      	lsls	r2, r3, #31
 80105ba:	4605      	mov	r5, r0
 80105bc:	d4e0      	bmi.n	8010580 <_fflush_r+0xc>
 80105be:	89a3      	ldrh	r3, [r4, #12]
 80105c0:	059b      	lsls	r3, r3, #22
 80105c2:	d4dd      	bmi.n	8010580 <_fflush_r+0xc>
 80105c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105c6:	f000 f908 	bl	80107da <__retarget_lock_release_recursive>
 80105ca:	e7d9      	b.n	8010580 <_fflush_r+0xc>
 80105cc:	4b05      	ldr	r3, [pc, #20]	; (80105e4 <_fflush_r+0x70>)
 80105ce:	429c      	cmp	r4, r3
 80105d0:	d101      	bne.n	80105d6 <_fflush_r+0x62>
 80105d2:	68ac      	ldr	r4, [r5, #8]
 80105d4:	e7df      	b.n	8010596 <_fflush_r+0x22>
 80105d6:	4b04      	ldr	r3, [pc, #16]	; (80105e8 <_fflush_r+0x74>)
 80105d8:	429c      	cmp	r4, r3
 80105da:	bf08      	it	eq
 80105dc:	68ec      	ldreq	r4, [r5, #12]
 80105de:	e7da      	b.n	8010596 <_fflush_r+0x22>
 80105e0:	0801214c 	.word	0x0801214c
 80105e4:	0801216c 	.word	0x0801216c
 80105e8:	0801212c 	.word	0x0801212c

080105ec <std>:
 80105ec:	2300      	movs	r3, #0
 80105ee:	b510      	push	{r4, lr}
 80105f0:	4604      	mov	r4, r0
 80105f2:	e9c0 3300 	strd	r3, r3, [r0]
 80105f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105fa:	6083      	str	r3, [r0, #8]
 80105fc:	8181      	strh	r1, [r0, #12]
 80105fe:	6643      	str	r3, [r0, #100]	; 0x64
 8010600:	81c2      	strh	r2, [r0, #14]
 8010602:	6183      	str	r3, [r0, #24]
 8010604:	4619      	mov	r1, r3
 8010606:	2208      	movs	r2, #8
 8010608:	305c      	adds	r0, #92	; 0x5c
 801060a:	f7fb fd97 	bl	800c13c <memset>
 801060e:	4b05      	ldr	r3, [pc, #20]	; (8010624 <std+0x38>)
 8010610:	6263      	str	r3, [r4, #36]	; 0x24
 8010612:	4b05      	ldr	r3, [pc, #20]	; (8010628 <std+0x3c>)
 8010614:	62a3      	str	r3, [r4, #40]	; 0x28
 8010616:	4b05      	ldr	r3, [pc, #20]	; (801062c <std+0x40>)
 8010618:	62e3      	str	r3, [r4, #44]	; 0x2c
 801061a:	4b05      	ldr	r3, [pc, #20]	; (8010630 <std+0x44>)
 801061c:	6224      	str	r4, [r4, #32]
 801061e:	6323      	str	r3, [r4, #48]	; 0x30
 8010620:	bd10      	pop	{r4, pc}
 8010622:	bf00      	nop
 8010624:	08010941 	.word	0x08010941
 8010628:	08010963 	.word	0x08010963
 801062c:	0801099b 	.word	0x0801099b
 8010630:	080109bf 	.word	0x080109bf

08010634 <_cleanup_r>:
 8010634:	4901      	ldr	r1, [pc, #4]	; (801063c <_cleanup_r+0x8>)
 8010636:	f000 b8af 	b.w	8010798 <_fwalk_reent>
 801063a:	bf00      	nop
 801063c:	08010575 	.word	0x08010575

08010640 <__sfmoreglue>:
 8010640:	b570      	push	{r4, r5, r6, lr}
 8010642:	2268      	movs	r2, #104	; 0x68
 8010644:	1e4d      	subs	r5, r1, #1
 8010646:	4355      	muls	r5, r2
 8010648:	460e      	mov	r6, r1
 801064a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801064e:	f7ff fa5b 	bl	800fb08 <_malloc_r>
 8010652:	4604      	mov	r4, r0
 8010654:	b140      	cbz	r0, 8010668 <__sfmoreglue+0x28>
 8010656:	2100      	movs	r1, #0
 8010658:	e9c0 1600 	strd	r1, r6, [r0]
 801065c:	300c      	adds	r0, #12
 801065e:	60a0      	str	r0, [r4, #8]
 8010660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010664:	f7fb fd6a 	bl	800c13c <memset>
 8010668:	4620      	mov	r0, r4
 801066a:	bd70      	pop	{r4, r5, r6, pc}

0801066c <__sfp_lock_acquire>:
 801066c:	4801      	ldr	r0, [pc, #4]	; (8010674 <__sfp_lock_acquire+0x8>)
 801066e:	f000 b8b3 	b.w	80107d8 <__retarget_lock_acquire_recursive>
 8010672:	bf00      	nop
 8010674:	2000127d 	.word	0x2000127d

08010678 <__sfp_lock_release>:
 8010678:	4801      	ldr	r0, [pc, #4]	; (8010680 <__sfp_lock_release+0x8>)
 801067a:	f000 b8ae 	b.w	80107da <__retarget_lock_release_recursive>
 801067e:	bf00      	nop
 8010680:	2000127d 	.word	0x2000127d

08010684 <__sinit_lock_acquire>:
 8010684:	4801      	ldr	r0, [pc, #4]	; (801068c <__sinit_lock_acquire+0x8>)
 8010686:	f000 b8a7 	b.w	80107d8 <__retarget_lock_acquire_recursive>
 801068a:	bf00      	nop
 801068c:	2000127e 	.word	0x2000127e

08010690 <__sinit_lock_release>:
 8010690:	4801      	ldr	r0, [pc, #4]	; (8010698 <__sinit_lock_release+0x8>)
 8010692:	f000 b8a2 	b.w	80107da <__retarget_lock_release_recursive>
 8010696:	bf00      	nop
 8010698:	2000127e 	.word	0x2000127e

0801069c <__sinit>:
 801069c:	b510      	push	{r4, lr}
 801069e:	4604      	mov	r4, r0
 80106a0:	f7ff fff0 	bl	8010684 <__sinit_lock_acquire>
 80106a4:	69a3      	ldr	r3, [r4, #24]
 80106a6:	b11b      	cbz	r3, 80106b0 <__sinit+0x14>
 80106a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106ac:	f7ff bff0 	b.w	8010690 <__sinit_lock_release>
 80106b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80106b4:	6523      	str	r3, [r4, #80]	; 0x50
 80106b6:	4b13      	ldr	r3, [pc, #76]	; (8010704 <__sinit+0x68>)
 80106b8:	4a13      	ldr	r2, [pc, #76]	; (8010708 <__sinit+0x6c>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80106be:	42a3      	cmp	r3, r4
 80106c0:	bf04      	itt	eq
 80106c2:	2301      	moveq	r3, #1
 80106c4:	61a3      	streq	r3, [r4, #24]
 80106c6:	4620      	mov	r0, r4
 80106c8:	f000 f820 	bl	801070c <__sfp>
 80106cc:	6060      	str	r0, [r4, #4]
 80106ce:	4620      	mov	r0, r4
 80106d0:	f000 f81c 	bl	801070c <__sfp>
 80106d4:	60a0      	str	r0, [r4, #8]
 80106d6:	4620      	mov	r0, r4
 80106d8:	f000 f818 	bl	801070c <__sfp>
 80106dc:	2200      	movs	r2, #0
 80106de:	60e0      	str	r0, [r4, #12]
 80106e0:	2104      	movs	r1, #4
 80106e2:	6860      	ldr	r0, [r4, #4]
 80106e4:	f7ff ff82 	bl	80105ec <std>
 80106e8:	68a0      	ldr	r0, [r4, #8]
 80106ea:	2201      	movs	r2, #1
 80106ec:	2109      	movs	r1, #9
 80106ee:	f7ff ff7d 	bl	80105ec <std>
 80106f2:	68e0      	ldr	r0, [r4, #12]
 80106f4:	2202      	movs	r2, #2
 80106f6:	2112      	movs	r1, #18
 80106f8:	f7ff ff78 	bl	80105ec <std>
 80106fc:	2301      	movs	r3, #1
 80106fe:	61a3      	str	r3, [r4, #24]
 8010700:	e7d2      	b.n	80106a8 <__sinit+0xc>
 8010702:	bf00      	nop
 8010704:	08011ce4 	.word	0x08011ce4
 8010708:	08010635 	.word	0x08010635

0801070c <__sfp>:
 801070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070e:	4607      	mov	r7, r0
 8010710:	f7ff ffac 	bl	801066c <__sfp_lock_acquire>
 8010714:	4b1e      	ldr	r3, [pc, #120]	; (8010790 <__sfp+0x84>)
 8010716:	681e      	ldr	r6, [r3, #0]
 8010718:	69b3      	ldr	r3, [r6, #24]
 801071a:	b913      	cbnz	r3, 8010722 <__sfp+0x16>
 801071c:	4630      	mov	r0, r6
 801071e:	f7ff ffbd 	bl	801069c <__sinit>
 8010722:	3648      	adds	r6, #72	; 0x48
 8010724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010728:	3b01      	subs	r3, #1
 801072a:	d503      	bpl.n	8010734 <__sfp+0x28>
 801072c:	6833      	ldr	r3, [r6, #0]
 801072e:	b30b      	cbz	r3, 8010774 <__sfp+0x68>
 8010730:	6836      	ldr	r6, [r6, #0]
 8010732:	e7f7      	b.n	8010724 <__sfp+0x18>
 8010734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010738:	b9d5      	cbnz	r5, 8010770 <__sfp+0x64>
 801073a:	4b16      	ldr	r3, [pc, #88]	; (8010794 <__sfp+0x88>)
 801073c:	60e3      	str	r3, [r4, #12]
 801073e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010742:	6665      	str	r5, [r4, #100]	; 0x64
 8010744:	f000 f847 	bl	80107d6 <__retarget_lock_init_recursive>
 8010748:	f7ff ff96 	bl	8010678 <__sfp_lock_release>
 801074c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010754:	6025      	str	r5, [r4, #0]
 8010756:	61a5      	str	r5, [r4, #24]
 8010758:	2208      	movs	r2, #8
 801075a:	4629      	mov	r1, r5
 801075c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010760:	f7fb fcec 	bl	800c13c <memset>
 8010764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801076c:	4620      	mov	r0, r4
 801076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010770:	3468      	adds	r4, #104	; 0x68
 8010772:	e7d9      	b.n	8010728 <__sfp+0x1c>
 8010774:	2104      	movs	r1, #4
 8010776:	4638      	mov	r0, r7
 8010778:	f7ff ff62 	bl	8010640 <__sfmoreglue>
 801077c:	4604      	mov	r4, r0
 801077e:	6030      	str	r0, [r6, #0]
 8010780:	2800      	cmp	r0, #0
 8010782:	d1d5      	bne.n	8010730 <__sfp+0x24>
 8010784:	f7ff ff78 	bl	8010678 <__sfp_lock_release>
 8010788:	230c      	movs	r3, #12
 801078a:	603b      	str	r3, [r7, #0]
 801078c:	e7ee      	b.n	801076c <__sfp+0x60>
 801078e:	bf00      	nop
 8010790:	08011ce4 	.word	0x08011ce4
 8010794:	ffff0001 	.word	0xffff0001

08010798 <_fwalk_reent>:
 8010798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801079c:	4606      	mov	r6, r0
 801079e:	4688      	mov	r8, r1
 80107a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80107a4:	2700      	movs	r7, #0
 80107a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107aa:	f1b9 0901 	subs.w	r9, r9, #1
 80107ae:	d505      	bpl.n	80107bc <_fwalk_reent+0x24>
 80107b0:	6824      	ldr	r4, [r4, #0]
 80107b2:	2c00      	cmp	r4, #0
 80107b4:	d1f7      	bne.n	80107a6 <_fwalk_reent+0xe>
 80107b6:	4638      	mov	r0, r7
 80107b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107bc:	89ab      	ldrh	r3, [r5, #12]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d907      	bls.n	80107d2 <_fwalk_reent+0x3a>
 80107c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107c6:	3301      	adds	r3, #1
 80107c8:	d003      	beq.n	80107d2 <_fwalk_reent+0x3a>
 80107ca:	4629      	mov	r1, r5
 80107cc:	4630      	mov	r0, r6
 80107ce:	47c0      	blx	r8
 80107d0:	4307      	orrs	r7, r0
 80107d2:	3568      	adds	r5, #104	; 0x68
 80107d4:	e7e9      	b.n	80107aa <_fwalk_reent+0x12>

080107d6 <__retarget_lock_init_recursive>:
 80107d6:	4770      	bx	lr

080107d8 <__retarget_lock_acquire_recursive>:
 80107d8:	4770      	bx	lr

080107da <__retarget_lock_release_recursive>:
 80107da:	4770      	bx	lr

080107dc <__swhatbuf_r>:
 80107dc:	b570      	push	{r4, r5, r6, lr}
 80107de:	460e      	mov	r6, r1
 80107e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107e4:	2900      	cmp	r1, #0
 80107e6:	b096      	sub	sp, #88	; 0x58
 80107e8:	4614      	mov	r4, r2
 80107ea:	461d      	mov	r5, r3
 80107ec:	da08      	bge.n	8010800 <__swhatbuf_r+0x24>
 80107ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80107f2:	2200      	movs	r2, #0
 80107f4:	602a      	str	r2, [r5, #0]
 80107f6:	061a      	lsls	r2, r3, #24
 80107f8:	d410      	bmi.n	801081c <__swhatbuf_r+0x40>
 80107fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107fe:	e00e      	b.n	801081e <__swhatbuf_r+0x42>
 8010800:	466a      	mov	r2, sp
 8010802:	f000 f903 	bl	8010a0c <_fstat_r>
 8010806:	2800      	cmp	r0, #0
 8010808:	dbf1      	blt.n	80107ee <__swhatbuf_r+0x12>
 801080a:	9a01      	ldr	r2, [sp, #4]
 801080c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010810:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010814:	425a      	negs	r2, r3
 8010816:	415a      	adcs	r2, r3
 8010818:	602a      	str	r2, [r5, #0]
 801081a:	e7ee      	b.n	80107fa <__swhatbuf_r+0x1e>
 801081c:	2340      	movs	r3, #64	; 0x40
 801081e:	2000      	movs	r0, #0
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	b016      	add	sp, #88	; 0x58
 8010824:	bd70      	pop	{r4, r5, r6, pc}
	...

08010828 <__smakebuf_r>:
 8010828:	898b      	ldrh	r3, [r1, #12]
 801082a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801082c:	079d      	lsls	r5, r3, #30
 801082e:	4606      	mov	r6, r0
 8010830:	460c      	mov	r4, r1
 8010832:	d507      	bpl.n	8010844 <__smakebuf_r+0x1c>
 8010834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010838:	6023      	str	r3, [r4, #0]
 801083a:	6123      	str	r3, [r4, #16]
 801083c:	2301      	movs	r3, #1
 801083e:	6163      	str	r3, [r4, #20]
 8010840:	b002      	add	sp, #8
 8010842:	bd70      	pop	{r4, r5, r6, pc}
 8010844:	ab01      	add	r3, sp, #4
 8010846:	466a      	mov	r2, sp
 8010848:	f7ff ffc8 	bl	80107dc <__swhatbuf_r>
 801084c:	9900      	ldr	r1, [sp, #0]
 801084e:	4605      	mov	r5, r0
 8010850:	4630      	mov	r0, r6
 8010852:	f7ff f959 	bl	800fb08 <_malloc_r>
 8010856:	b948      	cbnz	r0, 801086c <__smakebuf_r+0x44>
 8010858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801085c:	059a      	lsls	r2, r3, #22
 801085e:	d4ef      	bmi.n	8010840 <__smakebuf_r+0x18>
 8010860:	f023 0303 	bic.w	r3, r3, #3
 8010864:	f043 0302 	orr.w	r3, r3, #2
 8010868:	81a3      	strh	r3, [r4, #12]
 801086a:	e7e3      	b.n	8010834 <__smakebuf_r+0xc>
 801086c:	4b0d      	ldr	r3, [pc, #52]	; (80108a4 <__smakebuf_r+0x7c>)
 801086e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010870:	89a3      	ldrh	r3, [r4, #12]
 8010872:	6020      	str	r0, [r4, #0]
 8010874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010878:	81a3      	strh	r3, [r4, #12]
 801087a:	9b00      	ldr	r3, [sp, #0]
 801087c:	6163      	str	r3, [r4, #20]
 801087e:	9b01      	ldr	r3, [sp, #4]
 8010880:	6120      	str	r0, [r4, #16]
 8010882:	b15b      	cbz	r3, 801089c <__smakebuf_r+0x74>
 8010884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010888:	4630      	mov	r0, r6
 801088a:	f000 f8d1 	bl	8010a30 <_isatty_r>
 801088e:	b128      	cbz	r0, 801089c <__smakebuf_r+0x74>
 8010890:	89a3      	ldrh	r3, [r4, #12]
 8010892:	f023 0303 	bic.w	r3, r3, #3
 8010896:	f043 0301 	orr.w	r3, r3, #1
 801089a:	81a3      	strh	r3, [r4, #12]
 801089c:	89a0      	ldrh	r0, [r4, #12]
 801089e:	4305      	orrs	r5, r0
 80108a0:	81a5      	strh	r5, [r4, #12]
 80108a2:	e7cd      	b.n	8010840 <__smakebuf_r+0x18>
 80108a4:	08010635 	.word	0x08010635

080108a8 <_malloc_usable_size_r>:
 80108a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108ac:	1f18      	subs	r0, r3, #4
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	bfbc      	itt	lt
 80108b2:	580b      	ldrlt	r3, [r1, r0]
 80108b4:	18c0      	addlt	r0, r0, r3
 80108b6:	4770      	bx	lr

080108b8 <_raise_r>:
 80108b8:	291f      	cmp	r1, #31
 80108ba:	b538      	push	{r3, r4, r5, lr}
 80108bc:	4604      	mov	r4, r0
 80108be:	460d      	mov	r5, r1
 80108c0:	d904      	bls.n	80108cc <_raise_r+0x14>
 80108c2:	2316      	movs	r3, #22
 80108c4:	6003      	str	r3, [r0, #0]
 80108c6:	f04f 30ff 	mov.w	r0, #4294967295
 80108ca:	bd38      	pop	{r3, r4, r5, pc}
 80108cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80108ce:	b112      	cbz	r2, 80108d6 <_raise_r+0x1e>
 80108d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108d4:	b94b      	cbnz	r3, 80108ea <_raise_r+0x32>
 80108d6:	4620      	mov	r0, r4
 80108d8:	f000 f830 	bl	801093c <_getpid_r>
 80108dc:	462a      	mov	r2, r5
 80108de:	4601      	mov	r1, r0
 80108e0:	4620      	mov	r0, r4
 80108e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108e6:	f000 b817 	b.w	8010918 <_kill_r>
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	d00a      	beq.n	8010904 <_raise_r+0x4c>
 80108ee:	1c59      	adds	r1, r3, #1
 80108f0:	d103      	bne.n	80108fa <_raise_r+0x42>
 80108f2:	2316      	movs	r3, #22
 80108f4:	6003      	str	r3, [r0, #0]
 80108f6:	2001      	movs	r0, #1
 80108f8:	e7e7      	b.n	80108ca <_raise_r+0x12>
 80108fa:	2400      	movs	r4, #0
 80108fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010900:	4628      	mov	r0, r5
 8010902:	4798      	blx	r3
 8010904:	2000      	movs	r0, #0
 8010906:	e7e0      	b.n	80108ca <_raise_r+0x12>

08010908 <raise>:
 8010908:	4b02      	ldr	r3, [pc, #8]	; (8010914 <raise+0xc>)
 801090a:	4601      	mov	r1, r0
 801090c:	6818      	ldr	r0, [r3, #0]
 801090e:	f7ff bfd3 	b.w	80108b8 <_raise_r>
 8010912:	bf00      	nop
 8010914:	200002cc 	.word	0x200002cc

08010918 <_kill_r>:
 8010918:	b538      	push	{r3, r4, r5, lr}
 801091a:	4d07      	ldr	r5, [pc, #28]	; (8010938 <_kill_r+0x20>)
 801091c:	2300      	movs	r3, #0
 801091e:	4604      	mov	r4, r0
 8010920:	4608      	mov	r0, r1
 8010922:	4611      	mov	r1, r2
 8010924:	602b      	str	r3, [r5, #0]
 8010926:	f7f2 f925 	bl	8002b74 <_kill>
 801092a:	1c43      	adds	r3, r0, #1
 801092c:	d102      	bne.n	8010934 <_kill_r+0x1c>
 801092e:	682b      	ldr	r3, [r5, #0]
 8010930:	b103      	cbz	r3, 8010934 <_kill_r+0x1c>
 8010932:	6023      	str	r3, [r4, #0]
 8010934:	bd38      	pop	{r3, r4, r5, pc}
 8010936:	bf00      	nop
 8010938:	20001278 	.word	0x20001278

0801093c <_getpid_r>:
 801093c:	f7f2 b912 	b.w	8002b64 <_getpid>

08010940 <__sread>:
 8010940:	b510      	push	{r4, lr}
 8010942:	460c      	mov	r4, r1
 8010944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010948:	f000 f894 	bl	8010a74 <_read_r>
 801094c:	2800      	cmp	r0, #0
 801094e:	bfab      	itete	ge
 8010950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010952:	89a3      	ldrhlt	r3, [r4, #12]
 8010954:	181b      	addge	r3, r3, r0
 8010956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801095a:	bfac      	ite	ge
 801095c:	6563      	strge	r3, [r4, #84]	; 0x54
 801095e:	81a3      	strhlt	r3, [r4, #12]
 8010960:	bd10      	pop	{r4, pc}

08010962 <__swrite>:
 8010962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010966:	461f      	mov	r7, r3
 8010968:	898b      	ldrh	r3, [r1, #12]
 801096a:	05db      	lsls	r3, r3, #23
 801096c:	4605      	mov	r5, r0
 801096e:	460c      	mov	r4, r1
 8010970:	4616      	mov	r6, r2
 8010972:	d505      	bpl.n	8010980 <__swrite+0x1e>
 8010974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010978:	2302      	movs	r3, #2
 801097a:	2200      	movs	r2, #0
 801097c:	f000 f868 	bl	8010a50 <_lseek_r>
 8010980:	89a3      	ldrh	r3, [r4, #12]
 8010982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801098a:	81a3      	strh	r3, [r4, #12]
 801098c:	4632      	mov	r2, r6
 801098e:	463b      	mov	r3, r7
 8010990:	4628      	mov	r0, r5
 8010992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010996:	f000 b817 	b.w	80109c8 <_write_r>

0801099a <__sseek>:
 801099a:	b510      	push	{r4, lr}
 801099c:	460c      	mov	r4, r1
 801099e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109a2:	f000 f855 	bl	8010a50 <_lseek_r>
 80109a6:	1c43      	adds	r3, r0, #1
 80109a8:	89a3      	ldrh	r3, [r4, #12]
 80109aa:	bf15      	itete	ne
 80109ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80109ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80109b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80109b6:	81a3      	strheq	r3, [r4, #12]
 80109b8:	bf18      	it	ne
 80109ba:	81a3      	strhne	r3, [r4, #12]
 80109bc:	bd10      	pop	{r4, pc}

080109be <__sclose>:
 80109be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109c2:	f000 b813 	b.w	80109ec <_close_r>
	...

080109c8 <_write_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	4d07      	ldr	r5, [pc, #28]	; (80109e8 <_write_r+0x20>)
 80109cc:	4604      	mov	r4, r0
 80109ce:	4608      	mov	r0, r1
 80109d0:	4611      	mov	r1, r2
 80109d2:	2200      	movs	r2, #0
 80109d4:	602a      	str	r2, [r5, #0]
 80109d6:	461a      	mov	r2, r3
 80109d8:	f7f2 f903 	bl	8002be2 <_write>
 80109dc:	1c43      	adds	r3, r0, #1
 80109de:	d102      	bne.n	80109e6 <_write_r+0x1e>
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	b103      	cbz	r3, 80109e6 <_write_r+0x1e>
 80109e4:	6023      	str	r3, [r4, #0]
 80109e6:	bd38      	pop	{r3, r4, r5, pc}
 80109e8:	20001278 	.word	0x20001278

080109ec <_close_r>:
 80109ec:	b538      	push	{r3, r4, r5, lr}
 80109ee:	4d06      	ldr	r5, [pc, #24]	; (8010a08 <_close_r+0x1c>)
 80109f0:	2300      	movs	r3, #0
 80109f2:	4604      	mov	r4, r0
 80109f4:	4608      	mov	r0, r1
 80109f6:	602b      	str	r3, [r5, #0]
 80109f8:	f7f2 f90f 	bl	8002c1a <_close>
 80109fc:	1c43      	adds	r3, r0, #1
 80109fe:	d102      	bne.n	8010a06 <_close_r+0x1a>
 8010a00:	682b      	ldr	r3, [r5, #0]
 8010a02:	b103      	cbz	r3, 8010a06 <_close_r+0x1a>
 8010a04:	6023      	str	r3, [r4, #0]
 8010a06:	bd38      	pop	{r3, r4, r5, pc}
 8010a08:	20001278 	.word	0x20001278

08010a0c <_fstat_r>:
 8010a0c:	b538      	push	{r3, r4, r5, lr}
 8010a0e:	4d07      	ldr	r5, [pc, #28]	; (8010a2c <_fstat_r+0x20>)
 8010a10:	2300      	movs	r3, #0
 8010a12:	4604      	mov	r4, r0
 8010a14:	4608      	mov	r0, r1
 8010a16:	4611      	mov	r1, r2
 8010a18:	602b      	str	r3, [r5, #0]
 8010a1a:	f7f2 f90a 	bl	8002c32 <_fstat>
 8010a1e:	1c43      	adds	r3, r0, #1
 8010a20:	d102      	bne.n	8010a28 <_fstat_r+0x1c>
 8010a22:	682b      	ldr	r3, [r5, #0]
 8010a24:	b103      	cbz	r3, 8010a28 <_fstat_r+0x1c>
 8010a26:	6023      	str	r3, [r4, #0]
 8010a28:	bd38      	pop	{r3, r4, r5, pc}
 8010a2a:	bf00      	nop
 8010a2c:	20001278 	.word	0x20001278

08010a30 <_isatty_r>:
 8010a30:	b538      	push	{r3, r4, r5, lr}
 8010a32:	4d06      	ldr	r5, [pc, #24]	; (8010a4c <_isatty_r+0x1c>)
 8010a34:	2300      	movs	r3, #0
 8010a36:	4604      	mov	r4, r0
 8010a38:	4608      	mov	r0, r1
 8010a3a:	602b      	str	r3, [r5, #0]
 8010a3c:	f7f2 f909 	bl	8002c52 <_isatty>
 8010a40:	1c43      	adds	r3, r0, #1
 8010a42:	d102      	bne.n	8010a4a <_isatty_r+0x1a>
 8010a44:	682b      	ldr	r3, [r5, #0]
 8010a46:	b103      	cbz	r3, 8010a4a <_isatty_r+0x1a>
 8010a48:	6023      	str	r3, [r4, #0]
 8010a4a:	bd38      	pop	{r3, r4, r5, pc}
 8010a4c:	20001278 	.word	0x20001278

08010a50 <_lseek_r>:
 8010a50:	b538      	push	{r3, r4, r5, lr}
 8010a52:	4d07      	ldr	r5, [pc, #28]	; (8010a70 <_lseek_r+0x20>)
 8010a54:	4604      	mov	r4, r0
 8010a56:	4608      	mov	r0, r1
 8010a58:	4611      	mov	r1, r2
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	602a      	str	r2, [r5, #0]
 8010a5e:	461a      	mov	r2, r3
 8010a60:	f7f2 f902 	bl	8002c68 <_lseek>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	d102      	bne.n	8010a6e <_lseek_r+0x1e>
 8010a68:	682b      	ldr	r3, [r5, #0]
 8010a6a:	b103      	cbz	r3, 8010a6e <_lseek_r+0x1e>
 8010a6c:	6023      	str	r3, [r4, #0]
 8010a6e:	bd38      	pop	{r3, r4, r5, pc}
 8010a70:	20001278 	.word	0x20001278

08010a74 <_read_r>:
 8010a74:	b538      	push	{r3, r4, r5, lr}
 8010a76:	4d07      	ldr	r5, [pc, #28]	; (8010a94 <_read_r+0x20>)
 8010a78:	4604      	mov	r4, r0
 8010a7a:	4608      	mov	r0, r1
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	2200      	movs	r2, #0
 8010a80:	602a      	str	r2, [r5, #0]
 8010a82:	461a      	mov	r2, r3
 8010a84:	f7f2 f890 	bl	8002ba8 <_read>
 8010a88:	1c43      	adds	r3, r0, #1
 8010a8a:	d102      	bne.n	8010a92 <_read_r+0x1e>
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	b103      	cbz	r3, 8010a92 <_read_r+0x1e>
 8010a90:	6023      	str	r3, [r4, #0]
 8010a92:	bd38      	pop	{r3, r4, r5, pc}
 8010a94:	20001278 	.word	0x20001278

08010a98 <ceilf>:
 8010a98:	ee10 3a10 	vmov	r3, s0
 8010a9c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010aa0:	3a7f      	subs	r2, #127	; 0x7f
 8010aa2:	2a16      	cmp	r2, #22
 8010aa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010aa8:	dc2a      	bgt.n	8010b00 <ceilf+0x68>
 8010aaa:	2a00      	cmp	r2, #0
 8010aac:	da11      	bge.n	8010ad2 <ceilf+0x3a>
 8010aae:	eddf 7a19 	vldr	s15, [pc, #100]	; 8010b14 <ceilf+0x7c>
 8010ab2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010ab6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010abe:	dd05      	ble.n	8010acc <ceilf+0x34>
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	db23      	blt.n	8010b0c <ceilf+0x74>
 8010ac4:	2900      	cmp	r1, #0
 8010ac6:	bf18      	it	ne
 8010ac8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8010acc:	ee00 3a10 	vmov	s0, r3
 8010ad0:	4770      	bx	lr
 8010ad2:	4911      	ldr	r1, [pc, #68]	; (8010b18 <ceilf+0x80>)
 8010ad4:	4111      	asrs	r1, r2
 8010ad6:	420b      	tst	r3, r1
 8010ad8:	d0fa      	beq.n	8010ad0 <ceilf+0x38>
 8010ada:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8010b14 <ceilf+0x7c>
 8010ade:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010ae2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aea:	ddef      	ble.n	8010acc <ceilf+0x34>
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	bfc2      	ittt	gt
 8010af0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8010af4:	fa40 f202 	asrgt.w	r2, r0, r2
 8010af8:	189b      	addgt	r3, r3, r2
 8010afa:	ea23 0301 	bic.w	r3, r3, r1
 8010afe:	e7e5      	b.n	8010acc <ceilf+0x34>
 8010b00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010b04:	d3e4      	bcc.n	8010ad0 <ceilf+0x38>
 8010b06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010b0a:	4770      	bx	lr
 8010b0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b10:	e7dc      	b.n	8010acc <ceilf+0x34>
 8010b12:	bf00      	nop
 8010b14:	7149f2ca 	.word	0x7149f2ca
 8010b18:	007fffff 	.word	0x007fffff

08010b1c <_init>:
 8010b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b1e:	bf00      	nop
 8010b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b22:	bc08      	pop	{r3}
 8010b24:	469e      	mov	lr, r3
 8010b26:	4770      	bx	lr

08010b28 <_fini>:
 8010b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b2a:	bf00      	nop
 8010b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b2e:	bc08      	pop	{r3}
 8010b30:	469e      	mov	lr, r3
 8010b32:	4770      	bx	lr
