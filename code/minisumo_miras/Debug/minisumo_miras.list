
minisumo_miras.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a104  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001644  0800a2a8  0800a2a8  0001a2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8ec  0800b8ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8ec  0800b8ec  0001b8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8f4  0800b8f4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8f4  0800b8f4  0001b8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8f8  0800b8f8  0001b8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  200001e0  0800badc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  0800badc  000208c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129c8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ab  00000000  00000000  00032bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00035188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  000362b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192db  00000000  00000000  00037300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b6a  00000000  00000000  000505db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e8e7  00000000  00000000  00065145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103a2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f7c  00000000  00000000  00103a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a28c 	.word	0x0800a28c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a28c 	.word	0x0800a28c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <write_cmd>:

extern I2C_HandleTypeDef hi2c2;

static uint8_t buffer[DISPLAY_WIDTH*DISPLAY_HEIGHT/8] = {0};

static inline void write_cmd(const uint8_t byte) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af04      	add	r7, sp, #16
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	//i2c1_write_8(DISPLAY_ADDRESS, 0x00, &byte, 1, 100);
	HAL_I2C_Mem_Write(&hi2c2, DISPLAY_ADDRESS << 1, 0x00, 1, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2200      	movs	r2, #0
 8001024:	2178      	movs	r1, #120	; 0x78
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <write_cmd+0x2c>)
 8001028:	f002 fe52 	bl	8003cd0 <HAL_I2C_Mem_Write>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200006f8 	.word	0x200006f8

08001038 <write_buffer>:

static inline void write_buffer(const void *src, const uint32_t size) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af04      	add	r7, sp, #16
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	//i2c1_write_8(DISPLAY_ADDRESS, 0x40, src, size, 100);
	HAL_I2C_Mem_Write(&hi2c2, DISPLAY_ADDRESS << 1, 0x40, 1, (uint8_t *) src, size, HAL_MAX_DELAY);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	f04f 32ff 	mov.w	r2, #4294967295
 800104a:	9202      	str	r2, [sp, #8]
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	2240      	movs	r2, #64	; 0x40
 8001056:	2178      	movs	r1, #120	; 0x78
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <write_buffer+0x30>)
 800105a:	f002 fe39 	bl	8003cd0 <HAL_I2C_Mem_Write>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200006f8 	.word	0x200006f8

0800106c <set>:

static void set(int16_t x, int16_t y, const display_color_t color) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
 8001076:	460b      	mov	r3, r1
 8001078:	80bb      	strh	r3, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	70fb      	strb	r3, [r7, #3]
	if(x<0 || x>=DISPLAY_WIDTH || y<0 || y>=DISPLAY_HEIGHT)
 800107e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db60      	blt.n	8001148 <set+0xdc>
 8001086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108a:	2b7f      	cmp	r3, #127	; 0x7f
 800108c:	dc5c      	bgt.n	8001148 <set+0xdc>
 800108e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db58      	blt.n	8001148 <set+0xdc>
 8001096:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800109a:	2b3f      	cmp	r3, #63	; 0x3f
 800109c:	dc54      	bgt.n	8001148 <set+0xdc>
	#ifdef DISPLAY_FLIP
		x = DISPLAY_WIDTH - x - 1;
		y = DISPLAY_HEIGHT - y - 1;
	#endif

	if(color) {
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d027      	beq.n	80010f4 <set+0x88>
		buffer[x + (y/8)*DISPLAY_WIDTH] |=(1<<(y%8));
 80010a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	da00      	bge.n	80010b2 <set+0x46>
 80010b0:	3307      	adds	r3, #7
 80010b2:	10db      	asrs	r3, r3, #3
 80010b4:	b218      	sxth	r0, r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	01db      	lsls	r3, r3, #7
 80010ba:	4413      	add	r3, r2
 80010bc:	4a25      	ldr	r2, [pc, #148]	; (8001154 <set+0xe8>)
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	b25a      	sxtb	r2, r3
 80010c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010c6:	4259      	negs	r1, r3
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	f001 0107 	and.w	r1, r1, #7
 80010d0:	bf58      	it	pl
 80010d2:	424b      	negpl	r3, r1
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4619      	mov	r1, r3
 80010d8:	2301      	movs	r3, #1
 80010da:	408b      	lsls	r3, r1
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b259      	sxtb	r1, r3
 80010e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010e6:	4603      	mov	r3, r0
 80010e8:	01db      	lsls	r3, r3, #7
 80010ea:	4413      	add	r3, r2
 80010ec:	b2c9      	uxtb	r1, r1
 80010ee:	4a19      	ldr	r2, [pc, #100]	; (8001154 <set+0xe8>)
 80010f0:	54d1      	strb	r1, [r2, r3]
 80010f2:	e02a      	b.n	800114a <set+0xde>
	} else {
		buffer[x + (y/8)*DISPLAY_WIDTH] &=~(1<<(y%8));
 80010f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	da00      	bge.n	8001102 <set+0x96>
 8001100:	3307      	adds	r3, #7
 8001102:	10db      	asrs	r3, r3, #3
 8001104:	b218      	sxth	r0, r3
 8001106:	4603      	mov	r3, r0
 8001108:	01db      	lsls	r3, r3, #7
 800110a:	4413      	add	r3, r2
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <set+0xe8>)
 800110e:	5cd3      	ldrb	r3, [r2, r3]
 8001110:	b25a      	sxtb	r2, r3
 8001112:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001116:	4259      	negs	r1, r3
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	f001 0107 	and.w	r1, r1, #7
 8001120:	bf58      	it	pl
 8001122:	424b      	negpl	r3, r1
 8001124:	b21b      	sxth	r3, r3
 8001126:	4619      	mov	r1, r3
 8001128:	2301      	movs	r3, #1
 800112a:	408b      	lsls	r3, r1
 800112c:	b25b      	sxtb	r3, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	b25b      	sxtb	r3, r3
 8001132:	4013      	ands	r3, r2
 8001134:	b259      	sxtb	r1, r3
 8001136:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800113a:	4603      	mov	r3, r0
 800113c:	01db      	lsls	r3, r3, #7
 800113e:	4413      	add	r3, r2
 8001140:	b2c9      	uxtb	r1, r1
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <set+0xe8>)
 8001144:	54d1      	strb	r1, [r2, r3]
 8001146:	e000      	b.n	800114a <set+0xde>
		return;
 8001148:	bf00      	nop
	}
}
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	200001fc 	.word	0x200001fc

08001158 <display_init>:
	#endif

	return ((buffer[x + (y/8)*DISPLAY_WIDTH] & (1<<(y%8)))>0);
}

void display_init() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

	write_cmd(0xAE);	// display off
 800115c:	20ae      	movs	r0, #174	; 0xae
 800115e:	f7ff ff53 	bl	8001008 <write_cmd>
	write_cmd(0x20);	// set memory addressing mode
 8001162:	2020      	movs	r0, #32
 8001164:	f7ff ff50 	bl	8001008 <write_cmd>
	write_cmd(0x00);	// horizontal addressing mode
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff ff4d 	bl	8001008 <write_cmd>
	write_cmd(0xB0);	// set page start address for page addressing mode
 800116e:	20b0      	movs	r0, #176	; 0xb0
 8001170:	f7ff ff4a 	bl	8001008 <write_cmd>
	//write_cmd(0xC0);	// mirror vertically
	write_cmd(0xC8);	// set COM output scan direction mode
 8001174:	20c8      	movs	r0, #200	; 0xc8
 8001176:	f7ff ff47 	bl	8001008 <write_cmd>
	write_cmd(0x00);	// set low column address
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff ff44 	bl	8001008 <write_cmd>
	write_cmd(0x10);	// set high column address
 8001180:	2010      	movs	r0, #16
 8001182:	f7ff ff41 	bl	8001008 <write_cmd>
	write_cmd(0x40);	// set start line address
 8001186:	2040      	movs	r0, #64	; 0x40
 8001188:	f7ff ff3e 	bl	8001008 <write_cmd>
	write_cmd(0x81);	// set contrast
 800118c:	2081      	movs	r0, #129	; 0x81
 800118e:	f7ff ff3b 	bl	8001008 <write_cmd>
	write_cmd(0xFF);	//
 8001192:	20ff      	movs	r0, #255	; 0xff
 8001194:	f7ff ff38 	bl	8001008 <write_cmd>
	//write_cmd(0xA0);	// mirror horizontally
	write_cmd(0xA1);	// set segment remap 0 to 127
 8001198:	20a1      	movs	r0, #161	; 0xa1
 800119a:	f7ff ff35 	bl	8001008 <write_cmd>
	//write_cmd(0xA7);	// inverse colors
	write_cmd(0xA6);	// set normal color
 800119e:	20a6      	movs	r0, #166	; 0xa6
 80011a0:	f7ff ff32 	bl	8001008 <write_cmd>
	write_cmd(0xA8);	// set multiplex ratio 1 to 64
 80011a4:	20a8      	movs	r0, #168	; 0xa8
 80011a6:	f7ff ff2f 	bl	8001008 <write_cmd>
	write_cmd(0x3F);	//
 80011aa:	203f      	movs	r0, #63	; 0x3f
 80011ac:	f7ff ff2c 	bl	8001008 <write_cmd>
	write_cmd(0xA4);	// output follows RAM content
 80011b0:	20a4      	movs	r0, #164	; 0xa4
 80011b2:	f7ff ff29 	bl	8001008 <write_cmd>
	write_cmd(0xD3);	// set display offset
 80011b6:	20d3      	movs	r0, #211	; 0xd3
 80011b8:	f7ff ff26 	bl	8001008 <write_cmd>
	write_cmd(0x00);	//
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff ff23 	bl	8001008 <write_cmd>
	write_cmd(0xD5);	// set display clock divide ratio
 80011c2:	20d5      	movs	r0, #213	; 0xd5
 80011c4:	f7ff ff20 	bl	8001008 <write_cmd>
	write_cmd(0xF0);	//
 80011c8:	20f0      	movs	r0, #240	; 0xf0
 80011ca:	f7ff ff1d 	bl	8001008 <write_cmd>
	write_cmd(0xD9);	// set pre-charge period
 80011ce:	20d9      	movs	r0, #217	; 0xd9
 80011d0:	f7ff ff1a 	bl	8001008 <write_cmd>
	write_cmd(0x22);	//
 80011d4:	2022      	movs	r0, #34	; 0x22
 80011d6:	f7ff ff17 	bl	8001008 <write_cmd>
	write_cmd(0xDA);	// set COM pins hardware configuration
 80011da:	20da      	movs	r0, #218	; 0xda
 80011dc:	f7ff ff14 	bl	8001008 <write_cmd>
	write_cmd(0x12);	//
 80011e0:	2012      	movs	r0, #18
 80011e2:	f7ff ff11 	bl	8001008 <write_cmd>
	write_cmd(0xDB);	// set VCOMH
 80011e6:	20db      	movs	r0, #219	; 0xdb
 80011e8:	f7ff ff0e 	bl	8001008 <write_cmd>
	write_cmd(0x20);	//
 80011ec:	2020      	movs	r0, #32
 80011ee:	f7ff ff0b 	bl	8001008 <write_cmd>
	write_cmd(0x8D);	// set DC-DC enable
 80011f2:	208d      	movs	r0, #141	; 0x8d
 80011f4:	f7ff ff08 	bl	8001008 <write_cmd>
	write_cmd(0x14);	//
 80011f8:	2014      	movs	r0, #20
 80011fa:	f7ff ff05 	bl	8001008 <write_cmd>
	write_cmd(0xAF);	// set display on
 80011fe:	20af      	movs	r0, #175	; 0xaf
 8001200:	f7ff ff02 	bl	8001008 <write_cmd>

	display_fill(DISPLAY_COLOR_BLACK);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f803 	bl	8001210 <display_fill>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <display_fill>:

void display_fill(const display_color_t color) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
	if(color)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <display_fill+0x1e>
		memset(buffer, 0xFF, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
 8001220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001224:	21ff      	movs	r1, #255	; 0xff
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <display_fill+0x34>)
 8001228:	f004 fb3a 	bl	80058a0 <memset>
	else
		memset(buffer, 0x00, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
}
 800122c:	e005      	b.n	800123a <display_fill+0x2a>
		memset(buffer, 0x00, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
 800122e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001232:	2100      	movs	r1, #0
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <display_fill+0x34>)
 8001236:	f004 fb33 	bl	80058a0 <memset>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200001fc 	.word	0x200001fc

08001248 <display_render>:

void display_render() {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<DISPLAY_HEIGHT/8; i++) {
 800124e:	2300      	movs	r3, #0
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	e016      	b.n	8001282 <display_render+0x3a>
		write_cmd(0xB0 + i);	// set current RAM page address
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	3b50      	subs	r3, #80	; 0x50
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fed4 	bl	8001008 <write_cmd>
		write_cmd(0x00);
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fed1 	bl	8001008 <write_cmd>
		write_cmd(0x10);
 8001266:	2010      	movs	r0, #16
 8001268:	f7ff fece 	bl	8001008 <write_cmd>
		write_buffer(&buffer[DISPLAY_WIDTH*i], DISPLAY_WIDTH);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	01db      	lsls	r3, r3, #7
 8001270:	4a08      	ldr	r2, [pc, #32]	; (8001294 <display_render+0x4c>)
 8001272:	4413      	add	r3, r2
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fede 	bl	8001038 <write_buffer>
	for(uint8_t i=0; i<DISPLAY_HEIGHT/8; i++) {
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	3301      	adds	r3, #1
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b07      	cmp	r3, #7
 8001286:	d9e5      	bls.n	8001254 <display_render+0xc>
	}
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200001fc 	.word	0x200001fc

08001298 <display_bitmap>:
			set(i + x, j + y, !get(i + x, j + y));
		}
	}
}

void display_bitmap(const int16_t x, const int16_t y, const display_color_t color, const void *src, const int16_t w, const int16_t h) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4603      	mov	r3, r0
 80012a2:	81fb      	strh	r3, [r7, #14]
 80012a4:	460b      	mov	r3, r1
 80012a6:	81bb      	strh	r3, [r7, #12]
 80012a8:	4613      	mov	r3, r2
 80012aa:	72fb      	strb	r3, [r7, #11]
	const uint16_t byte_per_row = ceilf((float)w/8.f);
 80012ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80012bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012c0:	eeb0 0a47 	vmov.f32	s0, s14
 80012c4:	f008 ffa0 	bl	800a208 <ceilf>
 80012c8:	eef0 7a40 	vmov.f32	s15, s0
 80012cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d0:	ee17 3a90 	vmov	r3, s15
 80012d4:	827b      	strh	r3, [r7, #18]


	for(int16_t i=0; i<h; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	82fb      	strh	r3, [r7, #22]
 80012da:	e05a      	b.n	8001392 <display_bitmap+0xfa>
		for(int16_t j=0; j<w; j++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	82bb      	strh	r3, [r7, #20]
 80012e0:	e04b      	b.n	800137a <display_bitmap+0xe2>

			if(((uint8_t *)src)[i*byte_per_row + j/8] & (1<<(7 - j%8)))
 80012e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012e6:	8a7a      	ldrh	r2, [r7, #18]
 80012e8:	fb03 f202 	mul.w	r2, r3, r2
 80012ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da00      	bge.n	80012f6 <display_bitmap+0x5e>
 80012f4:	3307      	adds	r3, #7
 80012f6:	10db      	asrs	r3, r3, #3
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	461a      	mov	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800130a:	425a      	negs	r2, r3
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	f002 0207 	and.w	r2, r2, #7
 8001314:	bf58      	it	pl
 8001316:	4253      	negpl	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	fa41 f303 	asr.w	r3, r1, r3
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00e      	beq.n	8001348 <display_bitmap+0xb0>
				set(j + x, i + y, color);
 800132a:	8aba      	ldrh	r2, [r7, #20]
 800132c:	89fb      	ldrh	r3, [r7, #14]
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	b218      	sxth	r0, r3
 8001334:	8afa      	ldrh	r2, [r7, #22]
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	b29b      	uxth	r3, r3
 800133c:	b21b      	sxth	r3, r3
 800133e:	7afa      	ldrb	r2, [r7, #11]
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fe93 	bl	800106c <set>
 8001346:	e012      	b.n	800136e <display_bitmap+0xd6>
			else
				set(j + x, i + y, !color);
 8001348:	8aba      	ldrh	r2, [r7, #20]
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	4413      	add	r3, r2
 800134e:	b29b      	uxth	r3, r3
 8001350:	b218      	sxth	r0, r3
 8001352:	8afa      	ldrh	r2, [r7, #22]
 8001354:	89bb      	ldrh	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b219      	sxth	r1, r3
 800135c:	7afb      	ldrb	r3, [r7, #11]
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf0c      	ite	eq
 8001362:	2301      	moveq	r3, #1
 8001364:	2300      	movne	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	f7ff fe7f 	bl	800106c <set>
		for(int16_t j=0; j<w; j++) {
 800136e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001372:	b29b      	uxth	r3, r3
 8001374:	3301      	adds	r3, #1
 8001376:	b29b      	uxth	r3, r3
 8001378:	82bb      	strh	r3, [r7, #20]
 800137a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800137e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001382:	429a      	cmp	r2, r3
 8001384:	dbad      	blt.n	80012e2 <display_bitmap+0x4a>
	for(int16_t i=0; i<h; i++) {
 8001386:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800138a:	b29b      	uxth	r3, r3
 800138c:	3301      	adds	r3, #1
 800138e:	b29b      	uxth	r3, r3
 8001390:	82fb      	strh	r3, [r7, #22]
 8001392:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001396:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800139a:	429a      	cmp	r2, r3
 800139c:	db9e      	blt.n	80012dc <display_bitmap+0x44>
		}
	}
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <character>:

static void character(const int16_t x, const int16_t y, const display_color_t color, const display_font_t font, const char c) {
 80013a8:	b082      	sub	sp, #8
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	80bb      	strh	r3, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	70fb      	strb	r3, [r7, #3]
	const void *src = &font.data[(c - ' ')*font.height];
 80013be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013c4:	3b20      	subs	r3, #32
 80013c6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
	const uint16_t byte_per_row = ceilf((float)font.width/16.f);
 80013d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80013e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013e8:	eeb0 0a47 	vmov.f32	s0, s14
 80013ec:	f008 ff0c 	bl	800a208 <ceilf>
 80013f0:	eef0 7a40 	vmov.f32	s15, s0
 80013f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f8:	ee17 3a90 	vmov	r3, s15
 80013fc:	81fb      	strh	r3, [r7, #14]

	for(int16_t i=0; i<font.height; i++) {
 80013fe:	2300      	movs	r3, #0
 8001400:	82fb      	strh	r3, [r7, #22]
 8001402:	e05a      	b.n	80014ba <character+0x112>
		for(int16_t j=0; j<font.width; j++) {
 8001404:	2300      	movs	r3, #0
 8001406:	82bb      	strh	r3, [r7, #20]
 8001408:	e04b      	b.n	80014a2 <character+0xfa>

			if(((uint16_t *)src)[i*byte_per_row + j/16] & (1<<(15 - j%16)))
 800140a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140e:	89fa      	ldrh	r2, [r7, #14]
 8001410:	fb03 f202 	mul.w	r2, r3, r2
 8001414:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	da00      	bge.n	800141e <character+0x76>
 800141c:	330f      	adds	r3, #15
 800141e:	111b      	asrs	r3, r3, #4
 8001420:	b21b      	sxth	r3, r3
 8001422:	4413      	add	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4413      	add	r3, r2
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001432:	425a      	negs	r2, r3
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	f002 020f 	and.w	r2, r2, #15
 800143c:	bf58      	it	pl
 800143e:	4253      	negpl	r3, r2
 8001440:	b21b      	sxth	r3, r3
 8001442:	f1c3 030f 	rsb	r3, r3, #15
 8001446:	fa41 f303 	asr.w	r3, r1, r3
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00e      	beq.n	8001470 <character+0xc8>
				set(j + x, i + y, color);
 8001452:	8aba      	ldrh	r2, [r7, #20]
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	4413      	add	r3, r2
 8001458:	b29b      	uxth	r3, r3
 800145a:	b218      	sxth	r0, r3
 800145c:	8afa      	ldrh	r2, [r7, #22]
 800145e:	88bb      	ldrh	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	b29b      	uxth	r3, r3
 8001464:	b21b      	sxth	r3, r3
 8001466:	78fa      	ldrb	r2, [r7, #3]
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fdff 	bl	800106c <set>
 800146e:	e012      	b.n	8001496 <character+0xee>
			else
				set(j + x, i + y, !color);
 8001470:	8aba      	ldrh	r2, [r7, #20]
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	b218      	sxth	r0, r3
 800147a:	8afa      	ldrh	r2, [r7, #22]
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	b29b      	uxth	r3, r3
 8001482:	b219      	sxth	r1, r3
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	2b00      	cmp	r3, #0
 8001488:	bf0c      	ite	eq
 800148a:	2301      	moveq	r3, #1
 800148c:	2300      	movne	r3, #0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	f7ff fdeb 	bl	800106c <set>
		for(int16_t j=0; j<font.width; j++) {
 8001496:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800149a:	b29b      	uxth	r3, r3
 800149c:	3301      	adds	r3, #1
 800149e:	b29b      	uxth	r3, r3
 80014a0:	82bb      	strh	r3, [r7, #20]
 80014a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014a6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014aa:	4293      	cmp	r3, r2
 80014ac:	dbad      	blt.n	800140a <character+0x62>
	for(int16_t i=0; i<font.height; i++) {
 80014ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	82fb      	strh	r3, [r7, #22]
 80014ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014be:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80014c2:	4293      	cmp	r3, r2
 80014c4:	db9e      	blt.n	8001404 <character+0x5c>
		}
	}
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014d2:	b002      	add	sp, #8
 80014d4:	4770      	bx	lr

080014d6 <display_printf>:

void display_printf(const int16_t x, const int16_t y, const display_color_t color, const display_font_t font, const char *format, ...) {
 80014d6:	b40c      	push	{r2, r3}
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af02      	add	r7, sp, #8
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014e0:	4603      	mov	r3, r0
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	460b      	mov	r3, r1
 80014e6:	80bb      	strh	r3, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	70fb      	strb	r3, [r7, #3]
	va_list valist;
	va_start(valist, format);
 80014ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24

	char buffer[22] = {0};
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	821a      	strh	r2, [r3, #16]
	vsnprintf(buffer, 22, format, valist);
 8001506:	f107 000c 	add.w	r0, r7, #12
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800150e:	2116      	movs	r1, #22
 8001510:	f005 ff46 	bl	80073a0 <vsniprintf>

	const size_t n = strlen(buffer);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe fe61 	bl	80001e0 <strlen>
 800151e:	62b8      	str	r0, [r7, #40]	; 0x28

	for(size_t i=0; i<n; i++) {
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001524:	e01c      	b.n	8001560 <display_printf+0x8a>
		character(x + i*font.width, y, color, font, buffer[i]);
 8001526:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800152a:	b29a      	uxth	r2, r3
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	b29b      	uxth	r3, r3
 8001530:	fb12 f303 	smulbb	r3, r2, r3
 8001534:	b29a      	uxth	r2, r3
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	4413      	add	r3, r2
 800153a:	b29b      	uxth	r3, r3
 800153c:	b218      	sxth	r0, r3
 800153e:	f107 020c 	add.w	r2, r7, #12
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001556:	f7ff ff27 	bl	80013a8 <character>
	for(size_t i=0; i<n; i++) {
 800155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155c:	3301      	adds	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	429a      	cmp	r2, r3
 8001566:	d3de      	bcc.n	8001526 <display_printf+0x50>
	}
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3730      	adds	r7, #48	; 0x30
 800156e:	46bd      	mov	sp, r7
 8001570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001574:	b002      	add	sp, #8
 8001576:	4770      	bx	lr

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157e:	f000 ff91 	bl	80024a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001582:	f000 f8db 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001586:	f000 fb19 	bl	8001bbc <MX_GPIO_Init>
  MX_DMA_Init();
 800158a:	f000 faf7 	bl	8001b7c <MX_DMA_Init>
  MX_I2C1_Init();
 800158e:	f000 f985 	bl	800189c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001592:	f000 f9df 	bl	8001954 <MX_I2C3_Init>
  MX_ADC1_Init();
 8001596:	f000 f92f 	bl	80017f8 <MX_ADC1_Init>
  MX_I2C2_Init();
 800159a:	f000 f9ad 	bl	80018f8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800159e:	f000 fac3 	bl	8001b28 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80015a2:	f000 fa05 	bl	80019b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015a6:	f000 fa5b 	bl	8001a60 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  display_init();
 80015aa:	f7ff fdd5 	bl	8001158 <display_init>
		  xd++;
	  }
  }
  */

 for (int i = 0; i < NUM_OF_READINGS; ++i)
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e007      	b.n	80015c4 <main+0x4c>
      readings[i] = 0;
 80015b4:	4a54      	ldr	r2, [pc, #336]	; (8001708 <main+0x190>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2100      	movs	r1, #0
 80015ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 for (int i = 0; i < NUM_OF_READINGS; ++i)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3301      	adds	r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b09      	cmp	r3, #9
 80015c8:	ddf4      	ble.n	80015b4 <main+0x3c>

 uint16_t battery;
 HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &battery, 1);
 80015ca:	1cbb      	adds	r3, r7, #2
 80015cc:	2201      	movs	r2, #1
 80015ce:	4619      	mov	r1, r3
 80015d0:	484e      	ldr	r0, [pc, #312]	; (800170c <main+0x194>)
 80015d2:	f001 f841 	bl	8002658 <HAL_ADC_Start_DMA>
 display_fill(DISPLAY_COLOR_BLACK);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff fe1a 	bl	8001210 <display_fill>
 display_printf(20, 20, DISPLAY_COLOR_WHITE, display_font_7x10, "Hello world");
 80015dc:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <main+0x198>)
 80015de:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <main+0x19c>)
 80015e0:	9201      	str	r2, [sp, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2201      	movs	r2, #1
 80015ea:	2114      	movs	r1, #20
 80015ec:	2014      	movs	r0, #20
 80015ee:	f7ff ff72 	bl	80014d6 <display_printf>
 display_render();
 80015f2:	f7ff fe29 	bl	8001248 <display_render>
 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 80015f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015fa:	4847      	ldr	r0, [pc, #284]	; (8001718 <main+0x1a0>)
 80015fc:	f002 fa09 	bl	8003a12 <HAL_GPIO_TogglePin>
 HAL_Delay(1000);
 8001600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001604:	f000 ffc0 	bl	8002588 <HAL_Delay>
  while (1)
  {
	total -= readings[readIndex];       //subtract the last reading:
 8001608:	4b44      	ldr	r3, [pc, #272]	; (800171c <main+0x1a4>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b44      	ldr	r3, [pc, #272]	; (8001720 <main+0x1a8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	493d      	ldr	r1, [pc, #244]	; (8001708 <main+0x190>)
 8001612:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	4a40      	ldr	r2, [pc, #256]	; (800171c <main+0x1a4>)
 800161a:	6013      	str	r3, [r2, #0]
	readings[readIndex] = battery;      //read from the sensor:
 800161c:	887a      	ldrh	r2, [r7, #2]
 800161e:	4b40      	ldr	r3, [pc, #256]	; (8001720 <main+0x1a8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4611      	mov	r1, r2
 8001624:	4a38      	ldr	r2, [pc, #224]	; (8001708 <main+0x190>)
 8001626:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	total += readings[readIndex];       //add the reading to the total:
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <main+0x1a8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a36      	ldr	r2, [pc, #216]	; (8001708 <main+0x190>)
 8001630:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001634:	4b39      	ldr	r3, [pc, #228]	; (800171c <main+0x1a4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4413      	add	r3, r2
 800163a:	4a38      	ldr	r2, [pc, #224]	; (800171c <main+0x1a4>)
 800163c:	6013      	str	r3, [r2, #0]
	++readIndex;                        //advance to the next position in the array:
 800163e:	4b38      	ldr	r3, [pc, #224]	; (8001720 <main+0x1a8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a36      	ldr	r2, [pc, #216]	; (8001720 <main+0x1a8>)
 8001646:	6013      	str	r3, [r2, #0]
	if (readIndex >= NUM_OF_READINGS)   //if we're at the end of the array...
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <main+0x1a8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b09      	cmp	r3, #9
 800164e:	dd02      	ble.n	8001656 <main+0xde>
	readIndex = 0;                    //...wrap around to the beginning:
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <main+0x1a8>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
	average = total / NUM_OF_READINGS;  //calculate the average:
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <main+0x1a4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a32      	ldr	r2, [pc, #200]	; (8001724 <main+0x1ac>)
 800165c:	fb82 1203 	smull	r1, r2, r2, r3
 8001660:	1092      	asrs	r2, r2, #2
 8001662:	17db      	asrs	r3, r3, #31
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	4a30      	ldr	r2, [pc, #192]	; (8001728 <main+0x1b0>)
 8001668:	6013      	str	r3, [r2, #0]

	display_bitmap(0, 0, DISPLAY_COLOR_WHITE, &konar_v_128_64, 128, 64);
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <main+0x1b4>)
 8001674:	2201      	movs	r2, #1
 8001676:	2100      	movs	r1, #0
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff fe0d 	bl	8001298 <display_bitmap>
	//display_printf(8, 8, DISPLAY_COLOR_WHITE, display_font_7x10, "%d", (((int) battery))*3,3/4096 * 3,3/13,3);
	display_printf(96, 0, DISPLAY_COLOR_WHITE, display_font_6x8, "%.2fV", ((int) average) *3.3 / 4096 * 13.3 / 3.3);
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <main+0x1b0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff56 	bl	8000534 <__aeabi_i2d>
 8001688:	a31b      	add	r3, pc, #108	; (adr r3, 80016f8 <main+0x180>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe ffbb 	bl	8000608 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <main+0x1b8>)
 80016a0:	f7ff f8dc 	bl	800085c <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	a314      	add	r3, pc, #80	; (adr r3, 8001700 <main+0x188>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe ffa9 	bl	8000608 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	a30e      	add	r3, pc, #56	; (adr r3, 80016f8 <main+0x180>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7ff f8ca 	bl	800085c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <main+0x1bc>)
 80016d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016d6:	4a18      	ldr	r2, [pc, #96]	; (8001738 <main+0x1c0>)
 80016d8:	9201      	str	r2, [sp, #4]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	9200      	str	r2, [sp, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	2100      	movs	r1, #0
 80016e4:	2060      	movs	r0, #96	; 0x60
 80016e6:	f7ff fef6 	bl	80014d6 <display_printf>
	//printf("%d", battery);
	display_render();
 80016ea:	f7ff fdad 	bl	8001248 <display_render>
	HAL_Delay(10);
 80016ee:	200a      	movs	r0, #10
 80016f0:	f000 ff4a 	bl	8002588 <HAL_Delay>
	total -= readings[readIndex];       //subtract the last reading:
 80016f4:	e788      	b.n	8001608 <main+0x90>
 80016f6:	bf00      	nop
 80016f8:	66666666 	.word	0x66666666
 80016fc:	400a6666 	.word	0x400a6666
 8001700:	9999999a 	.word	0x9999999a
 8001704:	402a9999 	.word	0x402a9999
 8001708:	20000874 	.word	0x20000874
 800170c:	200005fc 	.word	0x200005fc
 8001710:	0800b020 	.word	0x0800b020
 8001714:	0800a2a8 	.word	0x0800a2a8
 8001718:	40020000 	.word	0x40020000
 800171c:	200008a0 	.word	0x200008a0
 8001720:	2000089c 	.word	0x2000089c
 8001724:	66666667 	.word	0x66666667
 8001728:	200008a4 	.word	0x200008a4
 800172c:	0800b028 	.word	0x0800b028
 8001730:	40b00000 	.word	0x40b00000
 8001734:	0800b018 	.word	0x0800b018
 8001738:	0800a2b4 	.word	0x0800a2b4

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	; 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f004 f8a8 	bl	80058a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <SystemClock_Config+0xb4>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <SystemClock_Config+0xb4>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <SystemClock_Config+0xb4>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <SystemClock_Config+0xb8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <SystemClock_Config+0xb8>)
 8001786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <SystemClock_Config+0xb8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179c:	2301      	movs	r3, #1
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a0:	2310      	movs	r3, #16
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a8:	f107 0320 	add.w	r3, r7, #32
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 fda7 	bl	8004300 <HAL_RCC_OscConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80017b8:	f000 fa9c 	bl	8001cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017bc:	230f      	movs	r3, #15
 80017be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 f80a 	bl	80047f0 <HAL_RCC_ClockConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017e2:	f000 fa87 	bl	8001cf4 <Error_Handler>
  }
}
 80017e6:	bf00      	nop
 80017e8:	3750      	adds	r7, #80	; 0x50
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000

080017f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fe:	463b      	mov	r3, r7
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_ADC1_Init+0x98>)
 800180c:	4a21      	ldr	r2, [pc, #132]	; (8001894 <MX_ADC1_Init+0x9c>)
 800180e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_ADC1_Init+0x98>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_ADC1_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_ADC1_Init+0x98>)
 800181e:	2201      	movs	r2, #1
 8001820:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <MX_ADC1_Init+0x98>)
 8001824:	2201      	movs	r2, #1
 8001826:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <MX_ADC1_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_ADC1_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <MX_ADC1_Init+0x98>)
 8001838:	4a17      	ldr	r2, [pc, #92]	; (8001898 <MX_ADC1_Init+0xa0>)
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_ADC1_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MX_ADC1_Init+0x98>)
 8001844:	2201      	movs	r2, #1
 8001846:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_ADC1_Init+0x98>)
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_ADC1_Init+0x98>)
 8001852:	2201      	movs	r2, #1
 8001854:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001856:	480e      	ldr	r0, [pc, #56]	; (8001890 <MX_ADC1_Init+0x98>)
 8001858:	f000 feba 	bl	80025d0 <HAL_ADC_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001862:	f000 fa47 	bl	8001cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001866:	2309      	movs	r3, #9
 8001868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800186a:	2301      	movs	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800186e:	2307      	movs	r3, #7
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001872:	463b      	mov	r3, r7
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <MX_ADC1_Init+0x98>)
 8001878:	f000 fffc 	bl	8002874 <HAL_ADC_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001882:	f000 fa37 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200005fc 	.word	0x200005fc
 8001894:	40012000 	.word	0x40012000
 8001898:	0f000001 	.word	0x0f000001

0800189c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_I2C1_Init+0x50>)
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <MX_I2C1_Init+0x54>)
 80018a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_I2C1_Init+0x50>)
 80018a8:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <MX_I2C1_Init+0x58>)
 80018aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_I2C1_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_I2C1_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_I2C1_Init+0x50>)
 80018ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_I2C1_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_I2C1_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <MX_I2C1_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_I2C1_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_I2C1_Init+0x50>)
 80018da:	f002 f8b5 	bl	8003a48 <HAL_I2C_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018e4:	f000 fa06 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200006a4 	.word	0x200006a4
 80018f0:	40005400 	.word	0x40005400
 80018f4:	000186a0 	.word	0x000186a0

080018f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C2_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C2_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C2_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C2_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C2_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C2_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C2_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C2_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C2_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C2_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C2_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C2_Init+0x50>)
 8001936:	f002 f887 	bl	8003a48 <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001940:	f000 f9d8 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200006f8 	.word	0x200006f8
 800194c:	40005800 	.word	0x40005800
 8001950:	000186a0 	.word	0x000186a0

08001954 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_I2C3_Init+0x50>)
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <MX_I2C3_Init+0x54>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_I2C3_Init+0x50>)
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_I2C3_Init+0x58>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_I2C3_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_I2C3_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_I2C3_Init+0x50>)
 8001972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001976:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <MX_I2C3_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_I2C3_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <MX_I2C3_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_I2C3_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_I2C3_Init+0x50>)
 8001992:	f002 f859 	bl	8003a48 <HAL_I2C_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800199c:	f000 f9aa 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000074c 	.word	0x2000074c
 80019a8:	40005c00 	.word	0x40005c00
 80019ac:	000186a0 	.word	0x000186a0

080019b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <MX_TIM2_Init+0xac>)
 80019d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <MX_TIM2_Init+0xac>)
 80019dc:	2200      	movs	r2, #0
 80019de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <MX_TIM2_Init+0xac>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_TIM2_Init+0xac>)
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_TIM2_Init+0xac>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <MX_TIM2_Init+0xac>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019fa:	4818      	ldr	r0, [pc, #96]	; (8001a5c <MX_TIM2_Init+0xac>)
 80019fc:	f003 f8d8 	bl	8004bb0 <HAL_TIM_PWM_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a06:	f000 f975 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	4619      	mov	r1, r3
 8001a18:	4810      	ldr	r0, [pc, #64]	; (8001a5c <MX_TIM2_Init+0xac>)
 8001a1a:	f003 fbe7 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a24:	f000 f966 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a28:	2360      	movs	r3, #96	; 0x60
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <MX_TIM2_Init+0xac>)
 8001a40:	f003 f906 	bl	8004c50 <HAL_TIM_PWM_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a4a:	f000 f953 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <MX_TIM2_Init+0xac>)
 8001a50:	f000 fb2c 	bl	80020ac <HAL_TIM_MspPostInit>

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200007a0 	.word	0x200007a0

08001a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001a84:	4a27      	ldr	r2, [pc, #156]	; (8001b24 <MX_TIM3_Init+0xc4>)
 8001a86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aa8:	481d      	ldr	r0, [pc, #116]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001aaa:	f003 f881 	bl	8004bb0 <HAL_TIM_PWM_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ab4:	f000 f91e 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4816      	ldr	r0, [pc, #88]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001ac8:	f003 fb90 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001ad2:	f000 f90f 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad6:	2360      	movs	r3, #96	; 0x60
 8001ad8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4619      	mov	r1, r3
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001aee:	f003 f8af 	bl	8004c50 <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001af8:	f000 f8fc 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2204      	movs	r2, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4807      	ldr	r0, [pc, #28]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001b04:	f003 f8a4 	bl	8004c50 <HAL_TIM_PWM_ConfigChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b0e:	f000 f8f1 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b12:	4803      	ldr	r0, [pc, #12]	; (8001b20 <MX_TIM3_Init+0xc0>)
 8001b14:	f000 faca 	bl	80020ac <HAL_TIM_MspPostInit>

}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200007e8 	.word	0x200007e8
 8001b24:	40000400 	.word	0x40000400

08001b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <MX_USART2_UART_Init+0x50>)
 8001b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MX_USART2_UART_Init+0x4c>)
 8001b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_USART2_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_USART2_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <MX_USART2_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_USART2_UART_Init+0x4c>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <MX_USART2_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_USART2_UART_Init+0x4c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_USART2_UART_Init+0x4c>)
 8001b60:	f003 fbb2 	bl	80052c8 <HAL_UART_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b6a:	f000 f8c3 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000830 	.word	0x20000830
 8001b78:	40004400 	.word	0x40004400

08001b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_DMA_Init+0x3c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <MX_DMA_Init+0x3c>)
 8001b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_DMA_Init+0x3c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2038      	movs	r0, #56	; 0x38
 8001ba4:	f001 f9f1 	bl	8002f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ba8:	2038      	movs	r0, #56	; 0x38
 8001baa:	f001 fa0a 	bl	8002fc2 <HAL_NVIC_EnableIRQ>

}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b40      	ldr	r3, [pc, #256]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a3b      	ldr	r2, [pc, #236]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a34      	ldr	r2, [pc, #208]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <MX_GPIO_Init+0x128>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_X3_Pin|TOF_X2_Pin|TOF_X1_Pin|TOF_X6_Pin
 8001c42:	2200      	movs	r2, #0
 8001c44:	f64e 0120 	movw	r1, #59424	; 0xe820
 8001c48:	4827      	ldr	r0, [pc, #156]	; (8001ce8 <MX_GPIO_Init+0x12c>)
 8001c4a:	f001 fec9 	bl	80039e0 <HAL_GPIO_WritePin>
                          |LS_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motor_R_DIR_2_Pin|motor_R_DIR_1_Pin|TOF_X5_Pin|motor_L_DIR_1_Pin
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f244 3105 	movw	r1, #17157	; 0x4305
 8001c54:	4825      	ldr	r0, [pc, #148]	; (8001cec <MX_GPIO_Init+0x130>)
 8001c56:	f001 fec3 	bl	80039e0 <HAL_GPIO_WritePin>
                          |motor_L_DIR_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_X4_GPIO_Port, TOF_X4_Pin, GPIO_PIN_RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c60:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <MX_GPIO_Init+0x134>)
 8001c62:	f001 febd 	bl	80039e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOF_X3_Pin TOF_X2_Pin TOF_X1_Pin TOF_X6_Pin
                           LS_ON_Pin */
  GPIO_InitStruct.Pin = TOF_X3_Pin|TOF_X2_Pin|TOF_X1_Pin|TOF_X6_Pin
 8001c66:	f64e 0320 	movw	r3, #59424	; 0xe820
 8001c6a:	617b      	str	r3, [r7, #20]
                          |LS_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481a      	ldr	r0, [pc, #104]	; (8001ce8 <MX_GPIO_Init+0x12c>)
 8001c80:	f001 fd2a 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_R_DIR_2_Pin motor_R_DIR_1_Pin TOF_X5_Pin motor_L_DIR_1_Pin
                           motor_L_DIR_2_Pin */
  GPIO_InitStruct.Pin = motor_R_DIR_2_Pin|motor_R_DIR_1_Pin|TOF_X5_Pin|motor_L_DIR_1_Pin
 8001c84:	f244 3305 	movw	r3, #17157	; 0x4305
 8001c88:	617b      	str	r3, [r7, #20]
                          |motor_L_DIR_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4813      	ldr	r0, [pc, #76]	; (8001cec <MX_GPIO_Init+0x130>)
 8001c9e:	f001 fd1b 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : starter_Pin */
  GPIO_InitStruct.Pin = starter_Pin;
 8001ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(starter_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480d      	ldr	r0, [pc, #52]	; (8001cec <MX_GPIO_Init+0x130>)
 8001cb8:	f001 fd0e 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_X4_Pin */
  GPIO_InitStruct.Pin = TOF_X4_Pin;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_X4_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <MX_GPIO_Init+0x134>)
 8001cd6:	f001 fcff 	bl	80036d8 <HAL_GPIO_Init>

}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	; 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40020000 	.word	0x40020000

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <Error_Handler+0x8>
	...

08001d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3c      	ldr	r2, [pc, #240]	; (8001e60 <HAL_ADC_MspInit+0x110>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d171      	bne.n	8001e56 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_ADC_MspInit+0x114>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <HAL_ADC_MspInit+0x114>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_ADC_MspInit+0x114>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_ADC_MspInit+0x114>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a33      	ldr	r2, [pc, #204]	; (8001e64 <HAL_ADC_MspInit+0x114>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_ADC_MspInit+0x114>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_ADC_MspInit+0x114>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <HAL_ADC_MspInit+0x114>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_ADC_MspInit+0x114>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = adc_line_sensor1_Pin|adc_line_sensor2_Pin|adc_line_sensor3_Pin;
 8001dc6:	230e      	movs	r3, #14
 8001dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4823      	ldr	r0, [pc, #140]	; (8001e68 <HAL_ADC_MspInit+0x118>)
 8001dda:	f001 fc7d 	bl	80036d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = adc_bat_meas_Pin;
 8001dde:	2302      	movs	r3, #2
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de2:	2303      	movs	r3, #3
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(adc_bat_meas_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	481e      	ldr	r0, [pc, #120]	; (8001e6c <HAL_ADC_MspInit+0x11c>)
 8001df2:	f001 fc71 	bl	80036d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001df8:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <HAL_ADC_MspInit+0x124>)
 8001dfa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e3c:	f001 f8dc 	bl	8002ff8 <HAL_DMA_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001e46:	f7ff ff55 	bl	8001cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <HAL_ADC_MspInit+0x120>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40012000 	.word	0x40012000
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	20000644 	.word	0x20000644
 8001e74:	40026410 	.word	0x40026410

08001e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	; 0x38
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a63      	ldr	r2, [pc, #396]	; (8002024 <HAL_I2C_MspInit+0x1ac>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d12c      	bne.n	8001ef4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	4b62      	ldr	r3, [pc, #392]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a61      	ldr	r2, [pc, #388]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eb6:	23c0      	movs	r3, #192	; 0xc0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eba:	2312      	movs	r3, #18
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4856      	ldr	r0, [pc, #344]	; (800202c <HAL_I2C_MspInit+0x1b4>)
 8001ed2:	f001 fc01 	bl	80036d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b50      	ldr	r3, [pc, #320]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ef2:	e093      	b.n	800201c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a4d      	ldr	r2, [pc, #308]	; (8002030 <HAL_I2C_MspInit+0x1b8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d13d      	bne.n	8001f7a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a48      	ldr	r2, [pc, #288]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f20:	2312      	movs	r3, #18
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f34:	4619      	mov	r1, r3
 8001f36:	483d      	ldr	r0, [pc, #244]	; (800202c <HAL_I2C_MspInit+0x1b4>)
 8001f38:	f001 fbce 	bl	80036d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f40:	2312      	movs	r3, #18
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001f4c:	2309      	movs	r3, #9
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f54:	4619      	mov	r1, r3
 8001f56:	4835      	ldr	r0, [pc, #212]	; (800202c <HAL_I2C_MspInit+0x1b4>)
 8001f58:	f001 fbbe 	bl	80036d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	4a30      	ldr	r2, [pc, #192]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001f66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	697b      	ldr	r3, [r7, #20]
}
 8001f78:	e050      	b.n	800201c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <HAL_I2C_MspInit+0x1bc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d14b      	bne.n	800201c <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	4a26      	ldr	r2, [pc, #152]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6313      	str	r3, [r2, #48]	; 0x30
 8001f94:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc2:	2312      	movs	r3, #18
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4817      	ldr	r0, [pc, #92]	; (8002038 <HAL_I2C_MspInit+0x1c0>)
 8001fda:	f001 fb7d 	bl	80036d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4810      	ldr	r0, [pc, #64]	; (800203c <HAL_I2C_MspInit+0x1c4>)
 8001ffc:	f001 fb6c 	bl	80036d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 800200a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800200e:	6413      	str	r3, [r2, #64]	; 0x40
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_I2C_MspInit+0x1b0>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
}
 800201c:	bf00      	nop
 800201e:	3738      	adds	r7, #56	; 0x38
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40005400 	.word	0x40005400
 8002028:	40023800 	.word	0x40023800
 800202c:	40020400 	.word	0x40020400
 8002030:	40005800 	.word	0x40005800
 8002034:	40005c00 	.word	0x40005c00
 8002038:	40020800 	.word	0x40020800
 800203c:	40020000 	.word	0x40020000

08002040 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_TIM_PWM_MspInit+0x64>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <HAL_TIM_PWM_MspInit+0x64>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_TIM_PWM_MspInit+0x64>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800206e:	e012      	b.n	8002096 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_TIM_PWM_MspInit+0x68>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10d      	bne.n	8002096 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_TIM_PWM_MspInit+0x64>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <HAL_TIM_PWM_MspInit+0x64>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_TIM_PWM_MspInit+0x64>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40000400 	.word	0x40000400

080020ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020cc:	d11f      	bne.n	800210e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_TIM_MspPostInit+0xec>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a30      	ldr	r2, [pc, #192]	; (8002198 <HAL_TIM_MspPostInit+0xec>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <HAL_TIM_MspPostInit+0xec>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = servo_Pin;
 80020ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020fc:	2301      	movs	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4825      	ldr	r0, [pc, #148]	; (800219c <HAL_TIM_MspPostInit+0xf0>)
 8002108:	f001 fae6 	bl	80036d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800210c:	e040      	b.n	8002190 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <HAL_TIM_MspPostInit+0xf4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d13b      	bne.n	8002190 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_TIM_MspPostInit+0xec>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_TIM_MspPostInit+0xec>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_TIM_MspPostInit+0xec>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_TIM_MspPostInit+0xec>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4a16      	ldr	r2, [pc, #88]	; (8002198 <HAL_TIM_MspPostInit+0xec>)
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_TIM_MspPostInit+0xec>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = motor_R_PWM_Pin;
 8002150:	2340      	movs	r3, #64	; 0x40
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002160:	2302      	movs	r3, #2
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor_R_PWM_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	480c      	ldr	r0, [pc, #48]	; (800219c <HAL_TIM_MspPostInit+0xf0>)
 800216c:	f001 fab4 	bl	80036d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = motor_L_PWM_Pin;
 8002170:	2320      	movs	r3, #32
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002180:	2302      	movs	r3, #2
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor_L_PWM_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4806      	ldr	r0, [pc, #24]	; (80021a4 <HAL_TIM_MspPostInit+0xf8>)
 800218c:	f001 faa4 	bl	80036d8 <HAL_GPIO_Init>
}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40020400 	.word	0x40020400

080021a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_UART_MspInit+0x84>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d12b      	bne.n	8002222 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_UART_MspInit+0x88>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_UART_MspInit+0x88>)
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_UART_MspInit+0x88>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_UART_MspInit+0x88>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a10      	ldr	r2, [pc, #64]	; (8002230 <HAL_UART_MspInit+0x88>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_UART_MspInit+0x88>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002202:	230c      	movs	r3, #12
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002212:	2307      	movs	r3, #7
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	4805      	ldr	r0, [pc, #20]	; (8002234 <HAL_UART_MspInit+0x8c>)
 800221e:	f001 fa5b 	bl	80036d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002222:	bf00      	nop
 8002224:	3728      	adds	r7, #40	; 0x28
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40004400 	.word	0x40004400
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000

08002238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800223c:	e7fe      	b.n	800223c <NMI_Handler+0x4>

0800223e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <HardFault_Handler+0x4>

08002244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <MemManage_Handler+0x4>

0800224a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <BusFault_Handler+0x4>

08002250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <UsageFault_Handler+0x4>

08002256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002284:	f000 f960 	bl	8002548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <DMA2_Stream0_IRQHandler+0x10>)
 8002292:	f000 ffb7 	bl	8003204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000644 	.word	0x20000644

080022a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return 1;
 80022a4:	2301      	movs	r3, #1
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_kill>:

int _kill(int pid, int sig)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ba:	f003 fac7 	bl	800584c <__errno>
 80022be:	4603      	mov	r3, r0
 80022c0:	2216      	movs	r2, #22
 80022c2:	601a      	str	r2, [r3, #0]
  return -1;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <_exit>:

void _exit (int status)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ffe7 	bl	80022b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022e2:	e7fe      	b.n	80022e2 <_exit+0x12>

080022e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e00a      	b.n	800230c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022f6:	f3af 8000 	nop.w
 80022fa:	4601      	mov	r1, r0
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	60ba      	str	r2, [r7, #8]
 8002302:	b2ca      	uxtb	r2, r1
 8002304:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	dbf0      	blt.n	80022f6 <_read+0x12>
  }

  return len;
 8002314:	687b      	ldr	r3, [r7, #4]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e009      	b.n	8002344 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60ba      	str	r2, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf1      	blt.n	8002330 <_write+0x12>
  }
  return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_close>:

int _close(int file)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800237e:	605a      	str	r2, [r3, #4]
  return 0;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_isatty>:

int _isatty(int file)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <_sbrk+0x5c>)
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <_sbrk+0x60>)
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <_sbrk+0x64>)
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <_sbrk+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d207      	bcs.n	8002400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f0:	f003 fa2c 	bl	800584c <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	220c      	movs	r2, #12
 80023f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e009      	b.n	8002414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <_sbrk+0x64>)
 8002410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20020000 	.word	0x20020000
 8002420:	00000400 	.word	0x00000400
 8002424:	200008a8 	.word	0x200008a8
 8002428:	200008c0 	.word	0x200008c0

0800242c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <SystemInit+0x20>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <SystemInit+0x20>)
 8002438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800243c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002454:	480d      	ldr	r0, [pc, #52]	; (800248c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002456:	490e      	ldr	r1, [pc, #56]	; (8002490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002458:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800245c:	e002      	b.n	8002464 <LoopCopyDataInit>

0800245e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002462:	3304      	adds	r3, #4

08002464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002468:	d3f9      	bcc.n	800245e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800246c:	4c0b      	ldr	r4, [pc, #44]	; (800249c <LoopFillZerobss+0x26>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002470:	e001      	b.n	8002476 <LoopFillZerobss>

08002472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002474:	3204      	adds	r2, #4

08002476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002478:	d3fb      	bcc.n	8002472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800247a:	f7ff ffd7 	bl	800242c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247e:	f003 f9eb 	bl	8005858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002482:	f7ff f879 	bl	8001578 <main>
  bx  lr    
 8002486:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002490:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002494:	0800b8fc 	.word	0x0800b8fc
  ldr r2, =_sbss
 8002498:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800249c:	200008c0 	.word	0x200008c0

080024a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <HAL_Init+0x40>)
 80024ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_Init+0x40>)
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_Init+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_Init+0x40>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 fd51 	bl	8002f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	200f      	movs	r0, #15
 80024d4:	f000 f808 	bl	80024e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fc12 	bl	8001d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x54>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x58>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fd69 	bl	8002fde <HAL_SYSTICK_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e00e      	b.n	8002534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b0f      	cmp	r3, #15
 800251a:	d80a      	bhi.n	8002532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800251c:	2200      	movs	r2, #0
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f000 fd31 	bl	8002f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <HAL_InitTick+0x5c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000000 	.word	0x20000000
 8002540:	20000008 	.word	0x20000008
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_IncTick+0x20>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x24>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_IncTick+0x24>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000008 	.word	0x20000008
 800256c:	200008ac 	.word	0x200008ac

08002570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_GetTick+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200008ac 	.word	0x200008ac

08002588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff ffee 	bl	8002570 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d005      	beq.n	80025ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_Delay+0x44>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ae:	bf00      	nop
 80025b0:	f7ff ffde 	bl	8002570 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f7      	bhi.n	80025b0 <HAL_Delay+0x28>
  {
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000008 	.word	0x20000008

080025d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e033      	b.n	800264e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fbae 	bl	8001d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d118      	bne.n	8002640 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002616:	f023 0302 	bic.w	r3, r3, #2
 800261a:	f043 0202 	orr.w	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fa58 	bl	8002ad8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
 800263e:	e001      	b.n	8002644 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_ADC_Start_DMA+0x1e>
 8002672:	2302      	movs	r3, #2
 8002674:	e0ce      	b.n	8002814 <HAL_ADC_Start_DMA+0x1bc>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d018      	beq.n	80026be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800269c:	4b5f      	ldr	r3, [pc, #380]	; (800281c <HAL_ADC_Start_DMA+0x1c4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a5f      	ldr	r2, [pc, #380]	; (8002820 <HAL_ADC_Start_DMA+0x1c8>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	0c9a      	lsrs	r2, r3, #18
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f9      	bne.n	80026b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026cc:	d107      	bne.n	80026de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	f040 8086 	bne.w	80027fa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002718:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272c:	d106      	bne.n	800273c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f023 0206 	bic.w	r2, r3, #6
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	645a      	str	r2, [r3, #68]	; 0x44
 800273a:	e002      	b.n	8002742 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800274a:	4b36      	ldr	r3, [pc, #216]	; (8002824 <HAL_ADC_Start_DMA+0x1cc>)
 800274c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	4a35      	ldr	r2, [pc, #212]	; (8002828 <HAL_ADC_Start_DMA+0x1d0>)
 8002754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	4a34      	ldr	r2, [pc, #208]	; (800282c <HAL_ADC_Start_DMA+0x1d4>)
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	4a33      	ldr	r2, [pc, #204]	; (8002830 <HAL_ADC_Start_DMA+0x1d8>)
 8002764:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800276e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800277e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	334c      	adds	r3, #76	; 0x4c
 800279a:	4619      	mov	r1, r3
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f000 fcd8 	bl	8003154 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10f      	bne.n	80027d0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d129      	bne.n	8002812 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	e020      	b.n	8002812 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a17      	ldr	r2, [pc, #92]	; (8002834 <HAL_ADC_Start_DMA+0x1dc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d11b      	bne.n	8002812 <HAL_ADC_Start_DMA+0x1ba>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d114      	bne.n	8002812 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	e00b      	b.n	8002812 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0210 	orr.w	r2, r3, #16
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000000 	.word	0x20000000
 8002820:	431bde83 	.word	0x431bde83
 8002824:	40012300 	.word	0x40012300
 8002828:	08002cd1 	.word	0x08002cd1
 800282c:	08002d8b 	.word	0x08002d8b
 8002830:	08002da7 	.word	0x08002da7
 8002834:	40012000 	.word	0x40012000

08002838 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1c>
 800288c:	2302      	movs	r3, #2
 800288e:	e113      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x244>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b09      	cmp	r3, #9
 800289e:	d925      	bls.n	80028ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68d9      	ldr	r1, [r3, #12]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	3b1e      	subs	r3, #30
 80028b6:	2207      	movs	r2, #7
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43da      	mvns	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	400a      	ands	r2, r1
 80028c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68d9      	ldr	r1, [r3, #12]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	4603      	mov	r3, r0
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4403      	add	r3, r0
 80028de:	3b1e      	subs	r3, #30
 80028e0:	409a      	lsls	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	e022      	b.n	8002932 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6919      	ldr	r1, [r3, #16]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	2207      	movs	r2, #7
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	400a      	ands	r2, r1
 800290e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6919      	ldr	r1, [r3, #16]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	4618      	mov	r0, r3
 8002922:	4603      	mov	r3, r0
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4403      	add	r3, r0
 8002928:	409a      	lsls	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b06      	cmp	r3, #6
 8002938:	d824      	bhi.n	8002984 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3b05      	subs	r3, #5
 800294c:	221f      	movs	r2, #31
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	400a      	ands	r2, r1
 800295a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	4618      	mov	r0, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	3b05      	subs	r3, #5
 8002976:	fa00 f203 	lsl.w	r2, r0, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	635a      	str	r2, [r3, #52]	; 0x34
 8002982:	e04c      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b0c      	cmp	r3, #12
 800298a:	d824      	bhi.n	80029d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	3b23      	subs	r3, #35	; 0x23
 800299e:	221f      	movs	r2, #31
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43da      	mvns	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	400a      	ands	r2, r1
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3b23      	subs	r3, #35	; 0x23
 80029c8:	fa00 f203 	lsl.w	r2, r0, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
 80029d4:	e023      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b41      	subs	r3, #65	; 0x41
 80029e8:	221f      	movs	r2, #31
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	400a      	ands	r2, r1
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b41      	subs	r3, #65	; 0x41
 8002a12:	fa00 f203 	lsl.w	r2, r0, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a1e:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <HAL_ADC_ConfigChannel+0x250>)
 8002a20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a28      	ldr	r2, [pc, #160]	; (8002ac8 <HAL_ADC_ConfigChannel+0x254>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d10f      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x1d8>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b12      	cmp	r3, #18
 8002a32:	d10b      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <HAL_ADC_ConfigChannel+0x254>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d12b      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x23a>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <HAL_ADC_ConfigChannel+0x258>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0x1f4>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b11      	cmp	r3, #17
 8002a66:	d122      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a11      	ldr	r2, [pc, #68]	; (8002acc <HAL_ADC_ConfigChannel+0x258>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d111      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_ADC_ConfigChannel+0x25c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <HAL_ADC_ConfigChannel+0x260>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	0c9a      	lsrs	r2, r3, #18
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002aa0:	e002      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f9      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40012300 	.word	0x40012300
 8002ac8:	40012000 	.word	0x40012000
 8002acc:	10000012 	.word	0x10000012
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	431bde83 	.word	0x431bde83

08002ad8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae0:	4b79      	ldr	r3, [pc, #484]	; (8002cc8 <ADC_Init+0x1f0>)
 8002ae2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	021a      	lsls	r2, r3, #8
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6899      	ldr	r1, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <ADC_Init+0x1f4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d022      	beq.n	8002bb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6899      	ldr	r1, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	e00f      	b.n	8002bd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0202 	bic.w	r2, r2, #2
 8002be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6899      	ldr	r1, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7e1b      	ldrb	r3, [r3, #24]
 8002bf0:	005a      	lsls	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	035a      	lsls	r2, r3, #13
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	e007      	b.n	8002c4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	051a      	lsls	r2, r3, #20
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6899      	ldr	r1, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c8e:	025a      	lsls	r2, r3, #9
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	029a      	lsls	r2, r3, #10
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	609a      	str	r2, [r3, #8]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40012300 	.word	0x40012300
 8002ccc:	0f000001 	.word	0x0f000001

08002cd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d13c      	bne.n	8002d64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d12b      	bne.n	8002d5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d127      	bne.n	8002d5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d119      	bne.n	8002d5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0220 	bic.w	r2, r2, #32
 8002d36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d105      	bne.n	8002d5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff fd6b 	bl	8002838 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d62:	e00e      	b.n	8002d82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff fd75 	bl	8002860 <HAL_ADC_ErrorCallback>
}
 8002d76:	e004      	b.n	8002d82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff fd57 	bl	800284c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2240      	movs	r2, #64	; 0x40
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7ff fd4a 	bl	8002860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <__NVIC_SetPriorityGrouping+0x44>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df0:	4013      	ands	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e06:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <__NVIC_SetPriorityGrouping+0x44>)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	60d3      	str	r3, [r2, #12]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <__NVIC_GetPriorityGrouping+0x18>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	f003 0307 	and.w	r3, r3, #7
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	db0b      	blt.n	8002e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	4907      	ldr	r1, [pc, #28]	; (8002e70 <__NVIC_EnableIRQ+0x38>)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	2001      	movs	r0, #1
 8002e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000e100 	.word	0xe000e100

08002e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	6039      	str	r1, [r7, #0]
 8002e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	db0a      	blt.n	8002e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	490c      	ldr	r1, [pc, #48]	; (8002ec0 <__NVIC_SetPriority+0x4c>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	440b      	add	r3, r1
 8002e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e9c:	e00a      	b.n	8002eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	4908      	ldr	r1, [pc, #32]	; (8002ec4 <__NVIC_SetPriority+0x50>)
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	3b04      	subs	r3, #4
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	761a      	strb	r2, [r3, #24]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000e100 	.word	0xe000e100
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	; 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f1c3 0307 	rsb	r3, r3, #7
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	bf28      	it	cs
 8002ee6:	2304      	movcs	r3, #4
 8002ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d902      	bls.n	8002ef8 <NVIC_EncodePriority+0x30>
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3b03      	subs	r3, #3
 8002ef6:	e000      	b.n	8002efa <NVIC_EncodePriority+0x32>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43da      	mvns	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	401a      	ands	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f10:	f04f 31ff 	mov.w	r1, #4294967295
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	43d9      	mvns	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f20:	4313      	orrs	r3, r2
         );
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f40:	d301      	bcc.n	8002f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00f      	b.n	8002f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <SysTick_Config+0x40>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f4e:	210f      	movs	r1, #15
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295
 8002f54:	f7ff ff8e 	bl	8002e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <SysTick_Config+0x40>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f5e:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <SysTick_Config+0x40>)
 8002f60:	2207      	movs	r2, #7
 8002f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	e000e010 	.word	0xe000e010

08002f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff29 	bl	8002dd4 <__NVIC_SetPriorityGrouping>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f9c:	f7ff ff3e 	bl	8002e1c <__NVIC_GetPriorityGrouping>
 8002fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	6978      	ldr	r0, [r7, #20]
 8002fa8:	f7ff ff8e 	bl	8002ec8 <NVIC_EncodePriority>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff5d 	bl	8002e74 <__NVIC_SetPriority>
}
 8002fba:	bf00      	nop
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff31 	bl	8002e38 <__NVIC_EnableIRQ>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ffa2 	bl	8002f30 <SysTick_Config>
 8002fec:	4603      	mov	r3, r0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003004:	f7ff fab4 	bl	8002570 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e099      	b.n	8003148 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003034:	e00f      	b.n	8003056 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003036:	f7ff fa9b 	bl	8002570 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b05      	cmp	r3, #5
 8003042:	d908      	bls.n	8003056 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2203      	movs	r2, #3
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e078      	b.n	8003148 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e8      	bne.n	8003036 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4b38      	ldr	r3, [pc, #224]	; (8003150 <HAL_DMA_Init+0x158>)
 8003070:	4013      	ands	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003082:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d107      	bne.n	80030c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	4313      	orrs	r3, r2
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0307 	bic.w	r3, r3, #7
 80030d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d117      	bne.n	800311a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fa6f 	bl	80035e0 <DMA_CheckFifoParam>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2240      	movs	r2, #64	; 0x40
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003116:	2301      	movs	r3, #1
 8003118:	e016      	b.n	8003148 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa26 	bl	8003574 <DMA_CalcBaseAndBitshift>
 8003128:	4603      	mov	r3, r0
 800312a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	223f      	movs	r2, #63	; 0x3f
 8003132:	409a      	lsls	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	f010803f 	.word	0xf010803f

08003154 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_DMA_Start_IT+0x26>
 8003176:	2302      	movs	r3, #2
 8003178:	e040      	b.n	80031fc <HAL_DMA_Start_IT+0xa8>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d12f      	bne.n	80031ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2202      	movs	r2, #2
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f9b8 	bl	8003518 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	223f      	movs	r2, #63	; 0x3f
 80031ae:	409a      	lsls	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0216 	orr.w	r2, r2, #22
 80031c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0208 	orr.w	r2, r2, #8
 80031da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e005      	b.n	80031fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003210:	4b8e      	ldr	r3, [pc, #568]	; (800344c <HAL_DMA_IRQHandler+0x248>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a8e      	ldr	r2, [pc, #568]	; (8003450 <HAL_DMA_IRQHandler+0x24c>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0a9b      	lsrs	r3, r3, #10
 800321c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	2208      	movs	r2, #8
 8003230:	409a      	lsls	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01a      	beq.n	8003270 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d013      	beq.n	8003270 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	2208      	movs	r2, #8
 800325e:	409a      	lsls	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003274:	2201      	movs	r2, #1
 8003276:	409a      	lsls	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d012      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003292:	2201      	movs	r2, #1
 8003294:	409a      	lsls	r2, r3
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f043 0202 	orr.w	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	2204      	movs	r2, #4
 80032ac:	409a      	lsls	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d012      	beq.n	80032dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	2204      	movs	r2, #4
 80032ca:	409a      	lsls	r2, r3
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f043 0204 	orr.w	r2, r3, #4
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	2210      	movs	r2, #16
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d043      	beq.n	8003374 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d03c      	beq.n	8003374 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	2210      	movs	r2, #16
 8003300:	409a      	lsls	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d018      	beq.n	8003346 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d108      	bne.n	8003334 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d024      	beq.n	8003374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	4798      	blx	r3
 8003332:	e01f      	b.n	8003374 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
 8003344:	e016      	b.n	8003374 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d107      	bne.n	8003364 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0208 	bic.w	r2, r2, #8
 8003362:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	2220      	movs	r2, #32
 800337a:	409a      	lsls	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 808f 	beq.w	80034a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8087 	beq.w	80034a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	2220      	movs	r2, #32
 800339c:	409a      	lsls	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d136      	bne.n	800341c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0216 	bic.w	r2, r2, #22
 80033bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <HAL_DMA_IRQHandler+0x1da>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0208 	bic.w	r2, r2, #8
 80033ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f2:	223f      	movs	r2, #63	; 0x3f
 80033f4:	409a      	lsls	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	2b00      	cmp	r3, #0
 8003410:	d07e      	beq.n	8003510 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
        }
        return;
 800341a:	e079      	b.n	8003510 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01d      	beq.n	8003466 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	2b00      	cmp	r3, #0
 800343e:	d031      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
 8003448:	e02c      	b.n	80034a4 <HAL_DMA_IRQHandler+0x2a0>
 800344a:	bf00      	nop
 800344c:	20000000 	.word	0x20000000
 8003450:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d023      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4798      	blx	r3
 8003464:	e01e      	b.n	80034a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10f      	bne.n	8003494 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0210 	bic.w	r2, r2, #16
 8003482:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d032      	beq.n	8003512 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d022      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2205      	movs	r2, #5
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	3301      	adds	r3, #1
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d307      	bcc.n	80034ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f2      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x2cc>
 80034ea:	e000      	b.n	80034ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
 800350e:	e000      	b.n	8003512 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003510:	bf00      	nop
    }
  }
}
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003534:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b40      	cmp	r3, #64	; 0x40
 8003544:	d108      	bne.n	8003558 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003556:	e007      	b.n	8003568 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	3b10      	subs	r3, #16
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800358e:	4a13      	ldr	r2, [pc, #76]	; (80035dc <DMA_CalcBaseAndBitshift+0x68>)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d909      	bls.n	80035b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	659a      	str	r2, [r3, #88]	; 0x58
 80035b4:	e007      	b.n	80035c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035be:	f023 0303 	bic.w	r3, r3, #3
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	aaaaaaab 	.word	0xaaaaaaab
 80035dc:	0800b440 	.word	0x0800b440

080035e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d11f      	bne.n	800363a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d856      	bhi.n	80036ae <DMA_CheckFifoParam+0xce>
 8003600:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <DMA_CheckFifoParam+0x28>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	08003619 	.word	0x08003619
 800360c:	0800362b 	.word	0x0800362b
 8003610:	08003619 	.word	0x08003619
 8003614:	080036af 	.word	0x080036af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d046      	beq.n	80036b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003628:	e043      	b.n	80036b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003632:	d140      	bne.n	80036b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e03d      	b.n	80036b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003642:	d121      	bne.n	8003688 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d837      	bhi.n	80036ba <DMA_CheckFifoParam+0xda>
 800364a:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <DMA_CheckFifoParam+0x70>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003661 	.word	0x08003661
 8003654:	08003667 	.word	0x08003667
 8003658:	08003661 	.word	0x08003661
 800365c:	08003679 	.word	0x08003679
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      break;
 8003664:	e030      	b.n	80036c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d025      	beq.n	80036be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003676:	e022      	b.n	80036be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003680:	d11f      	bne.n	80036c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003686:	e01c      	b.n	80036c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d903      	bls.n	8003696 <DMA_CheckFifoParam+0xb6>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d003      	beq.n	800369c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003694:	e018      	b.n	80036c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
      break;
 800369a:	e015      	b.n	80036c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00e      	beq.n	80036c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      break;
 80036ac:	e00b      	b.n	80036c6 <DMA_CheckFifoParam+0xe6>
      break;
 80036ae:	bf00      	nop
 80036b0:	e00a      	b.n	80036c8 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e008      	b.n	80036c8 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e006      	b.n	80036c8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e004      	b.n	80036c8 <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
    }
  } 
  
  return status; 
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop

080036d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	e159      	b.n	80039a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	f040 8148 	bne.w	80039a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d005      	beq.n	800372a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003726:	2b02      	cmp	r3, #2
 8003728:	d130      	bne.n	800378c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	2203      	movs	r2, #3
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003760:	2201      	movs	r2, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 0201 	and.w	r2, r3, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b03      	cmp	r3, #3
 8003796:	d017      	beq.n	80037c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	2203      	movs	r2, #3
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d123      	bne.n	800381c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	08da      	lsrs	r2, r3, #3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3208      	adds	r2, #8
 80037dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	220f      	movs	r2, #15
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	08da      	lsrs	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3208      	adds	r2, #8
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a2 	beq.w	80039a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <HAL_GPIO_Init+0x2e8>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	4a56      	ldr	r2, [pc, #344]	; (80039c0 <HAL_GPIO_Init+0x2e8>)
 8003868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386c:	6453      	str	r3, [r2, #68]	; 0x44
 800386e:	4b54      	ldr	r3, [pc, #336]	; (80039c0 <HAL_GPIO_Init+0x2e8>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387a:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_GPIO_Init+0x2ec>)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3302      	adds	r3, #2
 8003882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	220f      	movs	r2, #15
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a49      	ldr	r2, [pc, #292]	; (80039c8 <HAL_GPIO_Init+0x2f0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d019      	beq.n	80038da <HAL_GPIO_Init+0x202>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a48      	ldr	r2, [pc, #288]	; (80039cc <HAL_GPIO_Init+0x2f4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_GPIO_Init+0x1fe>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a47      	ldr	r2, [pc, #284]	; (80039d0 <HAL_GPIO_Init+0x2f8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00d      	beq.n	80038d2 <HAL_GPIO_Init+0x1fa>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a46      	ldr	r2, [pc, #280]	; (80039d4 <HAL_GPIO_Init+0x2fc>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <HAL_GPIO_Init+0x1f6>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a45      	ldr	r2, [pc, #276]	; (80039d8 <HAL_GPIO_Init+0x300>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <HAL_GPIO_Init+0x1f2>
 80038c6:	2304      	movs	r3, #4
 80038c8:	e008      	b.n	80038dc <HAL_GPIO_Init+0x204>
 80038ca:	2307      	movs	r3, #7
 80038cc:	e006      	b.n	80038dc <HAL_GPIO_Init+0x204>
 80038ce:	2303      	movs	r3, #3
 80038d0:	e004      	b.n	80038dc <HAL_GPIO_Init+0x204>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e002      	b.n	80038dc <HAL_GPIO_Init+0x204>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_GPIO_Init+0x204>
 80038da:	2300      	movs	r3, #0
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	f002 0203 	and.w	r2, r2, #3
 80038e2:	0092      	lsls	r2, r2, #2
 80038e4:	4093      	lsls	r3, r2
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038ec:	4935      	ldr	r1, [pc, #212]	; (80039c4 <HAL_GPIO_Init+0x2ec>)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	3302      	adds	r3, #2
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038fa:	4b38      	ldr	r3, [pc, #224]	; (80039dc <HAL_GPIO_Init+0x304>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800391e:	4a2f      	ldr	r2, [pc, #188]	; (80039dc <HAL_GPIO_Init+0x304>)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003924:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <HAL_GPIO_Init+0x304>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003948:	4a24      	ldr	r2, [pc, #144]	; (80039dc <HAL_GPIO_Init+0x304>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800394e:	4b23      	ldr	r3, [pc, #140]	; (80039dc <HAL_GPIO_Init+0x304>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003972:	4a1a      	ldr	r2, [pc, #104]	; (80039dc <HAL_GPIO_Init+0x304>)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003978:	4b18      	ldr	r3, [pc, #96]	; (80039dc <HAL_GPIO_Init+0x304>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800399c:	4a0f      	ldr	r2, [pc, #60]	; (80039dc <HAL_GPIO_Init+0x304>)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3301      	adds	r3, #1
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2b0f      	cmp	r3, #15
 80039ac:	f67f aea2 	bls.w	80036f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800
 80039c4:	40013800 	.word	0x40013800
 80039c8:	40020000 	.word	0x40020000
 80039cc:	40020400 	.word	0x40020400
 80039d0:	40020800 	.word	0x40020800
 80039d4:	40020c00 	.word	0x40020c00
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40013c00 	.word	0x40013c00

080039e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	807b      	strh	r3, [r7, #2]
 80039ec:	4613      	mov	r3, r2
 80039ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039f0:	787b      	ldrb	r3, [r7, #1]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039f6:	887a      	ldrh	r2, [r7, #2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039fc:	e003      	b.n	8003a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039fe:	887b      	ldrh	r3, [r7, #2]
 8003a00:	041a      	lsls	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	619a      	str	r2, [r3, #24]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a24:	887a      	ldrh	r2, [r7, #2]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	041a      	lsls	r2, r3, #16
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	43d9      	mvns	r1, r3
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	400b      	ands	r3, r1
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	619a      	str	r2, [r3, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e12b      	b.n	8003cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fe fa02 	bl	8001e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2224      	movs	r2, #36	; 0x24
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003aac:	f001 f858 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8003ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4a81      	ldr	r2, [pc, #516]	; (8003cbc <HAL_I2C_Init+0x274>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d807      	bhi.n	8003acc <HAL_I2C_Init+0x84>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a80      	ldr	r2, [pc, #512]	; (8003cc0 <HAL_I2C_Init+0x278>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	bf94      	ite	ls
 8003ac4:	2301      	movls	r3, #1
 8003ac6:	2300      	movhi	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e006      	b.n	8003ada <HAL_I2C_Init+0x92>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a7d      	ldr	r2, [pc, #500]	; (8003cc4 <HAL_I2C_Init+0x27c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bf94      	ite	ls
 8003ad4:	2301      	movls	r3, #1
 8003ad6:	2300      	movhi	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0e7      	b.n	8003cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a78      	ldr	r2, [pc, #480]	; (8003cc8 <HAL_I2C_Init+0x280>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0c9b      	lsrs	r3, r3, #18
 8003aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a6a      	ldr	r2, [pc, #424]	; (8003cbc <HAL_I2C_Init+0x274>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d802      	bhi.n	8003b1c <HAL_I2C_Init+0xd4>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	e009      	b.n	8003b30 <HAL_I2C_Init+0xe8>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	4a69      	ldr	r2, [pc, #420]	; (8003ccc <HAL_I2C_Init+0x284>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	3301      	adds	r3, #1
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	495c      	ldr	r1, [pc, #368]	; (8003cbc <HAL_I2C_Init+0x274>)
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	d819      	bhi.n	8003b84 <HAL_I2C_Init+0x13c>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e59      	subs	r1, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b5e:	1c59      	adds	r1, r3, #1
 8003b60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b64:	400b      	ands	r3, r1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_I2C_Init+0x138>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e59      	subs	r1, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b78:	3301      	adds	r3, #1
 8003b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7e:	e051      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003b80:	2304      	movs	r3, #4
 8003b82:	e04f      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d111      	bne.n	8003bb0 <HAL_I2C_Init+0x168>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	440b      	add	r3, r1
 8003b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e012      	b.n	8003bd6 <HAL_I2C_Init+0x18e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e58      	subs	r0, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	0099      	lsls	r1, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Init+0x196>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e022      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10e      	bne.n	8003c04 <HAL_I2C_Init+0x1bc>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1e58      	subs	r0, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	440b      	add	r3, r1
 8003bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	e00f      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e58      	subs	r0, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	0099      	lsls	r1, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	6809      	ldr	r1, [r1, #0]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6911      	ldr	r1, [r2, #16]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68d2      	ldr	r2, [r2, #12]
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	000186a0 	.word	0x000186a0
 8003cc0:	001e847f 	.word	0x001e847f
 8003cc4:	003d08ff 	.word	0x003d08ff
 8003cc8:	431bde83 	.word	0x431bde83
 8003ccc:	10624dd3 	.word	0x10624dd3

08003cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	813b      	strh	r3, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cea:	f7fe fc41 	bl	8002570 <HAL_GetTick>
 8003cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	f040 80d9 	bne.w	8003eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	2319      	movs	r3, #25
 8003d04:	2201      	movs	r2, #1
 8003d06:	496d      	ldr	r1, [pc, #436]	; (8003ebc <HAL_I2C_Mem_Write+0x1ec>)
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f971 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
 8003d16:	e0cc      	b.n	8003eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_I2C_Mem_Write+0x56>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e0c5      	b.n	8003eb2 <HAL_I2C_Mem_Write+0x1e2>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d007      	beq.n	8003d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2221      	movs	r2, #33	; 0x21
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2240      	movs	r2, #64	; 0x40
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a4d      	ldr	r2, [pc, #308]	; (8003ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8003d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d8e:	88f8      	ldrh	r0, [r7, #6]
 8003d90:	893a      	ldrh	r2, [r7, #8]
 8003d92:	8979      	ldrh	r1, [r7, #10]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f890 	bl	8003ec4 <I2C_RequestMemoryWrite>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d052      	beq.n	8003e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e081      	b.n	8003eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f9f2 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00d      	beq.n	8003dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d107      	bne.n	8003dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e06b      	b.n	8003eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d11b      	bne.n	8003e50 <HAL_I2C_Mem_Write+0x180>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d017      	beq.n	8003e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1aa      	bne.n	8003dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f9de 	bl	800421e <I2C_WaitOnBTFFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d107      	bne.n	8003e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e016      	b.n	8003eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	00100002 	.word	0x00100002
 8003ec0:	ffff0000 	.word	0xffff0000

08003ec4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	4608      	mov	r0, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	817b      	strh	r3, [r7, #10]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	813b      	strh	r3, [r7, #8]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f878 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f14:	d103      	bne.n	8003f1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e05f      	b.n	8003fe2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f22:	897b      	ldrh	r3, [r7, #10]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	492d      	ldr	r1, [pc, #180]	; (8003fec <I2C_RequestMemoryWrite+0x128>)
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f8b0 	bl	800409e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e04c      	b.n	8003fe2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	6a39      	ldr	r1, [r7, #32]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f91a 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d107      	bne.n	8003f86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e02b      	b.n	8003fe2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d105      	bne.n	8003f9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f90:	893b      	ldrh	r3, [r7, #8]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	611a      	str	r2, [r3, #16]
 8003f9a:	e021      	b.n	8003fe0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f9c:	893b      	ldrh	r3, [r7, #8]
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fac:	6a39      	ldr	r1, [r7, #32]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f8f4 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d107      	bne.n	8003fd2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e005      	b.n	8003fe2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd6:	893b      	ldrh	r3, [r7, #8]
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	00010002 	.word	0x00010002

08003ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004000:	e025      	b.n	800404e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d021      	beq.n	800404e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fe fab1 	bl	8002570 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d116      	bne.n	800404e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0220 	orr.w	r2, r3, #32
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e023      	b.n	8004096 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d10d      	bne.n	8004074 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	43da      	mvns	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4013      	ands	r3, r2
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	e00c      	b.n	800408e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	43da      	mvns	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4013      	ands	r3, r2
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	429a      	cmp	r2, r3
 8004092:	d0b6      	beq.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040ac:	e051      	b.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040bc:	d123      	bne.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f043 0204 	orr.w	r2, r3, #4
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e046      	b.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d021      	beq.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7fe fa2f 	bl	8002570 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d116      	bne.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e020      	b.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d10c      	bne.n	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e00b      	b.n	800418e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	43da      	mvns	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4013      	ands	r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d18d      	bne.n	80040ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041a8:	e02d      	b.n	8004206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f878 	bl	80042a0 <I2C_IsAcknowledgeFailed>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e02d      	b.n	8004216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d021      	beq.n	8004206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fe f9d5 	bl	8002570 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d116      	bne.n	8004206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e007      	b.n	8004216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	2b80      	cmp	r3, #128	; 0x80
 8004212:	d1ca      	bne.n	80041aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800422a:	e02d      	b.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f837 	bl	80042a0 <I2C_IsAcknowledgeFailed>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e02d      	b.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d021      	beq.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7fe f994 	bl	8002570 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d116      	bne.n	8004288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e007      	b.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d1ca      	bne.n	800422c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b6:	d11b      	bne.n	80042f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f043 0204 	orr.w	r2, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e267      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d075      	beq.n	800440a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800431e:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b04      	cmp	r3, #4
 8004328:	d00c      	beq.n	8004344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800432a:	4b85      	ldr	r3, [pc, #532]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004332:	2b08      	cmp	r3, #8
 8004334:	d112      	bne.n	800435c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004336:	4b82      	ldr	r3, [pc, #520]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004342:	d10b      	bne.n	800435c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004344:	4b7e      	ldr	r3, [pc, #504]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d05b      	beq.n	8004408 <HAL_RCC_OscConfig+0x108>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d157      	bne.n	8004408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e242      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004364:	d106      	bne.n	8004374 <HAL_RCC_OscConfig+0x74>
 8004366:	4b76      	ldr	r3, [pc, #472]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a75      	ldr	r2, [pc, #468]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e01d      	b.n	80043b0 <HAL_RCC_OscConfig+0xb0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x98>
 800437e:	4b70      	ldr	r3, [pc, #448]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6f      	ldr	r2, [pc, #444]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b6d      	ldr	r3, [pc, #436]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6c      	ldr	r2, [pc, #432]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e00b      	b.n	80043b0 <HAL_RCC_OscConfig+0xb0>
 8004398:	4b69      	ldr	r3, [pc, #420]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a68      	ldr	r2, [pc, #416]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800439e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4b66      	ldr	r3, [pc, #408]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a65      	ldr	r2, [pc, #404]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fe f8da 	bl	8002570 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fe f8d6 	bl	8002570 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e207      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	4b5b      	ldr	r3, [pc, #364]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0xc0>
 80043de:	e014      	b.n	800440a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fe f8c6 	bl	8002570 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fe f8c2 	bl	8002570 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e1f3      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	4b51      	ldr	r3, [pc, #324]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0xe8>
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d063      	beq.n	80044de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004416:	4b4a      	ldr	r3, [pc, #296]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800442a:	2b08      	cmp	r3, #8
 800442c:	d11c      	bne.n	8004468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442e:	4b44      	ldr	r3, [pc, #272]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d116      	bne.n	8004468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443a:	4b41      	ldr	r3, [pc, #260]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_RCC_OscConfig+0x152>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d001      	beq.n	8004452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e1c7      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4937      	ldr	r1, [pc, #220]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	e03a      	b.n	80044de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004470:	4b34      	ldr	r3, [pc, #208]	; (8004544 <HAL_RCC_OscConfig+0x244>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fe f87b 	bl	8002570 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447e:	f7fe f877 	bl	8002570 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e1a8      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4925      	ldr	r1, [pc, #148]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]
 80044b0:	e015      	b.n	80044de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <HAL_RCC_OscConfig+0x244>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fe f85a 	bl	8002570 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c0:	f7fe f856 	bl	8002570 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e187      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d036      	beq.n	8004558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d016      	beq.n	8004520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <HAL_RCC_OscConfig+0x248>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fe f83a 	bl	8002570 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004500:	f7fe f836 	bl	8002570 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e167      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x200>
 800451e:	e01b      	b.n	8004558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_RCC_OscConfig+0x248>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004526:	f7fe f823 	bl	8002570 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	e00e      	b.n	800454c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800452e:	f7fe f81f 	bl	8002570 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d907      	bls.n	800454c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e150      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
 8004540:	40023800 	.word	0x40023800
 8004544:	42470000 	.word	0x42470000
 8004548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ea      	bne.n	800452e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8097 	beq.w	8004694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004566:	2300      	movs	r3, #0
 8004568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456a:	4b81      	ldr	r3, [pc, #516]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	4b7d      	ldr	r3, [pc, #500]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	4a7c      	ldr	r2, [pc, #496]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004584:	6413      	str	r3, [r2, #64]	; 0x40
 8004586:	4b7a      	ldr	r3, [pc, #488]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004596:	4b77      	ldr	r3, [pc, #476]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d118      	bne.n	80045d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a2:	4b74      	ldr	r3, [pc, #464]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a73      	ldr	r2, [pc, #460]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ae:	f7fd ffdf 	bl	8002570 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b6:	f7fd ffdb 	bl	8002570 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e10c      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	4b6a      	ldr	r3, [pc, #424]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0x2ea>
 80045dc:	4b64      	ldr	r3, [pc, #400]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a63      	ldr	r2, [pc, #396]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
 80045e8:	e01c      	b.n	8004624 <HAL_RCC_OscConfig+0x324>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x30c>
 80045f2:	4b5f      	ldr	r3, [pc, #380]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	4a5e      	ldr	r2, [pc, #376]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	6713      	str	r3, [r2, #112]	; 0x70
 80045fe:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	4a5b      	ldr	r2, [pc, #364]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6713      	str	r3, [r2, #112]	; 0x70
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0x324>
 800460c:	4b58      	ldr	r3, [pc, #352]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a57      	ldr	r2, [pc, #348]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	4b55      	ldr	r3, [pc, #340]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a54      	ldr	r2, [pc, #336]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d015      	beq.n	8004658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fd ffa0 	bl	8002570 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004632:	e00a      	b.n	800464a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fd ff9c 	bl	8002570 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e0cb      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464a:	4b49      	ldr	r3, [pc, #292]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0ee      	beq.n	8004634 <HAL_RCC_OscConfig+0x334>
 8004656:	e014      	b.n	8004682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004658:	f7fd ff8a 	bl	8002570 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fd ff86 	bl	8002570 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0b5      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004676:	4b3e      	ldr	r3, [pc, #248]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ee      	bne.n	8004660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004682:	7dfb      	ldrb	r3, [r7, #23]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004688:	4b39      	ldr	r3, [pc, #228]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	4a38      	ldr	r2, [pc, #224]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004692:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80a1 	beq.w	80047e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800469e:	4b34      	ldr	r3, [pc, #208]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d05c      	beq.n	8004764 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d141      	bne.n	8004736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b2:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RCC_OscConfig+0x478>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fd ff5a 	bl	8002570 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd ff56 	bl	8002570 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e087      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	019b      	lsls	r3, r3, #6
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	3b01      	subs	r3, #1
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	491b      	ldr	r1, [pc, #108]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004704:	4313      	orrs	r3, r2
 8004706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x478>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470e:	f7fd ff2f 	bl	8002570 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004716:	f7fd ff2b 	bl	8002570 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e05c      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004728:	4b11      	ldr	r3, [pc, #68]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x416>
 8004734:	e054      	b.n	80047e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <HAL_RCC_OscConfig+0x478>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fd ff18 	bl	8002570 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004744:	f7fd ff14 	bl	8002570 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e045      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x444>
 8004762:	e03d      	b.n	80047e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d107      	bne.n	800477c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e038      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
 8004770:	40023800 	.word	0x40023800
 8004774:	40007000 	.word	0x40007000
 8004778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800477c:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x4ec>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d028      	beq.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d121      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d11a      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d111      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	3b01      	subs	r3, #1
 80047c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800

080047f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0cc      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004804:	4b68      	ldr	r3, [pc, #416]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d90c      	bls.n	800482c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b65      	ldr	r3, [pc, #404]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b63      	ldr	r3, [pc, #396]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0b8      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004844:	4b59      	ldr	r3, [pc, #356]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4a58      	ldr	r2, [pc, #352]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800484e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800485c:	4b53      	ldr	r3, [pc, #332]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4a52      	ldr	r2, [pc, #328]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b50      	ldr	r3, [pc, #320]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	494d      	ldr	r1, [pc, #308]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d044      	beq.n	8004910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	4b47      	ldr	r3, [pc, #284]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d119      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e07f      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d003      	beq.n	80048ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ae:	4b3f      	ldr	r3, [pc, #252]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e06f      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048be:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e067      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ce:	4b37      	ldr	r3, [pc, #220]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 0203 	bic.w	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4934      	ldr	r1, [pc, #208]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e0:	f7fd fe46 	bl	8002570 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e8:	f7fd fe42 	bl	8002570 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e04f      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 020c 	and.w	r2, r3, #12
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	429a      	cmp	r2, r3
 800490e:	d1eb      	bne.n	80048e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004910:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d20c      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e032      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4916      	ldr	r1, [pc, #88]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	490e      	ldr	r1, [pc, #56]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004976:	f000 f821 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 800497a:	4602      	mov	r2, r0
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	490a      	ldr	r1, [pc, #40]	; (80049b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004988:	5ccb      	ldrb	r3, [r1, r3]
 800498a:	fa22 f303 	lsr.w	r3, r2, r3
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004992:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fd fda6 	bl	80024e8 <HAL_InitTick>

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40023c00 	.word	0x40023c00
 80049ac:	40023800 	.word	0x40023800
 80049b0:	0800b428 	.word	0x0800b428
 80049b4:	20000000 	.word	0x20000000
 80049b8:	20000004 	.word	0x20000004

080049bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c0:	b090      	sub	sp, #64	; 0x40
 80049c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
 80049c8:	2300      	movs	r3, #0
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049cc:	2300      	movs	r3, #0
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049d4:	4b59      	ldr	r3, [pc, #356]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d00d      	beq.n	80049fc <HAL_RCC_GetSysClockFreq+0x40>
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	f200 80a1 	bhi.w	8004b28 <HAL_RCC_GetSysClockFreq+0x16c>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x34>
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d003      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ee:	e09b      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f0:	4b53      	ldr	r3, [pc, #332]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x184>)
 80049f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80049f4:	e09b      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049f6:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x188>)
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049fa:	e098      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049fc:	4b4f      	ldr	r3, [pc, #316]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a06:	4b4d      	ldr	r3, [pc, #308]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d028      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a12:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	2200      	movs	r2, #0
 8004a1a:	623b      	str	r3, [r7, #32]
 8004a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a24:	2100      	movs	r1, #0
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a28:	fb03 f201 	mul.w	r2, r3, r1
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	fb00 f303 	mul.w	r3, r0, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	4a43      	ldr	r2, [pc, #268]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a36:	fba0 1202 	umull	r1, r2, r0, r2
 8004a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a3c:	460a      	mov	r2, r1
 8004a3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a42:	4413      	add	r3, r2
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a48:	2200      	movs	r2, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	61fa      	str	r2, [r7, #28]
 8004a4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a56:	f7fc f91f 	bl	8000c98 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4613      	mov	r3, r2
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a62:	e053      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a64:	4b35      	ldr	r3, [pc, #212]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	099b      	lsrs	r3, r3, #6
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	617a      	str	r2, [r7, #20]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a76:	f04f 0b00 	mov.w	fp, #0
 8004a7a:	4652      	mov	r2, sl
 8004a7c:	465b      	mov	r3, fp
 8004a7e:	f04f 0000 	mov.w	r0, #0
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	0159      	lsls	r1, r3, #5
 8004a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a8c:	0150      	lsls	r0, r2, #5
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	ebb2 080a 	subs.w	r8, r2, sl
 8004a96:	eb63 090b 	sbc.w	r9, r3, fp
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004aa6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004aaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004aae:	ebb2 0408 	subs.w	r4, r2, r8
 8004ab2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	00eb      	lsls	r3, r5, #3
 8004ac0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac4:	00e2      	lsls	r2, r4, #3
 8004ac6:	4614      	mov	r4, r2
 8004ac8:	461d      	mov	r5, r3
 8004aca:	eb14 030a 	adds.w	r3, r4, sl
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	eb45 030b 	adc.w	r3, r5, fp
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	028b      	lsls	r3, r1, #10
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aec:	4621      	mov	r1, r4
 8004aee:	028a      	lsls	r2, r1, #10
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	2200      	movs	r2, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	60fa      	str	r2, [r7, #12]
 8004afc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b00:	f7fc f8ca 	bl	8000c98 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4613      	mov	r3, r2
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	3301      	adds	r3, #1
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b26:	e002      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3740      	adds	r7, #64	; 0x40
 8004b34:	46bd      	mov	sp, r7
 8004b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	017d7840 	.word	0x017d7840

08004b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b4c:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000000 	.word	0x20000000

08004b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b64:	f7ff fff0 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0a9b      	lsrs	r3, r3, #10
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4903      	ldr	r1, [pc, #12]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	0800b438 	.word	0x0800b438

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b8c:	f7ff ffdc 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0b5b      	lsrs	r3, r3, #13
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	; (8004bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	0800b438 	.word	0x0800b438

08004bb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e041      	b.n	8004c46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fd fa32 	bl	8002040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f000 f8f0 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e0ae      	b.n	8004dcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b0c      	cmp	r3, #12
 8004c7a:	f200 809f 	bhi.w	8004dbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004cb9 	.word	0x08004cb9
 8004c88:	08004dbd 	.word	0x08004dbd
 8004c8c:	08004dbd 	.word	0x08004dbd
 8004c90:	08004dbd 	.word	0x08004dbd
 8004c94:	08004cf9 	.word	0x08004cf9
 8004c98:	08004dbd 	.word	0x08004dbd
 8004c9c:	08004dbd 	.word	0x08004dbd
 8004ca0:	08004dbd 	.word	0x08004dbd
 8004ca4:	08004d3b 	.word	0x08004d3b
 8004ca8:	08004dbd 	.word	0x08004dbd
 8004cac:	08004dbd 	.word	0x08004dbd
 8004cb0:	08004dbd 	.word	0x08004dbd
 8004cb4:	08004d7b 	.word	0x08004d7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f908 	bl	8004ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0208 	orr.w	r2, r2, #8
 8004cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0204 	bic.w	r2, r2, #4
 8004ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6999      	ldr	r1, [r3, #24]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	619a      	str	r2, [r3, #24]
      break;
 8004cf6:	e064      	b.n	8004dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 f94e 	bl	8004fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6999      	ldr	r1, [r3, #24]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	021a      	lsls	r2, r3, #8
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	619a      	str	r2, [r3, #24]
      break;
 8004d38:	e043      	b.n	8004dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 f999 	bl	8005078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0208 	orr.w	r2, r2, #8
 8004d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0204 	bic.w	r2, r2, #4
 8004d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69d9      	ldr	r1, [r3, #28]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	61da      	str	r2, [r3, #28]
      break;
 8004d78:	e023      	b.n	8004dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f9e3 	bl	800514c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69d9      	ldr	r1, [r3, #28]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	021a      	lsls	r2, r3, #8
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	61da      	str	r2, [r3, #28]
      break;
 8004dba:	e002      	b.n	8004dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a34      	ldr	r2, [pc, #208]	; (8004eb8 <TIM_Base_SetConfig+0xe4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00f      	beq.n	8004e0c <TIM_Base_SetConfig+0x38>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d00b      	beq.n	8004e0c <TIM_Base_SetConfig+0x38>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a31      	ldr	r2, [pc, #196]	; (8004ebc <TIM_Base_SetConfig+0xe8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_Base_SetConfig+0x38>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a30      	ldr	r2, [pc, #192]	; (8004ec0 <TIM_Base_SetConfig+0xec>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_Base_SetConfig+0x38>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a2f      	ldr	r2, [pc, #188]	; (8004ec4 <TIM_Base_SetConfig+0xf0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d108      	bne.n	8004e1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <TIM_Base_SetConfig+0xe4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01b      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d017      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <TIM_Base_SetConfig+0xe8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <TIM_Base_SetConfig+0xec>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <TIM_Base_SetConfig+0xf0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <TIM_Base_SetConfig+0xf4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <TIM_Base_SetConfig+0xf8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0x8a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1d      	ldr	r2, [pc, #116]	; (8004ed0 <TIM_Base_SetConfig+0xfc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <TIM_Base_SetConfig+0xe4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d103      	bne.n	8004ea4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	615a      	str	r2, [r3, #20]
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800

08004ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0302 	bic.w	r3, r3, #2
 8004f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <TIM_OC1_SetConfig+0xc8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10c      	bne.n	8004f4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0308 	bic.w	r3, r3, #8
 8004f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f023 0304 	bic.w	r3, r3, #4
 8004f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <TIM_OC1_SetConfig+0xc8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d111      	bne.n	8004f76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	621a      	str	r2, [r3, #32]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40010000 	.word	0x40010000

08004fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f023 0210 	bic.w	r2, r3, #16
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 0320 	bic.w	r3, r3, #32
 8004fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <TIM_OC2_SetConfig+0xd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10d      	bne.n	800501c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <TIM_OC2_SetConfig+0xd4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d113      	bne.n	800504c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800502a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40010000 	.word	0x40010000

08005078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <TIM_OC3_SetConfig+0xd0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10d      	bne.n	80050f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a14      	ldr	r2, [pc, #80]	; (8005148 <TIM_OC3_SetConfig+0xd0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d113      	bne.n	8005122 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40010000 	.word	0x40010000

0800514c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	031b      	lsls	r3, r3, #12
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <TIM_OC4_SetConfig+0x9c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d109      	bne.n	80051c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	019b      	lsls	r3, r3, #6
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000

080051ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e050      	b.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d018      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d013      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a16      	ldr	r2, [pc, #88]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a15      	ldr	r2, [pc, #84]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10c      	bne.n	8005294 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4313      	orrs	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	40000c00 	.word	0x40000c00
 80052c4:	40014000 	.word	0x40014000

080052c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e03f      	b.n	800535a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fc ff5a 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2224      	movs	r2, #36	; 0x24
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800530a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f829 	bl	8005364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005368:	b0c0      	sub	sp, #256	; 0x100
 800536a:	af00      	add	r7, sp, #0
 800536c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	68d9      	ldr	r1, [r3, #12]
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	ea40 0301 	orr.w	r3, r0, r1
 800538c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	431a      	orrs	r2, r3
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053bc:	f021 010c 	bic.w	r1, r1, #12
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ca:	430b      	orrs	r3, r1
 80053cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053de:	6999      	ldr	r1, [r3, #24]
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	ea40 0301 	orr.w	r3, r0, r1
 80053ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b8f      	ldr	r3, [pc, #572]	; (8005630 <UART_SetConfig+0x2cc>)
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d005      	beq.n	8005404 <UART_SetConfig+0xa0>
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b8d      	ldr	r3, [pc, #564]	; (8005634 <UART_SetConfig+0x2d0>)
 8005400:	429a      	cmp	r2, r3
 8005402:	d104      	bne.n	800540e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005404:	f7ff fbc0 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8005408:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800540c:	e003      	b.n	8005416 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800540e:	f7ff fba7 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8005412:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005420:	f040 810c 	bne.w	800563c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005428:	2200      	movs	r2, #0
 800542a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800542e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005432:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005436:	4622      	mov	r2, r4
 8005438:	462b      	mov	r3, r5
 800543a:	1891      	adds	r1, r2, r2
 800543c:	65b9      	str	r1, [r7, #88]	; 0x58
 800543e:	415b      	adcs	r3, r3
 8005440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005442:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005446:	4621      	mov	r1, r4
 8005448:	eb12 0801 	adds.w	r8, r2, r1
 800544c:	4629      	mov	r1, r5
 800544e:	eb43 0901 	adc.w	r9, r3, r1
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800545e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005466:	4690      	mov	r8, r2
 8005468:	4699      	mov	r9, r3
 800546a:	4623      	mov	r3, r4
 800546c:	eb18 0303 	adds.w	r3, r8, r3
 8005470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005474:	462b      	mov	r3, r5
 8005476:	eb49 0303 	adc.w	r3, r9, r3
 800547a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800548a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800548e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005492:	460b      	mov	r3, r1
 8005494:	18db      	adds	r3, r3, r3
 8005496:	653b      	str	r3, [r7, #80]	; 0x50
 8005498:	4613      	mov	r3, r2
 800549a:	eb42 0303 	adc.w	r3, r2, r3
 800549e:	657b      	str	r3, [r7, #84]	; 0x54
 80054a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054a8:	f7fb fbf6 	bl	8000c98 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4b61      	ldr	r3, [pc, #388]	; (8005638 <UART_SetConfig+0x2d4>)
 80054b2:	fba3 2302 	umull	r2, r3, r3, r2
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	011c      	lsls	r4, r3, #4
 80054ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	1891      	adds	r1, r2, r2
 80054d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80054d4:	415b      	adcs	r3, r3
 80054d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054dc:	4641      	mov	r1, r8
 80054de:	eb12 0a01 	adds.w	sl, r2, r1
 80054e2:	4649      	mov	r1, r9
 80054e4:	eb43 0b01 	adc.w	fp, r3, r1
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054fc:	4692      	mov	sl, r2
 80054fe:	469b      	mov	fp, r3
 8005500:	4643      	mov	r3, r8
 8005502:	eb1a 0303 	adds.w	r3, sl, r3
 8005506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800550a:	464b      	mov	r3, r9
 800550c:	eb4b 0303 	adc.w	r3, fp, r3
 8005510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005520:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005524:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005528:	460b      	mov	r3, r1
 800552a:	18db      	adds	r3, r3, r3
 800552c:	643b      	str	r3, [r7, #64]	; 0x40
 800552e:	4613      	mov	r3, r2
 8005530:	eb42 0303 	adc.w	r3, r2, r3
 8005534:	647b      	str	r3, [r7, #68]	; 0x44
 8005536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800553a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800553e:	f7fb fbab 	bl	8000c98 <__aeabi_uldivmod>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4611      	mov	r1, r2
 8005548:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <UART_SetConfig+0x2d4>)
 800554a:	fba3 2301 	umull	r2, r3, r3, r1
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2264      	movs	r2, #100	; 0x64
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	1acb      	subs	r3, r1, r3
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800555e:	4b36      	ldr	r3, [pc, #216]	; (8005638 <UART_SetConfig+0x2d4>)
 8005560:	fba3 2302 	umull	r2, r3, r3, r2
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800556c:	441c      	add	r4, r3
 800556e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005572:	2200      	movs	r2, #0
 8005574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005578:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800557c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005580:	4642      	mov	r2, r8
 8005582:	464b      	mov	r3, r9
 8005584:	1891      	adds	r1, r2, r2
 8005586:	63b9      	str	r1, [r7, #56]	; 0x38
 8005588:	415b      	adcs	r3, r3
 800558a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800558c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005590:	4641      	mov	r1, r8
 8005592:	1851      	adds	r1, r2, r1
 8005594:	6339      	str	r1, [r7, #48]	; 0x30
 8005596:	4649      	mov	r1, r9
 8005598:	414b      	adcs	r3, r1
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055a8:	4659      	mov	r1, fp
 80055aa:	00cb      	lsls	r3, r1, #3
 80055ac:	4651      	mov	r1, sl
 80055ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055b2:	4651      	mov	r1, sl
 80055b4:	00ca      	lsls	r2, r1, #3
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	4642      	mov	r2, r8
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055c4:	464b      	mov	r3, r9
 80055c6:	460a      	mov	r2, r1
 80055c8:	eb42 0303 	adc.w	r3, r2, r3
 80055cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055e4:	460b      	mov	r3, r1
 80055e6:	18db      	adds	r3, r3, r3
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ea:	4613      	mov	r3, r2
 80055ec:	eb42 0303 	adc.w	r3, r2, r3
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055fa:	f7fb fb4d 	bl	8000c98 <__aeabi_uldivmod>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <UART_SetConfig+0x2d4>)
 8005604:	fba3 1302 	umull	r1, r3, r3, r2
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	2164      	movs	r1, #100	; 0x64
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	3332      	adds	r3, #50	; 0x32
 8005616:	4a08      	ldr	r2, [pc, #32]	; (8005638 <UART_SetConfig+0x2d4>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	f003 0207 	and.w	r2, r3, #7
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4422      	add	r2, r4
 800562a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800562c:	e105      	b.n	800583a <UART_SetConfig+0x4d6>
 800562e:	bf00      	nop
 8005630:	40011000 	.word	0x40011000
 8005634:	40011400 	.word	0x40011400
 8005638:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800563c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005646:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800564a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800564e:	4642      	mov	r2, r8
 8005650:	464b      	mov	r3, r9
 8005652:	1891      	adds	r1, r2, r2
 8005654:	6239      	str	r1, [r7, #32]
 8005656:	415b      	adcs	r3, r3
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
 800565a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800565e:	4641      	mov	r1, r8
 8005660:	1854      	adds	r4, r2, r1
 8005662:	4649      	mov	r1, r9
 8005664:	eb43 0501 	adc.w	r5, r3, r1
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	00eb      	lsls	r3, r5, #3
 8005672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005676:	00e2      	lsls	r2, r4, #3
 8005678:	4614      	mov	r4, r2
 800567a:	461d      	mov	r5, r3
 800567c:	4643      	mov	r3, r8
 800567e:	18e3      	adds	r3, r4, r3
 8005680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005684:	464b      	mov	r3, r9
 8005686:	eb45 0303 	adc.w	r3, r5, r3
 800568a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800569a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056aa:	4629      	mov	r1, r5
 80056ac:	008b      	lsls	r3, r1, #2
 80056ae:	4621      	mov	r1, r4
 80056b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b4:	4621      	mov	r1, r4
 80056b6:	008a      	lsls	r2, r1, #2
 80056b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056bc:	f7fb faec 	bl	8000c98 <__aeabi_uldivmod>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4b60      	ldr	r3, [pc, #384]	; (8005848 <UART_SetConfig+0x4e4>)
 80056c6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	011c      	lsls	r4, r3, #4
 80056ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056e0:	4642      	mov	r2, r8
 80056e2:	464b      	mov	r3, r9
 80056e4:	1891      	adds	r1, r2, r2
 80056e6:	61b9      	str	r1, [r7, #24]
 80056e8:	415b      	adcs	r3, r3
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056f0:	4641      	mov	r1, r8
 80056f2:	1851      	adds	r1, r2, r1
 80056f4:	6139      	str	r1, [r7, #16]
 80056f6:	4649      	mov	r1, r9
 80056f8:	414b      	adcs	r3, r1
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005708:	4659      	mov	r1, fp
 800570a:	00cb      	lsls	r3, r1, #3
 800570c:	4651      	mov	r1, sl
 800570e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005712:	4651      	mov	r1, sl
 8005714:	00ca      	lsls	r2, r1, #3
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	4603      	mov	r3, r0
 800571c:	4642      	mov	r2, r8
 800571e:	189b      	adds	r3, r3, r2
 8005720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005724:	464b      	mov	r3, r9
 8005726:	460a      	mov	r2, r1
 8005728:	eb42 0303 	adc.w	r3, r2, r3
 800572c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	67bb      	str	r3, [r7, #120]	; 0x78
 800573a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005748:	4649      	mov	r1, r9
 800574a:	008b      	lsls	r3, r1, #2
 800574c:	4641      	mov	r1, r8
 800574e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005752:	4641      	mov	r1, r8
 8005754:	008a      	lsls	r2, r1, #2
 8005756:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800575a:	f7fb fa9d 	bl	8000c98 <__aeabi_uldivmod>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4b39      	ldr	r3, [pc, #228]	; (8005848 <UART_SetConfig+0x4e4>)
 8005764:	fba3 1302 	umull	r1, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	2164      	movs	r1, #100	; 0x64
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	3332      	adds	r3, #50	; 0x32
 8005776:	4a34      	ldr	r2, [pc, #208]	; (8005848 <UART_SetConfig+0x4e4>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005782:	441c      	add	r4, r3
 8005784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005788:	2200      	movs	r2, #0
 800578a:	673b      	str	r3, [r7, #112]	; 0x70
 800578c:	677a      	str	r2, [r7, #116]	; 0x74
 800578e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005792:	4642      	mov	r2, r8
 8005794:	464b      	mov	r3, r9
 8005796:	1891      	adds	r1, r2, r2
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	415b      	adcs	r3, r3
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057a2:	4641      	mov	r1, r8
 80057a4:	1851      	adds	r1, r2, r1
 80057a6:	6039      	str	r1, [r7, #0]
 80057a8:	4649      	mov	r1, r9
 80057aa:	414b      	adcs	r3, r1
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057ba:	4659      	mov	r1, fp
 80057bc:	00cb      	lsls	r3, r1, #3
 80057be:	4651      	mov	r1, sl
 80057c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057c4:	4651      	mov	r1, sl
 80057c6:	00ca      	lsls	r2, r1, #3
 80057c8:	4610      	mov	r0, r2
 80057ca:	4619      	mov	r1, r3
 80057cc:	4603      	mov	r3, r0
 80057ce:	4642      	mov	r2, r8
 80057d0:	189b      	adds	r3, r3, r2
 80057d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057d4:	464b      	mov	r3, r9
 80057d6:	460a      	mov	r2, r1
 80057d8:	eb42 0303 	adc.w	r3, r2, r3
 80057dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	663b      	str	r3, [r7, #96]	; 0x60
 80057e8:	667a      	str	r2, [r7, #100]	; 0x64
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057f6:	4649      	mov	r1, r9
 80057f8:	008b      	lsls	r3, r1, #2
 80057fa:	4641      	mov	r1, r8
 80057fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005800:	4641      	mov	r1, r8
 8005802:	008a      	lsls	r2, r1, #2
 8005804:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005808:	f7fb fa46 	bl	8000c98 <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <UART_SetConfig+0x4e4>)
 8005812:	fba3 1302 	umull	r1, r3, r3, r2
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	2164      	movs	r1, #100	; 0x64
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	3332      	adds	r3, #50	; 0x32
 8005824:	4a08      	ldr	r2, [pc, #32]	; (8005848 <UART_SetConfig+0x4e4>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	f003 020f 	and.w	r2, r3, #15
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4422      	add	r2, r4
 8005838:	609a      	str	r2, [r3, #8]
}
 800583a:	bf00      	nop
 800583c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005840:	46bd      	mov	sp, r7
 8005842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005846:	bf00      	nop
 8005848:	51eb851f 	.word	0x51eb851f

0800584c <__errno>:
 800584c:	4b01      	ldr	r3, [pc, #4]	; (8005854 <__errno+0x8>)
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c

08005858 <__libc_init_array>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	4d0d      	ldr	r5, [pc, #52]	; (8005890 <__libc_init_array+0x38>)
 800585c:	4c0d      	ldr	r4, [pc, #52]	; (8005894 <__libc_init_array+0x3c>)
 800585e:	1b64      	subs	r4, r4, r5
 8005860:	10a4      	asrs	r4, r4, #2
 8005862:	2600      	movs	r6, #0
 8005864:	42a6      	cmp	r6, r4
 8005866:	d109      	bne.n	800587c <__libc_init_array+0x24>
 8005868:	4d0b      	ldr	r5, [pc, #44]	; (8005898 <__libc_init_array+0x40>)
 800586a:	4c0c      	ldr	r4, [pc, #48]	; (800589c <__libc_init_array+0x44>)
 800586c:	f004 fd0e 	bl	800a28c <_init>
 8005870:	1b64      	subs	r4, r4, r5
 8005872:	10a4      	asrs	r4, r4, #2
 8005874:	2600      	movs	r6, #0
 8005876:	42a6      	cmp	r6, r4
 8005878:	d105      	bne.n	8005886 <__libc_init_array+0x2e>
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005880:	4798      	blx	r3
 8005882:	3601      	adds	r6, #1
 8005884:	e7ee      	b.n	8005864 <__libc_init_array+0xc>
 8005886:	f855 3b04 	ldr.w	r3, [r5], #4
 800588a:	4798      	blx	r3
 800588c:	3601      	adds	r6, #1
 800588e:	e7f2      	b.n	8005876 <__libc_init_array+0x1e>
 8005890:	0800b8f4 	.word	0x0800b8f4
 8005894:	0800b8f4 	.word	0x0800b8f4
 8005898:	0800b8f4 	.word	0x0800b8f4
 800589c:	0800b8f8 	.word	0x0800b8f8

080058a0 <memset>:
 80058a0:	4402      	add	r2, r0
 80058a2:	4603      	mov	r3, r0
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d100      	bne.n	80058aa <memset+0xa>
 80058a8:	4770      	bx	lr
 80058aa:	f803 1b01 	strb.w	r1, [r3], #1
 80058ae:	e7f9      	b.n	80058a4 <memset+0x4>

080058b0 <__cvt>:
 80058b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	ec55 4b10 	vmov	r4, r5, d0
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	460e      	mov	r6, r1
 80058bc:	4619      	mov	r1, r3
 80058be:	462b      	mov	r3, r5
 80058c0:	bfbb      	ittet	lt
 80058c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058c6:	461d      	movlt	r5, r3
 80058c8:	2300      	movge	r3, #0
 80058ca:	232d      	movlt	r3, #45	; 0x2d
 80058cc:	700b      	strb	r3, [r1, #0]
 80058ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058d4:	4691      	mov	r9, r2
 80058d6:	f023 0820 	bic.w	r8, r3, #32
 80058da:	bfbc      	itt	lt
 80058dc:	4622      	movlt	r2, r4
 80058de:	4614      	movlt	r4, r2
 80058e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058e4:	d005      	beq.n	80058f2 <__cvt+0x42>
 80058e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058ea:	d100      	bne.n	80058ee <__cvt+0x3e>
 80058ec:	3601      	adds	r6, #1
 80058ee:	2102      	movs	r1, #2
 80058f0:	e000      	b.n	80058f4 <__cvt+0x44>
 80058f2:	2103      	movs	r1, #3
 80058f4:	ab03      	add	r3, sp, #12
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	ab02      	add	r3, sp, #8
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	ec45 4b10 	vmov	d0, r4, r5
 8005900:	4653      	mov	r3, sl
 8005902:	4632      	mov	r2, r6
 8005904:	f001 fde8 	bl	80074d8 <_dtoa_r>
 8005908:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800590c:	4607      	mov	r7, r0
 800590e:	d102      	bne.n	8005916 <__cvt+0x66>
 8005910:	f019 0f01 	tst.w	r9, #1
 8005914:	d022      	beq.n	800595c <__cvt+0xac>
 8005916:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800591a:	eb07 0906 	add.w	r9, r7, r6
 800591e:	d110      	bne.n	8005942 <__cvt+0x92>
 8005920:	783b      	ldrb	r3, [r7, #0]
 8005922:	2b30      	cmp	r3, #48	; 0x30
 8005924:	d10a      	bne.n	800593c <__cvt+0x8c>
 8005926:	2200      	movs	r2, #0
 8005928:	2300      	movs	r3, #0
 800592a:	4620      	mov	r0, r4
 800592c:	4629      	mov	r1, r5
 800592e:	f7fb f8d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005932:	b918      	cbnz	r0, 800593c <__cvt+0x8c>
 8005934:	f1c6 0601 	rsb	r6, r6, #1
 8005938:	f8ca 6000 	str.w	r6, [sl]
 800593c:	f8da 3000 	ldr.w	r3, [sl]
 8005940:	4499      	add	r9, r3
 8005942:	2200      	movs	r2, #0
 8005944:	2300      	movs	r3, #0
 8005946:	4620      	mov	r0, r4
 8005948:	4629      	mov	r1, r5
 800594a:	f7fb f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800594e:	b108      	cbz	r0, 8005954 <__cvt+0xa4>
 8005950:	f8cd 900c 	str.w	r9, [sp, #12]
 8005954:	2230      	movs	r2, #48	; 0x30
 8005956:	9b03      	ldr	r3, [sp, #12]
 8005958:	454b      	cmp	r3, r9
 800595a:	d307      	bcc.n	800596c <__cvt+0xbc>
 800595c:	9b03      	ldr	r3, [sp, #12]
 800595e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005960:	1bdb      	subs	r3, r3, r7
 8005962:	4638      	mov	r0, r7
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	b004      	add	sp, #16
 8005968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596c:	1c59      	adds	r1, r3, #1
 800596e:	9103      	str	r1, [sp, #12]
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	e7f0      	b.n	8005956 <__cvt+0xa6>

08005974 <__exponent>:
 8005974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005976:	4603      	mov	r3, r0
 8005978:	2900      	cmp	r1, #0
 800597a:	bfb8      	it	lt
 800597c:	4249      	neglt	r1, r1
 800597e:	f803 2b02 	strb.w	r2, [r3], #2
 8005982:	bfb4      	ite	lt
 8005984:	222d      	movlt	r2, #45	; 0x2d
 8005986:	222b      	movge	r2, #43	; 0x2b
 8005988:	2909      	cmp	r1, #9
 800598a:	7042      	strb	r2, [r0, #1]
 800598c:	dd2a      	ble.n	80059e4 <__exponent+0x70>
 800598e:	f10d 0407 	add.w	r4, sp, #7
 8005992:	46a4      	mov	ip, r4
 8005994:	270a      	movs	r7, #10
 8005996:	46a6      	mov	lr, r4
 8005998:	460a      	mov	r2, r1
 800599a:	fb91 f6f7 	sdiv	r6, r1, r7
 800599e:	fb07 1516 	mls	r5, r7, r6, r1
 80059a2:	3530      	adds	r5, #48	; 0x30
 80059a4:	2a63      	cmp	r2, #99	; 0x63
 80059a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80059aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059ae:	4631      	mov	r1, r6
 80059b0:	dcf1      	bgt.n	8005996 <__exponent+0x22>
 80059b2:	3130      	adds	r1, #48	; 0x30
 80059b4:	f1ae 0502 	sub.w	r5, lr, #2
 80059b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059bc:	1c44      	adds	r4, r0, #1
 80059be:	4629      	mov	r1, r5
 80059c0:	4561      	cmp	r1, ip
 80059c2:	d30a      	bcc.n	80059da <__exponent+0x66>
 80059c4:	f10d 0209 	add.w	r2, sp, #9
 80059c8:	eba2 020e 	sub.w	r2, r2, lr
 80059cc:	4565      	cmp	r5, ip
 80059ce:	bf88      	it	hi
 80059d0:	2200      	movhi	r2, #0
 80059d2:	4413      	add	r3, r2
 80059d4:	1a18      	subs	r0, r3, r0
 80059d6:	b003      	add	sp, #12
 80059d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059e2:	e7ed      	b.n	80059c0 <__exponent+0x4c>
 80059e4:	2330      	movs	r3, #48	; 0x30
 80059e6:	3130      	adds	r1, #48	; 0x30
 80059e8:	7083      	strb	r3, [r0, #2]
 80059ea:	70c1      	strb	r1, [r0, #3]
 80059ec:	1d03      	adds	r3, r0, #4
 80059ee:	e7f1      	b.n	80059d4 <__exponent+0x60>

080059f0 <_printf_float>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	ed2d 8b02 	vpush	{d8}
 80059f8:	b08d      	sub	sp, #52	; 0x34
 80059fa:	460c      	mov	r4, r1
 80059fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a00:	4616      	mov	r6, r2
 8005a02:	461f      	mov	r7, r3
 8005a04:	4605      	mov	r5, r0
 8005a06:	f002 fec5 	bl	8008794 <_localeconv_r>
 8005a0a:	f8d0 a000 	ldr.w	sl, [r0]
 8005a0e:	4650      	mov	r0, sl
 8005a10:	f7fa fbe6 	bl	80001e0 <strlen>
 8005a14:	2300      	movs	r3, #0
 8005a16:	930a      	str	r3, [sp, #40]	; 0x28
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	9305      	str	r3, [sp, #20]
 8005a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a24:	3307      	adds	r3, #7
 8005a26:	f023 0307 	bic.w	r3, r3, #7
 8005a2a:	f103 0208 	add.w	r2, r3, #8
 8005a2e:	f8c8 2000 	str.w	r2, [r8]
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a42:	9307      	str	r3, [sp, #28]
 8005a44:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a48:	ee08 0a10 	vmov	s16, r0
 8005a4c:	4b9f      	ldr	r3, [pc, #636]	; (8005ccc <_printf_float+0x2dc>)
 8005a4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a52:	f04f 32ff 	mov.w	r2, #4294967295
 8005a56:	f7fb f871 	bl	8000b3c <__aeabi_dcmpun>
 8005a5a:	bb88      	cbnz	r0, 8005ac0 <_printf_float+0xd0>
 8005a5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a60:	4b9a      	ldr	r3, [pc, #616]	; (8005ccc <_printf_float+0x2dc>)
 8005a62:	f04f 32ff 	mov.w	r2, #4294967295
 8005a66:	f7fb f84b 	bl	8000b00 <__aeabi_dcmple>
 8005a6a:	bb48      	cbnz	r0, 8005ac0 <_printf_float+0xd0>
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2300      	movs	r3, #0
 8005a70:	4640      	mov	r0, r8
 8005a72:	4649      	mov	r1, r9
 8005a74:	f7fb f83a 	bl	8000aec <__aeabi_dcmplt>
 8005a78:	b110      	cbz	r0, 8005a80 <_printf_float+0x90>
 8005a7a:	232d      	movs	r3, #45	; 0x2d
 8005a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a80:	4b93      	ldr	r3, [pc, #588]	; (8005cd0 <_printf_float+0x2e0>)
 8005a82:	4894      	ldr	r0, [pc, #592]	; (8005cd4 <_printf_float+0x2e4>)
 8005a84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a88:	bf94      	ite	ls
 8005a8a:	4698      	movls	r8, r3
 8005a8c:	4680      	movhi	r8, r0
 8005a8e:	2303      	movs	r3, #3
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	9b05      	ldr	r3, [sp, #20]
 8005a94:	f023 0204 	bic.w	r2, r3, #4
 8005a98:	6022      	str	r2, [r4, #0]
 8005a9a:	f04f 0900 	mov.w	r9, #0
 8005a9e:	9700      	str	r7, [sp, #0]
 8005aa0:	4633      	mov	r3, r6
 8005aa2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 f9d8 	bl	8005e5c <_printf_common>
 8005aac:	3001      	adds	r0, #1
 8005aae:	f040 8090 	bne.w	8005bd2 <_printf_float+0x1e2>
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	b00d      	add	sp, #52	; 0x34
 8005ab8:	ecbd 8b02 	vpop	{d8}
 8005abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	f7fb f838 	bl	8000b3c <__aeabi_dcmpun>
 8005acc:	b140      	cbz	r0, 8005ae0 <_printf_float+0xf0>
 8005ace:	464b      	mov	r3, r9
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bfbc      	itt	lt
 8005ad4:	232d      	movlt	r3, #45	; 0x2d
 8005ad6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ada:	487f      	ldr	r0, [pc, #508]	; (8005cd8 <_printf_float+0x2e8>)
 8005adc:	4b7f      	ldr	r3, [pc, #508]	; (8005cdc <_printf_float+0x2ec>)
 8005ade:	e7d1      	b.n	8005a84 <_printf_float+0x94>
 8005ae0:	6863      	ldr	r3, [r4, #4]
 8005ae2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ae6:	9206      	str	r2, [sp, #24]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	d13f      	bne.n	8005b6c <_printf_float+0x17c>
 8005aec:	2306      	movs	r3, #6
 8005aee:	6063      	str	r3, [r4, #4]
 8005af0:	9b05      	ldr	r3, [sp, #20]
 8005af2:	6861      	ldr	r1, [r4, #4]
 8005af4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005af8:	2300      	movs	r3, #0
 8005afa:	9303      	str	r3, [sp, #12]
 8005afc:	ab0a      	add	r3, sp, #40	; 0x28
 8005afe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b02:	ab09      	add	r3, sp, #36	; 0x24
 8005b04:	ec49 8b10 	vmov	d0, r8, r9
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	6022      	str	r2, [r4, #0]
 8005b0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b10:	4628      	mov	r0, r5
 8005b12:	f7ff fecd 	bl	80058b0 <__cvt>
 8005b16:	9b06      	ldr	r3, [sp, #24]
 8005b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b1a:	2b47      	cmp	r3, #71	; 0x47
 8005b1c:	4680      	mov	r8, r0
 8005b1e:	d108      	bne.n	8005b32 <_printf_float+0x142>
 8005b20:	1cc8      	adds	r0, r1, #3
 8005b22:	db02      	blt.n	8005b2a <_printf_float+0x13a>
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	4299      	cmp	r1, r3
 8005b28:	dd41      	ble.n	8005bae <_printf_float+0x1be>
 8005b2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005b2e:	fa5f fb8b 	uxtb.w	fp, fp
 8005b32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b36:	d820      	bhi.n	8005b7a <_printf_float+0x18a>
 8005b38:	3901      	subs	r1, #1
 8005b3a:	465a      	mov	r2, fp
 8005b3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b40:	9109      	str	r1, [sp, #36]	; 0x24
 8005b42:	f7ff ff17 	bl	8005974 <__exponent>
 8005b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b48:	1813      	adds	r3, r2, r0
 8005b4a:	2a01      	cmp	r2, #1
 8005b4c:	4681      	mov	r9, r0
 8005b4e:	6123      	str	r3, [r4, #16]
 8005b50:	dc02      	bgt.n	8005b58 <_printf_float+0x168>
 8005b52:	6822      	ldr	r2, [r4, #0]
 8005b54:	07d2      	lsls	r2, r2, #31
 8005b56:	d501      	bpl.n	8005b5c <_printf_float+0x16c>
 8005b58:	3301      	adds	r3, #1
 8005b5a:	6123      	str	r3, [r4, #16]
 8005b5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d09c      	beq.n	8005a9e <_printf_float+0xae>
 8005b64:	232d      	movs	r3, #45	; 0x2d
 8005b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b6a:	e798      	b.n	8005a9e <_printf_float+0xae>
 8005b6c:	9a06      	ldr	r2, [sp, #24]
 8005b6e:	2a47      	cmp	r2, #71	; 0x47
 8005b70:	d1be      	bne.n	8005af0 <_printf_float+0x100>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1bc      	bne.n	8005af0 <_printf_float+0x100>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e7b9      	b.n	8005aee <_printf_float+0xfe>
 8005b7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b7e:	d118      	bne.n	8005bb2 <_printf_float+0x1c2>
 8005b80:	2900      	cmp	r1, #0
 8005b82:	6863      	ldr	r3, [r4, #4]
 8005b84:	dd0b      	ble.n	8005b9e <_printf_float+0x1ae>
 8005b86:	6121      	str	r1, [r4, #16]
 8005b88:	b913      	cbnz	r3, 8005b90 <_printf_float+0x1a0>
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	07d0      	lsls	r0, r2, #31
 8005b8e:	d502      	bpl.n	8005b96 <_printf_float+0x1a6>
 8005b90:	3301      	adds	r3, #1
 8005b92:	440b      	add	r3, r1
 8005b94:	6123      	str	r3, [r4, #16]
 8005b96:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b98:	f04f 0900 	mov.w	r9, #0
 8005b9c:	e7de      	b.n	8005b5c <_printf_float+0x16c>
 8005b9e:	b913      	cbnz	r3, 8005ba6 <_printf_float+0x1b6>
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	07d2      	lsls	r2, r2, #31
 8005ba4:	d501      	bpl.n	8005baa <_printf_float+0x1ba>
 8005ba6:	3302      	adds	r3, #2
 8005ba8:	e7f4      	b.n	8005b94 <_printf_float+0x1a4>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e7f2      	b.n	8005b94 <_printf_float+0x1a4>
 8005bae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb4:	4299      	cmp	r1, r3
 8005bb6:	db05      	blt.n	8005bc4 <_printf_float+0x1d4>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	6121      	str	r1, [r4, #16]
 8005bbc:	07d8      	lsls	r0, r3, #31
 8005bbe:	d5ea      	bpl.n	8005b96 <_printf_float+0x1a6>
 8005bc0:	1c4b      	adds	r3, r1, #1
 8005bc2:	e7e7      	b.n	8005b94 <_printf_float+0x1a4>
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	bfd4      	ite	le
 8005bc8:	f1c1 0202 	rsble	r2, r1, #2
 8005bcc:	2201      	movgt	r2, #1
 8005bce:	4413      	add	r3, r2
 8005bd0:	e7e0      	b.n	8005b94 <_printf_float+0x1a4>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	055a      	lsls	r2, r3, #21
 8005bd6:	d407      	bmi.n	8005be8 <_printf_float+0x1f8>
 8005bd8:	6923      	ldr	r3, [r4, #16]
 8005bda:	4642      	mov	r2, r8
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	d12c      	bne.n	8005c40 <_printf_float+0x250>
 8005be6:	e764      	b.n	8005ab2 <_printf_float+0xc2>
 8005be8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bec:	f240 80e0 	bls.w	8005db0 <_printf_float+0x3c0>
 8005bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f7fa ff6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d034      	beq.n	8005c6a <_printf_float+0x27a>
 8005c00:	4a37      	ldr	r2, [pc, #220]	; (8005ce0 <_printf_float+0x2f0>)
 8005c02:	2301      	movs	r3, #1
 8005c04:	4631      	mov	r1, r6
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f af51 	beq.w	8005ab2 <_printf_float+0xc2>
 8005c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c14:	429a      	cmp	r2, r3
 8005c16:	db02      	blt.n	8005c1e <_printf_float+0x22e>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	07d8      	lsls	r0, r3, #31
 8005c1c:	d510      	bpl.n	8005c40 <_printf_float+0x250>
 8005c1e:	ee18 3a10 	vmov	r3, s16
 8005c22:	4652      	mov	r2, sl
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b8      	blx	r7
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f43f af41 	beq.w	8005ab2 <_printf_float+0xc2>
 8005c30:	f04f 0800 	mov.w	r8, #0
 8005c34:	f104 091a 	add.w	r9, r4, #26
 8005c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	4543      	cmp	r3, r8
 8005c3e:	dc09      	bgt.n	8005c54 <_printf_float+0x264>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	079b      	lsls	r3, r3, #30
 8005c44:	f100 8105 	bmi.w	8005e52 <_printf_float+0x462>
 8005c48:	68e0      	ldr	r0, [r4, #12]
 8005c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c4c:	4298      	cmp	r0, r3
 8005c4e:	bfb8      	it	lt
 8005c50:	4618      	movlt	r0, r3
 8005c52:	e730      	b.n	8005ab6 <_printf_float+0xc6>
 8005c54:	2301      	movs	r3, #1
 8005c56:	464a      	mov	r2, r9
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	f43f af27 	beq.w	8005ab2 <_printf_float+0xc2>
 8005c64:	f108 0801 	add.w	r8, r8, #1
 8005c68:	e7e6      	b.n	8005c38 <_printf_float+0x248>
 8005c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	dc39      	bgt.n	8005ce4 <_printf_float+0x2f4>
 8005c70:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <_printf_float+0x2f0>)
 8005c72:	2301      	movs	r3, #1
 8005c74:	4631      	mov	r1, r6
 8005c76:	4628      	mov	r0, r5
 8005c78:	47b8      	blx	r7
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	f43f af19 	beq.w	8005ab2 <_printf_float+0xc2>
 8005c80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c84:	4313      	orrs	r3, r2
 8005c86:	d102      	bne.n	8005c8e <_printf_float+0x29e>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	07d9      	lsls	r1, r3, #31
 8005c8c:	d5d8      	bpl.n	8005c40 <_printf_float+0x250>
 8005c8e:	ee18 3a10 	vmov	r3, s16
 8005c92:	4652      	mov	r2, sl
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	47b8      	blx	r7
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	f43f af09 	beq.w	8005ab2 <_printf_float+0xc2>
 8005ca0:	f04f 0900 	mov.w	r9, #0
 8005ca4:	f104 0a1a 	add.w	sl, r4, #26
 8005ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005caa:	425b      	negs	r3, r3
 8005cac:	454b      	cmp	r3, r9
 8005cae:	dc01      	bgt.n	8005cb4 <_printf_float+0x2c4>
 8005cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb2:	e792      	b.n	8005bda <_printf_float+0x1ea>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4652      	mov	r2, sl
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f43f aef7 	beq.w	8005ab2 <_printf_float+0xc2>
 8005cc4:	f109 0901 	add.w	r9, r9, #1
 8005cc8:	e7ee      	b.n	8005ca8 <_printf_float+0x2b8>
 8005cca:	bf00      	nop
 8005ccc:	7fefffff 	.word	0x7fefffff
 8005cd0:	0800b44c 	.word	0x0800b44c
 8005cd4:	0800b450 	.word	0x0800b450
 8005cd8:	0800b458 	.word	0x0800b458
 8005cdc:	0800b454 	.word	0x0800b454
 8005ce0:	0800b45c 	.word	0x0800b45c
 8005ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ce6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	bfa8      	it	ge
 8005cec:	461a      	movge	r2, r3
 8005cee:	2a00      	cmp	r2, #0
 8005cf0:	4691      	mov	r9, r2
 8005cf2:	dc37      	bgt.n	8005d64 <_printf_float+0x374>
 8005cf4:	f04f 0b00 	mov.w	fp, #0
 8005cf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cfc:	f104 021a 	add.w	r2, r4, #26
 8005d00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d02:	9305      	str	r3, [sp, #20]
 8005d04:	eba3 0309 	sub.w	r3, r3, r9
 8005d08:	455b      	cmp	r3, fp
 8005d0a:	dc33      	bgt.n	8005d74 <_printf_float+0x384>
 8005d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d10:	429a      	cmp	r2, r3
 8005d12:	db3b      	blt.n	8005d8c <_printf_float+0x39c>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	07da      	lsls	r2, r3, #31
 8005d18:	d438      	bmi.n	8005d8c <_printf_float+0x39c>
 8005d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d1c:	9a05      	ldr	r2, [sp, #20]
 8005d1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d20:	1a9a      	subs	r2, r3, r2
 8005d22:	eba3 0901 	sub.w	r9, r3, r1
 8005d26:	4591      	cmp	r9, r2
 8005d28:	bfa8      	it	ge
 8005d2a:	4691      	movge	r9, r2
 8005d2c:	f1b9 0f00 	cmp.w	r9, #0
 8005d30:	dc35      	bgt.n	8005d9e <_printf_float+0x3ae>
 8005d32:	f04f 0800 	mov.w	r8, #0
 8005d36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d3a:	f104 0a1a 	add.w	sl, r4, #26
 8005d3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	eba3 0309 	sub.w	r3, r3, r9
 8005d48:	4543      	cmp	r3, r8
 8005d4a:	f77f af79 	ble.w	8005c40 <_printf_float+0x250>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4652      	mov	r2, sl
 8005d52:	4631      	mov	r1, r6
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b8      	blx	r7
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f43f aeaa 	beq.w	8005ab2 <_printf_float+0xc2>
 8005d5e:	f108 0801 	add.w	r8, r8, #1
 8005d62:	e7ec      	b.n	8005d3e <_printf_float+0x34e>
 8005d64:	4613      	mov	r3, r2
 8005d66:	4631      	mov	r1, r6
 8005d68:	4642      	mov	r2, r8
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d1c0      	bne.n	8005cf4 <_printf_float+0x304>
 8005d72:	e69e      	b.n	8005ab2 <_printf_float+0xc2>
 8005d74:	2301      	movs	r3, #1
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	9205      	str	r2, [sp, #20]
 8005d7c:	47b8      	blx	r7
 8005d7e:	3001      	adds	r0, #1
 8005d80:	f43f ae97 	beq.w	8005ab2 <_printf_float+0xc2>
 8005d84:	9a05      	ldr	r2, [sp, #20]
 8005d86:	f10b 0b01 	add.w	fp, fp, #1
 8005d8a:	e7b9      	b.n	8005d00 <_printf_float+0x310>
 8005d8c:	ee18 3a10 	vmov	r3, s16
 8005d90:	4652      	mov	r2, sl
 8005d92:	4631      	mov	r1, r6
 8005d94:	4628      	mov	r0, r5
 8005d96:	47b8      	blx	r7
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d1be      	bne.n	8005d1a <_printf_float+0x32a>
 8005d9c:	e689      	b.n	8005ab2 <_printf_float+0xc2>
 8005d9e:	9a05      	ldr	r2, [sp, #20]
 8005da0:	464b      	mov	r3, r9
 8005da2:	4442      	add	r2, r8
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	d1c1      	bne.n	8005d32 <_printf_float+0x342>
 8005dae:	e680      	b.n	8005ab2 <_printf_float+0xc2>
 8005db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005db2:	2a01      	cmp	r2, #1
 8005db4:	dc01      	bgt.n	8005dba <_printf_float+0x3ca>
 8005db6:	07db      	lsls	r3, r3, #31
 8005db8:	d538      	bpl.n	8005e2c <_printf_float+0x43c>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	47b8      	blx	r7
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	f43f ae74 	beq.w	8005ab2 <_printf_float+0xc2>
 8005dca:	ee18 3a10 	vmov	r3, s16
 8005dce:	4652      	mov	r2, sl
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	47b8      	blx	r7
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	f43f ae6b 	beq.w	8005ab2 <_printf_float+0xc2>
 8005ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	f7fa fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 8005de8:	b9d8      	cbnz	r0, 8005e22 <_printf_float+0x432>
 8005dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dec:	f108 0201 	add.w	r2, r8, #1
 8005df0:	3b01      	subs	r3, #1
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b8      	blx	r7
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d10e      	bne.n	8005e1a <_printf_float+0x42a>
 8005dfc:	e659      	b.n	8005ab2 <_printf_float+0xc2>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4652      	mov	r2, sl
 8005e02:	4631      	mov	r1, r6
 8005e04:	4628      	mov	r0, r5
 8005e06:	47b8      	blx	r7
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f43f ae52 	beq.w	8005ab2 <_printf_float+0xc2>
 8005e0e:	f108 0801 	add.w	r8, r8, #1
 8005e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e14:	3b01      	subs	r3, #1
 8005e16:	4543      	cmp	r3, r8
 8005e18:	dcf1      	bgt.n	8005dfe <_printf_float+0x40e>
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e20:	e6dc      	b.n	8005bdc <_printf_float+0x1ec>
 8005e22:	f04f 0800 	mov.w	r8, #0
 8005e26:	f104 0a1a 	add.w	sl, r4, #26
 8005e2a:	e7f2      	b.n	8005e12 <_printf_float+0x422>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	4642      	mov	r2, r8
 8005e30:	e7df      	b.n	8005df2 <_printf_float+0x402>
 8005e32:	2301      	movs	r3, #1
 8005e34:	464a      	mov	r2, r9
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f43f ae38 	beq.w	8005ab2 <_printf_float+0xc2>
 8005e42:	f108 0801 	add.w	r8, r8, #1
 8005e46:	68e3      	ldr	r3, [r4, #12]
 8005e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e4a:	1a5b      	subs	r3, r3, r1
 8005e4c:	4543      	cmp	r3, r8
 8005e4e:	dcf0      	bgt.n	8005e32 <_printf_float+0x442>
 8005e50:	e6fa      	b.n	8005c48 <_printf_float+0x258>
 8005e52:	f04f 0800 	mov.w	r8, #0
 8005e56:	f104 0919 	add.w	r9, r4, #25
 8005e5a:	e7f4      	b.n	8005e46 <_printf_float+0x456>

08005e5c <_printf_common>:
 8005e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	4616      	mov	r6, r2
 8005e62:	4699      	mov	r9, r3
 8005e64:	688a      	ldr	r2, [r1, #8]
 8005e66:	690b      	ldr	r3, [r1, #16]
 8005e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	bfb8      	it	lt
 8005e70:	4613      	movlt	r3, r2
 8005e72:	6033      	str	r3, [r6, #0]
 8005e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e78:	4607      	mov	r7, r0
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	b10a      	cbz	r2, 8005e82 <_printf_common+0x26>
 8005e7e:	3301      	adds	r3, #1
 8005e80:	6033      	str	r3, [r6, #0]
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	0699      	lsls	r1, r3, #26
 8005e86:	bf42      	ittt	mi
 8005e88:	6833      	ldrmi	r3, [r6, #0]
 8005e8a:	3302      	addmi	r3, #2
 8005e8c:	6033      	strmi	r3, [r6, #0]
 8005e8e:	6825      	ldr	r5, [r4, #0]
 8005e90:	f015 0506 	ands.w	r5, r5, #6
 8005e94:	d106      	bne.n	8005ea4 <_printf_common+0x48>
 8005e96:	f104 0a19 	add.w	sl, r4, #25
 8005e9a:	68e3      	ldr	r3, [r4, #12]
 8005e9c:	6832      	ldr	r2, [r6, #0]
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	42ab      	cmp	r3, r5
 8005ea2:	dc26      	bgt.n	8005ef2 <_printf_common+0x96>
 8005ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ea8:	1e13      	subs	r3, r2, #0
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	bf18      	it	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	0692      	lsls	r2, r2, #26
 8005eb2:	d42b      	bmi.n	8005f0c <_printf_common+0xb0>
 8005eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eb8:	4649      	mov	r1, r9
 8005eba:	4638      	mov	r0, r7
 8005ebc:	47c0      	blx	r8
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d01e      	beq.n	8005f00 <_printf_common+0xa4>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	68e5      	ldr	r5, [r4, #12]
 8005ec6:	6832      	ldr	r2, [r6, #0]
 8005ec8:	f003 0306 	and.w	r3, r3, #6
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	bf08      	it	eq
 8005ed0:	1aad      	subeq	r5, r5, r2
 8005ed2:	68a3      	ldr	r3, [r4, #8]
 8005ed4:	6922      	ldr	r2, [r4, #16]
 8005ed6:	bf0c      	ite	eq
 8005ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005edc:	2500      	movne	r5, #0
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	bfc4      	itt	gt
 8005ee2:	1a9b      	subgt	r3, r3, r2
 8005ee4:	18ed      	addgt	r5, r5, r3
 8005ee6:	2600      	movs	r6, #0
 8005ee8:	341a      	adds	r4, #26
 8005eea:	42b5      	cmp	r5, r6
 8005eec:	d11a      	bne.n	8005f24 <_printf_common+0xc8>
 8005eee:	2000      	movs	r0, #0
 8005ef0:	e008      	b.n	8005f04 <_printf_common+0xa8>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	4638      	mov	r0, r7
 8005efa:	47c0      	blx	r8
 8005efc:	3001      	adds	r0, #1
 8005efe:	d103      	bne.n	8005f08 <_printf_common+0xac>
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f08:	3501      	adds	r5, #1
 8005f0a:	e7c6      	b.n	8005e9a <_printf_common+0x3e>
 8005f0c:	18e1      	adds	r1, r4, r3
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	2030      	movs	r0, #48	; 0x30
 8005f12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f16:	4422      	add	r2, r4
 8005f18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f20:	3302      	adds	r3, #2
 8005f22:	e7c7      	b.n	8005eb4 <_printf_common+0x58>
 8005f24:	2301      	movs	r3, #1
 8005f26:	4622      	mov	r2, r4
 8005f28:	4649      	mov	r1, r9
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	47c0      	blx	r8
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d0e6      	beq.n	8005f00 <_printf_common+0xa4>
 8005f32:	3601      	adds	r6, #1
 8005f34:	e7d9      	b.n	8005eea <_printf_common+0x8e>
	...

08005f38 <_printf_i>:
 8005f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f3c:	7e0f      	ldrb	r7, [r1, #24]
 8005f3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f40:	2f78      	cmp	r7, #120	; 0x78
 8005f42:	4691      	mov	r9, r2
 8005f44:	4680      	mov	r8, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	469a      	mov	sl, r3
 8005f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f4e:	d807      	bhi.n	8005f60 <_printf_i+0x28>
 8005f50:	2f62      	cmp	r7, #98	; 0x62
 8005f52:	d80a      	bhi.n	8005f6a <_printf_i+0x32>
 8005f54:	2f00      	cmp	r7, #0
 8005f56:	f000 80d8 	beq.w	800610a <_printf_i+0x1d2>
 8005f5a:	2f58      	cmp	r7, #88	; 0x58
 8005f5c:	f000 80a3 	beq.w	80060a6 <_printf_i+0x16e>
 8005f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f68:	e03a      	b.n	8005fe0 <_printf_i+0xa8>
 8005f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f6e:	2b15      	cmp	r3, #21
 8005f70:	d8f6      	bhi.n	8005f60 <_printf_i+0x28>
 8005f72:	a101      	add	r1, pc, #4	; (adr r1, 8005f78 <_printf_i+0x40>)
 8005f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f78:	08005fd1 	.word	0x08005fd1
 8005f7c:	08005fe5 	.word	0x08005fe5
 8005f80:	08005f61 	.word	0x08005f61
 8005f84:	08005f61 	.word	0x08005f61
 8005f88:	08005f61 	.word	0x08005f61
 8005f8c:	08005f61 	.word	0x08005f61
 8005f90:	08005fe5 	.word	0x08005fe5
 8005f94:	08005f61 	.word	0x08005f61
 8005f98:	08005f61 	.word	0x08005f61
 8005f9c:	08005f61 	.word	0x08005f61
 8005fa0:	08005f61 	.word	0x08005f61
 8005fa4:	080060f1 	.word	0x080060f1
 8005fa8:	08006015 	.word	0x08006015
 8005fac:	080060d3 	.word	0x080060d3
 8005fb0:	08005f61 	.word	0x08005f61
 8005fb4:	08005f61 	.word	0x08005f61
 8005fb8:	08006113 	.word	0x08006113
 8005fbc:	08005f61 	.word	0x08005f61
 8005fc0:	08006015 	.word	0x08006015
 8005fc4:	08005f61 	.word	0x08005f61
 8005fc8:	08005f61 	.word	0x08005f61
 8005fcc:	080060db 	.word	0x080060db
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	1d1a      	adds	r2, r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	602a      	str	r2, [r5, #0]
 8005fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0a3      	b.n	800612c <_printf_i+0x1f4>
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	6829      	ldr	r1, [r5, #0]
 8005fe8:	0606      	lsls	r6, r0, #24
 8005fea:	f101 0304 	add.w	r3, r1, #4
 8005fee:	d50a      	bpl.n	8006006 <_printf_i+0xce>
 8005ff0:	680e      	ldr	r6, [r1, #0]
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	2e00      	cmp	r6, #0
 8005ff6:	da03      	bge.n	8006000 <_printf_i+0xc8>
 8005ff8:	232d      	movs	r3, #45	; 0x2d
 8005ffa:	4276      	negs	r6, r6
 8005ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006000:	485e      	ldr	r0, [pc, #376]	; (800617c <_printf_i+0x244>)
 8006002:	230a      	movs	r3, #10
 8006004:	e019      	b.n	800603a <_printf_i+0x102>
 8006006:	680e      	ldr	r6, [r1, #0]
 8006008:	602b      	str	r3, [r5, #0]
 800600a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800600e:	bf18      	it	ne
 8006010:	b236      	sxthne	r6, r6
 8006012:	e7ef      	b.n	8005ff4 <_printf_i+0xbc>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	6820      	ldr	r0, [r4, #0]
 8006018:	1d19      	adds	r1, r3, #4
 800601a:	6029      	str	r1, [r5, #0]
 800601c:	0601      	lsls	r1, r0, #24
 800601e:	d501      	bpl.n	8006024 <_printf_i+0xec>
 8006020:	681e      	ldr	r6, [r3, #0]
 8006022:	e002      	b.n	800602a <_printf_i+0xf2>
 8006024:	0646      	lsls	r6, r0, #25
 8006026:	d5fb      	bpl.n	8006020 <_printf_i+0xe8>
 8006028:	881e      	ldrh	r6, [r3, #0]
 800602a:	4854      	ldr	r0, [pc, #336]	; (800617c <_printf_i+0x244>)
 800602c:	2f6f      	cmp	r7, #111	; 0x6f
 800602e:	bf0c      	ite	eq
 8006030:	2308      	moveq	r3, #8
 8006032:	230a      	movne	r3, #10
 8006034:	2100      	movs	r1, #0
 8006036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800603a:	6865      	ldr	r5, [r4, #4]
 800603c:	60a5      	str	r5, [r4, #8]
 800603e:	2d00      	cmp	r5, #0
 8006040:	bfa2      	ittt	ge
 8006042:	6821      	ldrge	r1, [r4, #0]
 8006044:	f021 0104 	bicge.w	r1, r1, #4
 8006048:	6021      	strge	r1, [r4, #0]
 800604a:	b90e      	cbnz	r6, 8006050 <_printf_i+0x118>
 800604c:	2d00      	cmp	r5, #0
 800604e:	d04d      	beq.n	80060ec <_printf_i+0x1b4>
 8006050:	4615      	mov	r5, r2
 8006052:	fbb6 f1f3 	udiv	r1, r6, r3
 8006056:	fb03 6711 	mls	r7, r3, r1, r6
 800605a:	5dc7      	ldrb	r7, [r0, r7]
 800605c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006060:	4637      	mov	r7, r6
 8006062:	42bb      	cmp	r3, r7
 8006064:	460e      	mov	r6, r1
 8006066:	d9f4      	bls.n	8006052 <_printf_i+0x11a>
 8006068:	2b08      	cmp	r3, #8
 800606a:	d10b      	bne.n	8006084 <_printf_i+0x14c>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	07de      	lsls	r6, r3, #31
 8006070:	d508      	bpl.n	8006084 <_printf_i+0x14c>
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	6861      	ldr	r1, [r4, #4]
 8006076:	4299      	cmp	r1, r3
 8006078:	bfde      	ittt	le
 800607a:	2330      	movle	r3, #48	; 0x30
 800607c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006080:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006084:	1b52      	subs	r2, r2, r5
 8006086:	6122      	str	r2, [r4, #16]
 8006088:	f8cd a000 	str.w	sl, [sp]
 800608c:	464b      	mov	r3, r9
 800608e:	aa03      	add	r2, sp, #12
 8006090:	4621      	mov	r1, r4
 8006092:	4640      	mov	r0, r8
 8006094:	f7ff fee2 	bl	8005e5c <_printf_common>
 8006098:	3001      	adds	r0, #1
 800609a:	d14c      	bne.n	8006136 <_printf_i+0x1fe>
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	b004      	add	sp, #16
 80060a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a6:	4835      	ldr	r0, [pc, #212]	; (800617c <_printf_i+0x244>)
 80060a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060ac:	6829      	ldr	r1, [r5, #0]
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80060b4:	6029      	str	r1, [r5, #0]
 80060b6:	061d      	lsls	r5, r3, #24
 80060b8:	d514      	bpl.n	80060e4 <_printf_i+0x1ac>
 80060ba:	07df      	lsls	r7, r3, #31
 80060bc:	bf44      	itt	mi
 80060be:	f043 0320 	orrmi.w	r3, r3, #32
 80060c2:	6023      	strmi	r3, [r4, #0]
 80060c4:	b91e      	cbnz	r6, 80060ce <_printf_i+0x196>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	f023 0320 	bic.w	r3, r3, #32
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	2310      	movs	r3, #16
 80060d0:	e7b0      	b.n	8006034 <_printf_i+0xfc>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	f043 0320 	orr.w	r3, r3, #32
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	2378      	movs	r3, #120	; 0x78
 80060dc:	4828      	ldr	r0, [pc, #160]	; (8006180 <_printf_i+0x248>)
 80060de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060e2:	e7e3      	b.n	80060ac <_printf_i+0x174>
 80060e4:	0659      	lsls	r1, r3, #25
 80060e6:	bf48      	it	mi
 80060e8:	b2b6      	uxthmi	r6, r6
 80060ea:	e7e6      	b.n	80060ba <_printf_i+0x182>
 80060ec:	4615      	mov	r5, r2
 80060ee:	e7bb      	b.n	8006068 <_printf_i+0x130>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	6826      	ldr	r6, [r4, #0]
 80060f4:	6961      	ldr	r1, [r4, #20]
 80060f6:	1d18      	adds	r0, r3, #4
 80060f8:	6028      	str	r0, [r5, #0]
 80060fa:	0635      	lsls	r5, r6, #24
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	d501      	bpl.n	8006104 <_printf_i+0x1cc>
 8006100:	6019      	str	r1, [r3, #0]
 8006102:	e002      	b.n	800610a <_printf_i+0x1d2>
 8006104:	0670      	lsls	r0, r6, #25
 8006106:	d5fb      	bpl.n	8006100 <_printf_i+0x1c8>
 8006108:	8019      	strh	r1, [r3, #0]
 800610a:	2300      	movs	r3, #0
 800610c:	6123      	str	r3, [r4, #16]
 800610e:	4615      	mov	r5, r2
 8006110:	e7ba      	b.n	8006088 <_printf_i+0x150>
 8006112:	682b      	ldr	r3, [r5, #0]
 8006114:	1d1a      	adds	r2, r3, #4
 8006116:	602a      	str	r2, [r5, #0]
 8006118:	681d      	ldr	r5, [r3, #0]
 800611a:	6862      	ldr	r2, [r4, #4]
 800611c:	2100      	movs	r1, #0
 800611e:	4628      	mov	r0, r5
 8006120:	f7fa f866 	bl	80001f0 <memchr>
 8006124:	b108      	cbz	r0, 800612a <_printf_i+0x1f2>
 8006126:	1b40      	subs	r0, r0, r5
 8006128:	6060      	str	r0, [r4, #4]
 800612a:	6863      	ldr	r3, [r4, #4]
 800612c:	6123      	str	r3, [r4, #16]
 800612e:	2300      	movs	r3, #0
 8006130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006134:	e7a8      	b.n	8006088 <_printf_i+0x150>
 8006136:	6923      	ldr	r3, [r4, #16]
 8006138:	462a      	mov	r2, r5
 800613a:	4649      	mov	r1, r9
 800613c:	4640      	mov	r0, r8
 800613e:	47d0      	blx	sl
 8006140:	3001      	adds	r0, #1
 8006142:	d0ab      	beq.n	800609c <_printf_i+0x164>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	079b      	lsls	r3, r3, #30
 8006148:	d413      	bmi.n	8006172 <_printf_i+0x23a>
 800614a:	68e0      	ldr	r0, [r4, #12]
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	4298      	cmp	r0, r3
 8006150:	bfb8      	it	lt
 8006152:	4618      	movlt	r0, r3
 8006154:	e7a4      	b.n	80060a0 <_printf_i+0x168>
 8006156:	2301      	movs	r3, #1
 8006158:	4632      	mov	r2, r6
 800615a:	4649      	mov	r1, r9
 800615c:	4640      	mov	r0, r8
 800615e:	47d0      	blx	sl
 8006160:	3001      	adds	r0, #1
 8006162:	d09b      	beq.n	800609c <_printf_i+0x164>
 8006164:	3501      	adds	r5, #1
 8006166:	68e3      	ldr	r3, [r4, #12]
 8006168:	9903      	ldr	r1, [sp, #12]
 800616a:	1a5b      	subs	r3, r3, r1
 800616c:	42ab      	cmp	r3, r5
 800616e:	dcf2      	bgt.n	8006156 <_printf_i+0x21e>
 8006170:	e7eb      	b.n	800614a <_printf_i+0x212>
 8006172:	2500      	movs	r5, #0
 8006174:	f104 0619 	add.w	r6, r4, #25
 8006178:	e7f5      	b.n	8006166 <_printf_i+0x22e>
 800617a:	bf00      	nop
 800617c:	0800b45e 	.word	0x0800b45e
 8006180:	0800b46f 	.word	0x0800b46f

08006184 <_scanf_float>:
 8006184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	b087      	sub	sp, #28
 800618a:	4617      	mov	r7, r2
 800618c:	9303      	str	r3, [sp, #12]
 800618e:	688b      	ldr	r3, [r1, #8]
 8006190:	1e5a      	subs	r2, r3, #1
 8006192:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006196:	bf83      	ittte	hi
 8006198:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800619c:	195b      	addhi	r3, r3, r5
 800619e:	9302      	strhi	r3, [sp, #8]
 80061a0:	2300      	movls	r3, #0
 80061a2:	bf86      	itte	hi
 80061a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80061a8:	608b      	strhi	r3, [r1, #8]
 80061aa:	9302      	strls	r3, [sp, #8]
 80061ac:	680b      	ldr	r3, [r1, #0]
 80061ae:	468b      	mov	fp, r1
 80061b0:	2500      	movs	r5, #0
 80061b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80061b6:	f84b 3b1c 	str.w	r3, [fp], #28
 80061ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80061be:	4680      	mov	r8, r0
 80061c0:	460c      	mov	r4, r1
 80061c2:	465e      	mov	r6, fp
 80061c4:	46aa      	mov	sl, r5
 80061c6:	46a9      	mov	r9, r5
 80061c8:	9501      	str	r5, [sp, #4]
 80061ca:	68a2      	ldr	r2, [r4, #8]
 80061cc:	b152      	cbz	r2, 80061e4 <_scanf_float+0x60>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b4e      	cmp	r3, #78	; 0x4e
 80061d4:	d864      	bhi.n	80062a0 <_scanf_float+0x11c>
 80061d6:	2b40      	cmp	r3, #64	; 0x40
 80061d8:	d83c      	bhi.n	8006254 <_scanf_float+0xd0>
 80061da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80061de:	b2c8      	uxtb	r0, r1
 80061e0:	280e      	cmp	r0, #14
 80061e2:	d93a      	bls.n	800625a <_scanf_float+0xd6>
 80061e4:	f1b9 0f00 	cmp.w	r9, #0
 80061e8:	d003      	beq.n	80061f2 <_scanf_float+0x6e>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061f6:	f1ba 0f01 	cmp.w	sl, #1
 80061fa:	f200 8113 	bhi.w	8006424 <_scanf_float+0x2a0>
 80061fe:	455e      	cmp	r6, fp
 8006200:	f200 8105 	bhi.w	800640e <_scanf_float+0x28a>
 8006204:	2501      	movs	r5, #1
 8006206:	4628      	mov	r0, r5
 8006208:	b007      	add	sp, #28
 800620a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006212:	2a0d      	cmp	r2, #13
 8006214:	d8e6      	bhi.n	80061e4 <_scanf_float+0x60>
 8006216:	a101      	add	r1, pc, #4	; (adr r1, 800621c <_scanf_float+0x98>)
 8006218:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800621c:	0800635b 	.word	0x0800635b
 8006220:	080061e5 	.word	0x080061e5
 8006224:	080061e5 	.word	0x080061e5
 8006228:	080061e5 	.word	0x080061e5
 800622c:	080063bb 	.word	0x080063bb
 8006230:	08006393 	.word	0x08006393
 8006234:	080061e5 	.word	0x080061e5
 8006238:	080061e5 	.word	0x080061e5
 800623c:	08006369 	.word	0x08006369
 8006240:	080061e5 	.word	0x080061e5
 8006244:	080061e5 	.word	0x080061e5
 8006248:	080061e5 	.word	0x080061e5
 800624c:	080061e5 	.word	0x080061e5
 8006250:	08006321 	.word	0x08006321
 8006254:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006258:	e7db      	b.n	8006212 <_scanf_float+0x8e>
 800625a:	290e      	cmp	r1, #14
 800625c:	d8c2      	bhi.n	80061e4 <_scanf_float+0x60>
 800625e:	a001      	add	r0, pc, #4	; (adr r0, 8006264 <_scanf_float+0xe0>)
 8006260:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006264:	08006313 	.word	0x08006313
 8006268:	080061e5 	.word	0x080061e5
 800626c:	08006313 	.word	0x08006313
 8006270:	080063a7 	.word	0x080063a7
 8006274:	080061e5 	.word	0x080061e5
 8006278:	080062c1 	.word	0x080062c1
 800627c:	080062fd 	.word	0x080062fd
 8006280:	080062fd 	.word	0x080062fd
 8006284:	080062fd 	.word	0x080062fd
 8006288:	080062fd 	.word	0x080062fd
 800628c:	080062fd 	.word	0x080062fd
 8006290:	080062fd 	.word	0x080062fd
 8006294:	080062fd 	.word	0x080062fd
 8006298:	080062fd 	.word	0x080062fd
 800629c:	080062fd 	.word	0x080062fd
 80062a0:	2b6e      	cmp	r3, #110	; 0x6e
 80062a2:	d809      	bhi.n	80062b8 <_scanf_float+0x134>
 80062a4:	2b60      	cmp	r3, #96	; 0x60
 80062a6:	d8b2      	bhi.n	800620e <_scanf_float+0x8a>
 80062a8:	2b54      	cmp	r3, #84	; 0x54
 80062aa:	d077      	beq.n	800639c <_scanf_float+0x218>
 80062ac:	2b59      	cmp	r3, #89	; 0x59
 80062ae:	d199      	bne.n	80061e4 <_scanf_float+0x60>
 80062b0:	2d07      	cmp	r5, #7
 80062b2:	d197      	bne.n	80061e4 <_scanf_float+0x60>
 80062b4:	2508      	movs	r5, #8
 80062b6:	e029      	b.n	800630c <_scanf_float+0x188>
 80062b8:	2b74      	cmp	r3, #116	; 0x74
 80062ba:	d06f      	beq.n	800639c <_scanf_float+0x218>
 80062bc:	2b79      	cmp	r3, #121	; 0x79
 80062be:	e7f6      	b.n	80062ae <_scanf_float+0x12a>
 80062c0:	6821      	ldr	r1, [r4, #0]
 80062c2:	05c8      	lsls	r0, r1, #23
 80062c4:	d51a      	bpl.n	80062fc <_scanf_float+0x178>
 80062c6:	9b02      	ldr	r3, [sp, #8]
 80062c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80062cc:	6021      	str	r1, [r4, #0]
 80062ce:	f109 0901 	add.w	r9, r9, #1
 80062d2:	b11b      	cbz	r3, 80062dc <_scanf_float+0x158>
 80062d4:	3b01      	subs	r3, #1
 80062d6:	3201      	adds	r2, #1
 80062d8:	9302      	str	r3, [sp, #8]
 80062da:	60a2      	str	r2, [r4, #8]
 80062dc:	68a3      	ldr	r3, [r4, #8]
 80062de:	3b01      	subs	r3, #1
 80062e0:	60a3      	str	r3, [r4, #8]
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	3301      	adds	r3, #1
 80062e6:	6123      	str	r3, [r4, #16]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	607b      	str	r3, [r7, #4]
 80062f0:	f340 8084 	ble.w	80063fc <_scanf_float+0x278>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	3301      	adds	r3, #1
 80062f8:	603b      	str	r3, [r7, #0]
 80062fa:	e766      	b.n	80061ca <_scanf_float+0x46>
 80062fc:	eb1a 0f05 	cmn.w	sl, r5
 8006300:	f47f af70 	bne.w	80061e4 <_scanf_float+0x60>
 8006304:	6822      	ldr	r2, [r4, #0]
 8006306:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800630a:	6022      	str	r2, [r4, #0]
 800630c:	f806 3b01 	strb.w	r3, [r6], #1
 8006310:	e7e4      	b.n	80062dc <_scanf_float+0x158>
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	0610      	lsls	r0, r2, #24
 8006316:	f57f af65 	bpl.w	80061e4 <_scanf_float+0x60>
 800631a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800631e:	e7f4      	b.n	800630a <_scanf_float+0x186>
 8006320:	f1ba 0f00 	cmp.w	sl, #0
 8006324:	d10e      	bne.n	8006344 <_scanf_float+0x1c0>
 8006326:	f1b9 0f00 	cmp.w	r9, #0
 800632a:	d10e      	bne.n	800634a <_scanf_float+0x1c6>
 800632c:	6822      	ldr	r2, [r4, #0]
 800632e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006332:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006336:	d108      	bne.n	800634a <_scanf_float+0x1c6>
 8006338:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	f04f 0a01 	mov.w	sl, #1
 8006342:	e7e3      	b.n	800630c <_scanf_float+0x188>
 8006344:	f1ba 0f02 	cmp.w	sl, #2
 8006348:	d055      	beq.n	80063f6 <_scanf_float+0x272>
 800634a:	2d01      	cmp	r5, #1
 800634c:	d002      	beq.n	8006354 <_scanf_float+0x1d0>
 800634e:	2d04      	cmp	r5, #4
 8006350:	f47f af48 	bne.w	80061e4 <_scanf_float+0x60>
 8006354:	3501      	adds	r5, #1
 8006356:	b2ed      	uxtb	r5, r5
 8006358:	e7d8      	b.n	800630c <_scanf_float+0x188>
 800635a:	f1ba 0f01 	cmp.w	sl, #1
 800635e:	f47f af41 	bne.w	80061e4 <_scanf_float+0x60>
 8006362:	f04f 0a02 	mov.w	sl, #2
 8006366:	e7d1      	b.n	800630c <_scanf_float+0x188>
 8006368:	b97d      	cbnz	r5, 800638a <_scanf_float+0x206>
 800636a:	f1b9 0f00 	cmp.w	r9, #0
 800636e:	f47f af3c 	bne.w	80061ea <_scanf_float+0x66>
 8006372:	6822      	ldr	r2, [r4, #0]
 8006374:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006378:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800637c:	f47f af39 	bne.w	80061f2 <_scanf_float+0x6e>
 8006380:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006384:	6022      	str	r2, [r4, #0]
 8006386:	2501      	movs	r5, #1
 8006388:	e7c0      	b.n	800630c <_scanf_float+0x188>
 800638a:	2d03      	cmp	r5, #3
 800638c:	d0e2      	beq.n	8006354 <_scanf_float+0x1d0>
 800638e:	2d05      	cmp	r5, #5
 8006390:	e7de      	b.n	8006350 <_scanf_float+0x1cc>
 8006392:	2d02      	cmp	r5, #2
 8006394:	f47f af26 	bne.w	80061e4 <_scanf_float+0x60>
 8006398:	2503      	movs	r5, #3
 800639a:	e7b7      	b.n	800630c <_scanf_float+0x188>
 800639c:	2d06      	cmp	r5, #6
 800639e:	f47f af21 	bne.w	80061e4 <_scanf_float+0x60>
 80063a2:	2507      	movs	r5, #7
 80063a4:	e7b2      	b.n	800630c <_scanf_float+0x188>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	0591      	lsls	r1, r2, #22
 80063aa:	f57f af1b 	bpl.w	80061e4 <_scanf_float+0x60>
 80063ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80063b2:	6022      	str	r2, [r4, #0]
 80063b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80063b8:	e7a8      	b.n	800630c <_scanf_float+0x188>
 80063ba:	6822      	ldr	r2, [r4, #0]
 80063bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80063c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80063c4:	d006      	beq.n	80063d4 <_scanf_float+0x250>
 80063c6:	0550      	lsls	r0, r2, #21
 80063c8:	f57f af0c 	bpl.w	80061e4 <_scanf_float+0x60>
 80063cc:	f1b9 0f00 	cmp.w	r9, #0
 80063d0:	f43f af0f 	beq.w	80061f2 <_scanf_float+0x6e>
 80063d4:	0591      	lsls	r1, r2, #22
 80063d6:	bf58      	it	pl
 80063d8:	9901      	ldrpl	r1, [sp, #4]
 80063da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80063de:	bf58      	it	pl
 80063e0:	eba9 0101 	subpl.w	r1, r9, r1
 80063e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80063e8:	bf58      	it	pl
 80063ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063ee:	6022      	str	r2, [r4, #0]
 80063f0:	f04f 0900 	mov.w	r9, #0
 80063f4:	e78a      	b.n	800630c <_scanf_float+0x188>
 80063f6:	f04f 0a03 	mov.w	sl, #3
 80063fa:	e787      	b.n	800630c <_scanf_float+0x188>
 80063fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006400:	4639      	mov	r1, r7
 8006402:	4640      	mov	r0, r8
 8006404:	4798      	blx	r3
 8006406:	2800      	cmp	r0, #0
 8006408:	f43f aedf 	beq.w	80061ca <_scanf_float+0x46>
 800640c:	e6ea      	b.n	80061e4 <_scanf_float+0x60>
 800640e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006412:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006416:	463a      	mov	r2, r7
 8006418:	4640      	mov	r0, r8
 800641a:	4798      	blx	r3
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	3b01      	subs	r3, #1
 8006420:	6123      	str	r3, [r4, #16]
 8006422:	e6ec      	b.n	80061fe <_scanf_float+0x7a>
 8006424:	1e6b      	subs	r3, r5, #1
 8006426:	2b06      	cmp	r3, #6
 8006428:	d825      	bhi.n	8006476 <_scanf_float+0x2f2>
 800642a:	2d02      	cmp	r5, #2
 800642c:	d836      	bhi.n	800649c <_scanf_float+0x318>
 800642e:	455e      	cmp	r6, fp
 8006430:	f67f aee8 	bls.w	8006204 <_scanf_float+0x80>
 8006434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006438:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800643c:	463a      	mov	r2, r7
 800643e:	4640      	mov	r0, r8
 8006440:	4798      	blx	r3
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	3b01      	subs	r3, #1
 8006446:	6123      	str	r3, [r4, #16]
 8006448:	e7f1      	b.n	800642e <_scanf_float+0x2aa>
 800644a:	9802      	ldr	r0, [sp, #8]
 800644c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006450:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006454:	9002      	str	r0, [sp, #8]
 8006456:	463a      	mov	r2, r7
 8006458:	4640      	mov	r0, r8
 800645a:	4798      	blx	r3
 800645c:	6923      	ldr	r3, [r4, #16]
 800645e:	3b01      	subs	r3, #1
 8006460:	6123      	str	r3, [r4, #16]
 8006462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006466:	fa5f fa8a 	uxtb.w	sl, sl
 800646a:	f1ba 0f02 	cmp.w	sl, #2
 800646e:	d1ec      	bne.n	800644a <_scanf_float+0x2c6>
 8006470:	3d03      	subs	r5, #3
 8006472:	b2ed      	uxtb	r5, r5
 8006474:	1b76      	subs	r6, r6, r5
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	05da      	lsls	r2, r3, #23
 800647a:	d52f      	bpl.n	80064dc <_scanf_float+0x358>
 800647c:	055b      	lsls	r3, r3, #21
 800647e:	d510      	bpl.n	80064a2 <_scanf_float+0x31e>
 8006480:	455e      	cmp	r6, fp
 8006482:	f67f aebf 	bls.w	8006204 <_scanf_float+0x80>
 8006486:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800648a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800648e:	463a      	mov	r2, r7
 8006490:	4640      	mov	r0, r8
 8006492:	4798      	blx	r3
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	3b01      	subs	r3, #1
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	e7f1      	b.n	8006480 <_scanf_float+0x2fc>
 800649c:	46aa      	mov	sl, r5
 800649e:	9602      	str	r6, [sp, #8]
 80064a0:	e7df      	b.n	8006462 <_scanf_float+0x2de>
 80064a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80064a6:	6923      	ldr	r3, [r4, #16]
 80064a8:	2965      	cmp	r1, #101	; 0x65
 80064aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80064ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80064b2:	6123      	str	r3, [r4, #16]
 80064b4:	d00c      	beq.n	80064d0 <_scanf_float+0x34c>
 80064b6:	2945      	cmp	r1, #69	; 0x45
 80064b8:	d00a      	beq.n	80064d0 <_scanf_float+0x34c>
 80064ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064be:	463a      	mov	r2, r7
 80064c0:	4640      	mov	r0, r8
 80064c2:	4798      	blx	r3
 80064c4:	6923      	ldr	r3, [r4, #16]
 80064c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	1eb5      	subs	r5, r6, #2
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064d4:	463a      	mov	r2, r7
 80064d6:	4640      	mov	r0, r8
 80064d8:	4798      	blx	r3
 80064da:	462e      	mov	r6, r5
 80064dc:	6825      	ldr	r5, [r4, #0]
 80064de:	f015 0510 	ands.w	r5, r5, #16
 80064e2:	d159      	bne.n	8006598 <_scanf_float+0x414>
 80064e4:	7035      	strb	r5, [r6, #0]
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f0:	d11b      	bne.n	800652a <_scanf_float+0x3a6>
 80064f2:	9b01      	ldr	r3, [sp, #4]
 80064f4:	454b      	cmp	r3, r9
 80064f6:	eba3 0209 	sub.w	r2, r3, r9
 80064fa:	d123      	bne.n	8006544 <_scanf_float+0x3c0>
 80064fc:	2200      	movs	r2, #0
 80064fe:	4659      	mov	r1, fp
 8006500:	4640      	mov	r0, r8
 8006502:	f000 fe97 	bl	8007234 <_strtod_r>
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	f012 0f02 	tst.w	r2, #2
 800650e:	ec57 6b10 	vmov	r6, r7, d0
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	d021      	beq.n	800655a <_scanf_float+0x3d6>
 8006516:	9903      	ldr	r1, [sp, #12]
 8006518:	1d1a      	adds	r2, r3, #4
 800651a:	600a      	str	r2, [r1, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	e9c3 6700 	strd	r6, r7, [r3]
 8006522:	68e3      	ldr	r3, [r4, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60e3      	str	r3, [r4, #12]
 8006528:	e66d      	b.n	8006206 <_scanf_float+0x82>
 800652a:	9b04      	ldr	r3, [sp, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0e5      	beq.n	80064fc <_scanf_float+0x378>
 8006530:	9905      	ldr	r1, [sp, #20]
 8006532:	230a      	movs	r3, #10
 8006534:	462a      	mov	r2, r5
 8006536:	3101      	adds	r1, #1
 8006538:	4640      	mov	r0, r8
 800653a:	f000 ff03 	bl	8007344 <_strtol_r>
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	9e05      	ldr	r6, [sp, #20]
 8006542:	1ac2      	subs	r2, r0, r3
 8006544:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006548:	429e      	cmp	r6, r3
 800654a:	bf28      	it	cs
 800654c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006550:	4912      	ldr	r1, [pc, #72]	; (800659c <_scanf_float+0x418>)
 8006552:	4630      	mov	r0, r6
 8006554:	f000 f82c 	bl	80065b0 <siprintf>
 8006558:	e7d0      	b.n	80064fc <_scanf_float+0x378>
 800655a:	9903      	ldr	r1, [sp, #12]
 800655c:	f012 0f04 	tst.w	r2, #4
 8006560:	f103 0204 	add.w	r2, r3, #4
 8006564:	600a      	str	r2, [r1, #0]
 8006566:	d1d9      	bne.n	800651c <_scanf_float+0x398>
 8006568:	f8d3 8000 	ldr.w	r8, [r3]
 800656c:	ee10 2a10 	vmov	r2, s0
 8006570:	ee10 0a10 	vmov	r0, s0
 8006574:	463b      	mov	r3, r7
 8006576:	4639      	mov	r1, r7
 8006578:	f7fa fae0 	bl	8000b3c <__aeabi_dcmpun>
 800657c:	b128      	cbz	r0, 800658a <_scanf_float+0x406>
 800657e:	4808      	ldr	r0, [pc, #32]	; (80065a0 <_scanf_float+0x41c>)
 8006580:	f000 f810 	bl	80065a4 <nanf>
 8006584:	ed88 0a00 	vstr	s0, [r8]
 8006588:	e7cb      	b.n	8006522 <_scanf_float+0x39e>
 800658a:	4630      	mov	r0, r6
 800658c:	4639      	mov	r1, r7
 800658e:	f7fa fb33 	bl	8000bf8 <__aeabi_d2f>
 8006592:	f8c8 0000 	str.w	r0, [r8]
 8006596:	e7c4      	b.n	8006522 <_scanf_float+0x39e>
 8006598:	2500      	movs	r5, #0
 800659a:	e634      	b.n	8006206 <_scanf_float+0x82>
 800659c:	0800b480 	.word	0x0800b480
 80065a0:	0800b888 	.word	0x0800b888

080065a4 <nanf>:
 80065a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80065ac <nanf+0x8>
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	7fc00000 	.word	0x7fc00000

080065b0 <siprintf>:
 80065b0:	b40e      	push	{r1, r2, r3}
 80065b2:	b500      	push	{lr}
 80065b4:	b09c      	sub	sp, #112	; 0x70
 80065b6:	ab1d      	add	r3, sp, #116	; 0x74
 80065b8:	9002      	str	r0, [sp, #8]
 80065ba:	9006      	str	r0, [sp, #24]
 80065bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065c0:	4809      	ldr	r0, [pc, #36]	; (80065e8 <siprintf+0x38>)
 80065c2:	9107      	str	r1, [sp, #28]
 80065c4:	9104      	str	r1, [sp, #16]
 80065c6:	4909      	ldr	r1, [pc, #36]	; (80065ec <siprintf+0x3c>)
 80065c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065cc:	9105      	str	r1, [sp, #20]
 80065ce:	6800      	ldr	r0, [r0, #0]
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	a902      	add	r1, sp, #8
 80065d4:	f002 ff1e 	bl	8009414 <_svfiprintf_r>
 80065d8:	9b02      	ldr	r3, [sp, #8]
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	b01c      	add	sp, #112	; 0x70
 80065e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065e4:	b003      	add	sp, #12
 80065e6:	4770      	bx	lr
 80065e8:	2000000c 	.word	0x2000000c
 80065ec:	ffff0208 	.word	0xffff0208

080065f0 <sulp>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	4604      	mov	r4, r0
 80065f4:	460d      	mov	r5, r1
 80065f6:	ec45 4b10 	vmov	d0, r4, r5
 80065fa:	4616      	mov	r6, r2
 80065fc:	f002 fc68 	bl	8008ed0 <__ulp>
 8006600:	ec51 0b10 	vmov	r0, r1, d0
 8006604:	b17e      	cbz	r6, 8006626 <sulp+0x36>
 8006606:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800660a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800660e:	2b00      	cmp	r3, #0
 8006610:	dd09      	ble.n	8006626 <sulp+0x36>
 8006612:	051b      	lsls	r3, r3, #20
 8006614:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006618:	2400      	movs	r4, #0
 800661a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800661e:	4622      	mov	r2, r4
 8006620:	462b      	mov	r3, r5
 8006622:	f7f9 fff1 	bl	8000608 <__aeabi_dmul>
 8006626:	bd70      	pop	{r4, r5, r6, pc}

08006628 <_strtod_l>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	ed2d 8b02 	vpush	{d8}
 8006630:	b09d      	sub	sp, #116	; 0x74
 8006632:	461f      	mov	r7, r3
 8006634:	2300      	movs	r3, #0
 8006636:	9318      	str	r3, [sp, #96]	; 0x60
 8006638:	4ba2      	ldr	r3, [pc, #648]	; (80068c4 <_strtod_l+0x29c>)
 800663a:	9213      	str	r2, [sp, #76]	; 0x4c
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	9305      	str	r3, [sp, #20]
 8006640:	4604      	mov	r4, r0
 8006642:	4618      	mov	r0, r3
 8006644:	4688      	mov	r8, r1
 8006646:	f7f9 fdcb 	bl	80001e0 <strlen>
 800664a:	f04f 0a00 	mov.w	sl, #0
 800664e:	4605      	mov	r5, r0
 8006650:	f04f 0b00 	mov.w	fp, #0
 8006654:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	2a2b      	cmp	r2, #43	; 0x2b
 800665e:	d04e      	beq.n	80066fe <_strtod_l+0xd6>
 8006660:	d83b      	bhi.n	80066da <_strtod_l+0xb2>
 8006662:	2a0d      	cmp	r2, #13
 8006664:	d834      	bhi.n	80066d0 <_strtod_l+0xa8>
 8006666:	2a08      	cmp	r2, #8
 8006668:	d834      	bhi.n	80066d4 <_strtod_l+0xac>
 800666a:	2a00      	cmp	r2, #0
 800666c:	d03e      	beq.n	80066ec <_strtod_l+0xc4>
 800666e:	2300      	movs	r3, #0
 8006670:	930a      	str	r3, [sp, #40]	; 0x28
 8006672:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006674:	7833      	ldrb	r3, [r6, #0]
 8006676:	2b30      	cmp	r3, #48	; 0x30
 8006678:	f040 80b0 	bne.w	80067dc <_strtod_l+0x1b4>
 800667c:	7873      	ldrb	r3, [r6, #1]
 800667e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006682:	2b58      	cmp	r3, #88	; 0x58
 8006684:	d168      	bne.n	8006758 <_strtod_l+0x130>
 8006686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	ab18      	add	r3, sp, #96	; 0x60
 800668c:	9702      	str	r7, [sp, #8]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	4a8d      	ldr	r2, [pc, #564]	; (80068c8 <_strtod_l+0x2a0>)
 8006692:	ab19      	add	r3, sp, #100	; 0x64
 8006694:	a917      	add	r1, sp, #92	; 0x5c
 8006696:	4620      	mov	r0, r4
 8006698:	f001 fd74 	bl	8008184 <__gethex>
 800669c:	f010 0707 	ands.w	r7, r0, #7
 80066a0:	4605      	mov	r5, r0
 80066a2:	d005      	beq.n	80066b0 <_strtod_l+0x88>
 80066a4:	2f06      	cmp	r7, #6
 80066a6:	d12c      	bne.n	8006702 <_strtod_l+0xda>
 80066a8:	3601      	adds	r6, #1
 80066aa:	2300      	movs	r3, #0
 80066ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80066ae:	930a      	str	r3, [sp, #40]	; 0x28
 80066b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f040 8590 	bne.w	80071d8 <_strtod_l+0xbb0>
 80066b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ba:	b1eb      	cbz	r3, 80066f8 <_strtod_l+0xd0>
 80066bc:	4652      	mov	r2, sl
 80066be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80066c2:	ec43 2b10 	vmov	d0, r2, r3
 80066c6:	b01d      	add	sp, #116	; 0x74
 80066c8:	ecbd 8b02 	vpop	{d8}
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d0:	2a20      	cmp	r2, #32
 80066d2:	d1cc      	bne.n	800666e <_strtod_l+0x46>
 80066d4:	3301      	adds	r3, #1
 80066d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80066d8:	e7be      	b.n	8006658 <_strtod_l+0x30>
 80066da:	2a2d      	cmp	r2, #45	; 0x2d
 80066dc:	d1c7      	bne.n	800666e <_strtod_l+0x46>
 80066de:	2201      	movs	r2, #1
 80066e0:	920a      	str	r2, [sp, #40]	; 0x28
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80066e6:	785b      	ldrb	r3, [r3, #1]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1c2      	bne.n	8006672 <_strtod_l+0x4a>
 80066ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f040 856e 	bne.w	80071d4 <_strtod_l+0xbac>
 80066f8:	4652      	mov	r2, sl
 80066fa:	465b      	mov	r3, fp
 80066fc:	e7e1      	b.n	80066c2 <_strtod_l+0x9a>
 80066fe:	2200      	movs	r2, #0
 8006700:	e7ee      	b.n	80066e0 <_strtod_l+0xb8>
 8006702:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006704:	b13a      	cbz	r2, 8006716 <_strtod_l+0xee>
 8006706:	2135      	movs	r1, #53	; 0x35
 8006708:	a81a      	add	r0, sp, #104	; 0x68
 800670a:	f002 fcec 	bl	80090e6 <__copybits>
 800670e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006710:	4620      	mov	r0, r4
 8006712:	f002 f8ab 	bl	800886c <_Bfree>
 8006716:	3f01      	subs	r7, #1
 8006718:	2f04      	cmp	r7, #4
 800671a:	d806      	bhi.n	800672a <_strtod_l+0x102>
 800671c:	e8df f007 	tbb	[pc, r7]
 8006720:	1714030a 	.word	0x1714030a
 8006724:	0a          	.byte	0x0a
 8006725:	00          	.byte	0x00
 8006726:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800672a:	0728      	lsls	r0, r5, #28
 800672c:	d5c0      	bpl.n	80066b0 <_strtod_l+0x88>
 800672e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006732:	e7bd      	b.n	80066b0 <_strtod_l+0x88>
 8006734:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006738:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800673a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800673e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006742:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006746:	e7f0      	b.n	800672a <_strtod_l+0x102>
 8006748:	f8df b180 	ldr.w	fp, [pc, #384]	; 80068cc <_strtod_l+0x2a4>
 800674c:	e7ed      	b.n	800672a <_strtod_l+0x102>
 800674e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006752:	f04f 3aff 	mov.w	sl, #4294967295
 8006756:	e7e8      	b.n	800672a <_strtod_l+0x102>
 8006758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	9217      	str	r2, [sp, #92]	; 0x5c
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b30      	cmp	r3, #48	; 0x30
 8006762:	d0f9      	beq.n	8006758 <_strtod_l+0x130>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0a3      	beq.n	80066b0 <_strtod_l+0x88>
 8006768:	2301      	movs	r3, #1
 800676a:	f04f 0900 	mov.w	r9, #0
 800676e:	9304      	str	r3, [sp, #16]
 8006770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006772:	9308      	str	r3, [sp, #32]
 8006774:	f8cd 901c 	str.w	r9, [sp, #28]
 8006778:	464f      	mov	r7, r9
 800677a:	220a      	movs	r2, #10
 800677c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800677e:	7806      	ldrb	r6, [r0, #0]
 8006780:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006784:	b2d9      	uxtb	r1, r3
 8006786:	2909      	cmp	r1, #9
 8006788:	d92a      	bls.n	80067e0 <_strtod_l+0x1b8>
 800678a:	9905      	ldr	r1, [sp, #20]
 800678c:	462a      	mov	r2, r5
 800678e:	f002 ff5b 	bl	8009648 <strncmp>
 8006792:	b398      	cbz	r0, 80067fc <_strtod_l+0x1d4>
 8006794:	2000      	movs	r0, #0
 8006796:	4632      	mov	r2, r6
 8006798:	463d      	mov	r5, r7
 800679a:	9005      	str	r0, [sp, #20]
 800679c:	4603      	mov	r3, r0
 800679e:	2a65      	cmp	r2, #101	; 0x65
 80067a0:	d001      	beq.n	80067a6 <_strtod_l+0x17e>
 80067a2:	2a45      	cmp	r2, #69	; 0x45
 80067a4:	d118      	bne.n	80067d8 <_strtod_l+0x1b0>
 80067a6:	b91d      	cbnz	r5, 80067b0 <_strtod_l+0x188>
 80067a8:	9a04      	ldr	r2, [sp, #16]
 80067aa:	4302      	orrs	r2, r0
 80067ac:	d09e      	beq.n	80066ec <_strtod_l+0xc4>
 80067ae:	2500      	movs	r5, #0
 80067b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80067b4:	f108 0201 	add.w	r2, r8, #1
 80067b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80067ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80067be:	2a2b      	cmp	r2, #43	; 0x2b
 80067c0:	d075      	beq.n	80068ae <_strtod_l+0x286>
 80067c2:	2a2d      	cmp	r2, #45	; 0x2d
 80067c4:	d07b      	beq.n	80068be <_strtod_l+0x296>
 80067c6:	f04f 0c00 	mov.w	ip, #0
 80067ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80067ce:	2909      	cmp	r1, #9
 80067d0:	f240 8082 	bls.w	80068d8 <_strtod_l+0x2b0>
 80067d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80067d8:	2600      	movs	r6, #0
 80067da:	e09d      	b.n	8006918 <_strtod_l+0x2f0>
 80067dc:	2300      	movs	r3, #0
 80067de:	e7c4      	b.n	800676a <_strtod_l+0x142>
 80067e0:	2f08      	cmp	r7, #8
 80067e2:	bfd8      	it	le
 80067e4:	9907      	ldrle	r1, [sp, #28]
 80067e6:	f100 0001 	add.w	r0, r0, #1
 80067ea:	bfda      	itte	le
 80067ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80067f0:	9307      	strle	r3, [sp, #28]
 80067f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80067f6:	3701      	adds	r7, #1
 80067f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80067fa:	e7bf      	b.n	800677c <_strtod_l+0x154>
 80067fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067fe:	195a      	adds	r2, r3, r5
 8006800:	9217      	str	r2, [sp, #92]	; 0x5c
 8006802:	5d5a      	ldrb	r2, [r3, r5]
 8006804:	2f00      	cmp	r7, #0
 8006806:	d037      	beq.n	8006878 <_strtod_l+0x250>
 8006808:	9005      	str	r0, [sp, #20]
 800680a:	463d      	mov	r5, r7
 800680c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006810:	2b09      	cmp	r3, #9
 8006812:	d912      	bls.n	800683a <_strtod_l+0x212>
 8006814:	2301      	movs	r3, #1
 8006816:	e7c2      	b.n	800679e <_strtod_l+0x176>
 8006818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	9217      	str	r2, [sp, #92]	; 0x5c
 800681e:	785a      	ldrb	r2, [r3, #1]
 8006820:	3001      	adds	r0, #1
 8006822:	2a30      	cmp	r2, #48	; 0x30
 8006824:	d0f8      	beq.n	8006818 <_strtod_l+0x1f0>
 8006826:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800682a:	2b08      	cmp	r3, #8
 800682c:	f200 84d9 	bhi.w	80071e2 <_strtod_l+0xbba>
 8006830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006832:	9005      	str	r0, [sp, #20]
 8006834:	2000      	movs	r0, #0
 8006836:	9308      	str	r3, [sp, #32]
 8006838:	4605      	mov	r5, r0
 800683a:	3a30      	subs	r2, #48	; 0x30
 800683c:	f100 0301 	add.w	r3, r0, #1
 8006840:	d014      	beq.n	800686c <_strtod_l+0x244>
 8006842:	9905      	ldr	r1, [sp, #20]
 8006844:	4419      	add	r1, r3
 8006846:	9105      	str	r1, [sp, #20]
 8006848:	462b      	mov	r3, r5
 800684a:	eb00 0e05 	add.w	lr, r0, r5
 800684e:	210a      	movs	r1, #10
 8006850:	4573      	cmp	r3, lr
 8006852:	d113      	bne.n	800687c <_strtod_l+0x254>
 8006854:	182b      	adds	r3, r5, r0
 8006856:	2b08      	cmp	r3, #8
 8006858:	f105 0501 	add.w	r5, r5, #1
 800685c:	4405      	add	r5, r0
 800685e:	dc1c      	bgt.n	800689a <_strtod_l+0x272>
 8006860:	9907      	ldr	r1, [sp, #28]
 8006862:	230a      	movs	r3, #10
 8006864:	fb03 2301 	mla	r3, r3, r1, r2
 8006868:	9307      	str	r3, [sp, #28]
 800686a:	2300      	movs	r3, #0
 800686c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800686e:	1c51      	adds	r1, r2, #1
 8006870:	9117      	str	r1, [sp, #92]	; 0x5c
 8006872:	7852      	ldrb	r2, [r2, #1]
 8006874:	4618      	mov	r0, r3
 8006876:	e7c9      	b.n	800680c <_strtod_l+0x1e4>
 8006878:	4638      	mov	r0, r7
 800687a:	e7d2      	b.n	8006822 <_strtod_l+0x1fa>
 800687c:	2b08      	cmp	r3, #8
 800687e:	dc04      	bgt.n	800688a <_strtod_l+0x262>
 8006880:	9e07      	ldr	r6, [sp, #28]
 8006882:	434e      	muls	r6, r1
 8006884:	9607      	str	r6, [sp, #28]
 8006886:	3301      	adds	r3, #1
 8006888:	e7e2      	b.n	8006850 <_strtod_l+0x228>
 800688a:	f103 0c01 	add.w	ip, r3, #1
 800688e:	f1bc 0f10 	cmp.w	ip, #16
 8006892:	bfd8      	it	le
 8006894:	fb01 f909 	mulle.w	r9, r1, r9
 8006898:	e7f5      	b.n	8006886 <_strtod_l+0x25e>
 800689a:	2d10      	cmp	r5, #16
 800689c:	bfdc      	itt	le
 800689e:	230a      	movle	r3, #10
 80068a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80068a4:	e7e1      	b.n	800686a <_strtod_l+0x242>
 80068a6:	2300      	movs	r3, #0
 80068a8:	9305      	str	r3, [sp, #20]
 80068aa:	2301      	movs	r3, #1
 80068ac:	e77c      	b.n	80067a8 <_strtod_l+0x180>
 80068ae:	f04f 0c00 	mov.w	ip, #0
 80068b2:	f108 0202 	add.w	r2, r8, #2
 80068b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80068b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80068bc:	e785      	b.n	80067ca <_strtod_l+0x1a2>
 80068be:	f04f 0c01 	mov.w	ip, #1
 80068c2:	e7f6      	b.n	80068b2 <_strtod_l+0x28a>
 80068c4:	0800b6d0 	.word	0x0800b6d0
 80068c8:	0800b488 	.word	0x0800b488
 80068cc:	7ff00000 	.word	0x7ff00000
 80068d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068d2:	1c51      	adds	r1, r2, #1
 80068d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80068d6:	7852      	ldrb	r2, [r2, #1]
 80068d8:	2a30      	cmp	r2, #48	; 0x30
 80068da:	d0f9      	beq.n	80068d0 <_strtod_l+0x2a8>
 80068dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80068e0:	2908      	cmp	r1, #8
 80068e2:	f63f af79 	bhi.w	80067d8 <_strtod_l+0x1b0>
 80068e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80068ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068ec:	9206      	str	r2, [sp, #24]
 80068ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068f0:	1c51      	adds	r1, r2, #1
 80068f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80068f4:	7852      	ldrb	r2, [r2, #1]
 80068f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80068fa:	2e09      	cmp	r6, #9
 80068fc:	d937      	bls.n	800696e <_strtod_l+0x346>
 80068fe:	9e06      	ldr	r6, [sp, #24]
 8006900:	1b89      	subs	r1, r1, r6
 8006902:	2908      	cmp	r1, #8
 8006904:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006908:	dc02      	bgt.n	8006910 <_strtod_l+0x2e8>
 800690a:	4576      	cmp	r6, lr
 800690c:	bfa8      	it	ge
 800690e:	4676      	movge	r6, lr
 8006910:	f1bc 0f00 	cmp.w	ip, #0
 8006914:	d000      	beq.n	8006918 <_strtod_l+0x2f0>
 8006916:	4276      	negs	r6, r6
 8006918:	2d00      	cmp	r5, #0
 800691a:	d14d      	bne.n	80069b8 <_strtod_l+0x390>
 800691c:	9904      	ldr	r1, [sp, #16]
 800691e:	4301      	orrs	r1, r0
 8006920:	f47f aec6 	bne.w	80066b0 <_strtod_l+0x88>
 8006924:	2b00      	cmp	r3, #0
 8006926:	f47f aee1 	bne.w	80066ec <_strtod_l+0xc4>
 800692a:	2a69      	cmp	r2, #105	; 0x69
 800692c:	d027      	beq.n	800697e <_strtod_l+0x356>
 800692e:	dc24      	bgt.n	800697a <_strtod_l+0x352>
 8006930:	2a49      	cmp	r2, #73	; 0x49
 8006932:	d024      	beq.n	800697e <_strtod_l+0x356>
 8006934:	2a4e      	cmp	r2, #78	; 0x4e
 8006936:	f47f aed9 	bne.w	80066ec <_strtod_l+0xc4>
 800693a:	499f      	ldr	r1, [pc, #636]	; (8006bb8 <_strtod_l+0x590>)
 800693c:	a817      	add	r0, sp, #92	; 0x5c
 800693e:	f001 fe79 	bl	8008634 <__match>
 8006942:	2800      	cmp	r0, #0
 8006944:	f43f aed2 	beq.w	80066ec <_strtod_l+0xc4>
 8006948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b28      	cmp	r3, #40	; 0x28
 800694e:	d12d      	bne.n	80069ac <_strtod_l+0x384>
 8006950:	499a      	ldr	r1, [pc, #616]	; (8006bbc <_strtod_l+0x594>)
 8006952:	aa1a      	add	r2, sp, #104	; 0x68
 8006954:	a817      	add	r0, sp, #92	; 0x5c
 8006956:	f001 fe81 	bl	800865c <__hexnan>
 800695a:	2805      	cmp	r0, #5
 800695c:	d126      	bne.n	80069ac <_strtod_l+0x384>
 800695e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006960:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006964:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006968:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800696c:	e6a0      	b.n	80066b0 <_strtod_l+0x88>
 800696e:	210a      	movs	r1, #10
 8006970:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006974:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006978:	e7b9      	b.n	80068ee <_strtod_l+0x2c6>
 800697a:	2a6e      	cmp	r2, #110	; 0x6e
 800697c:	e7db      	b.n	8006936 <_strtod_l+0x30e>
 800697e:	4990      	ldr	r1, [pc, #576]	; (8006bc0 <_strtod_l+0x598>)
 8006980:	a817      	add	r0, sp, #92	; 0x5c
 8006982:	f001 fe57 	bl	8008634 <__match>
 8006986:	2800      	cmp	r0, #0
 8006988:	f43f aeb0 	beq.w	80066ec <_strtod_l+0xc4>
 800698c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800698e:	498d      	ldr	r1, [pc, #564]	; (8006bc4 <_strtod_l+0x59c>)
 8006990:	3b01      	subs	r3, #1
 8006992:	a817      	add	r0, sp, #92	; 0x5c
 8006994:	9317      	str	r3, [sp, #92]	; 0x5c
 8006996:	f001 fe4d 	bl	8008634 <__match>
 800699a:	b910      	cbnz	r0, 80069a2 <_strtod_l+0x37a>
 800699c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800699e:	3301      	adds	r3, #1
 80069a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80069a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006bd4 <_strtod_l+0x5ac>
 80069a6:	f04f 0a00 	mov.w	sl, #0
 80069aa:	e681      	b.n	80066b0 <_strtod_l+0x88>
 80069ac:	4886      	ldr	r0, [pc, #536]	; (8006bc8 <_strtod_l+0x5a0>)
 80069ae:	f002 fe33 	bl	8009618 <nan>
 80069b2:	ec5b ab10 	vmov	sl, fp, d0
 80069b6:	e67b      	b.n	80066b0 <_strtod_l+0x88>
 80069b8:	9b05      	ldr	r3, [sp, #20]
 80069ba:	9807      	ldr	r0, [sp, #28]
 80069bc:	1af3      	subs	r3, r6, r3
 80069be:	2f00      	cmp	r7, #0
 80069c0:	bf08      	it	eq
 80069c2:	462f      	moveq	r7, r5
 80069c4:	2d10      	cmp	r5, #16
 80069c6:	9306      	str	r3, [sp, #24]
 80069c8:	46a8      	mov	r8, r5
 80069ca:	bfa8      	it	ge
 80069cc:	f04f 0810 	movge.w	r8, #16
 80069d0:	f7f9 fda0 	bl	8000514 <__aeabi_ui2d>
 80069d4:	2d09      	cmp	r5, #9
 80069d6:	4682      	mov	sl, r0
 80069d8:	468b      	mov	fp, r1
 80069da:	dd13      	ble.n	8006a04 <_strtod_l+0x3dc>
 80069dc:	4b7b      	ldr	r3, [pc, #492]	; (8006bcc <_strtod_l+0x5a4>)
 80069de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80069e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80069e6:	f7f9 fe0f 	bl	8000608 <__aeabi_dmul>
 80069ea:	4682      	mov	sl, r0
 80069ec:	4648      	mov	r0, r9
 80069ee:	468b      	mov	fp, r1
 80069f0:	f7f9 fd90 	bl	8000514 <__aeabi_ui2d>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4650      	mov	r0, sl
 80069fa:	4659      	mov	r1, fp
 80069fc:	f7f9 fc4e 	bl	800029c <__adddf3>
 8006a00:	4682      	mov	sl, r0
 8006a02:	468b      	mov	fp, r1
 8006a04:	2d0f      	cmp	r5, #15
 8006a06:	dc38      	bgt.n	8006a7a <_strtod_l+0x452>
 8006a08:	9b06      	ldr	r3, [sp, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f43f ae50 	beq.w	80066b0 <_strtod_l+0x88>
 8006a10:	dd24      	ble.n	8006a5c <_strtod_l+0x434>
 8006a12:	2b16      	cmp	r3, #22
 8006a14:	dc0b      	bgt.n	8006a2e <_strtod_l+0x406>
 8006a16:	496d      	ldr	r1, [pc, #436]	; (8006bcc <_strtod_l+0x5a4>)
 8006a18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a20:	4652      	mov	r2, sl
 8006a22:	465b      	mov	r3, fp
 8006a24:	f7f9 fdf0 	bl	8000608 <__aeabi_dmul>
 8006a28:	4682      	mov	sl, r0
 8006a2a:	468b      	mov	fp, r1
 8006a2c:	e640      	b.n	80066b0 <_strtod_l+0x88>
 8006a2e:	9a06      	ldr	r2, [sp, #24]
 8006a30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006a34:	4293      	cmp	r3, r2
 8006a36:	db20      	blt.n	8006a7a <_strtod_l+0x452>
 8006a38:	4c64      	ldr	r4, [pc, #400]	; (8006bcc <_strtod_l+0x5a4>)
 8006a3a:	f1c5 050f 	rsb	r5, r5, #15
 8006a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006a42:	4652      	mov	r2, sl
 8006a44:	465b      	mov	r3, fp
 8006a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a4a:	f7f9 fddd 	bl	8000608 <__aeabi_dmul>
 8006a4e:	9b06      	ldr	r3, [sp, #24]
 8006a50:	1b5d      	subs	r5, r3, r5
 8006a52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a5a:	e7e3      	b.n	8006a24 <_strtod_l+0x3fc>
 8006a5c:	9b06      	ldr	r3, [sp, #24]
 8006a5e:	3316      	adds	r3, #22
 8006a60:	db0b      	blt.n	8006a7a <_strtod_l+0x452>
 8006a62:	9b05      	ldr	r3, [sp, #20]
 8006a64:	1b9e      	subs	r6, r3, r6
 8006a66:	4b59      	ldr	r3, [pc, #356]	; (8006bcc <_strtod_l+0x5a4>)
 8006a68:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006a6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a70:	4650      	mov	r0, sl
 8006a72:	4659      	mov	r1, fp
 8006a74:	f7f9 fef2 	bl	800085c <__aeabi_ddiv>
 8006a78:	e7d6      	b.n	8006a28 <_strtod_l+0x400>
 8006a7a:	9b06      	ldr	r3, [sp, #24]
 8006a7c:	eba5 0808 	sub.w	r8, r5, r8
 8006a80:	4498      	add	r8, r3
 8006a82:	f1b8 0f00 	cmp.w	r8, #0
 8006a86:	dd74      	ble.n	8006b72 <_strtod_l+0x54a>
 8006a88:	f018 030f 	ands.w	r3, r8, #15
 8006a8c:	d00a      	beq.n	8006aa4 <_strtod_l+0x47c>
 8006a8e:	494f      	ldr	r1, [pc, #316]	; (8006bcc <_strtod_l+0x5a4>)
 8006a90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a94:	4652      	mov	r2, sl
 8006a96:	465b      	mov	r3, fp
 8006a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a9c:	f7f9 fdb4 	bl	8000608 <__aeabi_dmul>
 8006aa0:	4682      	mov	sl, r0
 8006aa2:	468b      	mov	fp, r1
 8006aa4:	f038 080f 	bics.w	r8, r8, #15
 8006aa8:	d04f      	beq.n	8006b4a <_strtod_l+0x522>
 8006aaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006aae:	dd22      	ble.n	8006af6 <_strtod_l+0x4ce>
 8006ab0:	2500      	movs	r5, #0
 8006ab2:	462e      	mov	r6, r5
 8006ab4:	9507      	str	r5, [sp, #28]
 8006ab6:	9505      	str	r5, [sp, #20]
 8006ab8:	2322      	movs	r3, #34	; 0x22
 8006aba:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006bd4 <_strtod_l+0x5ac>
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	f04f 0a00 	mov.w	sl, #0
 8006ac4:	9b07      	ldr	r3, [sp, #28]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f43f adf2 	beq.w	80066b0 <_strtod_l+0x88>
 8006acc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f001 fecc 	bl	800886c <_Bfree>
 8006ad4:	9905      	ldr	r1, [sp, #20]
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f001 fec8 	bl	800886c <_Bfree>
 8006adc:	4631      	mov	r1, r6
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f001 fec4 	bl	800886c <_Bfree>
 8006ae4:	9907      	ldr	r1, [sp, #28]
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f001 fec0 	bl	800886c <_Bfree>
 8006aec:	4629      	mov	r1, r5
 8006aee:	4620      	mov	r0, r4
 8006af0:	f001 febc 	bl	800886c <_Bfree>
 8006af4:	e5dc      	b.n	80066b0 <_strtod_l+0x88>
 8006af6:	4b36      	ldr	r3, [pc, #216]	; (8006bd0 <_strtod_l+0x5a8>)
 8006af8:	9304      	str	r3, [sp, #16]
 8006afa:	2300      	movs	r3, #0
 8006afc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006b00:	4650      	mov	r0, sl
 8006b02:	4659      	mov	r1, fp
 8006b04:	4699      	mov	r9, r3
 8006b06:	f1b8 0f01 	cmp.w	r8, #1
 8006b0a:	dc21      	bgt.n	8006b50 <_strtod_l+0x528>
 8006b0c:	b10b      	cbz	r3, 8006b12 <_strtod_l+0x4ea>
 8006b0e:	4682      	mov	sl, r0
 8006b10:	468b      	mov	fp, r1
 8006b12:	4b2f      	ldr	r3, [pc, #188]	; (8006bd0 <_strtod_l+0x5a8>)
 8006b14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006b18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006b1c:	4652      	mov	r2, sl
 8006b1e:	465b      	mov	r3, fp
 8006b20:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006b24:	f7f9 fd70 	bl	8000608 <__aeabi_dmul>
 8006b28:	4b2a      	ldr	r3, [pc, #168]	; (8006bd4 <_strtod_l+0x5ac>)
 8006b2a:	460a      	mov	r2, r1
 8006b2c:	400b      	ands	r3, r1
 8006b2e:	492a      	ldr	r1, [pc, #168]	; (8006bd8 <_strtod_l+0x5b0>)
 8006b30:	428b      	cmp	r3, r1
 8006b32:	4682      	mov	sl, r0
 8006b34:	d8bc      	bhi.n	8006ab0 <_strtod_l+0x488>
 8006b36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b3a:	428b      	cmp	r3, r1
 8006b3c:	bf86      	itte	hi
 8006b3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006bdc <_strtod_l+0x5b4>
 8006b42:	f04f 3aff 	movhi.w	sl, #4294967295
 8006b46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	9304      	str	r3, [sp, #16]
 8006b4e:	e084      	b.n	8006c5a <_strtod_l+0x632>
 8006b50:	f018 0f01 	tst.w	r8, #1
 8006b54:	d005      	beq.n	8006b62 <_strtod_l+0x53a>
 8006b56:	9b04      	ldr	r3, [sp, #16]
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	f7f9 fd54 	bl	8000608 <__aeabi_dmul>
 8006b60:	2301      	movs	r3, #1
 8006b62:	9a04      	ldr	r2, [sp, #16]
 8006b64:	3208      	adds	r2, #8
 8006b66:	f109 0901 	add.w	r9, r9, #1
 8006b6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b6e:	9204      	str	r2, [sp, #16]
 8006b70:	e7c9      	b.n	8006b06 <_strtod_l+0x4de>
 8006b72:	d0ea      	beq.n	8006b4a <_strtod_l+0x522>
 8006b74:	f1c8 0800 	rsb	r8, r8, #0
 8006b78:	f018 020f 	ands.w	r2, r8, #15
 8006b7c:	d00a      	beq.n	8006b94 <_strtod_l+0x56c>
 8006b7e:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <_strtod_l+0x5a4>)
 8006b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b84:	4650      	mov	r0, sl
 8006b86:	4659      	mov	r1, fp
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f7f9 fe66 	bl	800085c <__aeabi_ddiv>
 8006b90:	4682      	mov	sl, r0
 8006b92:	468b      	mov	fp, r1
 8006b94:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006b98:	d0d7      	beq.n	8006b4a <_strtod_l+0x522>
 8006b9a:	f1b8 0f1f 	cmp.w	r8, #31
 8006b9e:	dd1f      	ble.n	8006be0 <_strtod_l+0x5b8>
 8006ba0:	2500      	movs	r5, #0
 8006ba2:	462e      	mov	r6, r5
 8006ba4:	9507      	str	r5, [sp, #28]
 8006ba6:	9505      	str	r5, [sp, #20]
 8006ba8:	2322      	movs	r3, #34	; 0x22
 8006baa:	f04f 0a00 	mov.w	sl, #0
 8006bae:	f04f 0b00 	mov.w	fp, #0
 8006bb2:	6023      	str	r3, [r4, #0]
 8006bb4:	e786      	b.n	8006ac4 <_strtod_l+0x49c>
 8006bb6:	bf00      	nop
 8006bb8:	0800b459 	.word	0x0800b459
 8006bbc:	0800b49c 	.word	0x0800b49c
 8006bc0:	0800b451 	.word	0x0800b451
 8006bc4:	0800b5dc 	.word	0x0800b5dc
 8006bc8:	0800b888 	.word	0x0800b888
 8006bcc:	0800b768 	.word	0x0800b768
 8006bd0:	0800b740 	.word	0x0800b740
 8006bd4:	7ff00000 	.word	0x7ff00000
 8006bd8:	7ca00000 	.word	0x7ca00000
 8006bdc:	7fefffff 	.word	0x7fefffff
 8006be0:	f018 0310 	ands.w	r3, r8, #16
 8006be4:	bf18      	it	ne
 8006be6:	236a      	movne	r3, #106	; 0x6a
 8006be8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006f98 <_strtod_l+0x970>
 8006bec:	9304      	str	r3, [sp, #16]
 8006bee:	4650      	mov	r0, sl
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f018 0f01 	tst.w	r8, #1
 8006bf8:	d004      	beq.n	8006c04 <_strtod_l+0x5dc>
 8006bfa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006bfe:	f7f9 fd03 	bl	8000608 <__aeabi_dmul>
 8006c02:	2301      	movs	r3, #1
 8006c04:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006c08:	f109 0908 	add.w	r9, r9, #8
 8006c0c:	d1f2      	bne.n	8006bf4 <_strtod_l+0x5cc>
 8006c0e:	b10b      	cbz	r3, 8006c14 <_strtod_l+0x5ec>
 8006c10:	4682      	mov	sl, r0
 8006c12:	468b      	mov	fp, r1
 8006c14:	9b04      	ldr	r3, [sp, #16]
 8006c16:	b1c3      	cbz	r3, 8006c4a <_strtod_l+0x622>
 8006c18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	4659      	mov	r1, fp
 8006c24:	dd11      	ble.n	8006c4a <_strtod_l+0x622>
 8006c26:	2b1f      	cmp	r3, #31
 8006c28:	f340 8124 	ble.w	8006e74 <_strtod_l+0x84c>
 8006c2c:	2b34      	cmp	r3, #52	; 0x34
 8006c2e:	bfde      	ittt	le
 8006c30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006c34:	f04f 33ff 	movle.w	r3, #4294967295
 8006c38:	fa03 f202 	lslle.w	r2, r3, r2
 8006c3c:	f04f 0a00 	mov.w	sl, #0
 8006c40:	bfcc      	ite	gt
 8006c42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006c46:	ea02 0b01 	andle.w	fp, r2, r1
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4650      	mov	r0, sl
 8006c50:	4659      	mov	r1, fp
 8006c52:	f7f9 ff41 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d1a2      	bne.n	8006ba0 <_strtod_l+0x578>
 8006c5a:	9b07      	ldr	r3, [sp, #28]
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	9908      	ldr	r1, [sp, #32]
 8006c60:	462b      	mov	r3, r5
 8006c62:	463a      	mov	r2, r7
 8006c64:	4620      	mov	r0, r4
 8006c66:	f001 fe69 	bl	800893c <__s2b>
 8006c6a:	9007      	str	r0, [sp, #28]
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	f43f af1f 	beq.w	8006ab0 <_strtod_l+0x488>
 8006c72:	9b05      	ldr	r3, [sp, #20]
 8006c74:	1b9e      	subs	r6, r3, r6
 8006c76:	9b06      	ldr	r3, [sp, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	bfb4      	ite	lt
 8006c7c:	4633      	movlt	r3, r6
 8006c7e:	2300      	movge	r3, #0
 8006c80:	930c      	str	r3, [sp, #48]	; 0x30
 8006c82:	9b06      	ldr	r3, [sp, #24]
 8006c84:	2500      	movs	r5, #0
 8006c86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c8a:	9312      	str	r3, [sp, #72]	; 0x48
 8006c8c:	462e      	mov	r6, r5
 8006c8e:	9b07      	ldr	r3, [sp, #28]
 8006c90:	4620      	mov	r0, r4
 8006c92:	6859      	ldr	r1, [r3, #4]
 8006c94:	f001 fdaa 	bl	80087ec <_Balloc>
 8006c98:	9005      	str	r0, [sp, #20]
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	f43f af0c 	beq.w	8006ab8 <_strtod_l+0x490>
 8006ca0:	9b07      	ldr	r3, [sp, #28]
 8006ca2:	691a      	ldr	r2, [r3, #16]
 8006ca4:	3202      	adds	r2, #2
 8006ca6:	f103 010c 	add.w	r1, r3, #12
 8006caa:	0092      	lsls	r2, r2, #2
 8006cac:	300c      	adds	r0, #12
 8006cae:	f001 fd8f 	bl	80087d0 <memcpy>
 8006cb2:	ec4b ab10 	vmov	d0, sl, fp
 8006cb6:	aa1a      	add	r2, sp, #104	; 0x68
 8006cb8:	a919      	add	r1, sp, #100	; 0x64
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f002 f984 	bl	8008fc8 <__d2b>
 8006cc0:	ec4b ab18 	vmov	d8, sl, fp
 8006cc4:	9018      	str	r0, [sp, #96]	; 0x60
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	f43f aef6 	beq.w	8006ab8 <_strtod_l+0x490>
 8006ccc:	2101      	movs	r1, #1
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f001 fece 	bl	8008a70 <__i2b>
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f aeee 	beq.w	8006ab8 <_strtod_l+0x490>
 8006cdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cde:	9904      	ldr	r1, [sp, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	bfab      	itete	ge
 8006ce4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006ce6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006ce8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006cea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006cee:	bfac      	ite	ge
 8006cf0:	eb03 0902 	addge.w	r9, r3, r2
 8006cf4:	1ad7      	sublt	r7, r2, r3
 8006cf6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cf8:	eba3 0801 	sub.w	r8, r3, r1
 8006cfc:	4490      	add	r8, r2
 8006cfe:	4ba1      	ldr	r3, [pc, #644]	; (8006f84 <_strtod_l+0x95c>)
 8006d00:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d04:	4598      	cmp	r8, r3
 8006d06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d0a:	f280 80c7 	bge.w	8006e9c <_strtod_l+0x874>
 8006d0e:	eba3 0308 	sub.w	r3, r3, r8
 8006d12:	2b1f      	cmp	r3, #31
 8006d14:	eba2 0203 	sub.w	r2, r2, r3
 8006d18:	f04f 0101 	mov.w	r1, #1
 8006d1c:	f300 80b1 	bgt.w	8006e82 <_strtod_l+0x85a>
 8006d20:	fa01 f303 	lsl.w	r3, r1, r3
 8006d24:	930d      	str	r3, [sp, #52]	; 0x34
 8006d26:	2300      	movs	r3, #0
 8006d28:	9308      	str	r3, [sp, #32]
 8006d2a:	eb09 0802 	add.w	r8, r9, r2
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	45c1      	cmp	r9, r8
 8006d32:	4417      	add	r7, r2
 8006d34:	441f      	add	r7, r3
 8006d36:	464b      	mov	r3, r9
 8006d38:	bfa8      	it	ge
 8006d3a:	4643      	movge	r3, r8
 8006d3c:	42bb      	cmp	r3, r7
 8006d3e:	bfa8      	it	ge
 8006d40:	463b      	movge	r3, r7
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	bfc2      	ittt	gt
 8006d46:	eba8 0803 	subgt.w	r8, r8, r3
 8006d4a:	1aff      	subgt	r7, r7, r3
 8006d4c:	eba9 0903 	subgt.w	r9, r9, r3
 8006d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	dd17      	ble.n	8006d86 <_strtod_l+0x75e>
 8006d56:	4631      	mov	r1, r6
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f001 ff48 	bl	8008bf0 <__pow5mult>
 8006d60:	4606      	mov	r6, r0
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f43f aea8 	beq.w	8006ab8 <_strtod_l+0x490>
 8006d68:	4601      	mov	r1, r0
 8006d6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f001 fe95 	bl	8008a9c <__multiply>
 8006d72:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d74:	2800      	cmp	r0, #0
 8006d76:	f43f ae9f 	beq.w	8006ab8 <_strtod_l+0x490>
 8006d7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f001 fd75 	bl	800886c <_Bfree>
 8006d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d84:	9318      	str	r3, [sp, #96]	; 0x60
 8006d86:	f1b8 0f00 	cmp.w	r8, #0
 8006d8a:	f300 808c 	bgt.w	8006ea6 <_strtod_l+0x87e>
 8006d8e:	9b06      	ldr	r3, [sp, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dd08      	ble.n	8006da6 <_strtod_l+0x77e>
 8006d94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d96:	9905      	ldr	r1, [sp, #20]
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f001 ff29 	bl	8008bf0 <__pow5mult>
 8006d9e:	9005      	str	r0, [sp, #20]
 8006da0:	2800      	cmp	r0, #0
 8006da2:	f43f ae89 	beq.w	8006ab8 <_strtod_l+0x490>
 8006da6:	2f00      	cmp	r7, #0
 8006da8:	dd08      	ble.n	8006dbc <_strtod_l+0x794>
 8006daa:	9905      	ldr	r1, [sp, #20]
 8006dac:	463a      	mov	r2, r7
 8006dae:	4620      	mov	r0, r4
 8006db0:	f001 ff78 	bl	8008ca4 <__lshift>
 8006db4:	9005      	str	r0, [sp, #20]
 8006db6:	2800      	cmp	r0, #0
 8006db8:	f43f ae7e 	beq.w	8006ab8 <_strtod_l+0x490>
 8006dbc:	f1b9 0f00 	cmp.w	r9, #0
 8006dc0:	dd08      	ble.n	8006dd4 <_strtod_l+0x7ac>
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	464a      	mov	r2, r9
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f001 ff6c 	bl	8008ca4 <__lshift>
 8006dcc:	4606      	mov	r6, r0
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	f43f ae72 	beq.w	8006ab8 <_strtod_l+0x490>
 8006dd4:	9a05      	ldr	r2, [sp, #20]
 8006dd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f001 ffef 	bl	8008dbc <__mdiff>
 8006dde:	4605      	mov	r5, r0
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f43f ae69 	beq.w	8006ab8 <_strtod_l+0x490>
 8006de6:	68c3      	ldr	r3, [r0, #12]
 8006de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dea:	2300      	movs	r3, #0
 8006dec:	60c3      	str	r3, [r0, #12]
 8006dee:	4631      	mov	r1, r6
 8006df0:	f001 ffc8 	bl	8008d84 <__mcmp>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	da60      	bge.n	8006eba <_strtod_l+0x892>
 8006df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dfa:	ea53 030a 	orrs.w	r3, r3, sl
 8006dfe:	f040 8082 	bne.w	8006f06 <_strtod_l+0x8de>
 8006e02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d17d      	bne.n	8006f06 <_strtod_l+0x8de>
 8006e0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e0e:	0d1b      	lsrs	r3, r3, #20
 8006e10:	051b      	lsls	r3, r3, #20
 8006e12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e16:	d976      	bls.n	8006f06 <_strtod_l+0x8de>
 8006e18:	696b      	ldr	r3, [r5, #20]
 8006e1a:	b913      	cbnz	r3, 8006e22 <_strtod_l+0x7fa>
 8006e1c:	692b      	ldr	r3, [r5, #16]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	dd71      	ble.n	8006f06 <_strtod_l+0x8de>
 8006e22:	4629      	mov	r1, r5
 8006e24:	2201      	movs	r2, #1
 8006e26:	4620      	mov	r0, r4
 8006e28:	f001 ff3c 	bl	8008ca4 <__lshift>
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4605      	mov	r5, r0
 8006e30:	f001 ffa8 	bl	8008d84 <__mcmp>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	dd66      	ble.n	8006f06 <_strtod_l+0x8de>
 8006e38:	9904      	ldr	r1, [sp, #16]
 8006e3a:	4a53      	ldr	r2, [pc, #332]	; (8006f88 <_strtod_l+0x960>)
 8006e3c:	465b      	mov	r3, fp
 8006e3e:	2900      	cmp	r1, #0
 8006e40:	f000 8081 	beq.w	8006f46 <_strtod_l+0x91e>
 8006e44:	ea02 010b 	and.w	r1, r2, fp
 8006e48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e4c:	dc7b      	bgt.n	8006f46 <_strtod_l+0x91e>
 8006e4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006e52:	f77f aea9 	ble.w	8006ba8 <_strtod_l+0x580>
 8006e56:	4b4d      	ldr	r3, [pc, #308]	; (8006f8c <_strtod_l+0x964>)
 8006e58:	4650      	mov	r0, sl
 8006e5a:	4659      	mov	r1, fp
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f7f9 fbd3 	bl	8000608 <__aeabi_dmul>
 8006e62:	460b      	mov	r3, r1
 8006e64:	4303      	orrs	r3, r0
 8006e66:	bf08      	it	eq
 8006e68:	2322      	moveq	r3, #34	; 0x22
 8006e6a:	4682      	mov	sl, r0
 8006e6c:	468b      	mov	fp, r1
 8006e6e:	bf08      	it	eq
 8006e70:	6023      	streq	r3, [r4, #0]
 8006e72:	e62b      	b.n	8006acc <_strtod_l+0x4a4>
 8006e74:	f04f 32ff 	mov.w	r2, #4294967295
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	ea03 0a0a 	and.w	sl, r3, sl
 8006e80:	e6e3      	b.n	8006c4a <_strtod_l+0x622>
 8006e82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006e86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006e8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006e8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006e92:	fa01 f308 	lsl.w	r3, r1, r8
 8006e96:	9308      	str	r3, [sp, #32]
 8006e98:	910d      	str	r1, [sp, #52]	; 0x34
 8006e9a:	e746      	b.n	8006d2a <_strtod_l+0x702>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9308      	str	r3, [sp, #32]
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8006ea4:	e741      	b.n	8006d2a <_strtod_l+0x702>
 8006ea6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f001 fefa 	bl	8008ca4 <__lshift>
 8006eb0:	9018      	str	r0, [sp, #96]	; 0x60
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	f47f af6b 	bne.w	8006d8e <_strtod_l+0x766>
 8006eb8:	e5fe      	b.n	8006ab8 <_strtod_l+0x490>
 8006eba:	465f      	mov	r7, fp
 8006ebc:	d16e      	bne.n	8006f9c <_strtod_l+0x974>
 8006ebe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ec4:	b342      	cbz	r2, 8006f18 <_strtod_l+0x8f0>
 8006ec6:	4a32      	ldr	r2, [pc, #200]	; (8006f90 <_strtod_l+0x968>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d128      	bne.n	8006f1e <_strtod_l+0x8f6>
 8006ecc:	9b04      	ldr	r3, [sp, #16]
 8006ece:	4651      	mov	r1, sl
 8006ed0:	b1eb      	cbz	r3, 8006f0e <_strtod_l+0x8e6>
 8006ed2:	4b2d      	ldr	r3, [pc, #180]	; (8006f88 <_strtod_l+0x960>)
 8006ed4:	403b      	ands	r3, r7
 8006ed6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006eda:	f04f 32ff 	mov.w	r2, #4294967295
 8006ede:	d819      	bhi.n	8006f14 <_strtod_l+0x8ec>
 8006ee0:	0d1b      	lsrs	r3, r3, #20
 8006ee2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	4299      	cmp	r1, r3
 8006eec:	d117      	bne.n	8006f1e <_strtod_l+0x8f6>
 8006eee:	4b29      	ldr	r3, [pc, #164]	; (8006f94 <_strtod_l+0x96c>)
 8006ef0:	429f      	cmp	r7, r3
 8006ef2:	d102      	bne.n	8006efa <_strtod_l+0x8d2>
 8006ef4:	3101      	adds	r1, #1
 8006ef6:	f43f addf 	beq.w	8006ab8 <_strtod_l+0x490>
 8006efa:	4b23      	ldr	r3, [pc, #140]	; (8006f88 <_strtod_l+0x960>)
 8006efc:	403b      	ands	r3, r7
 8006efe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006f02:	f04f 0a00 	mov.w	sl, #0
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1a4      	bne.n	8006e56 <_strtod_l+0x82e>
 8006f0c:	e5de      	b.n	8006acc <_strtod_l+0x4a4>
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f12:	e7ea      	b.n	8006eea <_strtod_l+0x8c2>
 8006f14:	4613      	mov	r3, r2
 8006f16:	e7e8      	b.n	8006eea <_strtod_l+0x8c2>
 8006f18:	ea53 030a 	orrs.w	r3, r3, sl
 8006f1c:	d08c      	beq.n	8006e38 <_strtod_l+0x810>
 8006f1e:	9b08      	ldr	r3, [sp, #32]
 8006f20:	b1db      	cbz	r3, 8006f5a <_strtod_l+0x932>
 8006f22:	423b      	tst	r3, r7
 8006f24:	d0ef      	beq.n	8006f06 <_strtod_l+0x8de>
 8006f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f28:	9a04      	ldr	r2, [sp, #16]
 8006f2a:	4650      	mov	r0, sl
 8006f2c:	4659      	mov	r1, fp
 8006f2e:	b1c3      	cbz	r3, 8006f62 <_strtod_l+0x93a>
 8006f30:	f7ff fb5e 	bl	80065f0 <sulp>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	ec51 0b18 	vmov	r0, r1, d8
 8006f3c:	f7f9 f9ae 	bl	800029c <__adddf3>
 8006f40:	4682      	mov	sl, r0
 8006f42:	468b      	mov	fp, r1
 8006f44:	e7df      	b.n	8006f06 <_strtod_l+0x8de>
 8006f46:	4013      	ands	r3, r2
 8006f48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f54:	f04f 3aff 	mov.w	sl, #4294967295
 8006f58:	e7d5      	b.n	8006f06 <_strtod_l+0x8de>
 8006f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f5c:	ea13 0f0a 	tst.w	r3, sl
 8006f60:	e7e0      	b.n	8006f24 <_strtod_l+0x8fc>
 8006f62:	f7ff fb45 	bl	80065f0 <sulp>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	ec51 0b18 	vmov	r0, r1, d8
 8006f6e:	f7f9 f993 	bl	8000298 <__aeabi_dsub>
 8006f72:	2200      	movs	r2, #0
 8006f74:	2300      	movs	r3, #0
 8006f76:	4682      	mov	sl, r0
 8006f78:	468b      	mov	fp, r1
 8006f7a:	f7f9 fdad 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d0c1      	beq.n	8006f06 <_strtod_l+0x8de>
 8006f82:	e611      	b.n	8006ba8 <_strtod_l+0x580>
 8006f84:	fffffc02 	.word	0xfffffc02
 8006f88:	7ff00000 	.word	0x7ff00000
 8006f8c:	39500000 	.word	0x39500000
 8006f90:	000fffff 	.word	0x000fffff
 8006f94:	7fefffff 	.word	0x7fefffff
 8006f98:	0800b4b0 	.word	0x0800b4b0
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f002 f86e 	bl	8009080 <__ratio>
 8006fa4:	ec59 8b10 	vmov	r8, r9, d0
 8006fa8:	ee10 0a10 	vmov	r0, s0
 8006fac:	2200      	movs	r2, #0
 8006fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	f7f9 fda4 	bl	8000b00 <__aeabi_dcmple>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d07a      	beq.n	80070b2 <_strtod_l+0xa8a>
 8006fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d04a      	beq.n	8007058 <_strtod_l+0xa30>
 8006fc2:	4b95      	ldr	r3, [pc, #596]	; (8007218 <_strtod_l+0xbf0>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007218 <_strtod_l+0xbf0>
 8006fce:	f04f 0800 	mov.w	r8, #0
 8006fd2:	4b92      	ldr	r3, [pc, #584]	; (800721c <_strtod_l+0xbf4>)
 8006fd4:	403b      	ands	r3, r7
 8006fd6:	930d      	str	r3, [sp, #52]	; 0x34
 8006fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fda:	4b91      	ldr	r3, [pc, #580]	; (8007220 <_strtod_l+0xbf8>)
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	f040 80b0 	bne.w	8007142 <_strtod_l+0xb1a>
 8006fe2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fe6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006fea:	ec4b ab10 	vmov	d0, sl, fp
 8006fee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ff2:	f001 ff6d 	bl	8008ed0 <__ulp>
 8006ff6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ffa:	ec53 2b10 	vmov	r2, r3, d0
 8006ffe:	f7f9 fb03 	bl	8000608 <__aeabi_dmul>
 8007002:	4652      	mov	r2, sl
 8007004:	465b      	mov	r3, fp
 8007006:	f7f9 f949 	bl	800029c <__adddf3>
 800700a:	460b      	mov	r3, r1
 800700c:	4983      	ldr	r1, [pc, #524]	; (800721c <_strtod_l+0xbf4>)
 800700e:	4a85      	ldr	r2, [pc, #532]	; (8007224 <_strtod_l+0xbfc>)
 8007010:	4019      	ands	r1, r3
 8007012:	4291      	cmp	r1, r2
 8007014:	4682      	mov	sl, r0
 8007016:	d960      	bls.n	80070da <_strtod_l+0xab2>
 8007018:	ee18 3a90 	vmov	r3, s17
 800701c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007020:	4293      	cmp	r3, r2
 8007022:	d104      	bne.n	800702e <_strtod_l+0xa06>
 8007024:	ee18 3a10 	vmov	r3, s16
 8007028:	3301      	adds	r3, #1
 800702a:	f43f ad45 	beq.w	8006ab8 <_strtod_l+0x490>
 800702e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007230 <_strtod_l+0xc08>
 8007032:	f04f 3aff 	mov.w	sl, #4294967295
 8007036:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007038:	4620      	mov	r0, r4
 800703a:	f001 fc17 	bl	800886c <_Bfree>
 800703e:	9905      	ldr	r1, [sp, #20]
 8007040:	4620      	mov	r0, r4
 8007042:	f001 fc13 	bl	800886c <_Bfree>
 8007046:	4631      	mov	r1, r6
 8007048:	4620      	mov	r0, r4
 800704a:	f001 fc0f 	bl	800886c <_Bfree>
 800704e:	4629      	mov	r1, r5
 8007050:	4620      	mov	r0, r4
 8007052:	f001 fc0b 	bl	800886c <_Bfree>
 8007056:	e61a      	b.n	8006c8e <_strtod_l+0x666>
 8007058:	f1ba 0f00 	cmp.w	sl, #0
 800705c:	d11b      	bne.n	8007096 <_strtod_l+0xa6e>
 800705e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007062:	b9f3      	cbnz	r3, 80070a2 <_strtod_l+0xa7a>
 8007064:	4b6c      	ldr	r3, [pc, #432]	; (8007218 <_strtod_l+0xbf0>)
 8007066:	2200      	movs	r2, #0
 8007068:	4640      	mov	r0, r8
 800706a:	4649      	mov	r1, r9
 800706c:	f7f9 fd3e 	bl	8000aec <__aeabi_dcmplt>
 8007070:	b9d0      	cbnz	r0, 80070a8 <_strtod_l+0xa80>
 8007072:	4640      	mov	r0, r8
 8007074:	4649      	mov	r1, r9
 8007076:	4b6c      	ldr	r3, [pc, #432]	; (8007228 <_strtod_l+0xc00>)
 8007078:	2200      	movs	r2, #0
 800707a:	f7f9 fac5 	bl	8000608 <__aeabi_dmul>
 800707e:	4680      	mov	r8, r0
 8007080:	4689      	mov	r9, r1
 8007082:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007086:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800708a:	9315      	str	r3, [sp, #84]	; 0x54
 800708c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007090:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007094:	e79d      	b.n	8006fd2 <_strtod_l+0x9aa>
 8007096:	f1ba 0f01 	cmp.w	sl, #1
 800709a:	d102      	bne.n	80070a2 <_strtod_l+0xa7a>
 800709c:	2f00      	cmp	r7, #0
 800709e:	f43f ad83 	beq.w	8006ba8 <_strtod_l+0x580>
 80070a2:	4b62      	ldr	r3, [pc, #392]	; (800722c <_strtod_l+0xc04>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	e78e      	b.n	8006fc6 <_strtod_l+0x99e>
 80070a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007228 <_strtod_l+0xc00>
 80070ac:	f04f 0800 	mov.w	r8, #0
 80070b0:	e7e7      	b.n	8007082 <_strtod_l+0xa5a>
 80070b2:	4b5d      	ldr	r3, [pc, #372]	; (8007228 <_strtod_l+0xc00>)
 80070b4:	4640      	mov	r0, r8
 80070b6:	4649      	mov	r1, r9
 80070b8:	2200      	movs	r2, #0
 80070ba:	f7f9 faa5 	bl	8000608 <__aeabi_dmul>
 80070be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c0:	4680      	mov	r8, r0
 80070c2:	4689      	mov	r9, r1
 80070c4:	b933      	cbnz	r3, 80070d4 <_strtod_l+0xaac>
 80070c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070ca:	900e      	str	r0, [sp, #56]	; 0x38
 80070cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80070ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80070d2:	e7dd      	b.n	8007090 <_strtod_l+0xa68>
 80070d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80070d8:	e7f9      	b.n	80070ce <_strtod_l+0xaa6>
 80070da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80070de:	9b04      	ldr	r3, [sp, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1a8      	bne.n	8007036 <_strtod_l+0xa0e>
 80070e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070ea:	0d1b      	lsrs	r3, r3, #20
 80070ec:	051b      	lsls	r3, r3, #20
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d1a1      	bne.n	8007036 <_strtod_l+0xa0e>
 80070f2:	4640      	mov	r0, r8
 80070f4:	4649      	mov	r1, r9
 80070f6:	f7f9 fde7 	bl	8000cc8 <__aeabi_d2lz>
 80070fa:	f7f9 fa57 	bl	80005ac <__aeabi_l2d>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4640      	mov	r0, r8
 8007104:	4649      	mov	r1, r9
 8007106:	f7f9 f8c7 	bl	8000298 <__aeabi_dsub>
 800710a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800710c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007110:	ea43 030a 	orr.w	r3, r3, sl
 8007114:	4313      	orrs	r3, r2
 8007116:	4680      	mov	r8, r0
 8007118:	4689      	mov	r9, r1
 800711a:	d055      	beq.n	80071c8 <_strtod_l+0xba0>
 800711c:	a336      	add	r3, pc, #216	; (adr r3, 80071f8 <_strtod_l+0xbd0>)
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	f7f9 fce3 	bl	8000aec <__aeabi_dcmplt>
 8007126:	2800      	cmp	r0, #0
 8007128:	f47f acd0 	bne.w	8006acc <_strtod_l+0x4a4>
 800712c:	a334      	add	r3, pc, #208	; (adr r3, 8007200 <_strtod_l+0xbd8>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 fcf7 	bl	8000b28 <__aeabi_dcmpgt>
 800713a:	2800      	cmp	r0, #0
 800713c:	f43f af7b 	beq.w	8007036 <_strtod_l+0xa0e>
 8007140:	e4c4      	b.n	8006acc <_strtod_l+0x4a4>
 8007142:	9b04      	ldr	r3, [sp, #16]
 8007144:	b333      	cbz	r3, 8007194 <_strtod_l+0xb6c>
 8007146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007148:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800714c:	d822      	bhi.n	8007194 <_strtod_l+0xb6c>
 800714e:	a32e      	add	r3, pc, #184	; (adr r3, 8007208 <_strtod_l+0xbe0>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	4640      	mov	r0, r8
 8007156:	4649      	mov	r1, r9
 8007158:	f7f9 fcd2 	bl	8000b00 <__aeabi_dcmple>
 800715c:	b1a0      	cbz	r0, 8007188 <_strtod_l+0xb60>
 800715e:	4649      	mov	r1, r9
 8007160:	4640      	mov	r0, r8
 8007162:	f7f9 fd29 	bl	8000bb8 <__aeabi_d2uiz>
 8007166:	2801      	cmp	r0, #1
 8007168:	bf38      	it	cc
 800716a:	2001      	movcc	r0, #1
 800716c:	f7f9 f9d2 	bl	8000514 <__aeabi_ui2d>
 8007170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007172:	4680      	mov	r8, r0
 8007174:	4689      	mov	r9, r1
 8007176:	bb23      	cbnz	r3, 80071c2 <_strtod_l+0xb9a>
 8007178:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800717c:	9010      	str	r0, [sp, #64]	; 0x40
 800717e:	9311      	str	r3, [sp, #68]	; 0x44
 8007180:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007184:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800718c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007190:	1a9b      	subs	r3, r3, r2
 8007192:	9309      	str	r3, [sp, #36]	; 0x24
 8007194:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007198:	eeb0 0a48 	vmov.f32	s0, s16
 800719c:	eef0 0a68 	vmov.f32	s1, s17
 80071a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071a4:	f001 fe94 	bl	8008ed0 <__ulp>
 80071a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071ac:	ec53 2b10 	vmov	r2, r3, d0
 80071b0:	f7f9 fa2a 	bl	8000608 <__aeabi_dmul>
 80071b4:	ec53 2b18 	vmov	r2, r3, d8
 80071b8:	f7f9 f870 	bl	800029c <__adddf3>
 80071bc:	4682      	mov	sl, r0
 80071be:	468b      	mov	fp, r1
 80071c0:	e78d      	b.n	80070de <_strtod_l+0xab6>
 80071c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80071c6:	e7db      	b.n	8007180 <_strtod_l+0xb58>
 80071c8:	a311      	add	r3, pc, #68	; (adr r3, 8007210 <_strtod_l+0xbe8>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f9 fc8d 	bl	8000aec <__aeabi_dcmplt>
 80071d2:	e7b2      	b.n	800713a <_strtod_l+0xb12>
 80071d4:	2300      	movs	r3, #0
 80071d6:	930a      	str	r3, [sp, #40]	; 0x28
 80071d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80071da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	f7ff ba6b 	b.w	80066b8 <_strtod_l+0x90>
 80071e2:	2a65      	cmp	r2, #101	; 0x65
 80071e4:	f43f ab5f 	beq.w	80068a6 <_strtod_l+0x27e>
 80071e8:	2a45      	cmp	r2, #69	; 0x45
 80071ea:	f43f ab5c 	beq.w	80068a6 <_strtod_l+0x27e>
 80071ee:	2301      	movs	r3, #1
 80071f0:	f7ff bb94 	b.w	800691c <_strtod_l+0x2f4>
 80071f4:	f3af 8000 	nop.w
 80071f8:	94a03595 	.word	0x94a03595
 80071fc:	3fdfffff 	.word	0x3fdfffff
 8007200:	35afe535 	.word	0x35afe535
 8007204:	3fe00000 	.word	0x3fe00000
 8007208:	ffc00000 	.word	0xffc00000
 800720c:	41dfffff 	.word	0x41dfffff
 8007210:	94a03595 	.word	0x94a03595
 8007214:	3fcfffff 	.word	0x3fcfffff
 8007218:	3ff00000 	.word	0x3ff00000
 800721c:	7ff00000 	.word	0x7ff00000
 8007220:	7fe00000 	.word	0x7fe00000
 8007224:	7c9fffff 	.word	0x7c9fffff
 8007228:	3fe00000 	.word	0x3fe00000
 800722c:	bff00000 	.word	0xbff00000
 8007230:	7fefffff 	.word	0x7fefffff

08007234 <_strtod_r>:
 8007234:	4b01      	ldr	r3, [pc, #4]	; (800723c <_strtod_r+0x8>)
 8007236:	f7ff b9f7 	b.w	8006628 <_strtod_l>
 800723a:	bf00      	nop
 800723c:	20000074 	.word	0x20000074

08007240 <_strtol_l.constprop.0>:
 8007240:	2b01      	cmp	r3, #1
 8007242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007246:	d001      	beq.n	800724c <_strtol_l.constprop.0+0xc>
 8007248:	2b24      	cmp	r3, #36	; 0x24
 800724a:	d906      	bls.n	800725a <_strtol_l.constprop.0+0x1a>
 800724c:	f7fe fafe 	bl	800584c <__errno>
 8007250:	2316      	movs	r3, #22
 8007252:	6003      	str	r3, [r0, #0]
 8007254:	2000      	movs	r0, #0
 8007256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007340 <_strtol_l.constprop.0+0x100>
 800725e:	460d      	mov	r5, r1
 8007260:	462e      	mov	r6, r5
 8007262:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007266:	f814 700c 	ldrb.w	r7, [r4, ip]
 800726a:	f017 0708 	ands.w	r7, r7, #8
 800726e:	d1f7      	bne.n	8007260 <_strtol_l.constprop.0+0x20>
 8007270:	2c2d      	cmp	r4, #45	; 0x2d
 8007272:	d132      	bne.n	80072da <_strtol_l.constprop.0+0x9a>
 8007274:	782c      	ldrb	r4, [r5, #0]
 8007276:	2701      	movs	r7, #1
 8007278:	1cb5      	adds	r5, r6, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d05b      	beq.n	8007336 <_strtol_l.constprop.0+0xf6>
 800727e:	2b10      	cmp	r3, #16
 8007280:	d109      	bne.n	8007296 <_strtol_l.constprop.0+0x56>
 8007282:	2c30      	cmp	r4, #48	; 0x30
 8007284:	d107      	bne.n	8007296 <_strtol_l.constprop.0+0x56>
 8007286:	782c      	ldrb	r4, [r5, #0]
 8007288:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800728c:	2c58      	cmp	r4, #88	; 0x58
 800728e:	d14d      	bne.n	800732c <_strtol_l.constprop.0+0xec>
 8007290:	786c      	ldrb	r4, [r5, #1]
 8007292:	2310      	movs	r3, #16
 8007294:	3502      	adds	r5, #2
 8007296:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800729a:	f108 38ff 	add.w	r8, r8, #4294967295
 800729e:	f04f 0c00 	mov.w	ip, #0
 80072a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80072a6:	4666      	mov	r6, ip
 80072a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80072ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80072b0:	f1be 0f09 	cmp.w	lr, #9
 80072b4:	d816      	bhi.n	80072e4 <_strtol_l.constprop.0+0xa4>
 80072b6:	4674      	mov	r4, lr
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	dd24      	ble.n	8007306 <_strtol_l.constprop.0+0xc6>
 80072bc:	f1bc 0f00 	cmp.w	ip, #0
 80072c0:	db1e      	blt.n	8007300 <_strtol_l.constprop.0+0xc0>
 80072c2:	45b1      	cmp	r9, r6
 80072c4:	d31c      	bcc.n	8007300 <_strtol_l.constprop.0+0xc0>
 80072c6:	d101      	bne.n	80072cc <_strtol_l.constprop.0+0x8c>
 80072c8:	45a2      	cmp	sl, r4
 80072ca:	db19      	blt.n	8007300 <_strtol_l.constprop.0+0xc0>
 80072cc:	fb06 4603 	mla	r6, r6, r3, r4
 80072d0:	f04f 0c01 	mov.w	ip, #1
 80072d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072d8:	e7e8      	b.n	80072ac <_strtol_l.constprop.0+0x6c>
 80072da:	2c2b      	cmp	r4, #43	; 0x2b
 80072dc:	bf04      	itt	eq
 80072de:	782c      	ldrbeq	r4, [r5, #0]
 80072e0:	1cb5      	addeq	r5, r6, #2
 80072e2:	e7ca      	b.n	800727a <_strtol_l.constprop.0+0x3a>
 80072e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80072e8:	f1be 0f19 	cmp.w	lr, #25
 80072ec:	d801      	bhi.n	80072f2 <_strtol_l.constprop.0+0xb2>
 80072ee:	3c37      	subs	r4, #55	; 0x37
 80072f0:	e7e2      	b.n	80072b8 <_strtol_l.constprop.0+0x78>
 80072f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80072f6:	f1be 0f19 	cmp.w	lr, #25
 80072fa:	d804      	bhi.n	8007306 <_strtol_l.constprop.0+0xc6>
 80072fc:	3c57      	subs	r4, #87	; 0x57
 80072fe:	e7db      	b.n	80072b8 <_strtol_l.constprop.0+0x78>
 8007300:	f04f 3cff 	mov.w	ip, #4294967295
 8007304:	e7e6      	b.n	80072d4 <_strtol_l.constprop.0+0x94>
 8007306:	f1bc 0f00 	cmp.w	ip, #0
 800730a:	da05      	bge.n	8007318 <_strtol_l.constprop.0+0xd8>
 800730c:	2322      	movs	r3, #34	; 0x22
 800730e:	6003      	str	r3, [r0, #0]
 8007310:	4646      	mov	r6, r8
 8007312:	b942      	cbnz	r2, 8007326 <_strtol_l.constprop.0+0xe6>
 8007314:	4630      	mov	r0, r6
 8007316:	e79e      	b.n	8007256 <_strtol_l.constprop.0+0x16>
 8007318:	b107      	cbz	r7, 800731c <_strtol_l.constprop.0+0xdc>
 800731a:	4276      	negs	r6, r6
 800731c:	2a00      	cmp	r2, #0
 800731e:	d0f9      	beq.n	8007314 <_strtol_l.constprop.0+0xd4>
 8007320:	f1bc 0f00 	cmp.w	ip, #0
 8007324:	d000      	beq.n	8007328 <_strtol_l.constprop.0+0xe8>
 8007326:	1e69      	subs	r1, r5, #1
 8007328:	6011      	str	r1, [r2, #0]
 800732a:	e7f3      	b.n	8007314 <_strtol_l.constprop.0+0xd4>
 800732c:	2430      	movs	r4, #48	; 0x30
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1b1      	bne.n	8007296 <_strtol_l.constprop.0+0x56>
 8007332:	2308      	movs	r3, #8
 8007334:	e7af      	b.n	8007296 <_strtol_l.constprop.0+0x56>
 8007336:	2c30      	cmp	r4, #48	; 0x30
 8007338:	d0a5      	beq.n	8007286 <_strtol_l.constprop.0+0x46>
 800733a:	230a      	movs	r3, #10
 800733c:	e7ab      	b.n	8007296 <_strtol_l.constprop.0+0x56>
 800733e:	bf00      	nop
 8007340:	0800b4d9 	.word	0x0800b4d9

08007344 <_strtol_r>:
 8007344:	f7ff bf7c 	b.w	8007240 <_strtol_l.constprop.0>

08007348 <_vsniprintf_r>:
 8007348:	b530      	push	{r4, r5, lr}
 800734a:	4614      	mov	r4, r2
 800734c:	2c00      	cmp	r4, #0
 800734e:	b09b      	sub	sp, #108	; 0x6c
 8007350:	4605      	mov	r5, r0
 8007352:	461a      	mov	r2, r3
 8007354:	da05      	bge.n	8007362 <_vsniprintf_r+0x1a>
 8007356:	238b      	movs	r3, #139	; 0x8b
 8007358:	6003      	str	r3, [r0, #0]
 800735a:	f04f 30ff 	mov.w	r0, #4294967295
 800735e:	b01b      	add	sp, #108	; 0x6c
 8007360:	bd30      	pop	{r4, r5, pc}
 8007362:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007366:	f8ad 300c 	strh.w	r3, [sp, #12]
 800736a:	bf14      	ite	ne
 800736c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007370:	4623      	moveq	r3, r4
 8007372:	9302      	str	r3, [sp, #8]
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800737a:	9100      	str	r1, [sp, #0]
 800737c:	9104      	str	r1, [sp, #16]
 800737e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007382:	4669      	mov	r1, sp
 8007384:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007386:	f002 f845 	bl	8009414 <_svfiprintf_r>
 800738a:	1c43      	adds	r3, r0, #1
 800738c:	bfbc      	itt	lt
 800738e:	238b      	movlt	r3, #139	; 0x8b
 8007390:	602b      	strlt	r3, [r5, #0]
 8007392:	2c00      	cmp	r4, #0
 8007394:	d0e3      	beq.n	800735e <_vsniprintf_r+0x16>
 8007396:	9b00      	ldr	r3, [sp, #0]
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	e7df      	b.n	800735e <_vsniprintf_r+0x16>
	...

080073a0 <vsniprintf>:
 80073a0:	b507      	push	{r0, r1, r2, lr}
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	4613      	mov	r3, r2
 80073a6:	460a      	mov	r2, r1
 80073a8:	4601      	mov	r1, r0
 80073aa:	4803      	ldr	r0, [pc, #12]	; (80073b8 <vsniprintf+0x18>)
 80073ac:	6800      	ldr	r0, [r0, #0]
 80073ae:	f7ff ffcb 	bl	8007348 <_vsniprintf_r>
 80073b2:	b003      	add	sp, #12
 80073b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80073b8:	2000000c 	.word	0x2000000c

080073bc <quorem>:
 80073bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c0:	6903      	ldr	r3, [r0, #16]
 80073c2:	690c      	ldr	r4, [r1, #16]
 80073c4:	42a3      	cmp	r3, r4
 80073c6:	4607      	mov	r7, r0
 80073c8:	f2c0 8081 	blt.w	80074ce <quorem+0x112>
 80073cc:	3c01      	subs	r4, #1
 80073ce:	f101 0814 	add.w	r8, r1, #20
 80073d2:	f100 0514 	add.w	r5, r0, #20
 80073d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073e4:	3301      	adds	r3, #1
 80073e6:	429a      	cmp	r2, r3
 80073e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80073f4:	d331      	bcc.n	800745a <quorem+0x9e>
 80073f6:	f04f 0e00 	mov.w	lr, #0
 80073fa:	4640      	mov	r0, r8
 80073fc:	46ac      	mov	ip, r5
 80073fe:	46f2      	mov	sl, lr
 8007400:	f850 2b04 	ldr.w	r2, [r0], #4
 8007404:	b293      	uxth	r3, r2
 8007406:	fb06 e303 	mla	r3, r6, r3, lr
 800740a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800740e:	b29b      	uxth	r3, r3
 8007410:	ebaa 0303 	sub.w	r3, sl, r3
 8007414:	f8dc a000 	ldr.w	sl, [ip]
 8007418:	0c12      	lsrs	r2, r2, #16
 800741a:	fa13 f38a 	uxtah	r3, r3, sl
 800741e:	fb06 e202 	mla	r2, r6, r2, lr
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	9b00      	ldr	r3, [sp, #0]
 8007426:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800742a:	b292      	uxth	r2, r2
 800742c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007430:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007434:	f8bd 3000 	ldrh.w	r3, [sp]
 8007438:	4581      	cmp	r9, r0
 800743a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800743e:	f84c 3b04 	str.w	r3, [ip], #4
 8007442:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007446:	d2db      	bcs.n	8007400 <quorem+0x44>
 8007448:	f855 300b 	ldr.w	r3, [r5, fp]
 800744c:	b92b      	cbnz	r3, 800745a <quorem+0x9e>
 800744e:	9b01      	ldr	r3, [sp, #4]
 8007450:	3b04      	subs	r3, #4
 8007452:	429d      	cmp	r5, r3
 8007454:	461a      	mov	r2, r3
 8007456:	d32e      	bcc.n	80074b6 <quorem+0xfa>
 8007458:	613c      	str	r4, [r7, #16]
 800745a:	4638      	mov	r0, r7
 800745c:	f001 fc92 	bl	8008d84 <__mcmp>
 8007460:	2800      	cmp	r0, #0
 8007462:	db24      	blt.n	80074ae <quorem+0xf2>
 8007464:	3601      	adds	r6, #1
 8007466:	4628      	mov	r0, r5
 8007468:	f04f 0c00 	mov.w	ip, #0
 800746c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007470:	f8d0 e000 	ldr.w	lr, [r0]
 8007474:	b293      	uxth	r3, r2
 8007476:	ebac 0303 	sub.w	r3, ip, r3
 800747a:	0c12      	lsrs	r2, r2, #16
 800747c:	fa13 f38e 	uxtah	r3, r3, lr
 8007480:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007488:	b29b      	uxth	r3, r3
 800748a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800748e:	45c1      	cmp	r9, r8
 8007490:	f840 3b04 	str.w	r3, [r0], #4
 8007494:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007498:	d2e8      	bcs.n	800746c <quorem+0xb0>
 800749a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800749e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074a2:	b922      	cbnz	r2, 80074ae <quorem+0xf2>
 80074a4:	3b04      	subs	r3, #4
 80074a6:	429d      	cmp	r5, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	d30a      	bcc.n	80074c2 <quorem+0x106>
 80074ac:	613c      	str	r4, [r7, #16]
 80074ae:	4630      	mov	r0, r6
 80074b0:	b003      	add	sp, #12
 80074b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b6:	6812      	ldr	r2, [r2, #0]
 80074b8:	3b04      	subs	r3, #4
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	d1cc      	bne.n	8007458 <quorem+0x9c>
 80074be:	3c01      	subs	r4, #1
 80074c0:	e7c7      	b.n	8007452 <quorem+0x96>
 80074c2:	6812      	ldr	r2, [r2, #0]
 80074c4:	3b04      	subs	r3, #4
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	d1f0      	bne.n	80074ac <quorem+0xf0>
 80074ca:	3c01      	subs	r4, #1
 80074cc:	e7eb      	b.n	80074a6 <quorem+0xea>
 80074ce:	2000      	movs	r0, #0
 80074d0:	e7ee      	b.n	80074b0 <quorem+0xf4>
 80074d2:	0000      	movs	r0, r0
 80074d4:	0000      	movs	r0, r0
	...

080074d8 <_dtoa_r>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	ed2d 8b04 	vpush	{d8-d9}
 80074e0:	ec57 6b10 	vmov	r6, r7, d0
 80074e4:	b093      	sub	sp, #76	; 0x4c
 80074e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074ec:	9106      	str	r1, [sp, #24]
 80074ee:	ee10 aa10 	vmov	sl, s0
 80074f2:	4604      	mov	r4, r0
 80074f4:	9209      	str	r2, [sp, #36]	; 0x24
 80074f6:	930c      	str	r3, [sp, #48]	; 0x30
 80074f8:	46bb      	mov	fp, r7
 80074fa:	b975      	cbnz	r5, 800751a <_dtoa_r+0x42>
 80074fc:	2010      	movs	r0, #16
 80074fe:	f001 f94d 	bl	800879c <malloc>
 8007502:	4602      	mov	r2, r0
 8007504:	6260      	str	r0, [r4, #36]	; 0x24
 8007506:	b920      	cbnz	r0, 8007512 <_dtoa_r+0x3a>
 8007508:	4ba7      	ldr	r3, [pc, #668]	; (80077a8 <_dtoa_r+0x2d0>)
 800750a:	21ea      	movs	r1, #234	; 0xea
 800750c:	48a7      	ldr	r0, [pc, #668]	; (80077ac <_dtoa_r+0x2d4>)
 800750e:	f002 f8bd 	bl	800968c <__assert_func>
 8007512:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007516:	6005      	str	r5, [r0, #0]
 8007518:	60c5      	str	r5, [r0, #12]
 800751a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800751c:	6819      	ldr	r1, [r3, #0]
 800751e:	b151      	cbz	r1, 8007536 <_dtoa_r+0x5e>
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	604a      	str	r2, [r1, #4]
 8007524:	2301      	movs	r3, #1
 8007526:	4093      	lsls	r3, r2
 8007528:	608b      	str	r3, [r1, #8]
 800752a:	4620      	mov	r0, r4
 800752c:	f001 f99e 	bl	800886c <_Bfree>
 8007530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	1e3b      	subs	r3, r7, #0
 8007538:	bfaa      	itet	ge
 800753a:	2300      	movge	r3, #0
 800753c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007540:	f8c8 3000 	strge.w	r3, [r8]
 8007544:	4b9a      	ldr	r3, [pc, #616]	; (80077b0 <_dtoa_r+0x2d8>)
 8007546:	bfbc      	itt	lt
 8007548:	2201      	movlt	r2, #1
 800754a:	f8c8 2000 	strlt.w	r2, [r8]
 800754e:	ea33 030b 	bics.w	r3, r3, fp
 8007552:	d11b      	bne.n	800758c <_dtoa_r+0xb4>
 8007554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007556:	f242 730f 	movw	r3, #9999	; 0x270f
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007560:	4333      	orrs	r3, r6
 8007562:	f000 8592 	beq.w	800808a <_dtoa_r+0xbb2>
 8007566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007568:	b963      	cbnz	r3, 8007584 <_dtoa_r+0xac>
 800756a:	4b92      	ldr	r3, [pc, #584]	; (80077b4 <_dtoa_r+0x2dc>)
 800756c:	e022      	b.n	80075b4 <_dtoa_r+0xdc>
 800756e:	4b92      	ldr	r3, [pc, #584]	; (80077b8 <_dtoa_r+0x2e0>)
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	3308      	adds	r3, #8
 8007574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	9801      	ldr	r0, [sp, #4]
 800757a:	b013      	add	sp, #76	; 0x4c
 800757c:	ecbd 8b04 	vpop	{d8-d9}
 8007580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007584:	4b8b      	ldr	r3, [pc, #556]	; (80077b4 <_dtoa_r+0x2dc>)
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	3303      	adds	r3, #3
 800758a:	e7f3      	b.n	8007574 <_dtoa_r+0x9c>
 800758c:	2200      	movs	r2, #0
 800758e:	2300      	movs	r3, #0
 8007590:	4650      	mov	r0, sl
 8007592:	4659      	mov	r1, fp
 8007594:	f7f9 faa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007598:	ec4b ab19 	vmov	d9, sl, fp
 800759c:	4680      	mov	r8, r0
 800759e:	b158      	cbz	r0, 80075b8 <_dtoa_r+0xe0>
 80075a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075a2:	2301      	movs	r3, #1
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 856b 	beq.w	8008084 <_dtoa_r+0xbac>
 80075ae:	4883      	ldr	r0, [pc, #524]	; (80077bc <_dtoa_r+0x2e4>)
 80075b0:	6018      	str	r0, [r3, #0]
 80075b2:	1e43      	subs	r3, r0, #1
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	e7df      	b.n	8007578 <_dtoa_r+0xa0>
 80075b8:	ec4b ab10 	vmov	d0, sl, fp
 80075bc:	aa10      	add	r2, sp, #64	; 0x40
 80075be:	a911      	add	r1, sp, #68	; 0x44
 80075c0:	4620      	mov	r0, r4
 80075c2:	f001 fd01 	bl	8008fc8 <__d2b>
 80075c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80075ca:	ee08 0a10 	vmov	s16, r0
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	f000 8084 	beq.w	80076dc <_dtoa_r+0x204>
 80075d4:	ee19 3a90 	vmov	r3, s19
 80075d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80075e0:	4656      	mov	r6, sl
 80075e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80075e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80075ee:	4b74      	ldr	r3, [pc, #464]	; (80077c0 <_dtoa_r+0x2e8>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	4630      	mov	r0, r6
 80075f4:	4639      	mov	r1, r7
 80075f6:	f7f8 fe4f 	bl	8000298 <__aeabi_dsub>
 80075fa:	a365      	add	r3, pc, #404	; (adr r3, 8007790 <_dtoa_r+0x2b8>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f7f9 f802 	bl	8000608 <__aeabi_dmul>
 8007604:	a364      	add	r3, pc, #400	; (adr r3, 8007798 <_dtoa_r+0x2c0>)
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f7f8 fe47 	bl	800029c <__adddf3>
 800760e:	4606      	mov	r6, r0
 8007610:	4628      	mov	r0, r5
 8007612:	460f      	mov	r7, r1
 8007614:	f7f8 ff8e 	bl	8000534 <__aeabi_i2d>
 8007618:	a361      	add	r3, pc, #388	; (adr r3, 80077a0 <_dtoa_r+0x2c8>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f7f8 fff3 	bl	8000608 <__aeabi_dmul>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4630      	mov	r0, r6
 8007628:	4639      	mov	r1, r7
 800762a:	f7f8 fe37 	bl	800029c <__adddf3>
 800762e:	4606      	mov	r6, r0
 8007630:	460f      	mov	r7, r1
 8007632:	f7f9 fa99 	bl	8000b68 <__aeabi_d2iz>
 8007636:	2200      	movs	r2, #0
 8007638:	9000      	str	r0, [sp, #0]
 800763a:	2300      	movs	r3, #0
 800763c:	4630      	mov	r0, r6
 800763e:	4639      	mov	r1, r7
 8007640:	f7f9 fa54 	bl	8000aec <__aeabi_dcmplt>
 8007644:	b150      	cbz	r0, 800765c <_dtoa_r+0x184>
 8007646:	9800      	ldr	r0, [sp, #0]
 8007648:	f7f8 ff74 	bl	8000534 <__aeabi_i2d>
 800764c:	4632      	mov	r2, r6
 800764e:	463b      	mov	r3, r7
 8007650:	f7f9 fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 8007654:	b910      	cbnz	r0, 800765c <_dtoa_r+0x184>
 8007656:	9b00      	ldr	r3, [sp, #0]
 8007658:	3b01      	subs	r3, #1
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	9b00      	ldr	r3, [sp, #0]
 800765e:	2b16      	cmp	r3, #22
 8007660:	d85a      	bhi.n	8007718 <_dtoa_r+0x240>
 8007662:	9a00      	ldr	r2, [sp, #0]
 8007664:	4b57      	ldr	r3, [pc, #348]	; (80077c4 <_dtoa_r+0x2ec>)
 8007666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	ec51 0b19 	vmov	r0, r1, d9
 8007672:	f7f9 fa3b 	bl	8000aec <__aeabi_dcmplt>
 8007676:	2800      	cmp	r0, #0
 8007678:	d050      	beq.n	800771c <_dtoa_r+0x244>
 800767a:	9b00      	ldr	r3, [sp, #0]
 800767c:	3b01      	subs	r3, #1
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	2300      	movs	r3, #0
 8007682:	930b      	str	r3, [sp, #44]	; 0x2c
 8007684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007686:	1b5d      	subs	r5, r3, r5
 8007688:	1e6b      	subs	r3, r5, #1
 800768a:	9305      	str	r3, [sp, #20]
 800768c:	bf45      	ittet	mi
 800768e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007692:	9304      	strmi	r3, [sp, #16]
 8007694:	2300      	movpl	r3, #0
 8007696:	2300      	movmi	r3, #0
 8007698:	bf4c      	ite	mi
 800769a:	9305      	strmi	r3, [sp, #20]
 800769c:	9304      	strpl	r3, [sp, #16]
 800769e:	9b00      	ldr	r3, [sp, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	db3d      	blt.n	8007720 <_dtoa_r+0x248>
 80076a4:	9b05      	ldr	r3, [sp, #20]
 80076a6:	9a00      	ldr	r2, [sp, #0]
 80076a8:	920a      	str	r2, [sp, #40]	; 0x28
 80076aa:	4413      	add	r3, r2
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	2300      	movs	r3, #0
 80076b0:	9307      	str	r3, [sp, #28]
 80076b2:	9b06      	ldr	r3, [sp, #24]
 80076b4:	2b09      	cmp	r3, #9
 80076b6:	f200 8089 	bhi.w	80077cc <_dtoa_r+0x2f4>
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	bfc4      	itt	gt
 80076be:	3b04      	subgt	r3, #4
 80076c0:	9306      	strgt	r3, [sp, #24]
 80076c2:	9b06      	ldr	r3, [sp, #24]
 80076c4:	f1a3 0302 	sub.w	r3, r3, #2
 80076c8:	bfcc      	ite	gt
 80076ca:	2500      	movgt	r5, #0
 80076cc:	2501      	movle	r5, #1
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	f200 8087 	bhi.w	80077e2 <_dtoa_r+0x30a>
 80076d4:	e8df f003 	tbb	[pc, r3]
 80076d8:	59383a2d 	.word	0x59383a2d
 80076dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80076e0:	441d      	add	r5, r3
 80076e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	bfc1      	itttt	gt
 80076ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80076f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80076f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076fa:	bfda      	itte	le
 80076fc:	f1c3 0320 	rsble	r3, r3, #32
 8007700:	fa06 f003 	lslle.w	r0, r6, r3
 8007704:	4318      	orrgt	r0, r3
 8007706:	f7f8 ff05 	bl	8000514 <__aeabi_ui2d>
 800770a:	2301      	movs	r3, #1
 800770c:	4606      	mov	r6, r0
 800770e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007712:	3d01      	subs	r5, #1
 8007714:	930e      	str	r3, [sp, #56]	; 0x38
 8007716:	e76a      	b.n	80075ee <_dtoa_r+0x116>
 8007718:	2301      	movs	r3, #1
 800771a:	e7b2      	b.n	8007682 <_dtoa_r+0x1aa>
 800771c:	900b      	str	r0, [sp, #44]	; 0x2c
 800771e:	e7b1      	b.n	8007684 <_dtoa_r+0x1ac>
 8007720:	9b04      	ldr	r3, [sp, #16]
 8007722:	9a00      	ldr	r2, [sp, #0]
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	9304      	str	r3, [sp, #16]
 8007728:	4253      	negs	r3, r2
 800772a:	9307      	str	r3, [sp, #28]
 800772c:	2300      	movs	r3, #0
 800772e:	930a      	str	r3, [sp, #40]	; 0x28
 8007730:	e7bf      	b.n	80076b2 <_dtoa_r+0x1da>
 8007732:	2300      	movs	r3, #0
 8007734:	9308      	str	r3, [sp, #32]
 8007736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	dc55      	bgt.n	80077e8 <_dtoa_r+0x310>
 800773c:	2301      	movs	r3, #1
 800773e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007742:	461a      	mov	r2, r3
 8007744:	9209      	str	r2, [sp, #36]	; 0x24
 8007746:	e00c      	b.n	8007762 <_dtoa_r+0x28a>
 8007748:	2301      	movs	r3, #1
 800774a:	e7f3      	b.n	8007734 <_dtoa_r+0x25c>
 800774c:	2300      	movs	r3, #0
 800774e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007750:	9308      	str	r3, [sp, #32]
 8007752:	9b00      	ldr	r3, [sp, #0]
 8007754:	4413      	add	r3, r2
 8007756:	9302      	str	r3, [sp, #8]
 8007758:	3301      	adds	r3, #1
 800775a:	2b01      	cmp	r3, #1
 800775c:	9303      	str	r3, [sp, #12]
 800775e:	bfb8      	it	lt
 8007760:	2301      	movlt	r3, #1
 8007762:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007764:	2200      	movs	r2, #0
 8007766:	6042      	str	r2, [r0, #4]
 8007768:	2204      	movs	r2, #4
 800776a:	f102 0614 	add.w	r6, r2, #20
 800776e:	429e      	cmp	r6, r3
 8007770:	6841      	ldr	r1, [r0, #4]
 8007772:	d93d      	bls.n	80077f0 <_dtoa_r+0x318>
 8007774:	4620      	mov	r0, r4
 8007776:	f001 f839 	bl	80087ec <_Balloc>
 800777a:	9001      	str	r0, [sp, #4]
 800777c:	2800      	cmp	r0, #0
 800777e:	d13b      	bne.n	80077f8 <_dtoa_r+0x320>
 8007780:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <_dtoa_r+0x2f0>)
 8007782:	4602      	mov	r2, r0
 8007784:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007788:	e6c0      	b.n	800750c <_dtoa_r+0x34>
 800778a:	2301      	movs	r3, #1
 800778c:	e7df      	b.n	800774e <_dtoa_r+0x276>
 800778e:	bf00      	nop
 8007790:	636f4361 	.word	0x636f4361
 8007794:	3fd287a7 	.word	0x3fd287a7
 8007798:	8b60c8b3 	.word	0x8b60c8b3
 800779c:	3fc68a28 	.word	0x3fc68a28
 80077a0:	509f79fb 	.word	0x509f79fb
 80077a4:	3fd34413 	.word	0x3fd34413
 80077a8:	0800b5e6 	.word	0x0800b5e6
 80077ac:	0800b5fd 	.word	0x0800b5fd
 80077b0:	7ff00000 	.word	0x7ff00000
 80077b4:	0800b5e2 	.word	0x0800b5e2
 80077b8:	0800b5d9 	.word	0x0800b5d9
 80077bc:	0800b45d 	.word	0x0800b45d
 80077c0:	3ff80000 	.word	0x3ff80000
 80077c4:	0800b768 	.word	0x0800b768
 80077c8:	0800b658 	.word	0x0800b658
 80077cc:	2501      	movs	r5, #1
 80077ce:	2300      	movs	r3, #0
 80077d0:	9306      	str	r3, [sp, #24]
 80077d2:	9508      	str	r5, [sp, #32]
 80077d4:	f04f 33ff 	mov.w	r3, #4294967295
 80077d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077dc:	2200      	movs	r2, #0
 80077de:	2312      	movs	r3, #18
 80077e0:	e7b0      	b.n	8007744 <_dtoa_r+0x26c>
 80077e2:	2301      	movs	r3, #1
 80077e4:	9308      	str	r3, [sp, #32]
 80077e6:	e7f5      	b.n	80077d4 <_dtoa_r+0x2fc>
 80077e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077ee:	e7b8      	b.n	8007762 <_dtoa_r+0x28a>
 80077f0:	3101      	adds	r1, #1
 80077f2:	6041      	str	r1, [r0, #4]
 80077f4:	0052      	lsls	r2, r2, #1
 80077f6:	e7b8      	b.n	800776a <_dtoa_r+0x292>
 80077f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077fa:	9a01      	ldr	r2, [sp, #4]
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	9b03      	ldr	r3, [sp, #12]
 8007800:	2b0e      	cmp	r3, #14
 8007802:	f200 809d 	bhi.w	8007940 <_dtoa_r+0x468>
 8007806:	2d00      	cmp	r5, #0
 8007808:	f000 809a 	beq.w	8007940 <_dtoa_r+0x468>
 800780c:	9b00      	ldr	r3, [sp, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	dd32      	ble.n	8007878 <_dtoa_r+0x3a0>
 8007812:	4ab7      	ldr	r2, [pc, #732]	; (8007af0 <_dtoa_r+0x618>)
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800781c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007820:	9b00      	ldr	r3, [sp, #0]
 8007822:	05d8      	lsls	r0, r3, #23
 8007824:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007828:	d516      	bpl.n	8007858 <_dtoa_r+0x380>
 800782a:	4bb2      	ldr	r3, [pc, #712]	; (8007af4 <_dtoa_r+0x61c>)
 800782c:	ec51 0b19 	vmov	r0, r1, d9
 8007830:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007834:	f7f9 f812 	bl	800085c <__aeabi_ddiv>
 8007838:	f007 070f 	and.w	r7, r7, #15
 800783c:	4682      	mov	sl, r0
 800783e:	468b      	mov	fp, r1
 8007840:	2503      	movs	r5, #3
 8007842:	4eac      	ldr	r6, [pc, #688]	; (8007af4 <_dtoa_r+0x61c>)
 8007844:	b957      	cbnz	r7, 800785c <_dtoa_r+0x384>
 8007846:	4642      	mov	r2, r8
 8007848:	464b      	mov	r3, r9
 800784a:	4650      	mov	r0, sl
 800784c:	4659      	mov	r1, fp
 800784e:	f7f9 f805 	bl	800085c <__aeabi_ddiv>
 8007852:	4682      	mov	sl, r0
 8007854:	468b      	mov	fp, r1
 8007856:	e028      	b.n	80078aa <_dtoa_r+0x3d2>
 8007858:	2502      	movs	r5, #2
 800785a:	e7f2      	b.n	8007842 <_dtoa_r+0x36a>
 800785c:	07f9      	lsls	r1, r7, #31
 800785e:	d508      	bpl.n	8007872 <_dtoa_r+0x39a>
 8007860:	4640      	mov	r0, r8
 8007862:	4649      	mov	r1, r9
 8007864:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007868:	f7f8 fece 	bl	8000608 <__aeabi_dmul>
 800786c:	3501      	adds	r5, #1
 800786e:	4680      	mov	r8, r0
 8007870:	4689      	mov	r9, r1
 8007872:	107f      	asrs	r7, r7, #1
 8007874:	3608      	adds	r6, #8
 8007876:	e7e5      	b.n	8007844 <_dtoa_r+0x36c>
 8007878:	f000 809b 	beq.w	80079b2 <_dtoa_r+0x4da>
 800787c:	9b00      	ldr	r3, [sp, #0]
 800787e:	4f9d      	ldr	r7, [pc, #628]	; (8007af4 <_dtoa_r+0x61c>)
 8007880:	425e      	negs	r6, r3
 8007882:	4b9b      	ldr	r3, [pc, #620]	; (8007af0 <_dtoa_r+0x618>)
 8007884:	f006 020f 	and.w	r2, r6, #15
 8007888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	ec51 0b19 	vmov	r0, r1, d9
 8007894:	f7f8 feb8 	bl	8000608 <__aeabi_dmul>
 8007898:	1136      	asrs	r6, r6, #4
 800789a:	4682      	mov	sl, r0
 800789c:	468b      	mov	fp, r1
 800789e:	2300      	movs	r3, #0
 80078a0:	2502      	movs	r5, #2
 80078a2:	2e00      	cmp	r6, #0
 80078a4:	d17a      	bne.n	800799c <_dtoa_r+0x4c4>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1d3      	bne.n	8007852 <_dtoa_r+0x37a>
 80078aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 8082 	beq.w	80079b6 <_dtoa_r+0x4de>
 80078b2:	4b91      	ldr	r3, [pc, #580]	; (8007af8 <_dtoa_r+0x620>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	4650      	mov	r0, sl
 80078b8:	4659      	mov	r1, fp
 80078ba:	f7f9 f917 	bl	8000aec <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d079      	beq.n	80079b6 <_dtoa_r+0x4de>
 80078c2:	9b03      	ldr	r3, [sp, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d076      	beq.n	80079b6 <_dtoa_r+0x4de>
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	dd36      	ble.n	800793c <_dtoa_r+0x464>
 80078ce:	9b00      	ldr	r3, [sp, #0]
 80078d0:	4650      	mov	r0, sl
 80078d2:	4659      	mov	r1, fp
 80078d4:	1e5f      	subs	r7, r3, #1
 80078d6:	2200      	movs	r2, #0
 80078d8:	4b88      	ldr	r3, [pc, #544]	; (8007afc <_dtoa_r+0x624>)
 80078da:	f7f8 fe95 	bl	8000608 <__aeabi_dmul>
 80078de:	9e02      	ldr	r6, [sp, #8]
 80078e0:	4682      	mov	sl, r0
 80078e2:	468b      	mov	fp, r1
 80078e4:	3501      	adds	r5, #1
 80078e6:	4628      	mov	r0, r5
 80078e8:	f7f8 fe24 	bl	8000534 <__aeabi_i2d>
 80078ec:	4652      	mov	r2, sl
 80078ee:	465b      	mov	r3, fp
 80078f0:	f7f8 fe8a 	bl	8000608 <__aeabi_dmul>
 80078f4:	4b82      	ldr	r3, [pc, #520]	; (8007b00 <_dtoa_r+0x628>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	f7f8 fcd0 	bl	800029c <__adddf3>
 80078fc:	46d0      	mov	r8, sl
 80078fe:	46d9      	mov	r9, fp
 8007900:	4682      	mov	sl, r0
 8007902:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007906:	2e00      	cmp	r6, #0
 8007908:	d158      	bne.n	80079bc <_dtoa_r+0x4e4>
 800790a:	4b7e      	ldr	r3, [pc, #504]	; (8007b04 <_dtoa_r+0x62c>)
 800790c:	2200      	movs	r2, #0
 800790e:	4640      	mov	r0, r8
 8007910:	4649      	mov	r1, r9
 8007912:	f7f8 fcc1 	bl	8000298 <__aeabi_dsub>
 8007916:	4652      	mov	r2, sl
 8007918:	465b      	mov	r3, fp
 800791a:	4680      	mov	r8, r0
 800791c:	4689      	mov	r9, r1
 800791e:	f7f9 f903 	bl	8000b28 <__aeabi_dcmpgt>
 8007922:	2800      	cmp	r0, #0
 8007924:	f040 8295 	bne.w	8007e52 <_dtoa_r+0x97a>
 8007928:	4652      	mov	r2, sl
 800792a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800792e:	4640      	mov	r0, r8
 8007930:	4649      	mov	r1, r9
 8007932:	f7f9 f8db 	bl	8000aec <__aeabi_dcmplt>
 8007936:	2800      	cmp	r0, #0
 8007938:	f040 8289 	bne.w	8007e4e <_dtoa_r+0x976>
 800793c:	ec5b ab19 	vmov	sl, fp, d9
 8007940:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007942:	2b00      	cmp	r3, #0
 8007944:	f2c0 8148 	blt.w	8007bd8 <_dtoa_r+0x700>
 8007948:	9a00      	ldr	r2, [sp, #0]
 800794a:	2a0e      	cmp	r2, #14
 800794c:	f300 8144 	bgt.w	8007bd8 <_dtoa_r+0x700>
 8007950:	4b67      	ldr	r3, [pc, #412]	; (8007af0 <_dtoa_r+0x618>)
 8007952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007956:	e9d3 8900 	ldrd	r8, r9, [r3]
 800795a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795c:	2b00      	cmp	r3, #0
 800795e:	f280 80d5 	bge.w	8007b0c <_dtoa_r+0x634>
 8007962:	9b03      	ldr	r3, [sp, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f300 80d1 	bgt.w	8007b0c <_dtoa_r+0x634>
 800796a:	f040 826f 	bne.w	8007e4c <_dtoa_r+0x974>
 800796e:	4b65      	ldr	r3, [pc, #404]	; (8007b04 <_dtoa_r+0x62c>)
 8007970:	2200      	movs	r2, #0
 8007972:	4640      	mov	r0, r8
 8007974:	4649      	mov	r1, r9
 8007976:	f7f8 fe47 	bl	8000608 <__aeabi_dmul>
 800797a:	4652      	mov	r2, sl
 800797c:	465b      	mov	r3, fp
 800797e:	f7f9 f8c9 	bl	8000b14 <__aeabi_dcmpge>
 8007982:	9e03      	ldr	r6, [sp, #12]
 8007984:	4637      	mov	r7, r6
 8007986:	2800      	cmp	r0, #0
 8007988:	f040 8245 	bne.w	8007e16 <_dtoa_r+0x93e>
 800798c:	9d01      	ldr	r5, [sp, #4]
 800798e:	2331      	movs	r3, #49	; 0x31
 8007990:	f805 3b01 	strb.w	r3, [r5], #1
 8007994:	9b00      	ldr	r3, [sp, #0]
 8007996:	3301      	adds	r3, #1
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	e240      	b.n	8007e1e <_dtoa_r+0x946>
 800799c:	07f2      	lsls	r2, r6, #31
 800799e:	d505      	bpl.n	80079ac <_dtoa_r+0x4d4>
 80079a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a4:	f7f8 fe30 	bl	8000608 <__aeabi_dmul>
 80079a8:	3501      	adds	r5, #1
 80079aa:	2301      	movs	r3, #1
 80079ac:	1076      	asrs	r6, r6, #1
 80079ae:	3708      	adds	r7, #8
 80079b0:	e777      	b.n	80078a2 <_dtoa_r+0x3ca>
 80079b2:	2502      	movs	r5, #2
 80079b4:	e779      	b.n	80078aa <_dtoa_r+0x3d2>
 80079b6:	9f00      	ldr	r7, [sp, #0]
 80079b8:	9e03      	ldr	r6, [sp, #12]
 80079ba:	e794      	b.n	80078e6 <_dtoa_r+0x40e>
 80079bc:	9901      	ldr	r1, [sp, #4]
 80079be:	4b4c      	ldr	r3, [pc, #304]	; (8007af0 <_dtoa_r+0x618>)
 80079c0:	4431      	add	r1, r6
 80079c2:	910d      	str	r1, [sp, #52]	; 0x34
 80079c4:	9908      	ldr	r1, [sp, #32]
 80079c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079ce:	2900      	cmp	r1, #0
 80079d0:	d043      	beq.n	8007a5a <_dtoa_r+0x582>
 80079d2:	494d      	ldr	r1, [pc, #308]	; (8007b08 <_dtoa_r+0x630>)
 80079d4:	2000      	movs	r0, #0
 80079d6:	f7f8 ff41 	bl	800085c <__aeabi_ddiv>
 80079da:	4652      	mov	r2, sl
 80079dc:	465b      	mov	r3, fp
 80079de:	f7f8 fc5b 	bl	8000298 <__aeabi_dsub>
 80079e2:	9d01      	ldr	r5, [sp, #4]
 80079e4:	4682      	mov	sl, r0
 80079e6:	468b      	mov	fp, r1
 80079e8:	4649      	mov	r1, r9
 80079ea:	4640      	mov	r0, r8
 80079ec:	f7f9 f8bc 	bl	8000b68 <__aeabi_d2iz>
 80079f0:	4606      	mov	r6, r0
 80079f2:	f7f8 fd9f 	bl	8000534 <__aeabi_i2d>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4640      	mov	r0, r8
 80079fc:	4649      	mov	r1, r9
 80079fe:	f7f8 fc4b 	bl	8000298 <__aeabi_dsub>
 8007a02:	3630      	adds	r6, #48	; 0x30
 8007a04:	f805 6b01 	strb.w	r6, [r5], #1
 8007a08:	4652      	mov	r2, sl
 8007a0a:	465b      	mov	r3, fp
 8007a0c:	4680      	mov	r8, r0
 8007a0e:	4689      	mov	r9, r1
 8007a10:	f7f9 f86c 	bl	8000aec <__aeabi_dcmplt>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d163      	bne.n	8007ae0 <_dtoa_r+0x608>
 8007a18:	4642      	mov	r2, r8
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	4936      	ldr	r1, [pc, #216]	; (8007af8 <_dtoa_r+0x620>)
 8007a1e:	2000      	movs	r0, #0
 8007a20:	f7f8 fc3a 	bl	8000298 <__aeabi_dsub>
 8007a24:	4652      	mov	r2, sl
 8007a26:	465b      	mov	r3, fp
 8007a28:	f7f9 f860 	bl	8000aec <__aeabi_dcmplt>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f040 80b5 	bne.w	8007b9c <_dtoa_r+0x6c4>
 8007a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a34:	429d      	cmp	r5, r3
 8007a36:	d081      	beq.n	800793c <_dtoa_r+0x464>
 8007a38:	4b30      	ldr	r3, [pc, #192]	; (8007afc <_dtoa_r+0x624>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	4650      	mov	r0, sl
 8007a3e:	4659      	mov	r1, fp
 8007a40:	f7f8 fde2 	bl	8000608 <__aeabi_dmul>
 8007a44:	4b2d      	ldr	r3, [pc, #180]	; (8007afc <_dtoa_r+0x624>)
 8007a46:	4682      	mov	sl, r0
 8007a48:	468b      	mov	fp, r1
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f7f8 fdda 	bl	8000608 <__aeabi_dmul>
 8007a54:	4680      	mov	r8, r0
 8007a56:	4689      	mov	r9, r1
 8007a58:	e7c6      	b.n	80079e8 <_dtoa_r+0x510>
 8007a5a:	4650      	mov	r0, sl
 8007a5c:	4659      	mov	r1, fp
 8007a5e:	f7f8 fdd3 	bl	8000608 <__aeabi_dmul>
 8007a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a64:	9d01      	ldr	r5, [sp, #4]
 8007a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a68:	4682      	mov	sl, r0
 8007a6a:	468b      	mov	fp, r1
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	4640      	mov	r0, r8
 8007a70:	f7f9 f87a 	bl	8000b68 <__aeabi_d2iz>
 8007a74:	4606      	mov	r6, r0
 8007a76:	f7f8 fd5d 	bl	8000534 <__aeabi_i2d>
 8007a7a:	3630      	adds	r6, #48	; 0x30
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f8 fc08 	bl	8000298 <__aeabi_dsub>
 8007a88:	f805 6b01 	strb.w	r6, [r5], #1
 8007a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a8e:	429d      	cmp	r5, r3
 8007a90:	4680      	mov	r8, r0
 8007a92:	4689      	mov	r9, r1
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	d124      	bne.n	8007ae4 <_dtoa_r+0x60c>
 8007a9a:	4b1b      	ldr	r3, [pc, #108]	; (8007b08 <_dtoa_r+0x630>)
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	4659      	mov	r1, fp
 8007aa0:	f7f8 fbfc 	bl	800029c <__adddf3>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	4649      	mov	r1, r9
 8007aac:	f7f9 f83c 	bl	8000b28 <__aeabi_dcmpgt>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d173      	bne.n	8007b9c <_dtoa_r+0x6c4>
 8007ab4:	4652      	mov	r2, sl
 8007ab6:	465b      	mov	r3, fp
 8007ab8:	4913      	ldr	r1, [pc, #76]	; (8007b08 <_dtoa_r+0x630>)
 8007aba:	2000      	movs	r0, #0
 8007abc:	f7f8 fbec 	bl	8000298 <__aeabi_dsub>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	f7f9 f810 	bl	8000aec <__aeabi_dcmplt>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f43f af35 	beq.w	800793c <_dtoa_r+0x464>
 8007ad2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ad4:	1e6b      	subs	r3, r5, #1
 8007ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ad8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007adc:	2b30      	cmp	r3, #48	; 0x30
 8007ade:	d0f8      	beq.n	8007ad2 <_dtoa_r+0x5fa>
 8007ae0:	9700      	str	r7, [sp, #0]
 8007ae2:	e049      	b.n	8007b78 <_dtoa_r+0x6a0>
 8007ae4:	4b05      	ldr	r3, [pc, #20]	; (8007afc <_dtoa_r+0x624>)
 8007ae6:	f7f8 fd8f 	bl	8000608 <__aeabi_dmul>
 8007aea:	4680      	mov	r8, r0
 8007aec:	4689      	mov	r9, r1
 8007aee:	e7bd      	b.n	8007a6c <_dtoa_r+0x594>
 8007af0:	0800b768 	.word	0x0800b768
 8007af4:	0800b740 	.word	0x0800b740
 8007af8:	3ff00000 	.word	0x3ff00000
 8007afc:	40240000 	.word	0x40240000
 8007b00:	401c0000 	.word	0x401c0000
 8007b04:	40140000 	.word	0x40140000
 8007b08:	3fe00000 	.word	0x3fe00000
 8007b0c:	9d01      	ldr	r5, [sp, #4]
 8007b0e:	4656      	mov	r6, sl
 8007b10:	465f      	mov	r7, fp
 8007b12:	4642      	mov	r2, r8
 8007b14:	464b      	mov	r3, r9
 8007b16:	4630      	mov	r0, r6
 8007b18:	4639      	mov	r1, r7
 8007b1a:	f7f8 fe9f 	bl	800085c <__aeabi_ddiv>
 8007b1e:	f7f9 f823 	bl	8000b68 <__aeabi_d2iz>
 8007b22:	4682      	mov	sl, r0
 8007b24:	f7f8 fd06 	bl	8000534 <__aeabi_i2d>
 8007b28:	4642      	mov	r2, r8
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	f7f8 fd6c 	bl	8000608 <__aeabi_dmul>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4630      	mov	r0, r6
 8007b36:	4639      	mov	r1, r7
 8007b38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b3c:	f7f8 fbac 	bl	8000298 <__aeabi_dsub>
 8007b40:	f805 6b01 	strb.w	r6, [r5], #1
 8007b44:	9e01      	ldr	r6, [sp, #4]
 8007b46:	9f03      	ldr	r7, [sp, #12]
 8007b48:	1bae      	subs	r6, r5, r6
 8007b4a:	42b7      	cmp	r7, r6
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	d135      	bne.n	8007bbe <_dtoa_r+0x6e6>
 8007b52:	f7f8 fba3 	bl	800029c <__adddf3>
 8007b56:	4642      	mov	r2, r8
 8007b58:	464b      	mov	r3, r9
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460f      	mov	r7, r1
 8007b5e:	f7f8 ffe3 	bl	8000b28 <__aeabi_dcmpgt>
 8007b62:	b9d0      	cbnz	r0, 8007b9a <_dtoa_r+0x6c2>
 8007b64:	4642      	mov	r2, r8
 8007b66:	464b      	mov	r3, r9
 8007b68:	4630      	mov	r0, r6
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	f7f8 ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b70:	b110      	cbz	r0, 8007b78 <_dtoa_r+0x6a0>
 8007b72:	f01a 0f01 	tst.w	sl, #1
 8007b76:	d110      	bne.n	8007b9a <_dtoa_r+0x6c2>
 8007b78:	4620      	mov	r0, r4
 8007b7a:	ee18 1a10 	vmov	r1, s16
 8007b7e:	f000 fe75 	bl	800886c <_Bfree>
 8007b82:	2300      	movs	r3, #0
 8007b84:	9800      	ldr	r0, [sp, #0]
 8007b86:	702b      	strb	r3, [r5, #0]
 8007b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	6018      	str	r0, [r3, #0]
 8007b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f43f acf1 	beq.w	8007578 <_dtoa_r+0xa0>
 8007b96:	601d      	str	r5, [r3, #0]
 8007b98:	e4ee      	b.n	8007578 <_dtoa_r+0xa0>
 8007b9a:	9f00      	ldr	r7, [sp, #0]
 8007b9c:	462b      	mov	r3, r5
 8007b9e:	461d      	mov	r5, r3
 8007ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ba4:	2a39      	cmp	r2, #57	; 0x39
 8007ba6:	d106      	bne.n	8007bb6 <_dtoa_r+0x6de>
 8007ba8:	9a01      	ldr	r2, [sp, #4]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d1f7      	bne.n	8007b9e <_dtoa_r+0x6c6>
 8007bae:	9901      	ldr	r1, [sp, #4]
 8007bb0:	2230      	movs	r2, #48	; 0x30
 8007bb2:	3701      	adds	r7, #1
 8007bb4:	700a      	strb	r2, [r1, #0]
 8007bb6:	781a      	ldrb	r2, [r3, #0]
 8007bb8:	3201      	adds	r2, #1
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	e790      	b.n	8007ae0 <_dtoa_r+0x608>
 8007bbe:	4ba6      	ldr	r3, [pc, #664]	; (8007e58 <_dtoa_r+0x980>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f7f8 fd21 	bl	8000608 <__aeabi_dmul>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460f      	mov	r7, r1
 8007bce:	f7f8 ff83 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d09d      	beq.n	8007b12 <_dtoa_r+0x63a>
 8007bd6:	e7cf      	b.n	8007b78 <_dtoa_r+0x6a0>
 8007bd8:	9a08      	ldr	r2, [sp, #32]
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	f000 80d7 	beq.w	8007d8e <_dtoa_r+0x8b6>
 8007be0:	9a06      	ldr	r2, [sp, #24]
 8007be2:	2a01      	cmp	r2, #1
 8007be4:	f300 80ba 	bgt.w	8007d5c <_dtoa_r+0x884>
 8007be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	f000 80b2 	beq.w	8007d54 <_dtoa_r+0x87c>
 8007bf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bf4:	9e07      	ldr	r6, [sp, #28]
 8007bf6:	9d04      	ldr	r5, [sp, #16]
 8007bf8:	9a04      	ldr	r2, [sp, #16]
 8007bfa:	441a      	add	r2, r3
 8007bfc:	9204      	str	r2, [sp, #16]
 8007bfe:	9a05      	ldr	r2, [sp, #20]
 8007c00:	2101      	movs	r1, #1
 8007c02:	441a      	add	r2, r3
 8007c04:	4620      	mov	r0, r4
 8007c06:	9205      	str	r2, [sp, #20]
 8007c08:	f000 ff32 	bl	8008a70 <__i2b>
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	2d00      	cmp	r5, #0
 8007c10:	dd0c      	ble.n	8007c2c <_dtoa_r+0x754>
 8007c12:	9b05      	ldr	r3, [sp, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dd09      	ble.n	8007c2c <_dtoa_r+0x754>
 8007c18:	42ab      	cmp	r3, r5
 8007c1a:	9a04      	ldr	r2, [sp, #16]
 8007c1c:	bfa8      	it	ge
 8007c1e:	462b      	movge	r3, r5
 8007c20:	1ad2      	subs	r2, r2, r3
 8007c22:	9204      	str	r2, [sp, #16]
 8007c24:	9a05      	ldr	r2, [sp, #20]
 8007c26:	1aed      	subs	r5, r5, r3
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	9305      	str	r3, [sp, #20]
 8007c2c:	9b07      	ldr	r3, [sp, #28]
 8007c2e:	b31b      	cbz	r3, 8007c78 <_dtoa_r+0x7a0>
 8007c30:	9b08      	ldr	r3, [sp, #32]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80af 	beq.w	8007d96 <_dtoa_r+0x8be>
 8007c38:	2e00      	cmp	r6, #0
 8007c3a:	dd13      	ble.n	8007c64 <_dtoa_r+0x78c>
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	4632      	mov	r2, r6
 8007c40:	4620      	mov	r0, r4
 8007c42:	f000 ffd5 	bl	8008bf0 <__pow5mult>
 8007c46:	ee18 2a10 	vmov	r2, s16
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 ff24 	bl	8008a9c <__multiply>
 8007c54:	ee18 1a10 	vmov	r1, s16
 8007c58:	4680      	mov	r8, r0
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 fe06 	bl	800886c <_Bfree>
 8007c60:	ee08 8a10 	vmov	s16, r8
 8007c64:	9b07      	ldr	r3, [sp, #28]
 8007c66:	1b9a      	subs	r2, r3, r6
 8007c68:	d006      	beq.n	8007c78 <_dtoa_r+0x7a0>
 8007c6a:	ee18 1a10 	vmov	r1, s16
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 ffbe 	bl	8008bf0 <__pow5mult>
 8007c74:	ee08 0a10 	vmov	s16, r0
 8007c78:	2101      	movs	r1, #1
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 fef8 	bl	8008a70 <__i2b>
 8007c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	4606      	mov	r6, r0
 8007c86:	f340 8088 	ble.w	8007d9a <_dtoa_r+0x8c2>
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4601      	mov	r1, r0
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 ffae 	bl	8008bf0 <__pow5mult>
 8007c94:	9b06      	ldr	r3, [sp, #24]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	4606      	mov	r6, r0
 8007c9a:	f340 8081 	ble.w	8007da0 <_dtoa_r+0x8c8>
 8007c9e:	f04f 0800 	mov.w	r8, #0
 8007ca2:	6933      	ldr	r3, [r6, #16]
 8007ca4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ca8:	6918      	ldr	r0, [r3, #16]
 8007caa:	f000 fe91 	bl	80089d0 <__hi0bits>
 8007cae:	f1c0 0020 	rsb	r0, r0, #32
 8007cb2:	9b05      	ldr	r3, [sp, #20]
 8007cb4:	4418      	add	r0, r3
 8007cb6:	f010 001f 	ands.w	r0, r0, #31
 8007cba:	f000 8092 	beq.w	8007de2 <_dtoa_r+0x90a>
 8007cbe:	f1c0 0320 	rsb	r3, r0, #32
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	f340 808a 	ble.w	8007ddc <_dtoa_r+0x904>
 8007cc8:	f1c0 001c 	rsb	r0, r0, #28
 8007ccc:	9b04      	ldr	r3, [sp, #16]
 8007cce:	4403      	add	r3, r0
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	9b05      	ldr	r3, [sp, #20]
 8007cd4:	4403      	add	r3, r0
 8007cd6:	4405      	add	r5, r0
 8007cd8:	9305      	str	r3, [sp, #20]
 8007cda:	9b04      	ldr	r3, [sp, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	dd07      	ble.n	8007cf0 <_dtoa_r+0x818>
 8007ce0:	ee18 1a10 	vmov	r1, s16
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f000 ffdc 	bl	8008ca4 <__lshift>
 8007cec:	ee08 0a10 	vmov	s16, r0
 8007cf0:	9b05      	ldr	r3, [sp, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	dd05      	ble.n	8007d02 <_dtoa_r+0x82a>
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 ffd2 	bl	8008ca4 <__lshift>
 8007d00:	4606      	mov	r6, r0
 8007d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d06e      	beq.n	8007de6 <_dtoa_r+0x90e>
 8007d08:	ee18 0a10 	vmov	r0, s16
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	f001 f839 	bl	8008d84 <__mcmp>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	da67      	bge.n	8007de6 <_dtoa_r+0x90e>
 8007d16:	9b00      	ldr	r3, [sp, #0]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	ee18 1a10 	vmov	r1, s16
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	220a      	movs	r2, #10
 8007d22:	2300      	movs	r3, #0
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 fdc3 	bl	80088b0 <__multadd>
 8007d2a:	9b08      	ldr	r3, [sp, #32]
 8007d2c:	ee08 0a10 	vmov	s16, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 81b1 	beq.w	8008098 <_dtoa_r+0xbc0>
 8007d36:	2300      	movs	r3, #0
 8007d38:	4639      	mov	r1, r7
 8007d3a:	220a      	movs	r2, #10
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f000 fdb7 	bl	80088b0 <__multadd>
 8007d42:	9b02      	ldr	r3, [sp, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	4607      	mov	r7, r0
 8007d48:	f300 808e 	bgt.w	8007e68 <_dtoa_r+0x990>
 8007d4c:	9b06      	ldr	r3, [sp, #24]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	dc51      	bgt.n	8007df6 <_dtoa_r+0x91e>
 8007d52:	e089      	b.n	8007e68 <_dtoa_r+0x990>
 8007d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d5a:	e74b      	b.n	8007bf4 <_dtoa_r+0x71c>
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	1e5e      	subs	r6, r3, #1
 8007d60:	9b07      	ldr	r3, [sp, #28]
 8007d62:	42b3      	cmp	r3, r6
 8007d64:	bfbf      	itttt	lt
 8007d66:	9b07      	ldrlt	r3, [sp, #28]
 8007d68:	9607      	strlt	r6, [sp, #28]
 8007d6a:	1af2      	sublt	r2, r6, r3
 8007d6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d6e:	bfb6      	itet	lt
 8007d70:	189b      	addlt	r3, r3, r2
 8007d72:	1b9e      	subge	r6, r3, r6
 8007d74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	bfb8      	it	lt
 8007d7a:	2600      	movlt	r6, #0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	bfb7      	itett	lt
 8007d80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d88:	1a9d      	sublt	r5, r3, r2
 8007d8a:	2300      	movlt	r3, #0
 8007d8c:	e734      	b.n	8007bf8 <_dtoa_r+0x720>
 8007d8e:	9e07      	ldr	r6, [sp, #28]
 8007d90:	9d04      	ldr	r5, [sp, #16]
 8007d92:	9f08      	ldr	r7, [sp, #32]
 8007d94:	e73b      	b.n	8007c0e <_dtoa_r+0x736>
 8007d96:	9a07      	ldr	r2, [sp, #28]
 8007d98:	e767      	b.n	8007c6a <_dtoa_r+0x792>
 8007d9a:	9b06      	ldr	r3, [sp, #24]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	dc18      	bgt.n	8007dd2 <_dtoa_r+0x8fa>
 8007da0:	f1ba 0f00 	cmp.w	sl, #0
 8007da4:	d115      	bne.n	8007dd2 <_dtoa_r+0x8fa>
 8007da6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007daa:	b993      	cbnz	r3, 8007dd2 <_dtoa_r+0x8fa>
 8007dac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007db0:	0d1b      	lsrs	r3, r3, #20
 8007db2:	051b      	lsls	r3, r3, #20
 8007db4:	b183      	cbz	r3, 8007dd8 <_dtoa_r+0x900>
 8007db6:	9b04      	ldr	r3, [sp, #16]
 8007db8:	3301      	adds	r3, #1
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	9b05      	ldr	r3, [sp, #20]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	9305      	str	r3, [sp, #20]
 8007dc2:	f04f 0801 	mov.w	r8, #1
 8007dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f47f af6a 	bne.w	8007ca2 <_dtoa_r+0x7ca>
 8007dce:	2001      	movs	r0, #1
 8007dd0:	e76f      	b.n	8007cb2 <_dtoa_r+0x7da>
 8007dd2:	f04f 0800 	mov.w	r8, #0
 8007dd6:	e7f6      	b.n	8007dc6 <_dtoa_r+0x8ee>
 8007dd8:	4698      	mov	r8, r3
 8007dda:	e7f4      	b.n	8007dc6 <_dtoa_r+0x8ee>
 8007ddc:	f43f af7d 	beq.w	8007cda <_dtoa_r+0x802>
 8007de0:	4618      	mov	r0, r3
 8007de2:	301c      	adds	r0, #28
 8007de4:	e772      	b.n	8007ccc <_dtoa_r+0x7f4>
 8007de6:	9b03      	ldr	r3, [sp, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	dc37      	bgt.n	8007e5c <_dtoa_r+0x984>
 8007dec:	9b06      	ldr	r3, [sp, #24]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	dd34      	ble.n	8007e5c <_dtoa_r+0x984>
 8007df2:	9b03      	ldr	r3, [sp, #12]
 8007df4:	9302      	str	r3, [sp, #8]
 8007df6:	9b02      	ldr	r3, [sp, #8]
 8007df8:	b96b      	cbnz	r3, 8007e16 <_dtoa_r+0x93e>
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	2205      	movs	r2, #5
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fd56 	bl	80088b0 <__multadd>
 8007e04:	4601      	mov	r1, r0
 8007e06:	4606      	mov	r6, r0
 8007e08:	ee18 0a10 	vmov	r0, s16
 8007e0c:	f000 ffba 	bl	8008d84 <__mcmp>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	f73f adbb 	bgt.w	800798c <_dtoa_r+0x4b4>
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	9d01      	ldr	r5, [sp, #4]
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	f04f 0800 	mov.w	r8, #0
 8007e22:	4631      	mov	r1, r6
 8007e24:	4620      	mov	r0, r4
 8007e26:	f000 fd21 	bl	800886c <_Bfree>
 8007e2a:	2f00      	cmp	r7, #0
 8007e2c:	f43f aea4 	beq.w	8007b78 <_dtoa_r+0x6a0>
 8007e30:	f1b8 0f00 	cmp.w	r8, #0
 8007e34:	d005      	beq.n	8007e42 <_dtoa_r+0x96a>
 8007e36:	45b8      	cmp	r8, r7
 8007e38:	d003      	beq.n	8007e42 <_dtoa_r+0x96a>
 8007e3a:	4641      	mov	r1, r8
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f000 fd15 	bl	800886c <_Bfree>
 8007e42:	4639      	mov	r1, r7
 8007e44:	4620      	mov	r0, r4
 8007e46:	f000 fd11 	bl	800886c <_Bfree>
 8007e4a:	e695      	b.n	8007b78 <_dtoa_r+0x6a0>
 8007e4c:	2600      	movs	r6, #0
 8007e4e:	4637      	mov	r7, r6
 8007e50:	e7e1      	b.n	8007e16 <_dtoa_r+0x93e>
 8007e52:	9700      	str	r7, [sp, #0]
 8007e54:	4637      	mov	r7, r6
 8007e56:	e599      	b.n	800798c <_dtoa_r+0x4b4>
 8007e58:	40240000 	.word	0x40240000
 8007e5c:	9b08      	ldr	r3, [sp, #32]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 80ca 	beq.w	8007ff8 <_dtoa_r+0xb20>
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	9302      	str	r3, [sp, #8]
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	dd05      	ble.n	8007e78 <_dtoa_r+0x9a0>
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	462a      	mov	r2, r5
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 ff17 	bl	8008ca4 <__lshift>
 8007e76:	4607      	mov	r7, r0
 8007e78:	f1b8 0f00 	cmp.w	r8, #0
 8007e7c:	d05b      	beq.n	8007f36 <_dtoa_r+0xa5e>
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 fcb3 	bl	80087ec <_Balloc>
 8007e86:	4605      	mov	r5, r0
 8007e88:	b928      	cbnz	r0, 8007e96 <_dtoa_r+0x9be>
 8007e8a:	4b87      	ldr	r3, [pc, #540]	; (80080a8 <_dtoa_r+0xbd0>)
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e92:	f7ff bb3b 	b.w	800750c <_dtoa_r+0x34>
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	3202      	adds	r2, #2
 8007e9a:	0092      	lsls	r2, r2, #2
 8007e9c:	f107 010c 	add.w	r1, r7, #12
 8007ea0:	300c      	adds	r0, #12
 8007ea2:	f000 fc95 	bl	80087d0 <memcpy>
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fefa 	bl	8008ca4 <__lshift>
 8007eb0:	9b01      	ldr	r3, [sp, #4]
 8007eb2:	f103 0901 	add.w	r9, r3, #1
 8007eb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007eba:	4413      	add	r3, r2
 8007ebc:	9305      	str	r3, [sp, #20]
 8007ebe:	f00a 0301 	and.w	r3, sl, #1
 8007ec2:	46b8      	mov	r8, r7
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	4607      	mov	r7, r0
 8007ec8:	4631      	mov	r1, r6
 8007eca:	ee18 0a10 	vmov	r0, s16
 8007ece:	f7ff fa75 	bl	80073bc <quorem>
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	9002      	str	r0, [sp, #8]
 8007ed6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007eda:	ee18 0a10 	vmov	r0, s16
 8007ede:	f000 ff51 	bl	8008d84 <__mcmp>
 8007ee2:	463a      	mov	r2, r7
 8007ee4:	9003      	str	r0, [sp, #12]
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 ff67 	bl	8008dbc <__mdiff>
 8007eee:	68c2      	ldr	r2, [r0, #12]
 8007ef0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	bb02      	cbnz	r2, 8007f3a <_dtoa_r+0xa62>
 8007ef8:	4601      	mov	r1, r0
 8007efa:	ee18 0a10 	vmov	r0, s16
 8007efe:	f000 ff41 	bl	8008d84 <__mcmp>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4629      	mov	r1, r5
 8007f06:	4620      	mov	r0, r4
 8007f08:	9207      	str	r2, [sp, #28]
 8007f0a:	f000 fcaf 	bl	800886c <_Bfree>
 8007f0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f12:	ea43 0102 	orr.w	r1, r3, r2
 8007f16:	9b04      	ldr	r3, [sp, #16]
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	464d      	mov	r5, r9
 8007f1c:	d10f      	bne.n	8007f3e <_dtoa_r+0xa66>
 8007f1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f22:	d02a      	beq.n	8007f7a <_dtoa_r+0xaa2>
 8007f24:	9b03      	ldr	r3, [sp, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dd02      	ble.n	8007f30 <_dtoa_r+0xa58>
 8007f2a:	9b02      	ldr	r3, [sp, #8]
 8007f2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f30:	f88b a000 	strb.w	sl, [fp]
 8007f34:	e775      	b.n	8007e22 <_dtoa_r+0x94a>
 8007f36:	4638      	mov	r0, r7
 8007f38:	e7ba      	b.n	8007eb0 <_dtoa_r+0x9d8>
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	e7e2      	b.n	8007f04 <_dtoa_r+0xa2c>
 8007f3e:	9b03      	ldr	r3, [sp, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	db04      	blt.n	8007f4e <_dtoa_r+0xa76>
 8007f44:	9906      	ldr	r1, [sp, #24]
 8007f46:	430b      	orrs	r3, r1
 8007f48:	9904      	ldr	r1, [sp, #16]
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	d122      	bne.n	8007f94 <_dtoa_r+0xabc>
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	ddee      	ble.n	8007f30 <_dtoa_r+0xa58>
 8007f52:	ee18 1a10 	vmov	r1, s16
 8007f56:	2201      	movs	r2, #1
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fea3 	bl	8008ca4 <__lshift>
 8007f5e:	4631      	mov	r1, r6
 8007f60:	ee08 0a10 	vmov	s16, r0
 8007f64:	f000 ff0e 	bl	8008d84 <__mcmp>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	dc03      	bgt.n	8007f74 <_dtoa_r+0xa9c>
 8007f6c:	d1e0      	bne.n	8007f30 <_dtoa_r+0xa58>
 8007f6e:	f01a 0f01 	tst.w	sl, #1
 8007f72:	d0dd      	beq.n	8007f30 <_dtoa_r+0xa58>
 8007f74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f78:	d1d7      	bne.n	8007f2a <_dtoa_r+0xa52>
 8007f7a:	2339      	movs	r3, #57	; 0x39
 8007f7c:	f88b 3000 	strb.w	r3, [fp]
 8007f80:	462b      	mov	r3, r5
 8007f82:	461d      	mov	r5, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f8a:	2a39      	cmp	r2, #57	; 0x39
 8007f8c:	d071      	beq.n	8008072 <_dtoa_r+0xb9a>
 8007f8e:	3201      	adds	r2, #1
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	e746      	b.n	8007e22 <_dtoa_r+0x94a>
 8007f94:	2a00      	cmp	r2, #0
 8007f96:	dd07      	ble.n	8007fa8 <_dtoa_r+0xad0>
 8007f98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f9c:	d0ed      	beq.n	8007f7a <_dtoa_r+0xaa2>
 8007f9e:	f10a 0301 	add.w	r3, sl, #1
 8007fa2:	f88b 3000 	strb.w	r3, [fp]
 8007fa6:	e73c      	b.n	8007e22 <_dtoa_r+0x94a>
 8007fa8:	9b05      	ldr	r3, [sp, #20]
 8007faa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007fae:	4599      	cmp	r9, r3
 8007fb0:	d047      	beq.n	8008042 <_dtoa_r+0xb6a>
 8007fb2:	ee18 1a10 	vmov	r1, s16
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	220a      	movs	r2, #10
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fc78 	bl	80088b0 <__multadd>
 8007fc0:	45b8      	cmp	r8, r7
 8007fc2:	ee08 0a10 	vmov	s16, r0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	f04f 020a 	mov.w	r2, #10
 8007fce:	4641      	mov	r1, r8
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	d106      	bne.n	8007fe2 <_dtoa_r+0xb0a>
 8007fd4:	f000 fc6c 	bl	80088b0 <__multadd>
 8007fd8:	4680      	mov	r8, r0
 8007fda:	4607      	mov	r7, r0
 8007fdc:	f109 0901 	add.w	r9, r9, #1
 8007fe0:	e772      	b.n	8007ec8 <_dtoa_r+0x9f0>
 8007fe2:	f000 fc65 	bl	80088b0 <__multadd>
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	4680      	mov	r8, r0
 8007fea:	2300      	movs	r3, #0
 8007fec:	220a      	movs	r2, #10
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 fc5e 	bl	80088b0 <__multadd>
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	e7f1      	b.n	8007fdc <_dtoa_r+0xb04>
 8007ff8:	9b03      	ldr	r3, [sp, #12]
 8007ffa:	9302      	str	r3, [sp, #8]
 8007ffc:	9d01      	ldr	r5, [sp, #4]
 8007ffe:	ee18 0a10 	vmov	r0, s16
 8008002:	4631      	mov	r1, r6
 8008004:	f7ff f9da 	bl	80073bc <quorem>
 8008008:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800800c:	9b01      	ldr	r3, [sp, #4]
 800800e:	f805 ab01 	strb.w	sl, [r5], #1
 8008012:	1aea      	subs	r2, r5, r3
 8008014:	9b02      	ldr	r3, [sp, #8]
 8008016:	4293      	cmp	r3, r2
 8008018:	dd09      	ble.n	800802e <_dtoa_r+0xb56>
 800801a:	ee18 1a10 	vmov	r1, s16
 800801e:	2300      	movs	r3, #0
 8008020:	220a      	movs	r2, #10
 8008022:	4620      	mov	r0, r4
 8008024:	f000 fc44 	bl	80088b0 <__multadd>
 8008028:	ee08 0a10 	vmov	s16, r0
 800802c:	e7e7      	b.n	8007ffe <_dtoa_r+0xb26>
 800802e:	9b02      	ldr	r3, [sp, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	bfc8      	it	gt
 8008034:	461d      	movgt	r5, r3
 8008036:	9b01      	ldr	r3, [sp, #4]
 8008038:	bfd8      	it	le
 800803a:	2501      	movle	r5, #1
 800803c:	441d      	add	r5, r3
 800803e:	f04f 0800 	mov.w	r8, #0
 8008042:	ee18 1a10 	vmov	r1, s16
 8008046:	2201      	movs	r2, #1
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fe2b 	bl	8008ca4 <__lshift>
 800804e:	4631      	mov	r1, r6
 8008050:	ee08 0a10 	vmov	s16, r0
 8008054:	f000 fe96 	bl	8008d84 <__mcmp>
 8008058:	2800      	cmp	r0, #0
 800805a:	dc91      	bgt.n	8007f80 <_dtoa_r+0xaa8>
 800805c:	d102      	bne.n	8008064 <_dtoa_r+0xb8c>
 800805e:	f01a 0f01 	tst.w	sl, #1
 8008062:	d18d      	bne.n	8007f80 <_dtoa_r+0xaa8>
 8008064:	462b      	mov	r3, r5
 8008066:	461d      	mov	r5, r3
 8008068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800806c:	2a30      	cmp	r2, #48	; 0x30
 800806e:	d0fa      	beq.n	8008066 <_dtoa_r+0xb8e>
 8008070:	e6d7      	b.n	8007e22 <_dtoa_r+0x94a>
 8008072:	9a01      	ldr	r2, [sp, #4]
 8008074:	429a      	cmp	r2, r3
 8008076:	d184      	bne.n	8007f82 <_dtoa_r+0xaaa>
 8008078:	9b00      	ldr	r3, [sp, #0]
 800807a:	3301      	adds	r3, #1
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	2331      	movs	r3, #49	; 0x31
 8008080:	7013      	strb	r3, [r2, #0]
 8008082:	e6ce      	b.n	8007e22 <_dtoa_r+0x94a>
 8008084:	4b09      	ldr	r3, [pc, #36]	; (80080ac <_dtoa_r+0xbd4>)
 8008086:	f7ff ba95 	b.w	80075b4 <_dtoa_r+0xdc>
 800808a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800808c:	2b00      	cmp	r3, #0
 800808e:	f47f aa6e 	bne.w	800756e <_dtoa_r+0x96>
 8008092:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <_dtoa_r+0xbd8>)
 8008094:	f7ff ba8e 	b.w	80075b4 <_dtoa_r+0xdc>
 8008098:	9b02      	ldr	r3, [sp, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	dcae      	bgt.n	8007ffc <_dtoa_r+0xb24>
 800809e:	9b06      	ldr	r3, [sp, #24]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	f73f aea8 	bgt.w	8007df6 <_dtoa_r+0x91e>
 80080a6:	e7a9      	b.n	8007ffc <_dtoa_r+0xb24>
 80080a8:	0800b658 	.word	0x0800b658
 80080ac:	0800b45c 	.word	0x0800b45c
 80080b0:	0800b5d9 	.word	0x0800b5d9

080080b4 <rshift>:
 80080b4:	6903      	ldr	r3, [r0, #16]
 80080b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80080ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80080c2:	f100 0414 	add.w	r4, r0, #20
 80080c6:	dd45      	ble.n	8008154 <rshift+0xa0>
 80080c8:	f011 011f 	ands.w	r1, r1, #31
 80080cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80080d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80080d4:	d10c      	bne.n	80080f0 <rshift+0x3c>
 80080d6:	f100 0710 	add.w	r7, r0, #16
 80080da:	4629      	mov	r1, r5
 80080dc:	42b1      	cmp	r1, r6
 80080de:	d334      	bcc.n	800814a <rshift+0x96>
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	1eea      	subs	r2, r5, #3
 80080e6:	4296      	cmp	r6, r2
 80080e8:	bf38      	it	cc
 80080ea:	2300      	movcc	r3, #0
 80080ec:	4423      	add	r3, r4
 80080ee:	e015      	b.n	800811c <rshift+0x68>
 80080f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80080f4:	f1c1 0820 	rsb	r8, r1, #32
 80080f8:	40cf      	lsrs	r7, r1
 80080fa:	f105 0e04 	add.w	lr, r5, #4
 80080fe:	46a1      	mov	r9, r4
 8008100:	4576      	cmp	r6, lr
 8008102:	46f4      	mov	ip, lr
 8008104:	d815      	bhi.n	8008132 <rshift+0x7e>
 8008106:	1a9a      	subs	r2, r3, r2
 8008108:	0092      	lsls	r2, r2, #2
 800810a:	3a04      	subs	r2, #4
 800810c:	3501      	adds	r5, #1
 800810e:	42ae      	cmp	r6, r5
 8008110:	bf38      	it	cc
 8008112:	2200      	movcc	r2, #0
 8008114:	18a3      	adds	r3, r4, r2
 8008116:	50a7      	str	r7, [r4, r2]
 8008118:	b107      	cbz	r7, 800811c <rshift+0x68>
 800811a:	3304      	adds	r3, #4
 800811c:	1b1a      	subs	r2, r3, r4
 800811e:	42a3      	cmp	r3, r4
 8008120:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008124:	bf08      	it	eq
 8008126:	2300      	moveq	r3, #0
 8008128:	6102      	str	r2, [r0, #16]
 800812a:	bf08      	it	eq
 800812c:	6143      	streq	r3, [r0, #20]
 800812e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008132:	f8dc c000 	ldr.w	ip, [ip]
 8008136:	fa0c fc08 	lsl.w	ip, ip, r8
 800813a:	ea4c 0707 	orr.w	r7, ip, r7
 800813e:	f849 7b04 	str.w	r7, [r9], #4
 8008142:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008146:	40cf      	lsrs	r7, r1
 8008148:	e7da      	b.n	8008100 <rshift+0x4c>
 800814a:	f851 cb04 	ldr.w	ip, [r1], #4
 800814e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008152:	e7c3      	b.n	80080dc <rshift+0x28>
 8008154:	4623      	mov	r3, r4
 8008156:	e7e1      	b.n	800811c <rshift+0x68>

08008158 <__hexdig_fun>:
 8008158:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800815c:	2b09      	cmp	r3, #9
 800815e:	d802      	bhi.n	8008166 <__hexdig_fun+0xe>
 8008160:	3820      	subs	r0, #32
 8008162:	b2c0      	uxtb	r0, r0
 8008164:	4770      	bx	lr
 8008166:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800816a:	2b05      	cmp	r3, #5
 800816c:	d801      	bhi.n	8008172 <__hexdig_fun+0x1a>
 800816e:	3847      	subs	r0, #71	; 0x47
 8008170:	e7f7      	b.n	8008162 <__hexdig_fun+0xa>
 8008172:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008176:	2b05      	cmp	r3, #5
 8008178:	d801      	bhi.n	800817e <__hexdig_fun+0x26>
 800817a:	3827      	subs	r0, #39	; 0x27
 800817c:	e7f1      	b.n	8008162 <__hexdig_fun+0xa>
 800817e:	2000      	movs	r0, #0
 8008180:	4770      	bx	lr
	...

08008184 <__gethex>:
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	ed2d 8b02 	vpush	{d8}
 800818c:	b089      	sub	sp, #36	; 0x24
 800818e:	ee08 0a10 	vmov	s16, r0
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	4bb4      	ldr	r3, [pc, #720]	; (8008468 <__gethex+0x2e4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	4618      	mov	r0, r3
 800819c:	468b      	mov	fp, r1
 800819e:	4690      	mov	r8, r2
 80081a0:	f7f8 f81e 	bl	80001e0 <strlen>
 80081a4:	9b01      	ldr	r3, [sp, #4]
 80081a6:	f8db 2000 	ldr.w	r2, [fp]
 80081aa:	4403      	add	r3, r0
 80081ac:	4682      	mov	sl, r0
 80081ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	1c93      	adds	r3, r2, #2
 80081b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80081ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80081be:	32fe      	adds	r2, #254	; 0xfe
 80081c0:	18d1      	adds	r1, r2, r3
 80081c2:	461f      	mov	r7, r3
 80081c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80081c8:	9100      	str	r1, [sp, #0]
 80081ca:	2830      	cmp	r0, #48	; 0x30
 80081cc:	d0f8      	beq.n	80081c0 <__gethex+0x3c>
 80081ce:	f7ff ffc3 	bl	8008158 <__hexdig_fun>
 80081d2:	4604      	mov	r4, r0
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d13a      	bne.n	800824e <__gethex+0xca>
 80081d8:	9901      	ldr	r1, [sp, #4]
 80081da:	4652      	mov	r2, sl
 80081dc:	4638      	mov	r0, r7
 80081de:	f001 fa33 	bl	8009648 <strncmp>
 80081e2:	4605      	mov	r5, r0
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d168      	bne.n	80082ba <__gethex+0x136>
 80081e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80081ec:	eb07 060a 	add.w	r6, r7, sl
 80081f0:	f7ff ffb2 	bl	8008158 <__hexdig_fun>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d062      	beq.n	80082be <__gethex+0x13a>
 80081f8:	4633      	mov	r3, r6
 80081fa:	7818      	ldrb	r0, [r3, #0]
 80081fc:	2830      	cmp	r0, #48	; 0x30
 80081fe:	461f      	mov	r7, r3
 8008200:	f103 0301 	add.w	r3, r3, #1
 8008204:	d0f9      	beq.n	80081fa <__gethex+0x76>
 8008206:	f7ff ffa7 	bl	8008158 <__hexdig_fun>
 800820a:	2301      	movs	r3, #1
 800820c:	fab0 f480 	clz	r4, r0
 8008210:	0964      	lsrs	r4, r4, #5
 8008212:	4635      	mov	r5, r6
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	463a      	mov	r2, r7
 8008218:	4616      	mov	r6, r2
 800821a:	3201      	adds	r2, #1
 800821c:	7830      	ldrb	r0, [r6, #0]
 800821e:	f7ff ff9b 	bl	8008158 <__hexdig_fun>
 8008222:	2800      	cmp	r0, #0
 8008224:	d1f8      	bne.n	8008218 <__gethex+0x94>
 8008226:	9901      	ldr	r1, [sp, #4]
 8008228:	4652      	mov	r2, sl
 800822a:	4630      	mov	r0, r6
 800822c:	f001 fa0c 	bl	8009648 <strncmp>
 8008230:	b980      	cbnz	r0, 8008254 <__gethex+0xd0>
 8008232:	b94d      	cbnz	r5, 8008248 <__gethex+0xc4>
 8008234:	eb06 050a 	add.w	r5, r6, sl
 8008238:	462a      	mov	r2, r5
 800823a:	4616      	mov	r6, r2
 800823c:	3201      	adds	r2, #1
 800823e:	7830      	ldrb	r0, [r6, #0]
 8008240:	f7ff ff8a 	bl	8008158 <__hexdig_fun>
 8008244:	2800      	cmp	r0, #0
 8008246:	d1f8      	bne.n	800823a <__gethex+0xb6>
 8008248:	1bad      	subs	r5, r5, r6
 800824a:	00ad      	lsls	r5, r5, #2
 800824c:	e004      	b.n	8008258 <__gethex+0xd4>
 800824e:	2400      	movs	r4, #0
 8008250:	4625      	mov	r5, r4
 8008252:	e7e0      	b.n	8008216 <__gethex+0x92>
 8008254:	2d00      	cmp	r5, #0
 8008256:	d1f7      	bne.n	8008248 <__gethex+0xc4>
 8008258:	7833      	ldrb	r3, [r6, #0]
 800825a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800825e:	2b50      	cmp	r3, #80	; 0x50
 8008260:	d13b      	bne.n	80082da <__gethex+0x156>
 8008262:	7873      	ldrb	r3, [r6, #1]
 8008264:	2b2b      	cmp	r3, #43	; 0x2b
 8008266:	d02c      	beq.n	80082c2 <__gethex+0x13e>
 8008268:	2b2d      	cmp	r3, #45	; 0x2d
 800826a:	d02e      	beq.n	80082ca <__gethex+0x146>
 800826c:	1c71      	adds	r1, r6, #1
 800826e:	f04f 0900 	mov.w	r9, #0
 8008272:	7808      	ldrb	r0, [r1, #0]
 8008274:	f7ff ff70 	bl	8008158 <__hexdig_fun>
 8008278:	1e43      	subs	r3, r0, #1
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b18      	cmp	r3, #24
 800827e:	d82c      	bhi.n	80082da <__gethex+0x156>
 8008280:	f1a0 0210 	sub.w	r2, r0, #16
 8008284:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008288:	f7ff ff66 	bl	8008158 <__hexdig_fun>
 800828c:	1e43      	subs	r3, r0, #1
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b18      	cmp	r3, #24
 8008292:	d91d      	bls.n	80082d0 <__gethex+0x14c>
 8008294:	f1b9 0f00 	cmp.w	r9, #0
 8008298:	d000      	beq.n	800829c <__gethex+0x118>
 800829a:	4252      	negs	r2, r2
 800829c:	4415      	add	r5, r2
 800829e:	f8cb 1000 	str.w	r1, [fp]
 80082a2:	b1e4      	cbz	r4, 80082de <__gethex+0x15a>
 80082a4:	9b00      	ldr	r3, [sp, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bf14      	ite	ne
 80082aa:	2700      	movne	r7, #0
 80082ac:	2706      	moveq	r7, #6
 80082ae:	4638      	mov	r0, r7
 80082b0:	b009      	add	sp, #36	; 0x24
 80082b2:	ecbd 8b02 	vpop	{d8}
 80082b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ba:	463e      	mov	r6, r7
 80082bc:	4625      	mov	r5, r4
 80082be:	2401      	movs	r4, #1
 80082c0:	e7ca      	b.n	8008258 <__gethex+0xd4>
 80082c2:	f04f 0900 	mov.w	r9, #0
 80082c6:	1cb1      	adds	r1, r6, #2
 80082c8:	e7d3      	b.n	8008272 <__gethex+0xee>
 80082ca:	f04f 0901 	mov.w	r9, #1
 80082ce:	e7fa      	b.n	80082c6 <__gethex+0x142>
 80082d0:	230a      	movs	r3, #10
 80082d2:	fb03 0202 	mla	r2, r3, r2, r0
 80082d6:	3a10      	subs	r2, #16
 80082d8:	e7d4      	b.n	8008284 <__gethex+0x100>
 80082da:	4631      	mov	r1, r6
 80082dc:	e7df      	b.n	800829e <__gethex+0x11a>
 80082de:	1bf3      	subs	r3, r6, r7
 80082e0:	3b01      	subs	r3, #1
 80082e2:	4621      	mov	r1, r4
 80082e4:	2b07      	cmp	r3, #7
 80082e6:	dc0b      	bgt.n	8008300 <__gethex+0x17c>
 80082e8:	ee18 0a10 	vmov	r0, s16
 80082ec:	f000 fa7e 	bl	80087ec <_Balloc>
 80082f0:	4604      	mov	r4, r0
 80082f2:	b940      	cbnz	r0, 8008306 <__gethex+0x182>
 80082f4:	4b5d      	ldr	r3, [pc, #372]	; (800846c <__gethex+0x2e8>)
 80082f6:	4602      	mov	r2, r0
 80082f8:	21de      	movs	r1, #222	; 0xde
 80082fa:	485d      	ldr	r0, [pc, #372]	; (8008470 <__gethex+0x2ec>)
 80082fc:	f001 f9c6 	bl	800968c <__assert_func>
 8008300:	3101      	adds	r1, #1
 8008302:	105b      	asrs	r3, r3, #1
 8008304:	e7ee      	b.n	80082e4 <__gethex+0x160>
 8008306:	f100 0914 	add.w	r9, r0, #20
 800830a:	f04f 0b00 	mov.w	fp, #0
 800830e:	f1ca 0301 	rsb	r3, sl, #1
 8008312:	f8cd 9008 	str.w	r9, [sp, #8]
 8008316:	f8cd b000 	str.w	fp, [sp]
 800831a:	9306      	str	r3, [sp, #24]
 800831c:	42b7      	cmp	r7, r6
 800831e:	d340      	bcc.n	80083a2 <__gethex+0x21e>
 8008320:	9802      	ldr	r0, [sp, #8]
 8008322:	9b00      	ldr	r3, [sp, #0]
 8008324:	f840 3b04 	str.w	r3, [r0], #4
 8008328:	eba0 0009 	sub.w	r0, r0, r9
 800832c:	1080      	asrs	r0, r0, #2
 800832e:	0146      	lsls	r6, r0, #5
 8008330:	6120      	str	r0, [r4, #16]
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fb4c 	bl	80089d0 <__hi0bits>
 8008338:	1a30      	subs	r0, r6, r0
 800833a:	f8d8 6000 	ldr.w	r6, [r8]
 800833e:	42b0      	cmp	r0, r6
 8008340:	dd63      	ble.n	800840a <__gethex+0x286>
 8008342:	1b87      	subs	r7, r0, r6
 8008344:	4639      	mov	r1, r7
 8008346:	4620      	mov	r0, r4
 8008348:	f000 fef0 	bl	800912c <__any_on>
 800834c:	4682      	mov	sl, r0
 800834e:	b1a8      	cbz	r0, 800837c <__gethex+0x1f8>
 8008350:	1e7b      	subs	r3, r7, #1
 8008352:	1159      	asrs	r1, r3, #5
 8008354:	f003 021f 	and.w	r2, r3, #31
 8008358:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800835c:	f04f 0a01 	mov.w	sl, #1
 8008360:	fa0a f202 	lsl.w	r2, sl, r2
 8008364:	420a      	tst	r2, r1
 8008366:	d009      	beq.n	800837c <__gethex+0x1f8>
 8008368:	4553      	cmp	r3, sl
 800836a:	dd05      	ble.n	8008378 <__gethex+0x1f4>
 800836c:	1eb9      	subs	r1, r7, #2
 800836e:	4620      	mov	r0, r4
 8008370:	f000 fedc 	bl	800912c <__any_on>
 8008374:	2800      	cmp	r0, #0
 8008376:	d145      	bne.n	8008404 <__gethex+0x280>
 8008378:	f04f 0a02 	mov.w	sl, #2
 800837c:	4639      	mov	r1, r7
 800837e:	4620      	mov	r0, r4
 8008380:	f7ff fe98 	bl	80080b4 <rshift>
 8008384:	443d      	add	r5, r7
 8008386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800838a:	42ab      	cmp	r3, r5
 800838c:	da4c      	bge.n	8008428 <__gethex+0x2a4>
 800838e:	ee18 0a10 	vmov	r0, s16
 8008392:	4621      	mov	r1, r4
 8008394:	f000 fa6a 	bl	800886c <_Bfree>
 8008398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800839a:	2300      	movs	r3, #0
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	27a3      	movs	r7, #163	; 0xa3
 80083a0:	e785      	b.n	80082ae <__gethex+0x12a>
 80083a2:	1e73      	subs	r3, r6, #1
 80083a4:	9a05      	ldr	r2, [sp, #20]
 80083a6:	9303      	str	r3, [sp, #12]
 80083a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d019      	beq.n	80083e4 <__gethex+0x260>
 80083b0:	f1bb 0f20 	cmp.w	fp, #32
 80083b4:	d107      	bne.n	80083c6 <__gethex+0x242>
 80083b6:	9b02      	ldr	r3, [sp, #8]
 80083b8:	9a00      	ldr	r2, [sp, #0]
 80083ba:	f843 2b04 	str.w	r2, [r3], #4
 80083be:	9302      	str	r3, [sp, #8]
 80083c0:	2300      	movs	r3, #0
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	469b      	mov	fp, r3
 80083c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80083ca:	f7ff fec5 	bl	8008158 <__hexdig_fun>
 80083ce:	9b00      	ldr	r3, [sp, #0]
 80083d0:	f000 000f 	and.w	r0, r0, #15
 80083d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80083d8:	4303      	orrs	r3, r0
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	f10b 0b04 	add.w	fp, fp, #4
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	e00d      	b.n	8008400 <__gethex+0x27c>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	9a06      	ldr	r2, [sp, #24]
 80083e8:	4413      	add	r3, r2
 80083ea:	42bb      	cmp	r3, r7
 80083ec:	d3e0      	bcc.n	80083b0 <__gethex+0x22c>
 80083ee:	4618      	mov	r0, r3
 80083f0:	9901      	ldr	r1, [sp, #4]
 80083f2:	9307      	str	r3, [sp, #28]
 80083f4:	4652      	mov	r2, sl
 80083f6:	f001 f927 	bl	8009648 <strncmp>
 80083fa:	9b07      	ldr	r3, [sp, #28]
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d1d7      	bne.n	80083b0 <__gethex+0x22c>
 8008400:	461e      	mov	r6, r3
 8008402:	e78b      	b.n	800831c <__gethex+0x198>
 8008404:	f04f 0a03 	mov.w	sl, #3
 8008408:	e7b8      	b.n	800837c <__gethex+0x1f8>
 800840a:	da0a      	bge.n	8008422 <__gethex+0x29e>
 800840c:	1a37      	subs	r7, r6, r0
 800840e:	4621      	mov	r1, r4
 8008410:	ee18 0a10 	vmov	r0, s16
 8008414:	463a      	mov	r2, r7
 8008416:	f000 fc45 	bl	8008ca4 <__lshift>
 800841a:	1bed      	subs	r5, r5, r7
 800841c:	4604      	mov	r4, r0
 800841e:	f100 0914 	add.w	r9, r0, #20
 8008422:	f04f 0a00 	mov.w	sl, #0
 8008426:	e7ae      	b.n	8008386 <__gethex+0x202>
 8008428:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800842c:	42a8      	cmp	r0, r5
 800842e:	dd72      	ble.n	8008516 <__gethex+0x392>
 8008430:	1b45      	subs	r5, r0, r5
 8008432:	42ae      	cmp	r6, r5
 8008434:	dc36      	bgt.n	80084a4 <__gethex+0x320>
 8008436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d02a      	beq.n	8008494 <__gethex+0x310>
 800843e:	2b03      	cmp	r3, #3
 8008440:	d02c      	beq.n	800849c <__gethex+0x318>
 8008442:	2b01      	cmp	r3, #1
 8008444:	d11c      	bne.n	8008480 <__gethex+0x2fc>
 8008446:	42ae      	cmp	r6, r5
 8008448:	d11a      	bne.n	8008480 <__gethex+0x2fc>
 800844a:	2e01      	cmp	r6, #1
 800844c:	d112      	bne.n	8008474 <__gethex+0x2f0>
 800844e:	9a04      	ldr	r2, [sp, #16]
 8008450:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	2301      	movs	r3, #1
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	f8c9 3000 	str.w	r3, [r9]
 800845e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008460:	2762      	movs	r7, #98	; 0x62
 8008462:	601c      	str	r4, [r3, #0]
 8008464:	e723      	b.n	80082ae <__gethex+0x12a>
 8008466:	bf00      	nop
 8008468:	0800b6d0 	.word	0x0800b6d0
 800846c:	0800b658 	.word	0x0800b658
 8008470:	0800b669 	.word	0x0800b669
 8008474:	1e71      	subs	r1, r6, #1
 8008476:	4620      	mov	r0, r4
 8008478:	f000 fe58 	bl	800912c <__any_on>
 800847c:	2800      	cmp	r0, #0
 800847e:	d1e6      	bne.n	800844e <__gethex+0x2ca>
 8008480:	ee18 0a10 	vmov	r0, s16
 8008484:	4621      	mov	r1, r4
 8008486:	f000 f9f1 	bl	800886c <_Bfree>
 800848a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800848c:	2300      	movs	r3, #0
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	2750      	movs	r7, #80	; 0x50
 8008492:	e70c      	b.n	80082ae <__gethex+0x12a>
 8008494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f2      	bne.n	8008480 <__gethex+0x2fc>
 800849a:	e7d8      	b.n	800844e <__gethex+0x2ca>
 800849c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1d5      	bne.n	800844e <__gethex+0x2ca>
 80084a2:	e7ed      	b.n	8008480 <__gethex+0x2fc>
 80084a4:	1e6f      	subs	r7, r5, #1
 80084a6:	f1ba 0f00 	cmp.w	sl, #0
 80084aa:	d131      	bne.n	8008510 <__gethex+0x38c>
 80084ac:	b127      	cbz	r7, 80084b8 <__gethex+0x334>
 80084ae:	4639      	mov	r1, r7
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 fe3b 	bl	800912c <__any_on>
 80084b6:	4682      	mov	sl, r0
 80084b8:	117b      	asrs	r3, r7, #5
 80084ba:	2101      	movs	r1, #1
 80084bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80084c0:	f007 071f 	and.w	r7, r7, #31
 80084c4:	fa01 f707 	lsl.w	r7, r1, r7
 80084c8:	421f      	tst	r7, r3
 80084ca:	4629      	mov	r1, r5
 80084cc:	4620      	mov	r0, r4
 80084ce:	bf18      	it	ne
 80084d0:	f04a 0a02 	orrne.w	sl, sl, #2
 80084d4:	1b76      	subs	r6, r6, r5
 80084d6:	f7ff fded 	bl	80080b4 <rshift>
 80084da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80084de:	2702      	movs	r7, #2
 80084e0:	f1ba 0f00 	cmp.w	sl, #0
 80084e4:	d048      	beq.n	8008578 <__gethex+0x3f4>
 80084e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d015      	beq.n	800851a <__gethex+0x396>
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d017      	beq.n	8008522 <__gethex+0x39e>
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d109      	bne.n	800850a <__gethex+0x386>
 80084f6:	f01a 0f02 	tst.w	sl, #2
 80084fa:	d006      	beq.n	800850a <__gethex+0x386>
 80084fc:	f8d9 0000 	ldr.w	r0, [r9]
 8008500:	ea4a 0a00 	orr.w	sl, sl, r0
 8008504:	f01a 0f01 	tst.w	sl, #1
 8008508:	d10e      	bne.n	8008528 <__gethex+0x3a4>
 800850a:	f047 0710 	orr.w	r7, r7, #16
 800850e:	e033      	b.n	8008578 <__gethex+0x3f4>
 8008510:	f04f 0a01 	mov.w	sl, #1
 8008514:	e7d0      	b.n	80084b8 <__gethex+0x334>
 8008516:	2701      	movs	r7, #1
 8008518:	e7e2      	b.n	80084e0 <__gethex+0x35c>
 800851a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800851c:	f1c3 0301 	rsb	r3, r3, #1
 8008520:	9315      	str	r3, [sp, #84]	; 0x54
 8008522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0f0      	beq.n	800850a <__gethex+0x386>
 8008528:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800852c:	f104 0314 	add.w	r3, r4, #20
 8008530:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008534:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008538:	f04f 0c00 	mov.w	ip, #0
 800853c:	4618      	mov	r0, r3
 800853e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008542:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008546:	d01c      	beq.n	8008582 <__gethex+0x3fe>
 8008548:	3201      	adds	r2, #1
 800854a:	6002      	str	r2, [r0, #0]
 800854c:	2f02      	cmp	r7, #2
 800854e:	f104 0314 	add.w	r3, r4, #20
 8008552:	d13f      	bne.n	80085d4 <__gethex+0x450>
 8008554:	f8d8 2000 	ldr.w	r2, [r8]
 8008558:	3a01      	subs	r2, #1
 800855a:	42b2      	cmp	r2, r6
 800855c:	d10a      	bne.n	8008574 <__gethex+0x3f0>
 800855e:	1171      	asrs	r1, r6, #5
 8008560:	2201      	movs	r2, #1
 8008562:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008566:	f006 061f 	and.w	r6, r6, #31
 800856a:	fa02 f606 	lsl.w	r6, r2, r6
 800856e:	421e      	tst	r6, r3
 8008570:	bf18      	it	ne
 8008572:	4617      	movne	r7, r2
 8008574:	f047 0720 	orr.w	r7, r7, #32
 8008578:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800857a:	601c      	str	r4, [r3, #0]
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	601d      	str	r5, [r3, #0]
 8008580:	e695      	b.n	80082ae <__gethex+0x12a>
 8008582:	4299      	cmp	r1, r3
 8008584:	f843 cc04 	str.w	ip, [r3, #-4]
 8008588:	d8d8      	bhi.n	800853c <__gethex+0x3b8>
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	459b      	cmp	fp, r3
 800858e:	db19      	blt.n	80085c4 <__gethex+0x440>
 8008590:	6861      	ldr	r1, [r4, #4]
 8008592:	ee18 0a10 	vmov	r0, s16
 8008596:	3101      	adds	r1, #1
 8008598:	f000 f928 	bl	80087ec <_Balloc>
 800859c:	4681      	mov	r9, r0
 800859e:	b918      	cbnz	r0, 80085a8 <__gethex+0x424>
 80085a0:	4b1a      	ldr	r3, [pc, #104]	; (800860c <__gethex+0x488>)
 80085a2:	4602      	mov	r2, r0
 80085a4:	2184      	movs	r1, #132	; 0x84
 80085a6:	e6a8      	b.n	80082fa <__gethex+0x176>
 80085a8:	6922      	ldr	r2, [r4, #16]
 80085aa:	3202      	adds	r2, #2
 80085ac:	f104 010c 	add.w	r1, r4, #12
 80085b0:	0092      	lsls	r2, r2, #2
 80085b2:	300c      	adds	r0, #12
 80085b4:	f000 f90c 	bl	80087d0 <memcpy>
 80085b8:	4621      	mov	r1, r4
 80085ba:	ee18 0a10 	vmov	r0, s16
 80085be:	f000 f955 	bl	800886c <_Bfree>
 80085c2:	464c      	mov	r4, r9
 80085c4:	6923      	ldr	r3, [r4, #16]
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085cc:	6122      	str	r2, [r4, #16]
 80085ce:	2201      	movs	r2, #1
 80085d0:	615a      	str	r2, [r3, #20]
 80085d2:	e7bb      	b.n	800854c <__gethex+0x3c8>
 80085d4:	6922      	ldr	r2, [r4, #16]
 80085d6:	455a      	cmp	r2, fp
 80085d8:	dd0b      	ble.n	80085f2 <__gethex+0x46e>
 80085da:	2101      	movs	r1, #1
 80085dc:	4620      	mov	r0, r4
 80085de:	f7ff fd69 	bl	80080b4 <rshift>
 80085e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085e6:	3501      	adds	r5, #1
 80085e8:	42ab      	cmp	r3, r5
 80085ea:	f6ff aed0 	blt.w	800838e <__gethex+0x20a>
 80085ee:	2701      	movs	r7, #1
 80085f0:	e7c0      	b.n	8008574 <__gethex+0x3f0>
 80085f2:	f016 061f 	ands.w	r6, r6, #31
 80085f6:	d0fa      	beq.n	80085ee <__gethex+0x46a>
 80085f8:	4453      	add	r3, sl
 80085fa:	f1c6 0620 	rsb	r6, r6, #32
 80085fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008602:	f000 f9e5 	bl	80089d0 <__hi0bits>
 8008606:	42b0      	cmp	r0, r6
 8008608:	dbe7      	blt.n	80085da <__gethex+0x456>
 800860a:	e7f0      	b.n	80085ee <__gethex+0x46a>
 800860c:	0800b658 	.word	0x0800b658

08008610 <L_shift>:
 8008610:	f1c2 0208 	rsb	r2, r2, #8
 8008614:	0092      	lsls	r2, r2, #2
 8008616:	b570      	push	{r4, r5, r6, lr}
 8008618:	f1c2 0620 	rsb	r6, r2, #32
 800861c:	6843      	ldr	r3, [r0, #4]
 800861e:	6804      	ldr	r4, [r0, #0]
 8008620:	fa03 f506 	lsl.w	r5, r3, r6
 8008624:	432c      	orrs	r4, r5
 8008626:	40d3      	lsrs	r3, r2
 8008628:	6004      	str	r4, [r0, #0]
 800862a:	f840 3f04 	str.w	r3, [r0, #4]!
 800862e:	4288      	cmp	r0, r1
 8008630:	d3f4      	bcc.n	800861c <L_shift+0xc>
 8008632:	bd70      	pop	{r4, r5, r6, pc}

08008634 <__match>:
 8008634:	b530      	push	{r4, r5, lr}
 8008636:	6803      	ldr	r3, [r0, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800863e:	b914      	cbnz	r4, 8008646 <__match+0x12>
 8008640:	6003      	str	r3, [r0, #0]
 8008642:	2001      	movs	r0, #1
 8008644:	bd30      	pop	{r4, r5, pc}
 8008646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800864a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800864e:	2d19      	cmp	r5, #25
 8008650:	bf98      	it	ls
 8008652:	3220      	addls	r2, #32
 8008654:	42a2      	cmp	r2, r4
 8008656:	d0f0      	beq.n	800863a <__match+0x6>
 8008658:	2000      	movs	r0, #0
 800865a:	e7f3      	b.n	8008644 <__match+0x10>

0800865c <__hexnan>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	680b      	ldr	r3, [r1, #0]
 8008662:	115e      	asrs	r6, r3, #5
 8008664:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008668:	f013 031f 	ands.w	r3, r3, #31
 800866c:	b087      	sub	sp, #28
 800866e:	bf18      	it	ne
 8008670:	3604      	addne	r6, #4
 8008672:	2500      	movs	r5, #0
 8008674:	1f37      	subs	r7, r6, #4
 8008676:	4690      	mov	r8, r2
 8008678:	6802      	ldr	r2, [r0, #0]
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	4682      	mov	sl, r0
 800867e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008682:	46b9      	mov	r9, r7
 8008684:	463c      	mov	r4, r7
 8008686:	9502      	str	r5, [sp, #8]
 8008688:	46ab      	mov	fp, r5
 800868a:	7851      	ldrb	r1, [r2, #1]
 800868c:	1c53      	adds	r3, r2, #1
 800868e:	9303      	str	r3, [sp, #12]
 8008690:	b341      	cbz	r1, 80086e4 <__hexnan+0x88>
 8008692:	4608      	mov	r0, r1
 8008694:	9205      	str	r2, [sp, #20]
 8008696:	9104      	str	r1, [sp, #16]
 8008698:	f7ff fd5e 	bl	8008158 <__hexdig_fun>
 800869c:	2800      	cmp	r0, #0
 800869e:	d14f      	bne.n	8008740 <__hexnan+0xe4>
 80086a0:	9904      	ldr	r1, [sp, #16]
 80086a2:	9a05      	ldr	r2, [sp, #20]
 80086a4:	2920      	cmp	r1, #32
 80086a6:	d818      	bhi.n	80086da <__hexnan+0x7e>
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	459b      	cmp	fp, r3
 80086ac:	dd13      	ble.n	80086d6 <__hexnan+0x7a>
 80086ae:	454c      	cmp	r4, r9
 80086b0:	d206      	bcs.n	80086c0 <__hexnan+0x64>
 80086b2:	2d07      	cmp	r5, #7
 80086b4:	dc04      	bgt.n	80086c0 <__hexnan+0x64>
 80086b6:	462a      	mov	r2, r5
 80086b8:	4649      	mov	r1, r9
 80086ba:	4620      	mov	r0, r4
 80086bc:	f7ff ffa8 	bl	8008610 <L_shift>
 80086c0:	4544      	cmp	r4, r8
 80086c2:	d950      	bls.n	8008766 <__hexnan+0x10a>
 80086c4:	2300      	movs	r3, #0
 80086c6:	f1a4 0904 	sub.w	r9, r4, #4
 80086ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80086ce:	f8cd b008 	str.w	fp, [sp, #8]
 80086d2:	464c      	mov	r4, r9
 80086d4:	461d      	mov	r5, r3
 80086d6:	9a03      	ldr	r2, [sp, #12]
 80086d8:	e7d7      	b.n	800868a <__hexnan+0x2e>
 80086da:	2929      	cmp	r1, #41	; 0x29
 80086dc:	d156      	bne.n	800878c <__hexnan+0x130>
 80086de:	3202      	adds	r2, #2
 80086e0:	f8ca 2000 	str.w	r2, [sl]
 80086e4:	f1bb 0f00 	cmp.w	fp, #0
 80086e8:	d050      	beq.n	800878c <__hexnan+0x130>
 80086ea:	454c      	cmp	r4, r9
 80086ec:	d206      	bcs.n	80086fc <__hexnan+0xa0>
 80086ee:	2d07      	cmp	r5, #7
 80086f0:	dc04      	bgt.n	80086fc <__hexnan+0xa0>
 80086f2:	462a      	mov	r2, r5
 80086f4:	4649      	mov	r1, r9
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7ff ff8a 	bl	8008610 <L_shift>
 80086fc:	4544      	cmp	r4, r8
 80086fe:	d934      	bls.n	800876a <__hexnan+0x10e>
 8008700:	f1a8 0204 	sub.w	r2, r8, #4
 8008704:	4623      	mov	r3, r4
 8008706:	f853 1b04 	ldr.w	r1, [r3], #4
 800870a:	f842 1f04 	str.w	r1, [r2, #4]!
 800870e:	429f      	cmp	r7, r3
 8008710:	d2f9      	bcs.n	8008706 <__hexnan+0xaa>
 8008712:	1b3b      	subs	r3, r7, r4
 8008714:	f023 0303 	bic.w	r3, r3, #3
 8008718:	3304      	adds	r3, #4
 800871a:	3401      	adds	r4, #1
 800871c:	3e03      	subs	r6, #3
 800871e:	42b4      	cmp	r4, r6
 8008720:	bf88      	it	hi
 8008722:	2304      	movhi	r3, #4
 8008724:	4443      	add	r3, r8
 8008726:	2200      	movs	r2, #0
 8008728:	f843 2b04 	str.w	r2, [r3], #4
 800872c:	429f      	cmp	r7, r3
 800872e:	d2fb      	bcs.n	8008728 <__hexnan+0xcc>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	b91b      	cbnz	r3, 800873c <__hexnan+0xe0>
 8008734:	4547      	cmp	r7, r8
 8008736:	d127      	bne.n	8008788 <__hexnan+0x12c>
 8008738:	2301      	movs	r3, #1
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	2005      	movs	r0, #5
 800873e:	e026      	b.n	800878e <__hexnan+0x132>
 8008740:	3501      	adds	r5, #1
 8008742:	2d08      	cmp	r5, #8
 8008744:	f10b 0b01 	add.w	fp, fp, #1
 8008748:	dd06      	ble.n	8008758 <__hexnan+0xfc>
 800874a:	4544      	cmp	r4, r8
 800874c:	d9c3      	bls.n	80086d6 <__hexnan+0x7a>
 800874e:	2300      	movs	r3, #0
 8008750:	f844 3c04 	str.w	r3, [r4, #-4]
 8008754:	2501      	movs	r5, #1
 8008756:	3c04      	subs	r4, #4
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	f000 000f 	and.w	r0, r0, #15
 800875e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008762:	6022      	str	r2, [r4, #0]
 8008764:	e7b7      	b.n	80086d6 <__hexnan+0x7a>
 8008766:	2508      	movs	r5, #8
 8008768:	e7b5      	b.n	80086d6 <__hexnan+0x7a>
 800876a:	9b01      	ldr	r3, [sp, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0df      	beq.n	8008730 <__hexnan+0xd4>
 8008770:	f04f 32ff 	mov.w	r2, #4294967295
 8008774:	f1c3 0320 	rsb	r3, r3, #32
 8008778:	fa22 f303 	lsr.w	r3, r2, r3
 800877c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008780:	401a      	ands	r2, r3
 8008782:	f846 2c04 	str.w	r2, [r6, #-4]
 8008786:	e7d3      	b.n	8008730 <__hexnan+0xd4>
 8008788:	3f04      	subs	r7, #4
 800878a:	e7d1      	b.n	8008730 <__hexnan+0xd4>
 800878c:	2004      	movs	r0, #4
 800878e:	b007      	add	sp, #28
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008794 <_localeconv_r>:
 8008794:	4800      	ldr	r0, [pc, #0]	; (8008798 <_localeconv_r+0x4>)
 8008796:	4770      	bx	lr
 8008798:	20000164 	.word	0x20000164

0800879c <malloc>:
 800879c:	4b02      	ldr	r3, [pc, #8]	; (80087a8 <malloc+0xc>)
 800879e:	4601      	mov	r1, r0
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	f000 bd67 	b.w	8009274 <_malloc_r>
 80087a6:	bf00      	nop
 80087a8:	2000000c 	.word	0x2000000c

080087ac <__ascii_mbtowc>:
 80087ac:	b082      	sub	sp, #8
 80087ae:	b901      	cbnz	r1, 80087b2 <__ascii_mbtowc+0x6>
 80087b0:	a901      	add	r1, sp, #4
 80087b2:	b142      	cbz	r2, 80087c6 <__ascii_mbtowc+0x1a>
 80087b4:	b14b      	cbz	r3, 80087ca <__ascii_mbtowc+0x1e>
 80087b6:	7813      	ldrb	r3, [r2, #0]
 80087b8:	600b      	str	r3, [r1, #0]
 80087ba:	7812      	ldrb	r2, [r2, #0]
 80087bc:	1e10      	subs	r0, r2, #0
 80087be:	bf18      	it	ne
 80087c0:	2001      	movne	r0, #1
 80087c2:	b002      	add	sp, #8
 80087c4:	4770      	bx	lr
 80087c6:	4610      	mov	r0, r2
 80087c8:	e7fb      	b.n	80087c2 <__ascii_mbtowc+0x16>
 80087ca:	f06f 0001 	mvn.w	r0, #1
 80087ce:	e7f8      	b.n	80087c2 <__ascii_mbtowc+0x16>

080087d0 <memcpy>:
 80087d0:	440a      	add	r2, r1
 80087d2:	4291      	cmp	r1, r2
 80087d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80087d8:	d100      	bne.n	80087dc <memcpy+0xc>
 80087da:	4770      	bx	lr
 80087dc:	b510      	push	{r4, lr}
 80087de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e6:	4291      	cmp	r1, r2
 80087e8:	d1f9      	bne.n	80087de <memcpy+0xe>
 80087ea:	bd10      	pop	{r4, pc}

080087ec <_Balloc>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087f0:	4604      	mov	r4, r0
 80087f2:	460d      	mov	r5, r1
 80087f4:	b976      	cbnz	r6, 8008814 <_Balloc+0x28>
 80087f6:	2010      	movs	r0, #16
 80087f8:	f7ff ffd0 	bl	800879c <malloc>
 80087fc:	4602      	mov	r2, r0
 80087fe:	6260      	str	r0, [r4, #36]	; 0x24
 8008800:	b920      	cbnz	r0, 800880c <_Balloc+0x20>
 8008802:	4b18      	ldr	r3, [pc, #96]	; (8008864 <_Balloc+0x78>)
 8008804:	4818      	ldr	r0, [pc, #96]	; (8008868 <_Balloc+0x7c>)
 8008806:	2166      	movs	r1, #102	; 0x66
 8008808:	f000 ff40 	bl	800968c <__assert_func>
 800880c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008810:	6006      	str	r6, [r0, #0]
 8008812:	60c6      	str	r6, [r0, #12]
 8008814:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008816:	68f3      	ldr	r3, [r6, #12]
 8008818:	b183      	cbz	r3, 800883c <_Balloc+0x50>
 800881a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008822:	b9b8      	cbnz	r0, 8008854 <_Balloc+0x68>
 8008824:	2101      	movs	r1, #1
 8008826:	fa01 f605 	lsl.w	r6, r1, r5
 800882a:	1d72      	adds	r2, r6, #5
 800882c:	0092      	lsls	r2, r2, #2
 800882e:	4620      	mov	r0, r4
 8008830:	f000 fc9d 	bl	800916e <_calloc_r>
 8008834:	b160      	cbz	r0, 8008850 <_Balloc+0x64>
 8008836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800883a:	e00e      	b.n	800885a <_Balloc+0x6e>
 800883c:	2221      	movs	r2, #33	; 0x21
 800883e:	2104      	movs	r1, #4
 8008840:	4620      	mov	r0, r4
 8008842:	f000 fc94 	bl	800916e <_calloc_r>
 8008846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008848:	60f0      	str	r0, [r6, #12]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e4      	bne.n	800881a <_Balloc+0x2e>
 8008850:	2000      	movs	r0, #0
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	6802      	ldr	r2, [r0, #0]
 8008856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800885a:	2300      	movs	r3, #0
 800885c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008860:	e7f7      	b.n	8008852 <_Balloc+0x66>
 8008862:	bf00      	nop
 8008864:	0800b5e6 	.word	0x0800b5e6
 8008868:	0800b6e4 	.word	0x0800b6e4

0800886c <_Bfree>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008870:	4605      	mov	r5, r0
 8008872:	460c      	mov	r4, r1
 8008874:	b976      	cbnz	r6, 8008894 <_Bfree+0x28>
 8008876:	2010      	movs	r0, #16
 8008878:	f7ff ff90 	bl	800879c <malloc>
 800887c:	4602      	mov	r2, r0
 800887e:	6268      	str	r0, [r5, #36]	; 0x24
 8008880:	b920      	cbnz	r0, 800888c <_Bfree+0x20>
 8008882:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <_Bfree+0x3c>)
 8008884:	4809      	ldr	r0, [pc, #36]	; (80088ac <_Bfree+0x40>)
 8008886:	218a      	movs	r1, #138	; 0x8a
 8008888:	f000 ff00 	bl	800968c <__assert_func>
 800888c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008890:	6006      	str	r6, [r0, #0]
 8008892:	60c6      	str	r6, [r0, #12]
 8008894:	b13c      	cbz	r4, 80088a6 <_Bfree+0x3a>
 8008896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008898:	6862      	ldr	r2, [r4, #4]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088a0:	6021      	str	r1, [r4, #0]
 80088a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	0800b5e6 	.word	0x0800b5e6
 80088ac:	0800b6e4 	.word	0x0800b6e4

080088b0 <__multadd>:
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	690d      	ldr	r5, [r1, #16]
 80088b6:	4607      	mov	r7, r0
 80088b8:	460c      	mov	r4, r1
 80088ba:	461e      	mov	r6, r3
 80088bc:	f101 0c14 	add.w	ip, r1, #20
 80088c0:	2000      	movs	r0, #0
 80088c2:	f8dc 3000 	ldr.w	r3, [ip]
 80088c6:	b299      	uxth	r1, r3
 80088c8:	fb02 6101 	mla	r1, r2, r1, r6
 80088cc:	0c1e      	lsrs	r6, r3, #16
 80088ce:	0c0b      	lsrs	r3, r1, #16
 80088d0:	fb02 3306 	mla	r3, r2, r6, r3
 80088d4:	b289      	uxth	r1, r1
 80088d6:	3001      	adds	r0, #1
 80088d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088dc:	4285      	cmp	r5, r0
 80088de:	f84c 1b04 	str.w	r1, [ip], #4
 80088e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088e6:	dcec      	bgt.n	80088c2 <__multadd+0x12>
 80088e8:	b30e      	cbz	r6, 800892e <__multadd+0x7e>
 80088ea:	68a3      	ldr	r3, [r4, #8]
 80088ec:	42ab      	cmp	r3, r5
 80088ee:	dc19      	bgt.n	8008924 <__multadd+0x74>
 80088f0:	6861      	ldr	r1, [r4, #4]
 80088f2:	4638      	mov	r0, r7
 80088f4:	3101      	adds	r1, #1
 80088f6:	f7ff ff79 	bl	80087ec <_Balloc>
 80088fa:	4680      	mov	r8, r0
 80088fc:	b928      	cbnz	r0, 800890a <__multadd+0x5a>
 80088fe:	4602      	mov	r2, r0
 8008900:	4b0c      	ldr	r3, [pc, #48]	; (8008934 <__multadd+0x84>)
 8008902:	480d      	ldr	r0, [pc, #52]	; (8008938 <__multadd+0x88>)
 8008904:	21b5      	movs	r1, #181	; 0xb5
 8008906:	f000 fec1 	bl	800968c <__assert_func>
 800890a:	6922      	ldr	r2, [r4, #16]
 800890c:	3202      	adds	r2, #2
 800890e:	f104 010c 	add.w	r1, r4, #12
 8008912:	0092      	lsls	r2, r2, #2
 8008914:	300c      	adds	r0, #12
 8008916:	f7ff ff5b 	bl	80087d0 <memcpy>
 800891a:	4621      	mov	r1, r4
 800891c:	4638      	mov	r0, r7
 800891e:	f7ff ffa5 	bl	800886c <_Bfree>
 8008922:	4644      	mov	r4, r8
 8008924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008928:	3501      	adds	r5, #1
 800892a:	615e      	str	r6, [r3, #20]
 800892c:	6125      	str	r5, [r4, #16]
 800892e:	4620      	mov	r0, r4
 8008930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008934:	0800b658 	.word	0x0800b658
 8008938:	0800b6e4 	.word	0x0800b6e4

0800893c <__s2b>:
 800893c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008940:	460c      	mov	r4, r1
 8008942:	4615      	mov	r5, r2
 8008944:	461f      	mov	r7, r3
 8008946:	2209      	movs	r2, #9
 8008948:	3308      	adds	r3, #8
 800894a:	4606      	mov	r6, r0
 800894c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008950:	2100      	movs	r1, #0
 8008952:	2201      	movs	r2, #1
 8008954:	429a      	cmp	r2, r3
 8008956:	db09      	blt.n	800896c <__s2b+0x30>
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff ff47 	bl	80087ec <_Balloc>
 800895e:	b940      	cbnz	r0, 8008972 <__s2b+0x36>
 8008960:	4602      	mov	r2, r0
 8008962:	4b19      	ldr	r3, [pc, #100]	; (80089c8 <__s2b+0x8c>)
 8008964:	4819      	ldr	r0, [pc, #100]	; (80089cc <__s2b+0x90>)
 8008966:	21ce      	movs	r1, #206	; 0xce
 8008968:	f000 fe90 	bl	800968c <__assert_func>
 800896c:	0052      	lsls	r2, r2, #1
 800896e:	3101      	adds	r1, #1
 8008970:	e7f0      	b.n	8008954 <__s2b+0x18>
 8008972:	9b08      	ldr	r3, [sp, #32]
 8008974:	6143      	str	r3, [r0, #20]
 8008976:	2d09      	cmp	r5, #9
 8008978:	f04f 0301 	mov.w	r3, #1
 800897c:	6103      	str	r3, [r0, #16]
 800897e:	dd16      	ble.n	80089ae <__s2b+0x72>
 8008980:	f104 0909 	add.w	r9, r4, #9
 8008984:	46c8      	mov	r8, r9
 8008986:	442c      	add	r4, r5
 8008988:	f818 3b01 	ldrb.w	r3, [r8], #1
 800898c:	4601      	mov	r1, r0
 800898e:	3b30      	subs	r3, #48	; 0x30
 8008990:	220a      	movs	r2, #10
 8008992:	4630      	mov	r0, r6
 8008994:	f7ff ff8c 	bl	80088b0 <__multadd>
 8008998:	45a0      	cmp	r8, r4
 800899a:	d1f5      	bne.n	8008988 <__s2b+0x4c>
 800899c:	f1a5 0408 	sub.w	r4, r5, #8
 80089a0:	444c      	add	r4, r9
 80089a2:	1b2d      	subs	r5, r5, r4
 80089a4:	1963      	adds	r3, r4, r5
 80089a6:	42bb      	cmp	r3, r7
 80089a8:	db04      	blt.n	80089b4 <__s2b+0x78>
 80089aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ae:	340a      	adds	r4, #10
 80089b0:	2509      	movs	r5, #9
 80089b2:	e7f6      	b.n	80089a2 <__s2b+0x66>
 80089b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089b8:	4601      	mov	r1, r0
 80089ba:	3b30      	subs	r3, #48	; 0x30
 80089bc:	220a      	movs	r2, #10
 80089be:	4630      	mov	r0, r6
 80089c0:	f7ff ff76 	bl	80088b0 <__multadd>
 80089c4:	e7ee      	b.n	80089a4 <__s2b+0x68>
 80089c6:	bf00      	nop
 80089c8:	0800b658 	.word	0x0800b658
 80089cc:	0800b6e4 	.word	0x0800b6e4

080089d0 <__hi0bits>:
 80089d0:	0c03      	lsrs	r3, r0, #16
 80089d2:	041b      	lsls	r3, r3, #16
 80089d4:	b9d3      	cbnz	r3, 8008a0c <__hi0bits+0x3c>
 80089d6:	0400      	lsls	r0, r0, #16
 80089d8:	2310      	movs	r3, #16
 80089da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089de:	bf04      	itt	eq
 80089e0:	0200      	lsleq	r0, r0, #8
 80089e2:	3308      	addeq	r3, #8
 80089e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089e8:	bf04      	itt	eq
 80089ea:	0100      	lsleq	r0, r0, #4
 80089ec:	3304      	addeq	r3, #4
 80089ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089f2:	bf04      	itt	eq
 80089f4:	0080      	lsleq	r0, r0, #2
 80089f6:	3302      	addeq	r3, #2
 80089f8:	2800      	cmp	r0, #0
 80089fa:	db05      	blt.n	8008a08 <__hi0bits+0x38>
 80089fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a00:	f103 0301 	add.w	r3, r3, #1
 8008a04:	bf08      	it	eq
 8008a06:	2320      	moveq	r3, #32
 8008a08:	4618      	mov	r0, r3
 8008a0a:	4770      	bx	lr
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	e7e4      	b.n	80089da <__hi0bits+0xa>

08008a10 <__lo0bits>:
 8008a10:	6803      	ldr	r3, [r0, #0]
 8008a12:	f013 0207 	ands.w	r2, r3, #7
 8008a16:	4601      	mov	r1, r0
 8008a18:	d00b      	beq.n	8008a32 <__lo0bits+0x22>
 8008a1a:	07da      	lsls	r2, r3, #31
 8008a1c:	d423      	bmi.n	8008a66 <__lo0bits+0x56>
 8008a1e:	0798      	lsls	r0, r3, #30
 8008a20:	bf49      	itett	mi
 8008a22:	085b      	lsrmi	r3, r3, #1
 8008a24:	089b      	lsrpl	r3, r3, #2
 8008a26:	2001      	movmi	r0, #1
 8008a28:	600b      	strmi	r3, [r1, #0]
 8008a2a:	bf5c      	itt	pl
 8008a2c:	600b      	strpl	r3, [r1, #0]
 8008a2e:	2002      	movpl	r0, #2
 8008a30:	4770      	bx	lr
 8008a32:	b298      	uxth	r0, r3
 8008a34:	b9a8      	cbnz	r0, 8008a62 <__lo0bits+0x52>
 8008a36:	0c1b      	lsrs	r3, r3, #16
 8008a38:	2010      	movs	r0, #16
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	b90a      	cbnz	r2, 8008a42 <__lo0bits+0x32>
 8008a3e:	3008      	adds	r0, #8
 8008a40:	0a1b      	lsrs	r3, r3, #8
 8008a42:	071a      	lsls	r2, r3, #28
 8008a44:	bf04      	itt	eq
 8008a46:	091b      	lsreq	r3, r3, #4
 8008a48:	3004      	addeq	r0, #4
 8008a4a:	079a      	lsls	r2, r3, #30
 8008a4c:	bf04      	itt	eq
 8008a4e:	089b      	lsreq	r3, r3, #2
 8008a50:	3002      	addeq	r0, #2
 8008a52:	07da      	lsls	r2, r3, #31
 8008a54:	d403      	bmi.n	8008a5e <__lo0bits+0x4e>
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	f100 0001 	add.w	r0, r0, #1
 8008a5c:	d005      	beq.n	8008a6a <__lo0bits+0x5a>
 8008a5e:	600b      	str	r3, [r1, #0]
 8008a60:	4770      	bx	lr
 8008a62:	4610      	mov	r0, r2
 8008a64:	e7e9      	b.n	8008a3a <__lo0bits+0x2a>
 8008a66:	2000      	movs	r0, #0
 8008a68:	4770      	bx	lr
 8008a6a:	2020      	movs	r0, #32
 8008a6c:	4770      	bx	lr
	...

08008a70 <__i2b>:
 8008a70:	b510      	push	{r4, lr}
 8008a72:	460c      	mov	r4, r1
 8008a74:	2101      	movs	r1, #1
 8008a76:	f7ff feb9 	bl	80087ec <_Balloc>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	b928      	cbnz	r0, 8008a8a <__i2b+0x1a>
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <__i2b+0x24>)
 8008a80:	4805      	ldr	r0, [pc, #20]	; (8008a98 <__i2b+0x28>)
 8008a82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a86:	f000 fe01 	bl	800968c <__assert_func>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	6144      	str	r4, [r0, #20]
 8008a8e:	6103      	str	r3, [r0, #16]
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	bf00      	nop
 8008a94:	0800b658 	.word	0x0800b658
 8008a98:	0800b6e4 	.word	0x0800b6e4

08008a9c <__multiply>:
 8008a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa0:	4691      	mov	r9, r2
 8008aa2:	690a      	ldr	r2, [r1, #16]
 8008aa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	bfb8      	it	lt
 8008aac:	460b      	movlt	r3, r1
 8008aae:	460c      	mov	r4, r1
 8008ab0:	bfbc      	itt	lt
 8008ab2:	464c      	movlt	r4, r9
 8008ab4:	4699      	movlt	r9, r3
 8008ab6:	6927      	ldr	r7, [r4, #16]
 8008ab8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008abc:	68a3      	ldr	r3, [r4, #8]
 8008abe:	6861      	ldr	r1, [r4, #4]
 8008ac0:	eb07 060a 	add.w	r6, r7, sl
 8008ac4:	42b3      	cmp	r3, r6
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	bfb8      	it	lt
 8008aca:	3101      	addlt	r1, #1
 8008acc:	f7ff fe8e 	bl	80087ec <_Balloc>
 8008ad0:	b930      	cbnz	r0, 8008ae0 <__multiply+0x44>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	4b44      	ldr	r3, [pc, #272]	; (8008be8 <__multiply+0x14c>)
 8008ad6:	4845      	ldr	r0, [pc, #276]	; (8008bec <__multiply+0x150>)
 8008ad8:	f240 115d 	movw	r1, #349	; 0x15d
 8008adc:	f000 fdd6 	bl	800968c <__assert_func>
 8008ae0:	f100 0514 	add.w	r5, r0, #20
 8008ae4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ae8:	462b      	mov	r3, r5
 8008aea:	2200      	movs	r2, #0
 8008aec:	4543      	cmp	r3, r8
 8008aee:	d321      	bcc.n	8008b34 <__multiply+0x98>
 8008af0:	f104 0314 	add.w	r3, r4, #20
 8008af4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008af8:	f109 0314 	add.w	r3, r9, #20
 8008afc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b00:	9202      	str	r2, [sp, #8]
 8008b02:	1b3a      	subs	r2, r7, r4
 8008b04:	3a15      	subs	r2, #21
 8008b06:	f022 0203 	bic.w	r2, r2, #3
 8008b0a:	3204      	adds	r2, #4
 8008b0c:	f104 0115 	add.w	r1, r4, #21
 8008b10:	428f      	cmp	r7, r1
 8008b12:	bf38      	it	cc
 8008b14:	2204      	movcc	r2, #4
 8008b16:	9201      	str	r2, [sp, #4]
 8008b18:	9a02      	ldr	r2, [sp, #8]
 8008b1a:	9303      	str	r3, [sp, #12]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d80c      	bhi.n	8008b3a <__multiply+0x9e>
 8008b20:	2e00      	cmp	r6, #0
 8008b22:	dd03      	ble.n	8008b2c <__multiply+0x90>
 8008b24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d05a      	beq.n	8008be2 <__multiply+0x146>
 8008b2c:	6106      	str	r6, [r0, #16]
 8008b2e:	b005      	add	sp, #20
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	f843 2b04 	str.w	r2, [r3], #4
 8008b38:	e7d8      	b.n	8008aec <__multiply+0x50>
 8008b3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b3e:	f1ba 0f00 	cmp.w	sl, #0
 8008b42:	d024      	beq.n	8008b8e <__multiply+0xf2>
 8008b44:	f104 0e14 	add.w	lr, r4, #20
 8008b48:	46a9      	mov	r9, r5
 8008b4a:	f04f 0c00 	mov.w	ip, #0
 8008b4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b52:	f8d9 1000 	ldr.w	r1, [r9]
 8008b56:	fa1f fb82 	uxth.w	fp, r2
 8008b5a:	b289      	uxth	r1, r1
 8008b5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b64:	f8d9 2000 	ldr.w	r2, [r9]
 8008b68:	4461      	add	r1, ip
 8008b6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b76:	b289      	uxth	r1, r1
 8008b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b7c:	4577      	cmp	r7, lr
 8008b7e:	f849 1b04 	str.w	r1, [r9], #4
 8008b82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b86:	d8e2      	bhi.n	8008b4e <__multiply+0xb2>
 8008b88:	9a01      	ldr	r2, [sp, #4]
 8008b8a:	f845 c002 	str.w	ip, [r5, r2]
 8008b8e:	9a03      	ldr	r2, [sp, #12]
 8008b90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b94:	3304      	adds	r3, #4
 8008b96:	f1b9 0f00 	cmp.w	r9, #0
 8008b9a:	d020      	beq.n	8008bde <__multiply+0x142>
 8008b9c:	6829      	ldr	r1, [r5, #0]
 8008b9e:	f104 0c14 	add.w	ip, r4, #20
 8008ba2:	46ae      	mov	lr, r5
 8008ba4:	f04f 0a00 	mov.w	sl, #0
 8008ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8008bac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bb0:	fb09 220b 	mla	r2, r9, fp, r2
 8008bb4:	4492      	add	sl, r2
 8008bb6:	b289      	uxth	r1, r1
 8008bb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008bbc:	f84e 1b04 	str.w	r1, [lr], #4
 8008bc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008bc4:	f8be 1000 	ldrh.w	r1, [lr]
 8008bc8:	0c12      	lsrs	r2, r2, #16
 8008bca:	fb09 1102 	mla	r1, r9, r2, r1
 8008bce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008bd2:	4567      	cmp	r7, ip
 8008bd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bd8:	d8e6      	bhi.n	8008ba8 <__multiply+0x10c>
 8008bda:	9a01      	ldr	r2, [sp, #4]
 8008bdc:	50a9      	str	r1, [r5, r2]
 8008bde:	3504      	adds	r5, #4
 8008be0:	e79a      	b.n	8008b18 <__multiply+0x7c>
 8008be2:	3e01      	subs	r6, #1
 8008be4:	e79c      	b.n	8008b20 <__multiply+0x84>
 8008be6:	bf00      	nop
 8008be8:	0800b658 	.word	0x0800b658
 8008bec:	0800b6e4 	.word	0x0800b6e4

08008bf0 <__pow5mult>:
 8008bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	4615      	mov	r5, r2
 8008bf6:	f012 0203 	ands.w	r2, r2, #3
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	460f      	mov	r7, r1
 8008bfe:	d007      	beq.n	8008c10 <__pow5mult+0x20>
 8008c00:	4c25      	ldr	r4, [pc, #148]	; (8008c98 <__pow5mult+0xa8>)
 8008c02:	3a01      	subs	r2, #1
 8008c04:	2300      	movs	r3, #0
 8008c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c0a:	f7ff fe51 	bl	80088b0 <__multadd>
 8008c0e:	4607      	mov	r7, r0
 8008c10:	10ad      	asrs	r5, r5, #2
 8008c12:	d03d      	beq.n	8008c90 <__pow5mult+0xa0>
 8008c14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c16:	b97c      	cbnz	r4, 8008c38 <__pow5mult+0x48>
 8008c18:	2010      	movs	r0, #16
 8008c1a:	f7ff fdbf 	bl	800879c <malloc>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	6270      	str	r0, [r6, #36]	; 0x24
 8008c22:	b928      	cbnz	r0, 8008c30 <__pow5mult+0x40>
 8008c24:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <__pow5mult+0xac>)
 8008c26:	481e      	ldr	r0, [pc, #120]	; (8008ca0 <__pow5mult+0xb0>)
 8008c28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c2c:	f000 fd2e 	bl	800968c <__assert_func>
 8008c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c34:	6004      	str	r4, [r0, #0]
 8008c36:	60c4      	str	r4, [r0, #12]
 8008c38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c40:	b94c      	cbnz	r4, 8008c56 <__pow5mult+0x66>
 8008c42:	f240 2171 	movw	r1, #625	; 0x271
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7ff ff12 	bl	8008a70 <__i2b>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c52:	4604      	mov	r4, r0
 8008c54:	6003      	str	r3, [r0, #0]
 8008c56:	f04f 0900 	mov.w	r9, #0
 8008c5a:	07eb      	lsls	r3, r5, #31
 8008c5c:	d50a      	bpl.n	8008c74 <__pow5mult+0x84>
 8008c5e:	4639      	mov	r1, r7
 8008c60:	4622      	mov	r2, r4
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7ff ff1a 	bl	8008a9c <__multiply>
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7ff fdfd 	bl	800886c <_Bfree>
 8008c72:	4647      	mov	r7, r8
 8008c74:	106d      	asrs	r5, r5, #1
 8008c76:	d00b      	beq.n	8008c90 <__pow5mult+0xa0>
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	b938      	cbnz	r0, 8008c8c <__pow5mult+0x9c>
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7ff ff0b 	bl	8008a9c <__multiply>
 8008c86:	6020      	str	r0, [r4, #0]
 8008c88:	f8c0 9000 	str.w	r9, [r0]
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	e7e4      	b.n	8008c5a <__pow5mult+0x6a>
 8008c90:	4638      	mov	r0, r7
 8008c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c96:	bf00      	nop
 8008c98:	0800b830 	.word	0x0800b830
 8008c9c:	0800b5e6 	.word	0x0800b5e6
 8008ca0:	0800b6e4 	.word	0x0800b6e4

08008ca4 <__lshift>:
 8008ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	460c      	mov	r4, r1
 8008caa:	6849      	ldr	r1, [r1, #4]
 8008cac:	6923      	ldr	r3, [r4, #16]
 8008cae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cb2:	68a3      	ldr	r3, [r4, #8]
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	4691      	mov	r9, r2
 8008cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cbc:	f108 0601 	add.w	r6, r8, #1
 8008cc0:	42b3      	cmp	r3, r6
 8008cc2:	db0b      	blt.n	8008cdc <__lshift+0x38>
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	f7ff fd91 	bl	80087ec <_Balloc>
 8008cca:	4605      	mov	r5, r0
 8008ccc:	b948      	cbnz	r0, 8008ce2 <__lshift+0x3e>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	4b2a      	ldr	r3, [pc, #168]	; (8008d7c <__lshift+0xd8>)
 8008cd2:	482b      	ldr	r0, [pc, #172]	; (8008d80 <__lshift+0xdc>)
 8008cd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008cd8:	f000 fcd8 	bl	800968c <__assert_func>
 8008cdc:	3101      	adds	r1, #1
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	e7ee      	b.n	8008cc0 <__lshift+0x1c>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f100 0114 	add.w	r1, r0, #20
 8008ce8:	f100 0210 	add.w	r2, r0, #16
 8008cec:	4618      	mov	r0, r3
 8008cee:	4553      	cmp	r3, sl
 8008cf0:	db37      	blt.n	8008d62 <__lshift+0xbe>
 8008cf2:	6920      	ldr	r0, [r4, #16]
 8008cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cf8:	f104 0314 	add.w	r3, r4, #20
 8008cfc:	f019 091f 	ands.w	r9, r9, #31
 8008d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008d08:	d02f      	beq.n	8008d6a <__lshift+0xc6>
 8008d0a:	f1c9 0e20 	rsb	lr, r9, #32
 8008d0e:	468a      	mov	sl, r1
 8008d10:	f04f 0c00 	mov.w	ip, #0
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	fa02 f209 	lsl.w	r2, r2, r9
 8008d1a:	ea42 020c 	orr.w	r2, r2, ip
 8008d1e:	f84a 2b04 	str.w	r2, [sl], #4
 8008d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d26:	4298      	cmp	r0, r3
 8008d28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008d2c:	d8f2      	bhi.n	8008d14 <__lshift+0x70>
 8008d2e:	1b03      	subs	r3, r0, r4
 8008d30:	3b15      	subs	r3, #21
 8008d32:	f023 0303 	bic.w	r3, r3, #3
 8008d36:	3304      	adds	r3, #4
 8008d38:	f104 0215 	add.w	r2, r4, #21
 8008d3c:	4290      	cmp	r0, r2
 8008d3e:	bf38      	it	cc
 8008d40:	2304      	movcc	r3, #4
 8008d42:	f841 c003 	str.w	ip, [r1, r3]
 8008d46:	f1bc 0f00 	cmp.w	ip, #0
 8008d4a:	d001      	beq.n	8008d50 <__lshift+0xac>
 8008d4c:	f108 0602 	add.w	r6, r8, #2
 8008d50:	3e01      	subs	r6, #1
 8008d52:	4638      	mov	r0, r7
 8008d54:	612e      	str	r6, [r5, #16]
 8008d56:	4621      	mov	r1, r4
 8008d58:	f7ff fd88 	bl	800886c <_Bfree>
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d66:	3301      	adds	r3, #1
 8008d68:	e7c1      	b.n	8008cee <__lshift+0x4a>
 8008d6a:	3904      	subs	r1, #4
 8008d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d70:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d74:	4298      	cmp	r0, r3
 8008d76:	d8f9      	bhi.n	8008d6c <__lshift+0xc8>
 8008d78:	e7ea      	b.n	8008d50 <__lshift+0xac>
 8008d7a:	bf00      	nop
 8008d7c:	0800b658 	.word	0x0800b658
 8008d80:	0800b6e4 	.word	0x0800b6e4

08008d84 <__mcmp>:
 8008d84:	b530      	push	{r4, r5, lr}
 8008d86:	6902      	ldr	r2, [r0, #16]
 8008d88:	690c      	ldr	r4, [r1, #16]
 8008d8a:	1b12      	subs	r2, r2, r4
 8008d8c:	d10e      	bne.n	8008dac <__mcmp+0x28>
 8008d8e:	f100 0314 	add.w	r3, r0, #20
 8008d92:	3114      	adds	r1, #20
 8008d94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008da0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008da4:	42a5      	cmp	r5, r4
 8008da6:	d003      	beq.n	8008db0 <__mcmp+0x2c>
 8008da8:	d305      	bcc.n	8008db6 <__mcmp+0x32>
 8008daa:	2201      	movs	r2, #1
 8008dac:	4610      	mov	r0, r2
 8008dae:	bd30      	pop	{r4, r5, pc}
 8008db0:	4283      	cmp	r3, r0
 8008db2:	d3f3      	bcc.n	8008d9c <__mcmp+0x18>
 8008db4:	e7fa      	b.n	8008dac <__mcmp+0x28>
 8008db6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dba:	e7f7      	b.n	8008dac <__mcmp+0x28>

08008dbc <__mdiff>:
 8008dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	4690      	mov	r8, r2
 8008dca:	f7ff ffdb 	bl	8008d84 <__mcmp>
 8008dce:	1e05      	subs	r5, r0, #0
 8008dd0:	d110      	bne.n	8008df4 <__mdiff+0x38>
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f7ff fd09 	bl	80087ec <_Balloc>
 8008dda:	b930      	cbnz	r0, 8008dea <__mdiff+0x2e>
 8008ddc:	4b3a      	ldr	r3, [pc, #232]	; (8008ec8 <__mdiff+0x10c>)
 8008dde:	4602      	mov	r2, r0
 8008de0:	f240 2132 	movw	r1, #562	; 0x232
 8008de4:	4839      	ldr	r0, [pc, #228]	; (8008ecc <__mdiff+0x110>)
 8008de6:	f000 fc51 	bl	800968c <__assert_func>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df4:	bfa4      	itt	ge
 8008df6:	4643      	movge	r3, r8
 8008df8:	46a0      	movge	r8, r4
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e00:	bfa6      	itte	ge
 8008e02:	461c      	movge	r4, r3
 8008e04:	2500      	movge	r5, #0
 8008e06:	2501      	movlt	r5, #1
 8008e08:	f7ff fcf0 	bl	80087ec <_Balloc>
 8008e0c:	b920      	cbnz	r0, 8008e18 <__mdiff+0x5c>
 8008e0e:	4b2e      	ldr	r3, [pc, #184]	; (8008ec8 <__mdiff+0x10c>)
 8008e10:	4602      	mov	r2, r0
 8008e12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e16:	e7e5      	b.n	8008de4 <__mdiff+0x28>
 8008e18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e1c:	6926      	ldr	r6, [r4, #16]
 8008e1e:	60c5      	str	r5, [r0, #12]
 8008e20:	f104 0914 	add.w	r9, r4, #20
 8008e24:	f108 0514 	add.w	r5, r8, #20
 8008e28:	f100 0e14 	add.w	lr, r0, #20
 8008e2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e34:	f108 0210 	add.w	r2, r8, #16
 8008e38:	46f2      	mov	sl, lr
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e44:	fa1f f883 	uxth.w	r8, r3
 8008e48:	fa11 f18b 	uxtah	r1, r1, fp
 8008e4c:	0c1b      	lsrs	r3, r3, #16
 8008e4e:	eba1 0808 	sub.w	r8, r1, r8
 8008e52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e5a:	fa1f f888 	uxth.w	r8, r8
 8008e5e:	1419      	asrs	r1, r3, #16
 8008e60:	454e      	cmp	r6, r9
 8008e62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e66:	f84a 3b04 	str.w	r3, [sl], #4
 8008e6a:	d8e7      	bhi.n	8008e3c <__mdiff+0x80>
 8008e6c:	1b33      	subs	r3, r6, r4
 8008e6e:	3b15      	subs	r3, #21
 8008e70:	f023 0303 	bic.w	r3, r3, #3
 8008e74:	3304      	adds	r3, #4
 8008e76:	3415      	adds	r4, #21
 8008e78:	42a6      	cmp	r6, r4
 8008e7a:	bf38      	it	cc
 8008e7c:	2304      	movcc	r3, #4
 8008e7e:	441d      	add	r5, r3
 8008e80:	4473      	add	r3, lr
 8008e82:	469e      	mov	lr, r3
 8008e84:	462e      	mov	r6, r5
 8008e86:	4566      	cmp	r6, ip
 8008e88:	d30e      	bcc.n	8008ea8 <__mdiff+0xec>
 8008e8a:	f10c 0203 	add.w	r2, ip, #3
 8008e8e:	1b52      	subs	r2, r2, r5
 8008e90:	f022 0203 	bic.w	r2, r2, #3
 8008e94:	3d03      	subs	r5, #3
 8008e96:	45ac      	cmp	ip, r5
 8008e98:	bf38      	it	cc
 8008e9a:	2200      	movcc	r2, #0
 8008e9c:	441a      	add	r2, r3
 8008e9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ea2:	b17b      	cbz	r3, 8008ec4 <__mdiff+0x108>
 8008ea4:	6107      	str	r7, [r0, #16]
 8008ea6:	e7a3      	b.n	8008df0 <__mdiff+0x34>
 8008ea8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008eac:	fa11 f288 	uxtah	r2, r1, r8
 8008eb0:	1414      	asrs	r4, r2, #16
 8008eb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008eb6:	b292      	uxth	r2, r2
 8008eb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ebc:	f84e 2b04 	str.w	r2, [lr], #4
 8008ec0:	1421      	asrs	r1, r4, #16
 8008ec2:	e7e0      	b.n	8008e86 <__mdiff+0xca>
 8008ec4:	3f01      	subs	r7, #1
 8008ec6:	e7ea      	b.n	8008e9e <__mdiff+0xe2>
 8008ec8:	0800b658 	.word	0x0800b658
 8008ecc:	0800b6e4 	.word	0x0800b6e4

08008ed0 <__ulp>:
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	ed8d 0b00 	vstr	d0, [sp]
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	4912      	ldr	r1, [pc, #72]	; (8008f24 <__ulp+0x54>)
 8008eda:	4019      	ands	r1, r3
 8008edc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008ee0:	2900      	cmp	r1, #0
 8008ee2:	dd05      	ble.n	8008ef0 <__ulp+0x20>
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	ec43 2b10 	vmov	d0, r2, r3
 8008eec:	b002      	add	sp, #8
 8008eee:	4770      	bx	lr
 8008ef0:	4249      	negs	r1, r1
 8008ef2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008ef6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008efa:	f04f 0200 	mov.w	r2, #0
 8008efe:	f04f 0300 	mov.w	r3, #0
 8008f02:	da04      	bge.n	8008f0e <__ulp+0x3e>
 8008f04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008f08:	fa41 f300 	asr.w	r3, r1, r0
 8008f0c:	e7ec      	b.n	8008ee8 <__ulp+0x18>
 8008f0e:	f1a0 0114 	sub.w	r1, r0, #20
 8008f12:	291e      	cmp	r1, #30
 8008f14:	bfda      	itte	le
 8008f16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008f1a:	fa20 f101 	lsrle.w	r1, r0, r1
 8008f1e:	2101      	movgt	r1, #1
 8008f20:	460a      	mov	r2, r1
 8008f22:	e7e1      	b.n	8008ee8 <__ulp+0x18>
 8008f24:	7ff00000 	.word	0x7ff00000

08008f28 <__b2d>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	6905      	ldr	r5, [r0, #16]
 8008f2c:	f100 0714 	add.w	r7, r0, #20
 8008f30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008f34:	1f2e      	subs	r6, r5, #4
 8008f36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f7ff fd48 	bl	80089d0 <__hi0bits>
 8008f40:	f1c0 0320 	rsb	r3, r0, #32
 8008f44:	280a      	cmp	r0, #10
 8008f46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008fc4 <__b2d+0x9c>
 8008f4a:	600b      	str	r3, [r1, #0]
 8008f4c:	dc14      	bgt.n	8008f78 <__b2d+0x50>
 8008f4e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008f52:	fa24 f10e 	lsr.w	r1, r4, lr
 8008f56:	42b7      	cmp	r7, r6
 8008f58:	ea41 030c 	orr.w	r3, r1, ip
 8008f5c:	bf34      	ite	cc
 8008f5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f62:	2100      	movcs	r1, #0
 8008f64:	3015      	adds	r0, #21
 8008f66:	fa04 f000 	lsl.w	r0, r4, r0
 8008f6a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008f6e:	ea40 0201 	orr.w	r2, r0, r1
 8008f72:	ec43 2b10 	vmov	d0, r2, r3
 8008f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f78:	42b7      	cmp	r7, r6
 8008f7a:	bf3a      	itte	cc
 8008f7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f80:	f1a5 0608 	subcc.w	r6, r5, #8
 8008f84:	2100      	movcs	r1, #0
 8008f86:	380b      	subs	r0, #11
 8008f88:	d017      	beq.n	8008fba <__b2d+0x92>
 8008f8a:	f1c0 0c20 	rsb	ip, r0, #32
 8008f8e:	fa04 f500 	lsl.w	r5, r4, r0
 8008f92:	42be      	cmp	r6, r7
 8008f94:	fa21 f40c 	lsr.w	r4, r1, ip
 8008f98:	ea45 0504 	orr.w	r5, r5, r4
 8008f9c:	bf8c      	ite	hi
 8008f9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008fa2:	2400      	movls	r4, #0
 8008fa4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008fa8:	fa01 f000 	lsl.w	r0, r1, r0
 8008fac:	fa24 f40c 	lsr.w	r4, r4, ip
 8008fb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008fb4:	ea40 0204 	orr.w	r2, r0, r4
 8008fb8:	e7db      	b.n	8008f72 <__b2d+0x4a>
 8008fba:	ea44 030c 	orr.w	r3, r4, ip
 8008fbe:	460a      	mov	r2, r1
 8008fc0:	e7d7      	b.n	8008f72 <__b2d+0x4a>
 8008fc2:	bf00      	nop
 8008fc4:	3ff00000 	.word	0x3ff00000

08008fc8 <__d2b>:
 8008fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	4689      	mov	r9, r1
 8008fce:	2101      	movs	r1, #1
 8008fd0:	ec57 6b10 	vmov	r6, r7, d0
 8008fd4:	4690      	mov	r8, r2
 8008fd6:	f7ff fc09 	bl	80087ec <_Balloc>
 8008fda:	4604      	mov	r4, r0
 8008fdc:	b930      	cbnz	r0, 8008fec <__d2b+0x24>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	4b25      	ldr	r3, [pc, #148]	; (8009078 <__d2b+0xb0>)
 8008fe2:	4826      	ldr	r0, [pc, #152]	; (800907c <__d2b+0xb4>)
 8008fe4:	f240 310a 	movw	r1, #778	; 0x30a
 8008fe8:	f000 fb50 	bl	800968c <__assert_func>
 8008fec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ff4:	bb35      	cbnz	r5, 8009044 <__d2b+0x7c>
 8008ff6:	2e00      	cmp	r6, #0
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	d028      	beq.n	800904e <__d2b+0x86>
 8008ffc:	4668      	mov	r0, sp
 8008ffe:	9600      	str	r6, [sp, #0]
 8009000:	f7ff fd06 	bl	8008a10 <__lo0bits>
 8009004:	9900      	ldr	r1, [sp, #0]
 8009006:	b300      	cbz	r0, 800904a <__d2b+0x82>
 8009008:	9a01      	ldr	r2, [sp, #4]
 800900a:	f1c0 0320 	rsb	r3, r0, #32
 800900e:	fa02 f303 	lsl.w	r3, r2, r3
 8009012:	430b      	orrs	r3, r1
 8009014:	40c2      	lsrs	r2, r0
 8009016:	6163      	str	r3, [r4, #20]
 8009018:	9201      	str	r2, [sp, #4]
 800901a:	9b01      	ldr	r3, [sp, #4]
 800901c:	61a3      	str	r3, [r4, #24]
 800901e:	2b00      	cmp	r3, #0
 8009020:	bf14      	ite	ne
 8009022:	2202      	movne	r2, #2
 8009024:	2201      	moveq	r2, #1
 8009026:	6122      	str	r2, [r4, #16]
 8009028:	b1d5      	cbz	r5, 8009060 <__d2b+0x98>
 800902a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800902e:	4405      	add	r5, r0
 8009030:	f8c9 5000 	str.w	r5, [r9]
 8009034:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009038:	f8c8 0000 	str.w	r0, [r8]
 800903c:	4620      	mov	r0, r4
 800903e:	b003      	add	sp, #12
 8009040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009048:	e7d5      	b.n	8008ff6 <__d2b+0x2e>
 800904a:	6161      	str	r1, [r4, #20]
 800904c:	e7e5      	b.n	800901a <__d2b+0x52>
 800904e:	a801      	add	r0, sp, #4
 8009050:	f7ff fcde 	bl	8008a10 <__lo0bits>
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	6163      	str	r3, [r4, #20]
 8009058:	2201      	movs	r2, #1
 800905a:	6122      	str	r2, [r4, #16]
 800905c:	3020      	adds	r0, #32
 800905e:	e7e3      	b.n	8009028 <__d2b+0x60>
 8009060:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009064:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009068:	f8c9 0000 	str.w	r0, [r9]
 800906c:	6918      	ldr	r0, [r3, #16]
 800906e:	f7ff fcaf 	bl	80089d0 <__hi0bits>
 8009072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009076:	e7df      	b.n	8009038 <__d2b+0x70>
 8009078:	0800b658 	.word	0x0800b658
 800907c:	0800b6e4 	.word	0x0800b6e4

08009080 <__ratio>:
 8009080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	4688      	mov	r8, r1
 8009086:	4669      	mov	r1, sp
 8009088:	4681      	mov	r9, r0
 800908a:	f7ff ff4d 	bl	8008f28 <__b2d>
 800908e:	a901      	add	r1, sp, #4
 8009090:	4640      	mov	r0, r8
 8009092:	ec55 4b10 	vmov	r4, r5, d0
 8009096:	f7ff ff47 	bl	8008f28 <__b2d>
 800909a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800909e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090a2:	eba3 0c02 	sub.w	ip, r3, r2
 80090a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80090b0:	ec51 0b10 	vmov	r0, r1, d0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bfd6      	itet	le
 80090b8:	460a      	movle	r2, r1
 80090ba:	462a      	movgt	r2, r5
 80090bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090c0:	468b      	mov	fp, r1
 80090c2:	462f      	mov	r7, r5
 80090c4:	bfd4      	ite	le
 80090c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80090ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80090ce:	4620      	mov	r0, r4
 80090d0:	ee10 2a10 	vmov	r2, s0
 80090d4:	465b      	mov	r3, fp
 80090d6:	4639      	mov	r1, r7
 80090d8:	f7f7 fbc0 	bl	800085c <__aeabi_ddiv>
 80090dc:	ec41 0b10 	vmov	d0, r0, r1
 80090e0:	b003      	add	sp, #12
 80090e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090e6 <__copybits>:
 80090e6:	3901      	subs	r1, #1
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	1149      	asrs	r1, r1, #5
 80090ec:	6914      	ldr	r4, [r2, #16]
 80090ee:	3101      	adds	r1, #1
 80090f0:	f102 0314 	add.w	r3, r2, #20
 80090f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090fc:	1f05      	subs	r5, r0, #4
 80090fe:	42a3      	cmp	r3, r4
 8009100:	d30c      	bcc.n	800911c <__copybits+0x36>
 8009102:	1aa3      	subs	r3, r4, r2
 8009104:	3b11      	subs	r3, #17
 8009106:	f023 0303 	bic.w	r3, r3, #3
 800910a:	3211      	adds	r2, #17
 800910c:	42a2      	cmp	r2, r4
 800910e:	bf88      	it	hi
 8009110:	2300      	movhi	r3, #0
 8009112:	4418      	add	r0, r3
 8009114:	2300      	movs	r3, #0
 8009116:	4288      	cmp	r0, r1
 8009118:	d305      	bcc.n	8009126 <__copybits+0x40>
 800911a:	bd70      	pop	{r4, r5, r6, pc}
 800911c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009120:	f845 6f04 	str.w	r6, [r5, #4]!
 8009124:	e7eb      	b.n	80090fe <__copybits+0x18>
 8009126:	f840 3b04 	str.w	r3, [r0], #4
 800912a:	e7f4      	b.n	8009116 <__copybits+0x30>

0800912c <__any_on>:
 800912c:	f100 0214 	add.w	r2, r0, #20
 8009130:	6900      	ldr	r0, [r0, #16]
 8009132:	114b      	asrs	r3, r1, #5
 8009134:	4298      	cmp	r0, r3
 8009136:	b510      	push	{r4, lr}
 8009138:	db11      	blt.n	800915e <__any_on+0x32>
 800913a:	dd0a      	ble.n	8009152 <__any_on+0x26>
 800913c:	f011 011f 	ands.w	r1, r1, #31
 8009140:	d007      	beq.n	8009152 <__any_on+0x26>
 8009142:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009146:	fa24 f001 	lsr.w	r0, r4, r1
 800914a:	fa00 f101 	lsl.w	r1, r0, r1
 800914e:	428c      	cmp	r4, r1
 8009150:	d10b      	bne.n	800916a <__any_on+0x3e>
 8009152:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009156:	4293      	cmp	r3, r2
 8009158:	d803      	bhi.n	8009162 <__any_on+0x36>
 800915a:	2000      	movs	r0, #0
 800915c:	bd10      	pop	{r4, pc}
 800915e:	4603      	mov	r3, r0
 8009160:	e7f7      	b.n	8009152 <__any_on+0x26>
 8009162:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009166:	2900      	cmp	r1, #0
 8009168:	d0f5      	beq.n	8009156 <__any_on+0x2a>
 800916a:	2001      	movs	r0, #1
 800916c:	e7f6      	b.n	800915c <__any_on+0x30>

0800916e <_calloc_r>:
 800916e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009170:	fba1 2402 	umull	r2, r4, r1, r2
 8009174:	b94c      	cbnz	r4, 800918a <_calloc_r+0x1c>
 8009176:	4611      	mov	r1, r2
 8009178:	9201      	str	r2, [sp, #4]
 800917a:	f000 f87b 	bl	8009274 <_malloc_r>
 800917e:	9a01      	ldr	r2, [sp, #4]
 8009180:	4605      	mov	r5, r0
 8009182:	b930      	cbnz	r0, 8009192 <_calloc_r+0x24>
 8009184:	4628      	mov	r0, r5
 8009186:	b003      	add	sp, #12
 8009188:	bd30      	pop	{r4, r5, pc}
 800918a:	220c      	movs	r2, #12
 800918c:	6002      	str	r2, [r0, #0]
 800918e:	2500      	movs	r5, #0
 8009190:	e7f8      	b.n	8009184 <_calloc_r+0x16>
 8009192:	4621      	mov	r1, r4
 8009194:	f7fc fb84 	bl	80058a0 <memset>
 8009198:	e7f4      	b.n	8009184 <_calloc_r+0x16>
	...

0800919c <_free_r>:
 800919c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800919e:	2900      	cmp	r1, #0
 80091a0:	d044      	beq.n	800922c <_free_r+0x90>
 80091a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a6:	9001      	str	r0, [sp, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f1a1 0404 	sub.w	r4, r1, #4
 80091ae:	bfb8      	it	lt
 80091b0:	18e4      	addlt	r4, r4, r3
 80091b2:	f000 fab5 	bl	8009720 <__malloc_lock>
 80091b6:	4a1e      	ldr	r2, [pc, #120]	; (8009230 <_free_r+0x94>)
 80091b8:	9801      	ldr	r0, [sp, #4]
 80091ba:	6813      	ldr	r3, [r2, #0]
 80091bc:	b933      	cbnz	r3, 80091cc <_free_r+0x30>
 80091be:	6063      	str	r3, [r4, #4]
 80091c0:	6014      	str	r4, [r2, #0]
 80091c2:	b003      	add	sp, #12
 80091c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091c8:	f000 bab0 	b.w	800972c <__malloc_unlock>
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	d908      	bls.n	80091e2 <_free_r+0x46>
 80091d0:	6825      	ldr	r5, [r4, #0]
 80091d2:	1961      	adds	r1, r4, r5
 80091d4:	428b      	cmp	r3, r1
 80091d6:	bf01      	itttt	eq
 80091d8:	6819      	ldreq	r1, [r3, #0]
 80091da:	685b      	ldreq	r3, [r3, #4]
 80091dc:	1949      	addeq	r1, r1, r5
 80091de:	6021      	streq	r1, [r4, #0]
 80091e0:	e7ed      	b.n	80091be <_free_r+0x22>
 80091e2:	461a      	mov	r2, r3
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	b10b      	cbz	r3, 80091ec <_free_r+0x50>
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	d9fa      	bls.n	80091e2 <_free_r+0x46>
 80091ec:	6811      	ldr	r1, [r2, #0]
 80091ee:	1855      	adds	r5, r2, r1
 80091f0:	42a5      	cmp	r5, r4
 80091f2:	d10b      	bne.n	800920c <_free_r+0x70>
 80091f4:	6824      	ldr	r4, [r4, #0]
 80091f6:	4421      	add	r1, r4
 80091f8:	1854      	adds	r4, r2, r1
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	6011      	str	r1, [r2, #0]
 80091fe:	d1e0      	bne.n	80091c2 <_free_r+0x26>
 8009200:	681c      	ldr	r4, [r3, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	6053      	str	r3, [r2, #4]
 8009206:	4421      	add	r1, r4
 8009208:	6011      	str	r1, [r2, #0]
 800920a:	e7da      	b.n	80091c2 <_free_r+0x26>
 800920c:	d902      	bls.n	8009214 <_free_r+0x78>
 800920e:	230c      	movs	r3, #12
 8009210:	6003      	str	r3, [r0, #0]
 8009212:	e7d6      	b.n	80091c2 <_free_r+0x26>
 8009214:	6825      	ldr	r5, [r4, #0]
 8009216:	1961      	adds	r1, r4, r5
 8009218:	428b      	cmp	r3, r1
 800921a:	bf04      	itt	eq
 800921c:	6819      	ldreq	r1, [r3, #0]
 800921e:	685b      	ldreq	r3, [r3, #4]
 8009220:	6063      	str	r3, [r4, #4]
 8009222:	bf04      	itt	eq
 8009224:	1949      	addeq	r1, r1, r5
 8009226:	6021      	streq	r1, [r4, #0]
 8009228:	6054      	str	r4, [r2, #4]
 800922a:	e7ca      	b.n	80091c2 <_free_r+0x26>
 800922c:	b003      	add	sp, #12
 800922e:	bd30      	pop	{r4, r5, pc}
 8009230:	200008b0 	.word	0x200008b0

08009234 <sbrk_aligned>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	4e0e      	ldr	r6, [pc, #56]	; (8009270 <sbrk_aligned+0x3c>)
 8009238:	460c      	mov	r4, r1
 800923a:	6831      	ldr	r1, [r6, #0]
 800923c:	4605      	mov	r5, r0
 800923e:	b911      	cbnz	r1, 8009246 <sbrk_aligned+0x12>
 8009240:	f000 f9f2 	bl	8009628 <_sbrk_r>
 8009244:	6030      	str	r0, [r6, #0]
 8009246:	4621      	mov	r1, r4
 8009248:	4628      	mov	r0, r5
 800924a:	f000 f9ed 	bl	8009628 <_sbrk_r>
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d00a      	beq.n	8009268 <sbrk_aligned+0x34>
 8009252:	1cc4      	adds	r4, r0, #3
 8009254:	f024 0403 	bic.w	r4, r4, #3
 8009258:	42a0      	cmp	r0, r4
 800925a:	d007      	beq.n	800926c <sbrk_aligned+0x38>
 800925c:	1a21      	subs	r1, r4, r0
 800925e:	4628      	mov	r0, r5
 8009260:	f000 f9e2 	bl	8009628 <_sbrk_r>
 8009264:	3001      	adds	r0, #1
 8009266:	d101      	bne.n	800926c <sbrk_aligned+0x38>
 8009268:	f04f 34ff 	mov.w	r4, #4294967295
 800926c:	4620      	mov	r0, r4
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	200008b4 	.word	0x200008b4

08009274 <_malloc_r>:
 8009274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009278:	1ccd      	adds	r5, r1, #3
 800927a:	f025 0503 	bic.w	r5, r5, #3
 800927e:	3508      	adds	r5, #8
 8009280:	2d0c      	cmp	r5, #12
 8009282:	bf38      	it	cc
 8009284:	250c      	movcc	r5, #12
 8009286:	2d00      	cmp	r5, #0
 8009288:	4607      	mov	r7, r0
 800928a:	db01      	blt.n	8009290 <_malloc_r+0x1c>
 800928c:	42a9      	cmp	r1, r5
 800928e:	d905      	bls.n	800929c <_malloc_r+0x28>
 8009290:	230c      	movs	r3, #12
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	2600      	movs	r6, #0
 8009296:	4630      	mov	r0, r6
 8009298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800929c:	4e2e      	ldr	r6, [pc, #184]	; (8009358 <_malloc_r+0xe4>)
 800929e:	f000 fa3f 	bl	8009720 <__malloc_lock>
 80092a2:	6833      	ldr	r3, [r6, #0]
 80092a4:	461c      	mov	r4, r3
 80092a6:	bb34      	cbnz	r4, 80092f6 <_malloc_r+0x82>
 80092a8:	4629      	mov	r1, r5
 80092aa:	4638      	mov	r0, r7
 80092ac:	f7ff ffc2 	bl	8009234 <sbrk_aligned>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	4604      	mov	r4, r0
 80092b4:	d14d      	bne.n	8009352 <_malloc_r+0xde>
 80092b6:	6834      	ldr	r4, [r6, #0]
 80092b8:	4626      	mov	r6, r4
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	d140      	bne.n	8009340 <_malloc_r+0xcc>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	4631      	mov	r1, r6
 80092c2:	4638      	mov	r0, r7
 80092c4:	eb04 0803 	add.w	r8, r4, r3
 80092c8:	f000 f9ae 	bl	8009628 <_sbrk_r>
 80092cc:	4580      	cmp	r8, r0
 80092ce:	d13a      	bne.n	8009346 <_malloc_r+0xd2>
 80092d0:	6821      	ldr	r1, [r4, #0]
 80092d2:	3503      	adds	r5, #3
 80092d4:	1a6d      	subs	r5, r5, r1
 80092d6:	f025 0503 	bic.w	r5, r5, #3
 80092da:	3508      	adds	r5, #8
 80092dc:	2d0c      	cmp	r5, #12
 80092de:	bf38      	it	cc
 80092e0:	250c      	movcc	r5, #12
 80092e2:	4629      	mov	r1, r5
 80092e4:	4638      	mov	r0, r7
 80092e6:	f7ff ffa5 	bl	8009234 <sbrk_aligned>
 80092ea:	3001      	adds	r0, #1
 80092ec:	d02b      	beq.n	8009346 <_malloc_r+0xd2>
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	442b      	add	r3, r5
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	e00e      	b.n	8009314 <_malloc_r+0xa0>
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	1b52      	subs	r2, r2, r5
 80092fa:	d41e      	bmi.n	800933a <_malloc_r+0xc6>
 80092fc:	2a0b      	cmp	r2, #11
 80092fe:	d916      	bls.n	800932e <_malloc_r+0xba>
 8009300:	1961      	adds	r1, r4, r5
 8009302:	42a3      	cmp	r3, r4
 8009304:	6025      	str	r5, [r4, #0]
 8009306:	bf18      	it	ne
 8009308:	6059      	strne	r1, [r3, #4]
 800930a:	6863      	ldr	r3, [r4, #4]
 800930c:	bf08      	it	eq
 800930e:	6031      	streq	r1, [r6, #0]
 8009310:	5162      	str	r2, [r4, r5]
 8009312:	604b      	str	r3, [r1, #4]
 8009314:	4638      	mov	r0, r7
 8009316:	f104 060b 	add.w	r6, r4, #11
 800931a:	f000 fa07 	bl	800972c <__malloc_unlock>
 800931e:	f026 0607 	bic.w	r6, r6, #7
 8009322:	1d23      	adds	r3, r4, #4
 8009324:	1af2      	subs	r2, r6, r3
 8009326:	d0b6      	beq.n	8009296 <_malloc_r+0x22>
 8009328:	1b9b      	subs	r3, r3, r6
 800932a:	50a3      	str	r3, [r4, r2]
 800932c:	e7b3      	b.n	8009296 <_malloc_r+0x22>
 800932e:	6862      	ldr	r2, [r4, #4]
 8009330:	42a3      	cmp	r3, r4
 8009332:	bf0c      	ite	eq
 8009334:	6032      	streq	r2, [r6, #0]
 8009336:	605a      	strne	r2, [r3, #4]
 8009338:	e7ec      	b.n	8009314 <_malloc_r+0xa0>
 800933a:	4623      	mov	r3, r4
 800933c:	6864      	ldr	r4, [r4, #4]
 800933e:	e7b2      	b.n	80092a6 <_malloc_r+0x32>
 8009340:	4634      	mov	r4, r6
 8009342:	6876      	ldr	r6, [r6, #4]
 8009344:	e7b9      	b.n	80092ba <_malloc_r+0x46>
 8009346:	230c      	movs	r3, #12
 8009348:	603b      	str	r3, [r7, #0]
 800934a:	4638      	mov	r0, r7
 800934c:	f000 f9ee 	bl	800972c <__malloc_unlock>
 8009350:	e7a1      	b.n	8009296 <_malloc_r+0x22>
 8009352:	6025      	str	r5, [r4, #0]
 8009354:	e7de      	b.n	8009314 <_malloc_r+0xa0>
 8009356:	bf00      	nop
 8009358:	200008b0 	.word	0x200008b0

0800935c <__ssputs_r>:
 800935c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009360:	688e      	ldr	r6, [r1, #8]
 8009362:	429e      	cmp	r6, r3
 8009364:	4682      	mov	sl, r0
 8009366:	460c      	mov	r4, r1
 8009368:	4690      	mov	r8, r2
 800936a:	461f      	mov	r7, r3
 800936c:	d838      	bhi.n	80093e0 <__ssputs_r+0x84>
 800936e:	898a      	ldrh	r2, [r1, #12]
 8009370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009374:	d032      	beq.n	80093dc <__ssputs_r+0x80>
 8009376:	6825      	ldr	r5, [r4, #0]
 8009378:	6909      	ldr	r1, [r1, #16]
 800937a:	eba5 0901 	sub.w	r9, r5, r1
 800937e:	6965      	ldr	r5, [r4, #20]
 8009380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009388:	3301      	adds	r3, #1
 800938a:	444b      	add	r3, r9
 800938c:	106d      	asrs	r5, r5, #1
 800938e:	429d      	cmp	r5, r3
 8009390:	bf38      	it	cc
 8009392:	461d      	movcc	r5, r3
 8009394:	0553      	lsls	r3, r2, #21
 8009396:	d531      	bpl.n	80093fc <__ssputs_r+0xa0>
 8009398:	4629      	mov	r1, r5
 800939a:	f7ff ff6b 	bl	8009274 <_malloc_r>
 800939e:	4606      	mov	r6, r0
 80093a0:	b950      	cbnz	r0, 80093b8 <__ssputs_r+0x5c>
 80093a2:	230c      	movs	r3, #12
 80093a4:	f8ca 3000 	str.w	r3, [sl]
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ae:	81a3      	strh	r3, [r4, #12]
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295
 80093b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b8:	6921      	ldr	r1, [r4, #16]
 80093ba:	464a      	mov	r2, r9
 80093bc:	f7ff fa08 	bl	80087d0 <memcpy>
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	6126      	str	r6, [r4, #16]
 80093ce:	6165      	str	r5, [r4, #20]
 80093d0:	444e      	add	r6, r9
 80093d2:	eba5 0509 	sub.w	r5, r5, r9
 80093d6:	6026      	str	r6, [r4, #0]
 80093d8:	60a5      	str	r5, [r4, #8]
 80093da:	463e      	mov	r6, r7
 80093dc:	42be      	cmp	r6, r7
 80093de:	d900      	bls.n	80093e2 <__ssputs_r+0x86>
 80093e0:	463e      	mov	r6, r7
 80093e2:	6820      	ldr	r0, [r4, #0]
 80093e4:	4632      	mov	r2, r6
 80093e6:	4641      	mov	r1, r8
 80093e8:	f000 f980 	bl	80096ec <memmove>
 80093ec:	68a3      	ldr	r3, [r4, #8]
 80093ee:	1b9b      	subs	r3, r3, r6
 80093f0:	60a3      	str	r3, [r4, #8]
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	4433      	add	r3, r6
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	2000      	movs	r0, #0
 80093fa:	e7db      	b.n	80093b4 <__ssputs_r+0x58>
 80093fc:	462a      	mov	r2, r5
 80093fe:	f000 f99b 	bl	8009738 <_realloc_r>
 8009402:	4606      	mov	r6, r0
 8009404:	2800      	cmp	r0, #0
 8009406:	d1e1      	bne.n	80093cc <__ssputs_r+0x70>
 8009408:	6921      	ldr	r1, [r4, #16]
 800940a:	4650      	mov	r0, sl
 800940c:	f7ff fec6 	bl	800919c <_free_r>
 8009410:	e7c7      	b.n	80093a2 <__ssputs_r+0x46>
	...

08009414 <_svfiprintf_r>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	4698      	mov	r8, r3
 800941a:	898b      	ldrh	r3, [r1, #12]
 800941c:	061b      	lsls	r3, r3, #24
 800941e:	b09d      	sub	sp, #116	; 0x74
 8009420:	4607      	mov	r7, r0
 8009422:	460d      	mov	r5, r1
 8009424:	4614      	mov	r4, r2
 8009426:	d50e      	bpl.n	8009446 <_svfiprintf_r+0x32>
 8009428:	690b      	ldr	r3, [r1, #16]
 800942a:	b963      	cbnz	r3, 8009446 <_svfiprintf_r+0x32>
 800942c:	2140      	movs	r1, #64	; 0x40
 800942e:	f7ff ff21 	bl	8009274 <_malloc_r>
 8009432:	6028      	str	r0, [r5, #0]
 8009434:	6128      	str	r0, [r5, #16]
 8009436:	b920      	cbnz	r0, 8009442 <_svfiprintf_r+0x2e>
 8009438:	230c      	movs	r3, #12
 800943a:	603b      	str	r3, [r7, #0]
 800943c:	f04f 30ff 	mov.w	r0, #4294967295
 8009440:	e0d1      	b.n	80095e6 <_svfiprintf_r+0x1d2>
 8009442:	2340      	movs	r3, #64	; 0x40
 8009444:	616b      	str	r3, [r5, #20]
 8009446:	2300      	movs	r3, #0
 8009448:	9309      	str	r3, [sp, #36]	; 0x24
 800944a:	2320      	movs	r3, #32
 800944c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009450:	f8cd 800c 	str.w	r8, [sp, #12]
 8009454:	2330      	movs	r3, #48	; 0x30
 8009456:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009600 <_svfiprintf_r+0x1ec>
 800945a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800945e:	f04f 0901 	mov.w	r9, #1
 8009462:	4623      	mov	r3, r4
 8009464:	469a      	mov	sl, r3
 8009466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800946a:	b10a      	cbz	r2, 8009470 <_svfiprintf_r+0x5c>
 800946c:	2a25      	cmp	r2, #37	; 0x25
 800946e:	d1f9      	bne.n	8009464 <_svfiprintf_r+0x50>
 8009470:	ebba 0b04 	subs.w	fp, sl, r4
 8009474:	d00b      	beq.n	800948e <_svfiprintf_r+0x7a>
 8009476:	465b      	mov	r3, fp
 8009478:	4622      	mov	r2, r4
 800947a:	4629      	mov	r1, r5
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff ff6d 	bl	800935c <__ssputs_r>
 8009482:	3001      	adds	r0, #1
 8009484:	f000 80aa 	beq.w	80095dc <_svfiprintf_r+0x1c8>
 8009488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800948a:	445a      	add	r2, fp
 800948c:	9209      	str	r2, [sp, #36]	; 0x24
 800948e:	f89a 3000 	ldrb.w	r3, [sl]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 80a2 	beq.w	80095dc <_svfiprintf_r+0x1c8>
 8009498:	2300      	movs	r3, #0
 800949a:	f04f 32ff 	mov.w	r2, #4294967295
 800949e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094a2:	f10a 0a01 	add.w	sl, sl, #1
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	9307      	str	r3, [sp, #28]
 80094aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094ae:	931a      	str	r3, [sp, #104]	; 0x68
 80094b0:	4654      	mov	r4, sl
 80094b2:	2205      	movs	r2, #5
 80094b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b8:	4851      	ldr	r0, [pc, #324]	; (8009600 <_svfiprintf_r+0x1ec>)
 80094ba:	f7f6 fe99 	bl	80001f0 <memchr>
 80094be:	9a04      	ldr	r2, [sp, #16]
 80094c0:	b9d8      	cbnz	r0, 80094fa <_svfiprintf_r+0xe6>
 80094c2:	06d0      	lsls	r0, r2, #27
 80094c4:	bf44      	itt	mi
 80094c6:	2320      	movmi	r3, #32
 80094c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094cc:	0711      	lsls	r1, r2, #28
 80094ce:	bf44      	itt	mi
 80094d0:	232b      	movmi	r3, #43	; 0x2b
 80094d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094d6:	f89a 3000 	ldrb.w	r3, [sl]
 80094da:	2b2a      	cmp	r3, #42	; 0x2a
 80094dc:	d015      	beq.n	800950a <_svfiprintf_r+0xf6>
 80094de:	9a07      	ldr	r2, [sp, #28]
 80094e0:	4654      	mov	r4, sl
 80094e2:	2000      	movs	r0, #0
 80094e4:	f04f 0c0a 	mov.w	ip, #10
 80094e8:	4621      	mov	r1, r4
 80094ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094ee:	3b30      	subs	r3, #48	; 0x30
 80094f0:	2b09      	cmp	r3, #9
 80094f2:	d94e      	bls.n	8009592 <_svfiprintf_r+0x17e>
 80094f4:	b1b0      	cbz	r0, 8009524 <_svfiprintf_r+0x110>
 80094f6:	9207      	str	r2, [sp, #28]
 80094f8:	e014      	b.n	8009524 <_svfiprintf_r+0x110>
 80094fa:	eba0 0308 	sub.w	r3, r0, r8
 80094fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009502:	4313      	orrs	r3, r2
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	46a2      	mov	sl, r4
 8009508:	e7d2      	b.n	80094b0 <_svfiprintf_r+0x9c>
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	1d19      	adds	r1, r3, #4
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	9103      	str	r1, [sp, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	bfbb      	ittet	lt
 8009516:	425b      	neglt	r3, r3
 8009518:	f042 0202 	orrlt.w	r2, r2, #2
 800951c:	9307      	strge	r3, [sp, #28]
 800951e:	9307      	strlt	r3, [sp, #28]
 8009520:	bfb8      	it	lt
 8009522:	9204      	strlt	r2, [sp, #16]
 8009524:	7823      	ldrb	r3, [r4, #0]
 8009526:	2b2e      	cmp	r3, #46	; 0x2e
 8009528:	d10c      	bne.n	8009544 <_svfiprintf_r+0x130>
 800952a:	7863      	ldrb	r3, [r4, #1]
 800952c:	2b2a      	cmp	r3, #42	; 0x2a
 800952e:	d135      	bne.n	800959c <_svfiprintf_r+0x188>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	1d1a      	adds	r2, r3, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	9203      	str	r2, [sp, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	bfb8      	it	lt
 800953c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009540:	3402      	adds	r4, #2
 8009542:	9305      	str	r3, [sp, #20]
 8009544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009610 <_svfiprintf_r+0x1fc>
 8009548:	7821      	ldrb	r1, [r4, #0]
 800954a:	2203      	movs	r2, #3
 800954c:	4650      	mov	r0, sl
 800954e:	f7f6 fe4f 	bl	80001f0 <memchr>
 8009552:	b140      	cbz	r0, 8009566 <_svfiprintf_r+0x152>
 8009554:	2340      	movs	r3, #64	; 0x40
 8009556:	eba0 000a 	sub.w	r0, r0, sl
 800955a:	fa03 f000 	lsl.w	r0, r3, r0
 800955e:	9b04      	ldr	r3, [sp, #16]
 8009560:	4303      	orrs	r3, r0
 8009562:	3401      	adds	r4, #1
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956a:	4826      	ldr	r0, [pc, #152]	; (8009604 <_svfiprintf_r+0x1f0>)
 800956c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009570:	2206      	movs	r2, #6
 8009572:	f7f6 fe3d 	bl	80001f0 <memchr>
 8009576:	2800      	cmp	r0, #0
 8009578:	d038      	beq.n	80095ec <_svfiprintf_r+0x1d8>
 800957a:	4b23      	ldr	r3, [pc, #140]	; (8009608 <_svfiprintf_r+0x1f4>)
 800957c:	bb1b      	cbnz	r3, 80095c6 <_svfiprintf_r+0x1b2>
 800957e:	9b03      	ldr	r3, [sp, #12]
 8009580:	3307      	adds	r3, #7
 8009582:	f023 0307 	bic.w	r3, r3, #7
 8009586:	3308      	adds	r3, #8
 8009588:	9303      	str	r3, [sp, #12]
 800958a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958c:	4433      	add	r3, r6
 800958e:	9309      	str	r3, [sp, #36]	; 0x24
 8009590:	e767      	b.n	8009462 <_svfiprintf_r+0x4e>
 8009592:	fb0c 3202 	mla	r2, ip, r2, r3
 8009596:	460c      	mov	r4, r1
 8009598:	2001      	movs	r0, #1
 800959a:	e7a5      	b.n	80094e8 <_svfiprintf_r+0xd4>
 800959c:	2300      	movs	r3, #0
 800959e:	3401      	adds	r4, #1
 80095a0:	9305      	str	r3, [sp, #20]
 80095a2:	4619      	mov	r1, r3
 80095a4:	f04f 0c0a 	mov.w	ip, #10
 80095a8:	4620      	mov	r0, r4
 80095aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ae:	3a30      	subs	r2, #48	; 0x30
 80095b0:	2a09      	cmp	r2, #9
 80095b2:	d903      	bls.n	80095bc <_svfiprintf_r+0x1a8>
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0c5      	beq.n	8009544 <_svfiprintf_r+0x130>
 80095b8:	9105      	str	r1, [sp, #20]
 80095ba:	e7c3      	b.n	8009544 <_svfiprintf_r+0x130>
 80095bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80095c0:	4604      	mov	r4, r0
 80095c2:	2301      	movs	r3, #1
 80095c4:	e7f0      	b.n	80095a8 <_svfiprintf_r+0x194>
 80095c6:	ab03      	add	r3, sp, #12
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	462a      	mov	r2, r5
 80095cc:	4b0f      	ldr	r3, [pc, #60]	; (800960c <_svfiprintf_r+0x1f8>)
 80095ce:	a904      	add	r1, sp, #16
 80095d0:	4638      	mov	r0, r7
 80095d2:	f7fc fa0d 	bl	80059f0 <_printf_float>
 80095d6:	1c42      	adds	r2, r0, #1
 80095d8:	4606      	mov	r6, r0
 80095da:	d1d6      	bne.n	800958a <_svfiprintf_r+0x176>
 80095dc:	89ab      	ldrh	r3, [r5, #12]
 80095de:	065b      	lsls	r3, r3, #25
 80095e0:	f53f af2c 	bmi.w	800943c <_svfiprintf_r+0x28>
 80095e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095e6:	b01d      	add	sp, #116	; 0x74
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	ab03      	add	r3, sp, #12
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	462a      	mov	r2, r5
 80095f2:	4b06      	ldr	r3, [pc, #24]	; (800960c <_svfiprintf_r+0x1f8>)
 80095f4:	a904      	add	r1, sp, #16
 80095f6:	4638      	mov	r0, r7
 80095f8:	f7fc fc9e 	bl	8005f38 <_printf_i>
 80095fc:	e7eb      	b.n	80095d6 <_svfiprintf_r+0x1c2>
 80095fe:	bf00      	nop
 8009600:	0800b83c 	.word	0x0800b83c
 8009604:	0800b846 	.word	0x0800b846
 8009608:	080059f1 	.word	0x080059f1
 800960c:	0800935d 	.word	0x0800935d
 8009610:	0800b842 	.word	0x0800b842
 8009614:	00000000 	.word	0x00000000

08009618 <nan>:
 8009618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009620 <nan+0x8>
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	00000000 	.word	0x00000000
 8009624:	7ff80000 	.word	0x7ff80000

08009628 <_sbrk_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d06      	ldr	r5, [pc, #24]	; (8009644 <_sbrk_r+0x1c>)
 800962c:	2300      	movs	r3, #0
 800962e:	4604      	mov	r4, r0
 8009630:	4608      	mov	r0, r1
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	f7f8 fec4 	bl	80023c0 <_sbrk>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d102      	bne.n	8009642 <_sbrk_r+0x1a>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	b103      	cbz	r3, 8009642 <_sbrk_r+0x1a>
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	200008b8 	.word	0x200008b8

08009648 <strncmp>:
 8009648:	b510      	push	{r4, lr}
 800964a:	b17a      	cbz	r2, 800966c <strncmp+0x24>
 800964c:	4603      	mov	r3, r0
 800964e:	3901      	subs	r1, #1
 8009650:	1884      	adds	r4, r0, r2
 8009652:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009656:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800965a:	4290      	cmp	r0, r2
 800965c:	d101      	bne.n	8009662 <strncmp+0x1a>
 800965e:	42a3      	cmp	r3, r4
 8009660:	d101      	bne.n	8009666 <strncmp+0x1e>
 8009662:	1a80      	subs	r0, r0, r2
 8009664:	bd10      	pop	{r4, pc}
 8009666:	2800      	cmp	r0, #0
 8009668:	d1f3      	bne.n	8009652 <strncmp+0xa>
 800966a:	e7fa      	b.n	8009662 <strncmp+0x1a>
 800966c:	4610      	mov	r0, r2
 800966e:	e7f9      	b.n	8009664 <strncmp+0x1c>

08009670 <__ascii_wctomb>:
 8009670:	b149      	cbz	r1, 8009686 <__ascii_wctomb+0x16>
 8009672:	2aff      	cmp	r2, #255	; 0xff
 8009674:	bf85      	ittet	hi
 8009676:	238a      	movhi	r3, #138	; 0x8a
 8009678:	6003      	strhi	r3, [r0, #0]
 800967a:	700a      	strbls	r2, [r1, #0]
 800967c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009680:	bf98      	it	ls
 8009682:	2001      	movls	r0, #1
 8009684:	4770      	bx	lr
 8009686:	4608      	mov	r0, r1
 8009688:	4770      	bx	lr
	...

0800968c <__assert_func>:
 800968c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800968e:	4614      	mov	r4, r2
 8009690:	461a      	mov	r2, r3
 8009692:	4b09      	ldr	r3, [pc, #36]	; (80096b8 <__assert_func+0x2c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4605      	mov	r5, r0
 8009698:	68d8      	ldr	r0, [r3, #12]
 800969a:	b14c      	cbz	r4, 80096b0 <__assert_func+0x24>
 800969c:	4b07      	ldr	r3, [pc, #28]	; (80096bc <__assert_func+0x30>)
 800969e:	9100      	str	r1, [sp, #0]
 80096a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096a4:	4906      	ldr	r1, [pc, #24]	; (80096c0 <__assert_func+0x34>)
 80096a6:	462b      	mov	r3, r5
 80096a8:	f000 f80e 	bl	80096c8 <fiprintf>
 80096ac:	f000 fa8c 	bl	8009bc8 <abort>
 80096b0:	4b04      	ldr	r3, [pc, #16]	; (80096c4 <__assert_func+0x38>)
 80096b2:	461c      	mov	r4, r3
 80096b4:	e7f3      	b.n	800969e <__assert_func+0x12>
 80096b6:	bf00      	nop
 80096b8:	2000000c 	.word	0x2000000c
 80096bc:	0800b84d 	.word	0x0800b84d
 80096c0:	0800b85a 	.word	0x0800b85a
 80096c4:	0800b888 	.word	0x0800b888

080096c8 <fiprintf>:
 80096c8:	b40e      	push	{r1, r2, r3}
 80096ca:	b503      	push	{r0, r1, lr}
 80096cc:	4601      	mov	r1, r0
 80096ce:	ab03      	add	r3, sp, #12
 80096d0:	4805      	ldr	r0, [pc, #20]	; (80096e8 <fiprintf+0x20>)
 80096d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d6:	6800      	ldr	r0, [r0, #0]
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	f000 f885 	bl	80097e8 <_vfiprintf_r>
 80096de:	b002      	add	sp, #8
 80096e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e4:	b003      	add	sp, #12
 80096e6:	4770      	bx	lr
 80096e8:	2000000c 	.word	0x2000000c

080096ec <memmove>:
 80096ec:	4288      	cmp	r0, r1
 80096ee:	b510      	push	{r4, lr}
 80096f0:	eb01 0402 	add.w	r4, r1, r2
 80096f4:	d902      	bls.n	80096fc <memmove+0x10>
 80096f6:	4284      	cmp	r4, r0
 80096f8:	4623      	mov	r3, r4
 80096fa:	d807      	bhi.n	800970c <memmove+0x20>
 80096fc:	1e43      	subs	r3, r0, #1
 80096fe:	42a1      	cmp	r1, r4
 8009700:	d008      	beq.n	8009714 <memmove+0x28>
 8009702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800970a:	e7f8      	b.n	80096fe <memmove+0x12>
 800970c:	4402      	add	r2, r0
 800970e:	4601      	mov	r1, r0
 8009710:	428a      	cmp	r2, r1
 8009712:	d100      	bne.n	8009716 <memmove+0x2a>
 8009714:	bd10      	pop	{r4, pc}
 8009716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800971a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800971e:	e7f7      	b.n	8009710 <memmove+0x24>

08009720 <__malloc_lock>:
 8009720:	4801      	ldr	r0, [pc, #4]	; (8009728 <__malloc_lock+0x8>)
 8009722:	f000 bc11 	b.w	8009f48 <__retarget_lock_acquire_recursive>
 8009726:	bf00      	nop
 8009728:	200008bc 	.word	0x200008bc

0800972c <__malloc_unlock>:
 800972c:	4801      	ldr	r0, [pc, #4]	; (8009734 <__malloc_unlock+0x8>)
 800972e:	f000 bc0c 	b.w	8009f4a <__retarget_lock_release_recursive>
 8009732:	bf00      	nop
 8009734:	200008bc 	.word	0x200008bc

08009738 <_realloc_r>:
 8009738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973c:	4680      	mov	r8, r0
 800973e:	4614      	mov	r4, r2
 8009740:	460e      	mov	r6, r1
 8009742:	b921      	cbnz	r1, 800974e <_realloc_r+0x16>
 8009744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009748:	4611      	mov	r1, r2
 800974a:	f7ff bd93 	b.w	8009274 <_malloc_r>
 800974e:	b92a      	cbnz	r2, 800975c <_realloc_r+0x24>
 8009750:	f7ff fd24 	bl	800919c <_free_r>
 8009754:	4625      	mov	r5, r4
 8009756:	4628      	mov	r0, r5
 8009758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800975c:	f000 fc5c 	bl	800a018 <_malloc_usable_size_r>
 8009760:	4284      	cmp	r4, r0
 8009762:	4607      	mov	r7, r0
 8009764:	d802      	bhi.n	800976c <_realloc_r+0x34>
 8009766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800976a:	d812      	bhi.n	8009792 <_realloc_r+0x5a>
 800976c:	4621      	mov	r1, r4
 800976e:	4640      	mov	r0, r8
 8009770:	f7ff fd80 	bl	8009274 <_malloc_r>
 8009774:	4605      	mov	r5, r0
 8009776:	2800      	cmp	r0, #0
 8009778:	d0ed      	beq.n	8009756 <_realloc_r+0x1e>
 800977a:	42bc      	cmp	r4, r7
 800977c:	4622      	mov	r2, r4
 800977e:	4631      	mov	r1, r6
 8009780:	bf28      	it	cs
 8009782:	463a      	movcs	r2, r7
 8009784:	f7ff f824 	bl	80087d0 <memcpy>
 8009788:	4631      	mov	r1, r6
 800978a:	4640      	mov	r0, r8
 800978c:	f7ff fd06 	bl	800919c <_free_r>
 8009790:	e7e1      	b.n	8009756 <_realloc_r+0x1e>
 8009792:	4635      	mov	r5, r6
 8009794:	e7df      	b.n	8009756 <_realloc_r+0x1e>

08009796 <__sfputc_r>:
 8009796:	6893      	ldr	r3, [r2, #8]
 8009798:	3b01      	subs	r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	b410      	push	{r4}
 800979e:	6093      	str	r3, [r2, #8]
 80097a0:	da08      	bge.n	80097b4 <__sfputc_r+0x1e>
 80097a2:	6994      	ldr	r4, [r2, #24]
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	db01      	blt.n	80097ac <__sfputc_r+0x16>
 80097a8:	290a      	cmp	r1, #10
 80097aa:	d103      	bne.n	80097b4 <__sfputc_r+0x1e>
 80097ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097b0:	f000 b94a 	b.w	8009a48 <__swbuf_r>
 80097b4:	6813      	ldr	r3, [r2, #0]
 80097b6:	1c58      	adds	r0, r3, #1
 80097b8:	6010      	str	r0, [r2, #0]
 80097ba:	7019      	strb	r1, [r3, #0]
 80097bc:	4608      	mov	r0, r1
 80097be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <__sfputs_r>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	4606      	mov	r6, r0
 80097c8:	460f      	mov	r7, r1
 80097ca:	4614      	mov	r4, r2
 80097cc:	18d5      	adds	r5, r2, r3
 80097ce:	42ac      	cmp	r4, r5
 80097d0:	d101      	bne.n	80097d6 <__sfputs_r+0x12>
 80097d2:	2000      	movs	r0, #0
 80097d4:	e007      	b.n	80097e6 <__sfputs_r+0x22>
 80097d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097da:	463a      	mov	r2, r7
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff ffda 	bl	8009796 <__sfputc_r>
 80097e2:	1c43      	adds	r3, r0, #1
 80097e4:	d1f3      	bne.n	80097ce <__sfputs_r+0xa>
 80097e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097e8 <_vfiprintf_r>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	460d      	mov	r5, r1
 80097ee:	b09d      	sub	sp, #116	; 0x74
 80097f0:	4614      	mov	r4, r2
 80097f2:	4698      	mov	r8, r3
 80097f4:	4606      	mov	r6, r0
 80097f6:	b118      	cbz	r0, 8009800 <_vfiprintf_r+0x18>
 80097f8:	6983      	ldr	r3, [r0, #24]
 80097fa:	b90b      	cbnz	r3, 8009800 <_vfiprintf_r+0x18>
 80097fc:	f000 fb06 	bl	8009e0c <__sinit>
 8009800:	4b89      	ldr	r3, [pc, #548]	; (8009a28 <_vfiprintf_r+0x240>)
 8009802:	429d      	cmp	r5, r3
 8009804:	d11b      	bne.n	800983e <_vfiprintf_r+0x56>
 8009806:	6875      	ldr	r5, [r6, #4]
 8009808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800980a:	07d9      	lsls	r1, r3, #31
 800980c:	d405      	bmi.n	800981a <_vfiprintf_r+0x32>
 800980e:	89ab      	ldrh	r3, [r5, #12]
 8009810:	059a      	lsls	r2, r3, #22
 8009812:	d402      	bmi.n	800981a <_vfiprintf_r+0x32>
 8009814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009816:	f000 fb97 	bl	8009f48 <__retarget_lock_acquire_recursive>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	071b      	lsls	r3, r3, #28
 800981e:	d501      	bpl.n	8009824 <_vfiprintf_r+0x3c>
 8009820:	692b      	ldr	r3, [r5, #16]
 8009822:	b9eb      	cbnz	r3, 8009860 <_vfiprintf_r+0x78>
 8009824:	4629      	mov	r1, r5
 8009826:	4630      	mov	r0, r6
 8009828:	f000 f960 	bl	8009aec <__swsetup_r>
 800982c:	b1c0      	cbz	r0, 8009860 <_vfiprintf_r+0x78>
 800982e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009830:	07dc      	lsls	r4, r3, #31
 8009832:	d50e      	bpl.n	8009852 <_vfiprintf_r+0x6a>
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	b01d      	add	sp, #116	; 0x74
 800983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983e:	4b7b      	ldr	r3, [pc, #492]	; (8009a2c <_vfiprintf_r+0x244>)
 8009840:	429d      	cmp	r5, r3
 8009842:	d101      	bne.n	8009848 <_vfiprintf_r+0x60>
 8009844:	68b5      	ldr	r5, [r6, #8]
 8009846:	e7df      	b.n	8009808 <_vfiprintf_r+0x20>
 8009848:	4b79      	ldr	r3, [pc, #484]	; (8009a30 <_vfiprintf_r+0x248>)
 800984a:	429d      	cmp	r5, r3
 800984c:	bf08      	it	eq
 800984e:	68f5      	ldreq	r5, [r6, #12]
 8009850:	e7da      	b.n	8009808 <_vfiprintf_r+0x20>
 8009852:	89ab      	ldrh	r3, [r5, #12]
 8009854:	0598      	lsls	r0, r3, #22
 8009856:	d4ed      	bmi.n	8009834 <_vfiprintf_r+0x4c>
 8009858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800985a:	f000 fb76 	bl	8009f4a <__retarget_lock_release_recursive>
 800985e:	e7e9      	b.n	8009834 <_vfiprintf_r+0x4c>
 8009860:	2300      	movs	r3, #0
 8009862:	9309      	str	r3, [sp, #36]	; 0x24
 8009864:	2320      	movs	r3, #32
 8009866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800986a:	f8cd 800c 	str.w	r8, [sp, #12]
 800986e:	2330      	movs	r3, #48	; 0x30
 8009870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a34 <_vfiprintf_r+0x24c>
 8009874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009878:	f04f 0901 	mov.w	r9, #1
 800987c:	4623      	mov	r3, r4
 800987e:	469a      	mov	sl, r3
 8009880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009884:	b10a      	cbz	r2, 800988a <_vfiprintf_r+0xa2>
 8009886:	2a25      	cmp	r2, #37	; 0x25
 8009888:	d1f9      	bne.n	800987e <_vfiprintf_r+0x96>
 800988a:	ebba 0b04 	subs.w	fp, sl, r4
 800988e:	d00b      	beq.n	80098a8 <_vfiprintf_r+0xc0>
 8009890:	465b      	mov	r3, fp
 8009892:	4622      	mov	r2, r4
 8009894:	4629      	mov	r1, r5
 8009896:	4630      	mov	r0, r6
 8009898:	f7ff ff94 	bl	80097c4 <__sfputs_r>
 800989c:	3001      	adds	r0, #1
 800989e:	f000 80aa 	beq.w	80099f6 <_vfiprintf_r+0x20e>
 80098a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098a4:	445a      	add	r2, fp
 80098a6:	9209      	str	r2, [sp, #36]	; 0x24
 80098a8:	f89a 3000 	ldrb.w	r3, [sl]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 80a2 	beq.w	80099f6 <_vfiprintf_r+0x20e>
 80098b2:	2300      	movs	r3, #0
 80098b4:	f04f 32ff 	mov.w	r2, #4294967295
 80098b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098bc:	f10a 0a01 	add.w	sl, sl, #1
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	9307      	str	r3, [sp, #28]
 80098c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098c8:	931a      	str	r3, [sp, #104]	; 0x68
 80098ca:	4654      	mov	r4, sl
 80098cc:	2205      	movs	r2, #5
 80098ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d2:	4858      	ldr	r0, [pc, #352]	; (8009a34 <_vfiprintf_r+0x24c>)
 80098d4:	f7f6 fc8c 	bl	80001f0 <memchr>
 80098d8:	9a04      	ldr	r2, [sp, #16]
 80098da:	b9d8      	cbnz	r0, 8009914 <_vfiprintf_r+0x12c>
 80098dc:	06d1      	lsls	r1, r2, #27
 80098de:	bf44      	itt	mi
 80098e0:	2320      	movmi	r3, #32
 80098e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098e6:	0713      	lsls	r3, r2, #28
 80098e8:	bf44      	itt	mi
 80098ea:	232b      	movmi	r3, #43	; 0x2b
 80098ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f0:	f89a 3000 	ldrb.w	r3, [sl]
 80098f4:	2b2a      	cmp	r3, #42	; 0x2a
 80098f6:	d015      	beq.n	8009924 <_vfiprintf_r+0x13c>
 80098f8:	9a07      	ldr	r2, [sp, #28]
 80098fa:	4654      	mov	r4, sl
 80098fc:	2000      	movs	r0, #0
 80098fe:	f04f 0c0a 	mov.w	ip, #10
 8009902:	4621      	mov	r1, r4
 8009904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009908:	3b30      	subs	r3, #48	; 0x30
 800990a:	2b09      	cmp	r3, #9
 800990c:	d94e      	bls.n	80099ac <_vfiprintf_r+0x1c4>
 800990e:	b1b0      	cbz	r0, 800993e <_vfiprintf_r+0x156>
 8009910:	9207      	str	r2, [sp, #28]
 8009912:	e014      	b.n	800993e <_vfiprintf_r+0x156>
 8009914:	eba0 0308 	sub.w	r3, r0, r8
 8009918:	fa09 f303 	lsl.w	r3, r9, r3
 800991c:	4313      	orrs	r3, r2
 800991e:	9304      	str	r3, [sp, #16]
 8009920:	46a2      	mov	sl, r4
 8009922:	e7d2      	b.n	80098ca <_vfiprintf_r+0xe2>
 8009924:	9b03      	ldr	r3, [sp, #12]
 8009926:	1d19      	adds	r1, r3, #4
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	9103      	str	r1, [sp, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	bfbb      	ittet	lt
 8009930:	425b      	neglt	r3, r3
 8009932:	f042 0202 	orrlt.w	r2, r2, #2
 8009936:	9307      	strge	r3, [sp, #28]
 8009938:	9307      	strlt	r3, [sp, #28]
 800993a:	bfb8      	it	lt
 800993c:	9204      	strlt	r2, [sp, #16]
 800993e:	7823      	ldrb	r3, [r4, #0]
 8009940:	2b2e      	cmp	r3, #46	; 0x2e
 8009942:	d10c      	bne.n	800995e <_vfiprintf_r+0x176>
 8009944:	7863      	ldrb	r3, [r4, #1]
 8009946:	2b2a      	cmp	r3, #42	; 0x2a
 8009948:	d135      	bne.n	80099b6 <_vfiprintf_r+0x1ce>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	1d1a      	adds	r2, r3, #4
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	9203      	str	r2, [sp, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	bfb8      	it	lt
 8009956:	f04f 33ff 	movlt.w	r3, #4294967295
 800995a:	3402      	adds	r4, #2
 800995c:	9305      	str	r3, [sp, #20]
 800995e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a44 <_vfiprintf_r+0x25c>
 8009962:	7821      	ldrb	r1, [r4, #0]
 8009964:	2203      	movs	r2, #3
 8009966:	4650      	mov	r0, sl
 8009968:	f7f6 fc42 	bl	80001f0 <memchr>
 800996c:	b140      	cbz	r0, 8009980 <_vfiprintf_r+0x198>
 800996e:	2340      	movs	r3, #64	; 0x40
 8009970:	eba0 000a 	sub.w	r0, r0, sl
 8009974:	fa03 f000 	lsl.w	r0, r3, r0
 8009978:	9b04      	ldr	r3, [sp, #16]
 800997a:	4303      	orrs	r3, r0
 800997c:	3401      	adds	r4, #1
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009984:	482c      	ldr	r0, [pc, #176]	; (8009a38 <_vfiprintf_r+0x250>)
 8009986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800998a:	2206      	movs	r2, #6
 800998c:	f7f6 fc30 	bl	80001f0 <memchr>
 8009990:	2800      	cmp	r0, #0
 8009992:	d03f      	beq.n	8009a14 <_vfiprintf_r+0x22c>
 8009994:	4b29      	ldr	r3, [pc, #164]	; (8009a3c <_vfiprintf_r+0x254>)
 8009996:	bb1b      	cbnz	r3, 80099e0 <_vfiprintf_r+0x1f8>
 8009998:	9b03      	ldr	r3, [sp, #12]
 800999a:	3307      	adds	r3, #7
 800999c:	f023 0307 	bic.w	r3, r3, #7
 80099a0:	3308      	adds	r3, #8
 80099a2:	9303      	str	r3, [sp, #12]
 80099a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a6:	443b      	add	r3, r7
 80099a8:	9309      	str	r3, [sp, #36]	; 0x24
 80099aa:	e767      	b.n	800987c <_vfiprintf_r+0x94>
 80099ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80099b0:	460c      	mov	r4, r1
 80099b2:	2001      	movs	r0, #1
 80099b4:	e7a5      	b.n	8009902 <_vfiprintf_r+0x11a>
 80099b6:	2300      	movs	r3, #0
 80099b8:	3401      	adds	r4, #1
 80099ba:	9305      	str	r3, [sp, #20]
 80099bc:	4619      	mov	r1, r3
 80099be:	f04f 0c0a 	mov.w	ip, #10
 80099c2:	4620      	mov	r0, r4
 80099c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099c8:	3a30      	subs	r2, #48	; 0x30
 80099ca:	2a09      	cmp	r2, #9
 80099cc:	d903      	bls.n	80099d6 <_vfiprintf_r+0x1ee>
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0c5      	beq.n	800995e <_vfiprintf_r+0x176>
 80099d2:	9105      	str	r1, [sp, #20]
 80099d4:	e7c3      	b.n	800995e <_vfiprintf_r+0x176>
 80099d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80099da:	4604      	mov	r4, r0
 80099dc:	2301      	movs	r3, #1
 80099de:	e7f0      	b.n	80099c2 <_vfiprintf_r+0x1da>
 80099e0:	ab03      	add	r3, sp, #12
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	462a      	mov	r2, r5
 80099e6:	4b16      	ldr	r3, [pc, #88]	; (8009a40 <_vfiprintf_r+0x258>)
 80099e8:	a904      	add	r1, sp, #16
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7fc f800 	bl	80059f0 <_printf_float>
 80099f0:	4607      	mov	r7, r0
 80099f2:	1c78      	adds	r0, r7, #1
 80099f4:	d1d6      	bne.n	80099a4 <_vfiprintf_r+0x1bc>
 80099f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099f8:	07d9      	lsls	r1, r3, #31
 80099fa:	d405      	bmi.n	8009a08 <_vfiprintf_r+0x220>
 80099fc:	89ab      	ldrh	r3, [r5, #12]
 80099fe:	059a      	lsls	r2, r3, #22
 8009a00:	d402      	bmi.n	8009a08 <_vfiprintf_r+0x220>
 8009a02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a04:	f000 faa1 	bl	8009f4a <__retarget_lock_release_recursive>
 8009a08:	89ab      	ldrh	r3, [r5, #12]
 8009a0a:	065b      	lsls	r3, r3, #25
 8009a0c:	f53f af12 	bmi.w	8009834 <_vfiprintf_r+0x4c>
 8009a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a12:	e711      	b.n	8009838 <_vfiprintf_r+0x50>
 8009a14:	ab03      	add	r3, sp, #12
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	462a      	mov	r2, r5
 8009a1a:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <_vfiprintf_r+0x258>)
 8009a1c:	a904      	add	r1, sp, #16
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f7fc fa8a 	bl	8005f38 <_printf_i>
 8009a24:	e7e4      	b.n	80099f0 <_vfiprintf_r+0x208>
 8009a26:	bf00      	nop
 8009a28:	0800b8ac 	.word	0x0800b8ac
 8009a2c:	0800b8cc 	.word	0x0800b8cc
 8009a30:	0800b88c 	.word	0x0800b88c
 8009a34:	0800b83c 	.word	0x0800b83c
 8009a38:	0800b846 	.word	0x0800b846
 8009a3c:	080059f1 	.word	0x080059f1
 8009a40:	080097c5 	.word	0x080097c5
 8009a44:	0800b842 	.word	0x0800b842

08009a48 <__swbuf_r>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	460e      	mov	r6, r1
 8009a4c:	4614      	mov	r4, r2
 8009a4e:	4605      	mov	r5, r0
 8009a50:	b118      	cbz	r0, 8009a5a <__swbuf_r+0x12>
 8009a52:	6983      	ldr	r3, [r0, #24]
 8009a54:	b90b      	cbnz	r3, 8009a5a <__swbuf_r+0x12>
 8009a56:	f000 f9d9 	bl	8009e0c <__sinit>
 8009a5a:	4b21      	ldr	r3, [pc, #132]	; (8009ae0 <__swbuf_r+0x98>)
 8009a5c:	429c      	cmp	r4, r3
 8009a5e:	d12b      	bne.n	8009ab8 <__swbuf_r+0x70>
 8009a60:	686c      	ldr	r4, [r5, #4]
 8009a62:	69a3      	ldr	r3, [r4, #24]
 8009a64:	60a3      	str	r3, [r4, #8]
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	071a      	lsls	r2, r3, #28
 8009a6a:	d52f      	bpl.n	8009acc <__swbuf_r+0x84>
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	b36b      	cbz	r3, 8009acc <__swbuf_r+0x84>
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	6820      	ldr	r0, [r4, #0]
 8009a74:	1ac0      	subs	r0, r0, r3
 8009a76:	6963      	ldr	r3, [r4, #20]
 8009a78:	b2f6      	uxtb	r6, r6
 8009a7a:	4283      	cmp	r3, r0
 8009a7c:	4637      	mov	r7, r6
 8009a7e:	dc04      	bgt.n	8009a8a <__swbuf_r+0x42>
 8009a80:	4621      	mov	r1, r4
 8009a82:	4628      	mov	r0, r5
 8009a84:	f000 f92e 	bl	8009ce4 <_fflush_r>
 8009a88:	bb30      	cbnz	r0, 8009ad8 <__swbuf_r+0x90>
 8009a8a:	68a3      	ldr	r3, [r4, #8]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	60a3      	str	r3, [r4, #8]
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	1c5a      	adds	r2, r3, #1
 8009a94:	6022      	str	r2, [r4, #0]
 8009a96:	701e      	strb	r6, [r3, #0]
 8009a98:	6963      	ldr	r3, [r4, #20]
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	4283      	cmp	r3, r0
 8009a9e:	d004      	beq.n	8009aaa <__swbuf_r+0x62>
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	07db      	lsls	r3, r3, #31
 8009aa4:	d506      	bpl.n	8009ab4 <__swbuf_r+0x6c>
 8009aa6:	2e0a      	cmp	r6, #10
 8009aa8:	d104      	bne.n	8009ab4 <__swbuf_r+0x6c>
 8009aaa:	4621      	mov	r1, r4
 8009aac:	4628      	mov	r0, r5
 8009aae:	f000 f919 	bl	8009ce4 <_fflush_r>
 8009ab2:	b988      	cbnz	r0, 8009ad8 <__swbuf_r+0x90>
 8009ab4:	4638      	mov	r0, r7
 8009ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab8:	4b0a      	ldr	r3, [pc, #40]	; (8009ae4 <__swbuf_r+0x9c>)
 8009aba:	429c      	cmp	r4, r3
 8009abc:	d101      	bne.n	8009ac2 <__swbuf_r+0x7a>
 8009abe:	68ac      	ldr	r4, [r5, #8]
 8009ac0:	e7cf      	b.n	8009a62 <__swbuf_r+0x1a>
 8009ac2:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <__swbuf_r+0xa0>)
 8009ac4:	429c      	cmp	r4, r3
 8009ac6:	bf08      	it	eq
 8009ac8:	68ec      	ldreq	r4, [r5, #12]
 8009aca:	e7ca      	b.n	8009a62 <__swbuf_r+0x1a>
 8009acc:	4621      	mov	r1, r4
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f000 f80c 	bl	8009aec <__swsetup_r>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d0cb      	beq.n	8009a70 <__swbuf_r+0x28>
 8009ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8009adc:	e7ea      	b.n	8009ab4 <__swbuf_r+0x6c>
 8009ade:	bf00      	nop
 8009ae0:	0800b8ac 	.word	0x0800b8ac
 8009ae4:	0800b8cc 	.word	0x0800b8cc
 8009ae8:	0800b88c 	.word	0x0800b88c

08009aec <__swsetup_r>:
 8009aec:	4b32      	ldr	r3, [pc, #200]	; (8009bb8 <__swsetup_r+0xcc>)
 8009aee:	b570      	push	{r4, r5, r6, lr}
 8009af0:	681d      	ldr	r5, [r3, #0]
 8009af2:	4606      	mov	r6, r0
 8009af4:	460c      	mov	r4, r1
 8009af6:	b125      	cbz	r5, 8009b02 <__swsetup_r+0x16>
 8009af8:	69ab      	ldr	r3, [r5, #24]
 8009afa:	b913      	cbnz	r3, 8009b02 <__swsetup_r+0x16>
 8009afc:	4628      	mov	r0, r5
 8009afe:	f000 f985 	bl	8009e0c <__sinit>
 8009b02:	4b2e      	ldr	r3, [pc, #184]	; (8009bbc <__swsetup_r+0xd0>)
 8009b04:	429c      	cmp	r4, r3
 8009b06:	d10f      	bne.n	8009b28 <__swsetup_r+0x3c>
 8009b08:	686c      	ldr	r4, [r5, #4]
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b10:	0719      	lsls	r1, r3, #28
 8009b12:	d42c      	bmi.n	8009b6e <__swsetup_r+0x82>
 8009b14:	06dd      	lsls	r5, r3, #27
 8009b16:	d411      	bmi.n	8009b3c <__swsetup_r+0x50>
 8009b18:	2309      	movs	r3, #9
 8009b1a:	6033      	str	r3, [r6, #0]
 8009b1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b20:	81a3      	strh	r3, [r4, #12]
 8009b22:	f04f 30ff 	mov.w	r0, #4294967295
 8009b26:	e03e      	b.n	8009ba6 <__swsetup_r+0xba>
 8009b28:	4b25      	ldr	r3, [pc, #148]	; (8009bc0 <__swsetup_r+0xd4>)
 8009b2a:	429c      	cmp	r4, r3
 8009b2c:	d101      	bne.n	8009b32 <__swsetup_r+0x46>
 8009b2e:	68ac      	ldr	r4, [r5, #8]
 8009b30:	e7eb      	b.n	8009b0a <__swsetup_r+0x1e>
 8009b32:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <__swsetup_r+0xd8>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	bf08      	it	eq
 8009b38:	68ec      	ldreq	r4, [r5, #12]
 8009b3a:	e7e6      	b.n	8009b0a <__swsetup_r+0x1e>
 8009b3c:	0758      	lsls	r0, r3, #29
 8009b3e:	d512      	bpl.n	8009b66 <__swsetup_r+0x7a>
 8009b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b42:	b141      	cbz	r1, 8009b56 <__swsetup_r+0x6a>
 8009b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b48:	4299      	cmp	r1, r3
 8009b4a:	d002      	beq.n	8009b52 <__swsetup_r+0x66>
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7ff fb25 	bl	800919c <_free_r>
 8009b52:	2300      	movs	r3, #0
 8009b54:	6363      	str	r3, [r4, #52]	; 0x34
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b5c:	81a3      	strh	r3, [r4, #12]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	6063      	str	r3, [r4, #4]
 8009b62:	6923      	ldr	r3, [r4, #16]
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	f043 0308 	orr.w	r3, r3, #8
 8009b6c:	81a3      	strh	r3, [r4, #12]
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	b94b      	cbnz	r3, 8009b86 <__swsetup_r+0x9a>
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b7c:	d003      	beq.n	8009b86 <__swsetup_r+0x9a>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4630      	mov	r0, r6
 8009b82:	f000 fa09 	bl	8009f98 <__smakebuf_r>
 8009b86:	89a0      	ldrh	r0, [r4, #12]
 8009b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b8c:	f010 0301 	ands.w	r3, r0, #1
 8009b90:	d00a      	beq.n	8009ba8 <__swsetup_r+0xbc>
 8009b92:	2300      	movs	r3, #0
 8009b94:	60a3      	str	r3, [r4, #8]
 8009b96:	6963      	ldr	r3, [r4, #20]
 8009b98:	425b      	negs	r3, r3
 8009b9a:	61a3      	str	r3, [r4, #24]
 8009b9c:	6923      	ldr	r3, [r4, #16]
 8009b9e:	b943      	cbnz	r3, 8009bb2 <__swsetup_r+0xc6>
 8009ba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ba4:	d1ba      	bne.n	8009b1c <__swsetup_r+0x30>
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	0781      	lsls	r1, r0, #30
 8009baa:	bf58      	it	pl
 8009bac:	6963      	ldrpl	r3, [r4, #20]
 8009bae:	60a3      	str	r3, [r4, #8]
 8009bb0:	e7f4      	b.n	8009b9c <__swsetup_r+0xb0>
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	e7f7      	b.n	8009ba6 <__swsetup_r+0xba>
 8009bb6:	bf00      	nop
 8009bb8:	2000000c 	.word	0x2000000c
 8009bbc:	0800b8ac 	.word	0x0800b8ac
 8009bc0:	0800b8cc 	.word	0x0800b8cc
 8009bc4:	0800b88c 	.word	0x0800b88c

08009bc8 <abort>:
 8009bc8:	b508      	push	{r3, lr}
 8009bca:	2006      	movs	r0, #6
 8009bcc:	f000 fa54 	bl	800a078 <raise>
 8009bd0:	2001      	movs	r0, #1
 8009bd2:	f7f8 fb7d 	bl	80022d0 <_exit>
	...

08009bd8 <__sflush_r>:
 8009bd8:	898a      	ldrh	r2, [r1, #12]
 8009bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bde:	4605      	mov	r5, r0
 8009be0:	0710      	lsls	r0, r2, #28
 8009be2:	460c      	mov	r4, r1
 8009be4:	d458      	bmi.n	8009c98 <__sflush_r+0xc0>
 8009be6:	684b      	ldr	r3, [r1, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dc05      	bgt.n	8009bf8 <__sflush_r+0x20>
 8009bec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dc02      	bgt.n	8009bf8 <__sflush_r+0x20>
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	d0f9      	beq.n	8009bf2 <__sflush_r+0x1a>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c04:	682f      	ldr	r7, [r5, #0]
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	d032      	beq.n	8009c70 <__sflush_r+0x98>
 8009c0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	075a      	lsls	r2, r3, #29
 8009c10:	d505      	bpl.n	8009c1e <__sflush_r+0x46>
 8009c12:	6863      	ldr	r3, [r4, #4]
 8009c14:	1ac0      	subs	r0, r0, r3
 8009c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c18:	b10b      	cbz	r3, 8009c1e <__sflush_r+0x46>
 8009c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c1c:	1ac0      	subs	r0, r0, r3
 8009c1e:	2300      	movs	r3, #0
 8009c20:	4602      	mov	r2, r0
 8009c22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c24:	6a21      	ldr	r1, [r4, #32]
 8009c26:	4628      	mov	r0, r5
 8009c28:	47b0      	blx	r6
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	d106      	bne.n	8009c3e <__sflush_r+0x66>
 8009c30:	6829      	ldr	r1, [r5, #0]
 8009c32:	291d      	cmp	r1, #29
 8009c34:	d82c      	bhi.n	8009c90 <__sflush_r+0xb8>
 8009c36:	4a2a      	ldr	r2, [pc, #168]	; (8009ce0 <__sflush_r+0x108>)
 8009c38:	40ca      	lsrs	r2, r1
 8009c3a:	07d6      	lsls	r6, r2, #31
 8009c3c:	d528      	bpl.n	8009c90 <__sflush_r+0xb8>
 8009c3e:	2200      	movs	r2, #0
 8009c40:	6062      	str	r2, [r4, #4]
 8009c42:	04d9      	lsls	r1, r3, #19
 8009c44:	6922      	ldr	r2, [r4, #16]
 8009c46:	6022      	str	r2, [r4, #0]
 8009c48:	d504      	bpl.n	8009c54 <__sflush_r+0x7c>
 8009c4a:	1c42      	adds	r2, r0, #1
 8009c4c:	d101      	bne.n	8009c52 <__sflush_r+0x7a>
 8009c4e:	682b      	ldr	r3, [r5, #0]
 8009c50:	b903      	cbnz	r3, 8009c54 <__sflush_r+0x7c>
 8009c52:	6560      	str	r0, [r4, #84]	; 0x54
 8009c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c56:	602f      	str	r7, [r5, #0]
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	d0ca      	beq.n	8009bf2 <__sflush_r+0x1a>
 8009c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c60:	4299      	cmp	r1, r3
 8009c62:	d002      	beq.n	8009c6a <__sflush_r+0x92>
 8009c64:	4628      	mov	r0, r5
 8009c66:	f7ff fa99 	bl	800919c <_free_r>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	6360      	str	r0, [r4, #52]	; 0x34
 8009c6e:	e7c1      	b.n	8009bf4 <__sflush_r+0x1c>
 8009c70:	6a21      	ldr	r1, [r4, #32]
 8009c72:	2301      	movs	r3, #1
 8009c74:	4628      	mov	r0, r5
 8009c76:	47b0      	blx	r6
 8009c78:	1c41      	adds	r1, r0, #1
 8009c7a:	d1c7      	bne.n	8009c0c <__sflush_r+0x34>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0c4      	beq.n	8009c0c <__sflush_r+0x34>
 8009c82:	2b1d      	cmp	r3, #29
 8009c84:	d001      	beq.n	8009c8a <__sflush_r+0xb2>
 8009c86:	2b16      	cmp	r3, #22
 8009c88:	d101      	bne.n	8009c8e <__sflush_r+0xb6>
 8009c8a:	602f      	str	r7, [r5, #0]
 8009c8c:	e7b1      	b.n	8009bf2 <__sflush_r+0x1a>
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	e7ad      	b.n	8009bf4 <__sflush_r+0x1c>
 8009c98:	690f      	ldr	r7, [r1, #16]
 8009c9a:	2f00      	cmp	r7, #0
 8009c9c:	d0a9      	beq.n	8009bf2 <__sflush_r+0x1a>
 8009c9e:	0793      	lsls	r3, r2, #30
 8009ca0:	680e      	ldr	r6, [r1, #0]
 8009ca2:	bf08      	it	eq
 8009ca4:	694b      	ldreq	r3, [r1, #20]
 8009ca6:	600f      	str	r7, [r1, #0]
 8009ca8:	bf18      	it	ne
 8009caa:	2300      	movne	r3, #0
 8009cac:	eba6 0807 	sub.w	r8, r6, r7
 8009cb0:	608b      	str	r3, [r1, #8]
 8009cb2:	f1b8 0f00 	cmp.w	r8, #0
 8009cb6:	dd9c      	ble.n	8009bf2 <__sflush_r+0x1a>
 8009cb8:	6a21      	ldr	r1, [r4, #32]
 8009cba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cbc:	4643      	mov	r3, r8
 8009cbe:	463a      	mov	r2, r7
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b0      	blx	r6
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	dc06      	bgt.n	8009cd6 <__sflush_r+0xfe>
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cce:	81a3      	strh	r3, [r4, #12]
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	e78e      	b.n	8009bf4 <__sflush_r+0x1c>
 8009cd6:	4407      	add	r7, r0
 8009cd8:	eba8 0800 	sub.w	r8, r8, r0
 8009cdc:	e7e9      	b.n	8009cb2 <__sflush_r+0xda>
 8009cde:	bf00      	nop
 8009ce0:	20400001 	.word	0x20400001

08009ce4 <_fflush_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	690b      	ldr	r3, [r1, #16]
 8009ce8:	4605      	mov	r5, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	b913      	cbnz	r3, 8009cf4 <_fflush_r+0x10>
 8009cee:	2500      	movs	r5, #0
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	b118      	cbz	r0, 8009cfe <_fflush_r+0x1a>
 8009cf6:	6983      	ldr	r3, [r0, #24]
 8009cf8:	b90b      	cbnz	r3, 8009cfe <_fflush_r+0x1a>
 8009cfa:	f000 f887 	bl	8009e0c <__sinit>
 8009cfe:	4b14      	ldr	r3, [pc, #80]	; (8009d50 <_fflush_r+0x6c>)
 8009d00:	429c      	cmp	r4, r3
 8009d02:	d11b      	bne.n	8009d3c <_fflush_r+0x58>
 8009d04:	686c      	ldr	r4, [r5, #4]
 8009d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0ef      	beq.n	8009cee <_fflush_r+0xa>
 8009d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d10:	07d0      	lsls	r0, r2, #31
 8009d12:	d404      	bmi.n	8009d1e <_fflush_r+0x3a>
 8009d14:	0599      	lsls	r1, r3, #22
 8009d16:	d402      	bmi.n	8009d1e <_fflush_r+0x3a>
 8009d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d1a:	f000 f915 	bl	8009f48 <__retarget_lock_acquire_recursive>
 8009d1e:	4628      	mov	r0, r5
 8009d20:	4621      	mov	r1, r4
 8009d22:	f7ff ff59 	bl	8009bd8 <__sflush_r>
 8009d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d28:	07da      	lsls	r2, r3, #31
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	d4e0      	bmi.n	8009cf0 <_fflush_r+0xc>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	059b      	lsls	r3, r3, #22
 8009d32:	d4dd      	bmi.n	8009cf0 <_fflush_r+0xc>
 8009d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d36:	f000 f908 	bl	8009f4a <__retarget_lock_release_recursive>
 8009d3a:	e7d9      	b.n	8009cf0 <_fflush_r+0xc>
 8009d3c:	4b05      	ldr	r3, [pc, #20]	; (8009d54 <_fflush_r+0x70>)
 8009d3e:	429c      	cmp	r4, r3
 8009d40:	d101      	bne.n	8009d46 <_fflush_r+0x62>
 8009d42:	68ac      	ldr	r4, [r5, #8]
 8009d44:	e7df      	b.n	8009d06 <_fflush_r+0x22>
 8009d46:	4b04      	ldr	r3, [pc, #16]	; (8009d58 <_fflush_r+0x74>)
 8009d48:	429c      	cmp	r4, r3
 8009d4a:	bf08      	it	eq
 8009d4c:	68ec      	ldreq	r4, [r5, #12]
 8009d4e:	e7da      	b.n	8009d06 <_fflush_r+0x22>
 8009d50:	0800b8ac 	.word	0x0800b8ac
 8009d54:	0800b8cc 	.word	0x0800b8cc
 8009d58:	0800b88c 	.word	0x0800b88c

08009d5c <std>:
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	b510      	push	{r4, lr}
 8009d60:	4604      	mov	r4, r0
 8009d62:	e9c0 3300 	strd	r3, r3, [r0]
 8009d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d6a:	6083      	str	r3, [r0, #8]
 8009d6c:	8181      	strh	r1, [r0, #12]
 8009d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8009d70:	81c2      	strh	r2, [r0, #14]
 8009d72:	6183      	str	r3, [r0, #24]
 8009d74:	4619      	mov	r1, r3
 8009d76:	2208      	movs	r2, #8
 8009d78:	305c      	adds	r0, #92	; 0x5c
 8009d7a:	f7fb fd91 	bl	80058a0 <memset>
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <std+0x38>)
 8009d80:	6263      	str	r3, [r4, #36]	; 0x24
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <std+0x3c>)
 8009d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d86:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <std+0x40>)
 8009d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <std+0x44>)
 8009d8c:	6224      	str	r4, [r4, #32]
 8009d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8009d90:	bd10      	pop	{r4, pc}
 8009d92:	bf00      	nop
 8009d94:	0800a0b1 	.word	0x0800a0b1
 8009d98:	0800a0d3 	.word	0x0800a0d3
 8009d9c:	0800a10b 	.word	0x0800a10b
 8009da0:	0800a12f 	.word	0x0800a12f

08009da4 <_cleanup_r>:
 8009da4:	4901      	ldr	r1, [pc, #4]	; (8009dac <_cleanup_r+0x8>)
 8009da6:	f000 b8af 	b.w	8009f08 <_fwalk_reent>
 8009daa:	bf00      	nop
 8009dac:	08009ce5 	.word	0x08009ce5

08009db0 <__sfmoreglue>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	2268      	movs	r2, #104	; 0x68
 8009db4:	1e4d      	subs	r5, r1, #1
 8009db6:	4355      	muls	r5, r2
 8009db8:	460e      	mov	r6, r1
 8009dba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dbe:	f7ff fa59 	bl	8009274 <_malloc_r>
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	b140      	cbz	r0, 8009dd8 <__sfmoreglue+0x28>
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	e9c0 1600 	strd	r1, r6, [r0]
 8009dcc:	300c      	adds	r0, #12
 8009dce:	60a0      	str	r0, [r4, #8]
 8009dd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009dd4:	f7fb fd64 	bl	80058a0 <memset>
 8009dd8:	4620      	mov	r0, r4
 8009dda:	bd70      	pop	{r4, r5, r6, pc}

08009ddc <__sfp_lock_acquire>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	; (8009de4 <__sfp_lock_acquire+0x8>)
 8009dde:	f000 b8b3 	b.w	8009f48 <__retarget_lock_acquire_recursive>
 8009de2:	bf00      	nop
 8009de4:	200008bd 	.word	0x200008bd

08009de8 <__sfp_lock_release>:
 8009de8:	4801      	ldr	r0, [pc, #4]	; (8009df0 <__sfp_lock_release+0x8>)
 8009dea:	f000 b8ae 	b.w	8009f4a <__retarget_lock_release_recursive>
 8009dee:	bf00      	nop
 8009df0:	200008bd 	.word	0x200008bd

08009df4 <__sinit_lock_acquire>:
 8009df4:	4801      	ldr	r0, [pc, #4]	; (8009dfc <__sinit_lock_acquire+0x8>)
 8009df6:	f000 b8a7 	b.w	8009f48 <__retarget_lock_acquire_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	200008be 	.word	0x200008be

08009e00 <__sinit_lock_release>:
 8009e00:	4801      	ldr	r0, [pc, #4]	; (8009e08 <__sinit_lock_release+0x8>)
 8009e02:	f000 b8a2 	b.w	8009f4a <__retarget_lock_release_recursive>
 8009e06:	bf00      	nop
 8009e08:	200008be 	.word	0x200008be

08009e0c <__sinit>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	4604      	mov	r4, r0
 8009e10:	f7ff fff0 	bl	8009df4 <__sinit_lock_acquire>
 8009e14:	69a3      	ldr	r3, [r4, #24]
 8009e16:	b11b      	cbz	r3, 8009e20 <__sinit+0x14>
 8009e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e1c:	f7ff bff0 	b.w	8009e00 <__sinit_lock_release>
 8009e20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e24:	6523      	str	r3, [r4, #80]	; 0x50
 8009e26:	4b13      	ldr	r3, [pc, #76]	; (8009e74 <__sinit+0x68>)
 8009e28:	4a13      	ldr	r2, [pc, #76]	; (8009e78 <__sinit+0x6c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e2e:	42a3      	cmp	r3, r4
 8009e30:	bf04      	itt	eq
 8009e32:	2301      	moveq	r3, #1
 8009e34:	61a3      	streq	r3, [r4, #24]
 8009e36:	4620      	mov	r0, r4
 8009e38:	f000 f820 	bl	8009e7c <__sfp>
 8009e3c:	6060      	str	r0, [r4, #4]
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f000 f81c 	bl	8009e7c <__sfp>
 8009e44:	60a0      	str	r0, [r4, #8]
 8009e46:	4620      	mov	r0, r4
 8009e48:	f000 f818 	bl	8009e7c <__sfp>
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	60e0      	str	r0, [r4, #12]
 8009e50:	2104      	movs	r1, #4
 8009e52:	6860      	ldr	r0, [r4, #4]
 8009e54:	f7ff ff82 	bl	8009d5c <std>
 8009e58:	68a0      	ldr	r0, [r4, #8]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	2109      	movs	r1, #9
 8009e5e:	f7ff ff7d 	bl	8009d5c <std>
 8009e62:	68e0      	ldr	r0, [r4, #12]
 8009e64:	2202      	movs	r2, #2
 8009e66:	2112      	movs	r1, #18
 8009e68:	f7ff ff78 	bl	8009d5c <std>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	61a3      	str	r3, [r4, #24]
 8009e70:	e7d2      	b.n	8009e18 <__sinit+0xc>
 8009e72:	bf00      	nop
 8009e74:	0800b448 	.word	0x0800b448
 8009e78:	08009da5 	.word	0x08009da5

08009e7c <__sfp>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	4607      	mov	r7, r0
 8009e80:	f7ff ffac 	bl	8009ddc <__sfp_lock_acquire>
 8009e84:	4b1e      	ldr	r3, [pc, #120]	; (8009f00 <__sfp+0x84>)
 8009e86:	681e      	ldr	r6, [r3, #0]
 8009e88:	69b3      	ldr	r3, [r6, #24]
 8009e8a:	b913      	cbnz	r3, 8009e92 <__sfp+0x16>
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7ff ffbd 	bl	8009e0c <__sinit>
 8009e92:	3648      	adds	r6, #72	; 0x48
 8009e94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	d503      	bpl.n	8009ea4 <__sfp+0x28>
 8009e9c:	6833      	ldr	r3, [r6, #0]
 8009e9e:	b30b      	cbz	r3, 8009ee4 <__sfp+0x68>
 8009ea0:	6836      	ldr	r6, [r6, #0]
 8009ea2:	e7f7      	b.n	8009e94 <__sfp+0x18>
 8009ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ea8:	b9d5      	cbnz	r5, 8009ee0 <__sfp+0x64>
 8009eaa:	4b16      	ldr	r3, [pc, #88]	; (8009f04 <__sfp+0x88>)
 8009eac:	60e3      	str	r3, [r4, #12]
 8009eae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009eb2:	6665      	str	r5, [r4, #100]	; 0x64
 8009eb4:	f000 f847 	bl	8009f46 <__retarget_lock_init_recursive>
 8009eb8:	f7ff ff96 	bl	8009de8 <__sfp_lock_release>
 8009ebc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ec0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ec4:	6025      	str	r5, [r4, #0]
 8009ec6:	61a5      	str	r5, [r4, #24]
 8009ec8:	2208      	movs	r2, #8
 8009eca:	4629      	mov	r1, r5
 8009ecc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ed0:	f7fb fce6 	bl	80058a0 <memset>
 8009ed4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ed8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009edc:	4620      	mov	r0, r4
 8009ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee0:	3468      	adds	r4, #104	; 0x68
 8009ee2:	e7d9      	b.n	8009e98 <__sfp+0x1c>
 8009ee4:	2104      	movs	r1, #4
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	f7ff ff62 	bl	8009db0 <__sfmoreglue>
 8009eec:	4604      	mov	r4, r0
 8009eee:	6030      	str	r0, [r6, #0]
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d1d5      	bne.n	8009ea0 <__sfp+0x24>
 8009ef4:	f7ff ff78 	bl	8009de8 <__sfp_lock_release>
 8009ef8:	230c      	movs	r3, #12
 8009efa:	603b      	str	r3, [r7, #0]
 8009efc:	e7ee      	b.n	8009edc <__sfp+0x60>
 8009efe:	bf00      	nop
 8009f00:	0800b448 	.word	0x0800b448
 8009f04:	ffff0001 	.word	0xffff0001

08009f08 <_fwalk_reent>:
 8009f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	4688      	mov	r8, r1
 8009f10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f14:	2700      	movs	r7, #0
 8009f16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f1a:	f1b9 0901 	subs.w	r9, r9, #1
 8009f1e:	d505      	bpl.n	8009f2c <_fwalk_reent+0x24>
 8009f20:	6824      	ldr	r4, [r4, #0]
 8009f22:	2c00      	cmp	r4, #0
 8009f24:	d1f7      	bne.n	8009f16 <_fwalk_reent+0xe>
 8009f26:	4638      	mov	r0, r7
 8009f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2c:	89ab      	ldrh	r3, [r5, #12]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d907      	bls.n	8009f42 <_fwalk_reent+0x3a>
 8009f32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f36:	3301      	adds	r3, #1
 8009f38:	d003      	beq.n	8009f42 <_fwalk_reent+0x3a>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	47c0      	blx	r8
 8009f40:	4307      	orrs	r7, r0
 8009f42:	3568      	adds	r5, #104	; 0x68
 8009f44:	e7e9      	b.n	8009f1a <_fwalk_reent+0x12>

08009f46 <__retarget_lock_init_recursive>:
 8009f46:	4770      	bx	lr

08009f48 <__retarget_lock_acquire_recursive>:
 8009f48:	4770      	bx	lr

08009f4a <__retarget_lock_release_recursive>:
 8009f4a:	4770      	bx	lr

08009f4c <__swhatbuf_r>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	460e      	mov	r6, r1
 8009f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f54:	2900      	cmp	r1, #0
 8009f56:	b096      	sub	sp, #88	; 0x58
 8009f58:	4614      	mov	r4, r2
 8009f5a:	461d      	mov	r5, r3
 8009f5c:	da08      	bge.n	8009f70 <__swhatbuf_r+0x24>
 8009f5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	602a      	str	r2, [r5, #0]
 8009f66:	061a      	lsls	r2, r3, #24
 8009f68:	d410      	bmi.n	8009f8c <__swhatbuf_r+0x40>
 8009f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f6e:	e00e      	b.n	8009f8e <__swhatbuf_r+0x42>
 8009f70:	466a      	mov	r2, sp
 8009f72:	f000 f903 	bl	800a17c <_fstat_r>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	dbf1      	blt.n	8009f5e <__swhatbuf_r+0x12>
 8009f7a:	9a01      	ldr	r2, [sp, #4]
 8009f7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f84:	425a      	negs	r2, r3
 8009f86:	415a      	adcs	r2, r3
 8009f88:	602a      	str	r2, [r5, #0]
 8009f8a:	e7ee      	b.n	8009f6a <__swhatbuf_r+0x1e>
 8009f8c:	2340      	movs	r3, #64	; 0x40
 8009f8e:	2000      	movs	r0, #0
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	b016      	add	sp, #88	; 0x58
 8009f94:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f98 <__smakebuf_r>:
 8009f98:	898b      	ldrh	r3, [r1, #12]
 8009f9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f9c:	079d      	lsls	r5, r3, #30
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	d507      	bpl.n	8009fb4 <__smakebuf_r+0x1c>
 8009fa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	6123      	str	r3, [r4, #16]
 8009fac:	2301      	movs	r3, #1
 8009fae:	6163      	str	r3, [r4, #20]
 8009fb0:	b002      	add	sp, #8
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	ab01      	add	r3, sp, #4
 8009fb6:	466a      	mov	r2, sp
 8009fb8:	f7ff ffc8 	bl	8009f4c <__swhatbuf_r>
 8009fbc:	9900      	ldr	r1, [sp, #0]
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f7ff f957 	bl	8009274 <_malloc_r>
 8009fc6:	b948      	cbnz	r0, 8009fdc <__smakebuf_r+0x44>
 8009fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fcc:	059a      	lsls	r2, r3, #22
 8009fce:	d4ef      	bmi.n	8009fb0 <__smakebuf_r+0x18>
 8009fd0:	f023 0303 	bic.w	r3, r3, #3
 8009fd4:	f043 0302 	orr.w	r3, r3, #2
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	e7e3      	b.n	8009fa4 <__smakebuf_r+0xc>
 8009fdc:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <__smakebuf_r+0x7c>)
 8009fde:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	6020      	str	r0, [r4, #0]
 8009fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	9b00      	ldr	r3, [sp, #0]
 8009fec:	6163      	str	r3, [r4, #20]
 8009fee:	9b01      	ldr	r3, [sp, #4]
 8009ff0:	6120      	str	r0, [r4, #16]
 8009ff2:	b15b      	cbz	r3, 800a00c <__smakebuf_r+0x74>
 8009ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f000 f8d1 	bl	800a1a0 <_isatty_r>
 8009ffe:	b128      	cbz	r0, 800a00c <__smakebuf_r+0x74>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	f023 0303 	bic.w	r3, r3, #3
 800a006:	f043 0301 	orr.w	r3, r3, #1
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	89a0      	ldrh	r0, [r4, #12]
 800a00e:	4305      	orrs	r5, r0
 800a010:	81a5      	strh	r5, [r4, #12]
 800a012:	e7cd      	b.n	8009fb0 <__smakebuf_r+0x18>
 800a014:	08009da5 	.word	0x08009da5

0800a018 <_malloc_usable_size_r>:
 800a018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a01c:	1f18      	subs	r0, r3, #4
 800a01e:	2b00      	cmp	r3, #0
 800a020:	bfbc      	itt	lt
 800a022:	580b      	ldrlt	r3, [r1, r0]
 800a024:	18c0      	addlt	r0, r0, r3
 800a026:	4770      	bx	lr

0800a028 <_raise_r>:
 800a028:	291f      	cmp	r1, #31
 800a02a:	b538      	push	{r3, r4, r5, lr}
 800a02c:	4604      	mov	r4, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	d904      	bls.n	800a03c <_raise_r+0x14>
 800a032:	2316      	movs	r3, #22
 800a034:	6003      	str	r3, [r0, #0]
 800a036:	f04f 30ff 	mov.w	r0, #4294967295
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
 800a03c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a03e:	b112      	cbz	r2, 800a046 <_raise_r+0x1e>
 800a040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a044:	b94b      	cbnz	r3, 800a05a <_raise_r+0x32>
 800a046:	4620      	mov	r0, r4
 800a048:	f000 f830 	bl	800a0ac <_getpid_r>
 800a04c:	462a      	mov	r2, r5
 800a04e:	4601      	mov	r1, r0
 800a050:	4620      	mov	r0, r4
 800a052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a056:	f000 b817 	b.w	800a088 <_kill_r>
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d00a      	beq.n	800a074 <_raise_r+0x4c>
 800a05e:	1c59      	adds	r1, r3, #1
 800a060:	d103      	bne.n	800a06a <_raise_r+0x42>
 800a062:	2316      	movs	r3, #22
 800a064:	6003      	str	r3, [r0, #0]
 800a066:	2001      	movs	r0, #1
 800a068:	e7e7      	b.n	800a03a <_raise_r+0x12>
 800a06a:	2400      	movs	r4, #0
 800a06c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a070:	4628      	mov	r0, r5
 800a072:	4798      	blx	r3
 800a074:	2000      	movs	r0, #0
 800a076:	e7e0      	b.n	800a03a <_raise_r+0x12>

0800a078 <raise>:
 800a078:	4b02      	ldr	r3, [pc, #8]	; (800a084 <raise+0xc>)
 800a07a:	4601      	mov	r1, r0
 800a07c:	6818      	ldr	r0, [r3, #0]
 800a07e:	f7ff bfd3 	b.w	800a028 <_raise_r>
 800a082:	bf00      	nop
 800a084:	2000000c 	.word	0x2000000c

0800a088 <_kill_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	4d07      	ldr	r5, [pc, #28]	; (800a0a8 <_kill_r+0x20>)
 800a08c:	2300      	movs	r3, #0
 800a08e:	4604      	mov	r4, r0
 800a090:	4608      	mov	r0, r1
 800a092:	4611      	mov	r1, r2
 800a094:	602b      	str	r3, [r5, #0]
 800a096:	f7f8 f90b 	bl	80022b0 <_kill>
 800a09a:	1c43      	adds	r3, r0, #1
 800a09c:	d102      	bne.n	800a0a4 <_kill_r+0x1c>
 800a09e:	682b      	ldr	r3, [r5, #0]
 800a0a0:	b103      	cbz	r3, 800a0a4 <_kill_r+0x1c>
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	bd38      	pop	{r3, r4, r5, pc}
 800a0a6:	bf00      	nop
 800a0a8:	200008b8 	.word	0x200008b8

0800a0ac <_getpid_r>:
 800a0ac:	f7f8 b8f8 	b.w	80022a0 <_getpid>

0800a0b0 <__sread>:
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b8:	f000 f894 	bl	800a1e4 <_read_r>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	bfab      	itete	ge
 800a0c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0c2:	89a3      	ldrhlt	r3, [r4, #12]
 800a0c4:	181b      	addge	r3, r3, r0
 800a0c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0ca:	bfac      	ite	ge
 800a0cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0ce:	81a3      	strhlt	r3, [r4, #12]
 800a0d0:	bd10      	pop	{r4, pc}

0800a0d2 <__swrite>:
 800a0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d6:	461f      	mov	r7, r3
 800a0d8:	898b      	ldrh	r3, [r1, #12]
 800a0da:	05db      	lsls	r3, r3, #23
 800a0dc:	4605      	mov	r5, r0
 800a0de:	460c      	mov	r4, r1
 800a0e0:	4616      	mov	r6, r2
 800a0e2:	d505      	bpl.n	800a0f0 <__swrite+0x1e>
 800a0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f000 f868 	bl	800a1c0 <_lseek_r>
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0fa:	81a3      	strh	r3, [r4, #12]
 800a0fc:	4632      	mov	r2, r6
 800a0fe:	463b      	mov	r3, r7
 800a100:	4628      	mov	r0, r5
 800a102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a106:	f000 b817 	b.w	800a138 <_write_r>

0800a10a <__sseek>:
 800a10a:	b510      	push	{r4, lr}
 800a10c:	460c      	mov	r4, r1
 800a10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a112:	f000 f855 	bl	800a1c0 <_lseek_r>
 800a116:	1c43      	adds	r3, r0, #1
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	bf15      	itete	ne
 800a11c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a11e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a126:	81a3      	strheq	r3, [r4, #12]
 800a128:	bf18      	it	ne
 800a12a:	81a3      	strhne	r3, [r4, #12]
 800a12c:	bd10      	pop	{r4, pc}

0800a12e <__sclose>:
 800a12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a132:	f000 b813 	b.w	800a15c <_close_r>
	...

0800a138 <_write_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d07      	ldr	r5, [pc, #28]	; (800a158 <_write_r+0x20>)
 800a13c:	4604      	mov	r4, r0
 800a13e:	4608      	mov	r0, r1
 800a140:	4611      	mov	r1, r2
 800a142:	2200      	movs	r2, #0
 800a144:	602a      	str	r2, [r5, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	f7f8 f8e9 	bl	800231e <_write>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_write_r+0x1e>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_write_r+0x1e>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	200008b8 	.word	0x200008b8

0800a15c <_close_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d06      	ldr	r5, [pc, #24]	; (800a178 <_close_r+0x1c>)
 800a160:	2300      	movs	r3, #0
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	f7f8 f8f5 	bl	8002356 <_close>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_close_r+0x1a>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_close_r+0x1a>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	200008b8 	.word	0x200008b8

0800a17c <_fstat_r>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	4d07      	ldr	r5, [pc, #28]	; (800a19c <_fstat_r+0x20>)
 800a180:	2300      	movs	r3, #0
 800a182:	4604      	mov	r4, r0
 800a184:	4608      	mov	r0, r1
 800a186:	4611      	mov	r1, r2
 800a188:	602b      	str	r3, [r5, #0]
 800a18a:	f7f8 f8f0 	bl	800236e <_fstat>
 800a18e:	1c43      	adds	r3, r0, #1
 800a190:	d102      	bne.n	800a198 <_fstat_r+0x1c>
 800a192:	682b      	ldr	r3, [r5, #0]
 800a194:	b103      	cbz	r3, 800a198 <_fstat_r+0x1c>
 800a196:	6023      	str	r3, [r4, #0]
 800a198:	bd38      	pop	{r3, r4, r5, pc}
 800a19a:	bf00      	nop
 800a19c:	200008b8 	.word	0x200008b8

0800a1a0 <_isatty_r>:
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4d06      	ldr	r5, [pc, #24]	; (800a1bc <_isatty_r+0x1c>)
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	4608      	mov	r0, r1
 800a1aa:	602b      	str	r3, [r5, #0]
 800a1ac:	f7f8 f8ef 	bl	800238e <_isatty>
 800a1b0:	1c43      	adds	r3, r0, #1
 800a1b2:	d102      	bne.n	800a1ba <_isatty_r+0x1a>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	b103      	cbz	r3, 800a1ba <_isatty_r+0x1a>
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	200008b8 	.word	0x200008b8

0800a1c0 <_lseek_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d07      	ldr	r5, [pc, #28]	; (800a1e0 <_lseek_r+0x20>)
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	4608      	mov	r0, r1
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	602a      	str	r2, [r5, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	f7f8 f8e8 	bl	80023a4 <_lseek>
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d102      	bne.n	800a1de <_lseek_r+0x1e>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	b103      	cbz	r3, 800a1de <_lseek_r+0x1e>
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	bd38      	pop	{r3, r4, r5, pc}
 800a1e0:	200008b8 	.word	0x200008b8

0800a1e4 <_read_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4d07      	ldr	r5, [pc, #28]	; (800a204 <_read_r+0x20>)
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	4608      	mov	r0, r1
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	602a      	str	r2, [r5, #0]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f7f8 f876 	bl	80022e4 <_read>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d102      	bne.n	800a202 <_read_r+0x1e>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	b103      	cbz	r3, 800a202 <_read_r+0x1e>
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	bd38      	pop	{r3, r4, r5, pc}
 800a204:	200008b8 	.word	0x200008b8

0800a208 <ceilf>:
 800a208:	ee10 3a10 	vmov	r3, s0
 800a20c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a210:	3a7f      	subs	r2, #127	; 0x7f
 800a212:	2a16      	cmp	r2, #22
 800a214:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a218:	dc2a      	bgt.n	800a270 <ceilf+0x68>
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	da11      	bge.n	800a242 <ceilf+0x3a>
 800a21e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a284 <ceilf+0x7c>
 800a222:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a226:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22e:	dd05      	ble.n	800a23c <ceilf+0x34>
 800a230:	2b00      	cmp	r3, #0
 800a232:	db23      	blt.n	800a27c <ceilf+0x74>
 800a234:	2900      	cmp	r1, #0
 800a236:	bf18      	it	ne
 800a238:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800a23c:	ee00 3a10 	vmov	s0, r3
 800a240:	4770      	bx	lr
 800a242:	4911      	ldr	r1, [pc, #68]	; (800a288 <ceilf+0x80>)
 800a244:	4111      	asrs	r1, r2
 800a246:	420b      	tst	r3, r1
 800a248:	d0fa      	beq.n	800a240 <ceilf+0x38>
 800a24a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a284 <ceilf+0x7c>
 800a24e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a252:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25a:	ddef      	ble.n	800a23c <ceilf+0x34>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bfc2      	ittt	gt
 800a260:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800a264:	fa40 f202 	asrgt.w	r2, r0, r2
 800a268:	189b      	addgt	r3, r3, r2
 800a26a:	ea23 0301 	bic.w	r3, r3, r1
 800a26e:	e7e5      	b.n	800a23c <ceilf+0x34>
 800a270:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a274:	d3e4      	bcc.n	800a240 <ceilf+0x38>
 800a276:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a27a:	4770      	bx	lr
 800a27c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a280:	e7dc      	b.n	800a23c <ceilf+0x34>
 800a282:	bf00      	nop
 800a284:	7149f2ca 	.word	0x7149f2ca
 800a288:	007fffff 	.word	0x007fffff

0800a28c <_init>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	bf00      	nop
 800a290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a292:	bc08      	pop	{r3}
 800a294:	469e      	mov	lr, r3
 800a296:	4770      	bx	lr

0800a298 <_fini>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	bf00      	nop
 800a29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29e:	bc08      	pop	{r3}
 800a2a0:	469e      	mov	lr, r3
 800a2a2:	4770      	bx	lr
