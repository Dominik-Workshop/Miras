
minisumo_miras.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001654  08010bd8  08010bd8  00020bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801222c  0801222c  000304a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801222c  0801222c  0002222c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012234  08012234  000304a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012234  08012234  00022234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012238  08012238  00022238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  0801223c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de0  200004a0  080126dc  000304a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001280  080126dc  00031280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edfe  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003840  00000000  00000000  0004f2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00052b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  00054288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb17  00000000  00000000  00055870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d571  00000000  00000000  00071387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a59a0  00000000  00000000  0008e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007940  00000000  00000000  001342e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a0 	.word	0x200004a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010bbc 	.word	0x08010bbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	08010bbc 	.word	0x08010bbc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <calculateBatteryVoltage>:
 * @brief calculates battery voltage based on the averaged out value from the ADC
 *
 * @param battery
 * @return float calculated voltage
 */
float calculateBatteryVoltage(Battery* battery){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	calculateAverage(&(battery->adc_average), battery->adc_reading);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f103 020c 	add.w	r2, r3, #12
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f001 fac7 	bl	80025b0 <calculateAverage>
	battery->voltage = battery->adc_average.average * U_REF / RESOLUTION * (R7 + R8) / R8;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa84 	bl	8000534 <__aeabi_i2d>
 800102c:	a31d      	add	r3, pc, #116	; (adr r3, 80010a4 <calculateBatteryVoltage+0x9c>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fae9 	bl	8000608 <__aeabi_dmul>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <calculateBatteryVoltage+0x98>)
 8001044:	f7ff fc0a 	bl	800085c <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	a30f      	add	r3, pc, #60	; (adr r3, 8001090 <calculateBatteryVoltage+0x88>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff fad7 	bl	8000608 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	a30d      	add	r3, pc, #52	; (adr r3, 8001098 <calculateBatteryVoltage+0x90>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fbf8 	bl	800085c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fdc0 	bl	8000bf8 <__aeabi_d2f>
 8001078:	4602      	mov	r2, r0
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]
	return battery->voltage;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	ee07 3a90 	vmov	s15, r3
}
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	00000000 	.word	0x00000000
 8001094:	40c9fa00 	.word	0x40c9fa00
 8001098:	00000000 	.word	0x00000000
 800109c:	40a9c800 	.word	0x40a9c800
 80010a0:	40b00000 	.word	0x40b00000
 80010a4:	66666666 	.word	0x66666666
 80010a8:	400a6666 	.word	0x400a6666

080010ac <write_cmd>:

extern I2C_HandleTypeDef hi2c2;

static uint8_t buffer[DISPLAY_WIDTH*DISPLAY_HEIGHT/8] = {0};

static inline void write_cmd(const uint8_t byte) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af04      	add	r7, sp, #16
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, DISPLAY_ADDRESS << 1, 0x00, 1, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2200      	movs	r2, #0
 80010c8:	2178      	movs	r1, #120	; 0x78
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <write_cmd+0x2c>)
 80010cc:	f003 fe06 	bl	8004cdc <HAL_I2C_Mem_Write>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200009b8 	.word	0x200009b8

080010dc <write_buffer>:

static inline void write_buffer(const void *src, const uint32_t size) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c2, DISPLAY_ADDRESS << 1, 0x40, 1, (uint8_t *) src, size, HAL_MAX_DELAY);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	f04f 32ff 	mov.w	r2, #4294967295
 80010ee:	9202      	str	r2, [sp, #8]
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	2240      	movs	r2, #64	; 0x40
 80010fa:	2178      	movs	r1, #120	; 0x78
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <write_buffer+0x30>)
 80010fe:	f003 fded 	bl	8004cdc <HAL_I2C_Mem_Write>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200009b8 	.word	0x200009b8

08001110 <set>:

static void set(int16_t x, int16_t y, const display_color_t color) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	460b      	mov	r3, r1
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	70fb      	strb	r3, [r7, #3]
	if(x<0 || x>=DISPLAY_WIDTH || y<0 || y>=DISPLAY_HEIGHT)
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db60      	blt.n	80011ec <set+0xdc>
 800112a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112e:	2b7f      	cmp	r3, #127	; 0x7f
 8001130:	dc5c      	bgt.n	80011ec <set+0xdc>
 8001132:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db58      	blt.n	80011ec <set+0xdc>
 800113a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800113e:	2b3f      	cmp	r3, #63	; 0x3f
 8001140:	dc54      	bgt.n	80011ec <set+0xdc>
	#ifdef DISPLAY_FLIP
		x = DISPLAY_WIDTH - x - 1;
		y = DISPLAY_HEIGHT - y - 1;
	#endif

	if(color) {
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d027      	beq.n	8001198 <set+0x88>
		buffer[x + (y/8)*DISPLAY_WIDTH] |=(1<<(y%8));
 8001148:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800114c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	da00      	bge.n	8001156 <set+0x46>
 8001154:	3307      	adds	r3, #7
 8001156:	10db      	asrs	r3, r3, #3
 8001158:	b218      	sxth	r0, r3
 800115a:	4603      	mov	r3, r0
 800115c:	01db      	lsls	r3, r3, #7
 800115e:	4413      	add	r3, r2
 8001160:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <set+0xe8>)
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	b25a      	sxtb	r2, r3
 8001166:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800116a:	4259      	negs	r1, r3
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	f001 0107 	and.w	r1, r1, #7
 8001174:	bf58      	it	pl
 8001176:	424b      	negpl	r3, r1
 8001178:	b21b      	sxth	r3, r3
 800117a:	4619      	mov	r1, r3
 800117c:	2301      	movs	r3, #1
 800117e:	408b      	lsls	r3, r1
 8001180:	b25b      	sxtb	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b259      	sxtb	r1, r3
 8001186:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800118a:	4603      	mov	r3, r0
 800118c:	01db      	lsls	r3, r3, #7
 800118e:	4413      	add	r3, r2
 8001190:	b2c9      	uxtb	r1, r1
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <set+0xe8>)
 8001194:	54d1      	strb	r1, [r2, r3]
 8001196:	e02a      	b.n	80011ee <set+0xde>
	} else {
		buffer[x + (y/8)*DISPLAY_WIDTH] &=~(1<<(y%8));
 8001198:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800119c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da00      	bge.n	80011a6 <set+0x96>
 80011a4:	3307      	adds	r3, #7
 80011a6:	10db      	asrs	r3, r3, #3
 80011a8:	b218      	sxth	r0, r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	01db      	lsls	r3, r3, #7
 80011ae:	4413      	add	r3, r2
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <set+0xe8>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	b25a      	sxtb	r2, r3
 80011b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ba:	4259      	negs	r1, r3
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	f001 0107 	and.w	r1, r1, #7
 80011c4:	bf58      	it	pl
 80011c6:	424b      	negpl	r3, r1
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	2301      	movs	r3, #1
 80011ce:	408b      	lsls	r3, r1
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	4013      	ands	r3, r2
 80011d8:	b259      	sxtb	r1, r3
 80011da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011de:	4603      	mov	r3, r0
 80011e0:	01db      	lsls	r3, r3, #7
 80011e2:	4413      	add	r3, r2
 80011e4:	b2c9      	uxtb	r1, r1
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <set+0xe8>)
 80011e8:	54d1      	strb	r1, [r2, r3]
 80011ea:	e000      	b.n	80011ee <set+0xde>
		return;
 80011ec:	bf00      	nop
	}
}
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	200004bc 	.word	0x200004bc

080011fc <display_init>:
	#endif

	return ((buffer[x + (y/8)*DISPLAY_WIDTH] & (1<<(y%8)))>0);
}

void display_init() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

	write_cmd(0xAE);	// display off
 8001200:	20ae      	movs	r0, #174	; 0xae
 8001202:	f7ff ff53 	bl	80010ac <write_cmd>
	write_cmd(0x20);	// set memory addressing mode
 8001206:	2020      	movs	r0, #32
 8001208:	f7ff ff50 	bl	80010ac <write_cmd>
	write_cmd(0x00);	// horizontal addressing mode
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff ff4d 	bl	80010ac <write_cmd>
	write_cmd(0xB0);	// set page start address for page addressing mode
 8001212:	20b0      	movs	r0, #176	; 0xb0
 8001214:	f7ff ff4a 	bl	80010ac <write_cmd>
	//write_cmd(0xC0);	// mirror vertically
	write_cmd(0xC8);	// set COM output scan direction mode
 8001218:	20c8      	movs	r0, #200	; 0xc8
 800121a:	f7ff ff47 	bl	80010ac <write_cmd>
	write_cmd(0x00);	// set low column address
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff ff44 	bl	80010ac <write_cmd>
	write_cmd(0x10);	// set high column address
 8001224:	2010      	movs	r0, #16
 8001226:	f7ff ff41 	bl	80010ac <write_cmd>
	write_cmd(0x40);	// set start line address
 800122a:	2040      	movs	r0, #64	; 0x40
 800122c:	f7ff ff3e 	bl	80010ac <write_cmd>
	write_cmd(0x81);	// set contrast
 8001230:	2081      	movs	r0, #129	; 0x81
 8001232:	f7ff ff3b 	bl	80010ac <write_cmd>
	write_cmd(0xFF);	//
 8001236:	20ff      	movs	r0, #255	; 0xff
 8001238:	f7ff ff38 	bl	80010ac <write_cmd>
	//write_cmd(0xA0);	// mirror horizontally
	write_cmd(0xA1);	// set segment remap 0 to 127
 800123c:	20a1      	movs	r0, #161	; 0xa1
 800123e:	f7ff ff35 	bl	80010ac <write_cmd>
	//write_cmd(0xA7);	// inverse colors
	write_cmd(0xA6);	// set normal color
 8001242:	20a6      	movs	r0, #166	; 0xa6
 8001244:	f7ff ff32 	bl	80010ac <write_cmd>
	write_cmd(0xA8);	// set multiplex ratio 1 to 64
 8001248:	20a8      	movs	r0, #168	; 0xa8
 800124a:	f7ff ff2f 	bl	80010ac <write_cmd>
	write_cmd(0x3F);	//
 800124e:	203f      	movs	r0, #63	; 0x3f
 8001250:	f7ff ff2c 	bl	80010ac <write_cmd>
	write_cmd(0xA4);	// output follows RAM content
 8001254:	20a4      	movs	r0, #164	; 0xa4
 8001256:	f7ff ff29 	bl	80010ac <write_cmd>
	write_cmd(0xD3);	// set display offset
 800125a:	20d3      	movs	r0, #211	; 0xd3
 800125c:	f7ff ff26 	bl	80010ac <write_cmd>
	write_cmd(0x00);	//
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ff23 	bl	80010ac <write_cmd>
	write_cmd(0xD5);	// set display clock divide ratio
 8001266:	20d5      	movs	r0, #213	; 0xd5
 8001268:	f7ff ff20 	bl	80010ac <write_cmd>
	write_cmd(0xF0);	//
 800126c:	20f0      	movs	r0, #240	; 0xf0
 800126e:	f7ff ff1d 	bl	80010ac <write_cmd>
	write_cmd(0xD9);	// set pre-charge period
 8001272:	20d9      	movs	r0, #217	; 0xd9
 8001274:	f7ff ff1a 	bl	80010ac <write_cmd>
	write_cmd(0x22);	//
 8001278:	2022      	movs	r0, #34	; 0x22
 800127a:	f7ff ff17 	bl	80010ac <write_cmd>
	write_cmd(0xDA);	// set COM pins hardware configuration
 800127e:	20da      	movs	r0, #218	; 0xda
 8001280:	f7ff ff14 	bl	80010ac <write_cmd>
	write_cmd(0x12);	//
 8001284:	2012      	movs	r0, #18
 8001286:	f7ff ff11 	bl	80010ac <write_cmd>
	write_cmd(0xDB);	// set VCOMH
 800128a:	20db      	movs	r0, #219	; 0xdb
 800128c:	f7ff ff0e 	bl	80010ac <write_cmd>
	write_cmd(0x20);	//
 8001290:	2020      	movs	r0, #32
 8001292:	f7ff ff0b 	bl	80010ac <write_cmd>
	write_cmd(0x8D);	// set DC-DC enable
 8001296:	208d      	movs	r0, #141	; 0x8d
 8001298:	f7ff ff08 	bl	80010ac <write_cmd>
	write_cmd(0x14);	//
 800129c:	2014      	movs	r0, #20
 800129e:	f7ff ff05 	bl	80010ac <write_cmd>
	write_cmd(0xAF);	// set display on
 80012a2:	20af      	movs	r0, #175	; 0xaf
 80012a4:	f7ff ff02 	bl	80010ac <write_cmd>

	display_fill(DISPLAY_COLOR_BLACK);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 f803 	bl	80012b4 <display_fill>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <display_fill>:

void display_fill(const display_color_t color) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	if(color)
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <display_fill+0x1e>
		memset(buffer, 0xFF, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
 80012c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c8:	21ff      	movs	r1, #255	; 0xff
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <display_fill+0x34>)
 80012cc:	f00a ff88 	bl	800c1e0 <memset>
	else
		memset(buffer, 0x00, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
}
 80012d0:	e005      	b.n	80012de <display_fill+0x2a>
		memset(buffer, 0x00, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
 80012d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d6:	2100      	movs	r1, #0
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <display_fill+0x34>)
 80012da:	f00a ff81 	bl	800c1e0 <memset>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200004bc 	.word	0x200004bc

080012ec <display_render>:

void display_render() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<DISPLAY_HEIGHT/8; i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	e016      	b.n	8001326 <display_render+0x3a>
		write_cmd(0xB0 + i);	// set current RAM page address
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3b50      	subs	r3, #80	; 0x50
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fed4 	bl	80010ac <write_cmd>
		write_cmd(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fed1 	bl	80010ac <write_cmd>
		write_cmd(0x10);
 800130a:	2010      	movs	r0, #16
 800130c:	f7ff fece 	bl	80010ac <write_cmd>
		write_buffer(&buffer[DISPLAY_WIDTH*i], DISPLAY_WIDTH);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	01db      	lsls	r3, r3, #7
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <display_render+0x4c>)
 8001316:	4413      	add	r3, r2
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fede 	bl	80010dc <write_buffer>
	for(uint8_t i=0; i<DISPLAY_HEIGHT/8; i++) {
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3301      	adds	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b07      	cmp	r3, #7
 800132a:	d9e5      	bls.n	80012f8 <display_render+0xc>
	}
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200004bc 	.word	0x200004bc

0800133c <display_bitmap>:
			set(i + x, j + y, !get(i + x, j + y));
		}
	}
}

void display_bitmap(const int16_t x, const int16_t y, const display_color_t color, const void *src, const int16_t w, const int16_t h) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	4603      	mov	r3, r0
 8001346:	81fb      	strh	r3, [r7, #14]
 8001348:	460b      	mov	r3, r1
 800134a:	81bb      	strh	r3, [r7, #12]
 800134c:	4613      	mov	r3, r2
 800134e:	72fb      	strb	r3, [r7, #11]
	const uint16_t byte_per_row = ceilf((float)w/8.f);
 8001350:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001360:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001364:	eeb0 0a47 	vmov.f32	s0, s14
 8001368:	f00f fbe6 	bl	8010b38 <ceilf>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001374:	ee17 3a90 	vmov	r3, s15
 8001378:	827b      	strh	r3, [r7, #18]

	for(int16_t i=0; i<h; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	82fb      	strh	r3, [r7, #22]
 800137e:	e05a      	b.n	8001436 <display_bitmap+0xfa>
		for(int16_t j=0; j<w; j++) {
 8001380:	2300      	movs	r3, #0
 8001382:	82bb      	strh	r3, [r7, #20]
 8001384:	e04b      	b.n	800141e <display_bitmap+0xe2>

			if(((uint8_t *)src)[i*byte_per_row + j/8] & (1<<(7 - j%8)))
 8001386:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800138a:	8a7a      	ldrh	r2, [r7, #18]
 800138c:	fb03 f202 	mul.w	r2, r3, r2
 8001390:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001394:	2b00      	cmp	r3, #0
 8001396:	da00      	bge.n	800139a <display_bitmap+0x5e>
 8001398:	3307      	adds	r3, #7
 800139a:	10db      	asrs	r3, r3, #3
 800139c:	b21b      	sxth	r3, r3
 800139e:	4413      	add	r3, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ae:	425a      	negs	r2, r3
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	f002 0207 	and.w	r2, r2, #7
 80013b8:	bf58      	it	pl
 80013ba:	4253      	negpl	r3, r2
 80013bc:	b21b      	sxth	r3, r3
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	fa41 f303 	asr.w	r3, r1, r3
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00e      	beq.n	80013ec <display_bitmap+0xb0>
				set(j + x, i + y, color);
 80013ce:	8aba      	ldrh	r2, [r7, #20]
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	4413      	add	r3, r2
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b218      	sxth	r0, r3
 80013d8:	8afa      	ldrh	r2, [r7, #22]
 80013da:	89bb      	ldrh	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	7afa      	ldrb	r2, [r7, #11]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fe93 	bl	8001110 <set>
 80013ea:	e012      	b.n	8001412 <display_bitmap+0xd6>
			else
				set(j + x, i + y, !color);
 80013ec:	8aba      	ldrh	r2, [r7, #20]
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b218      	sxth	r0, r3
 80013f6:	8afa      	ldrh	r2, [r7, #22]
 80013f8:	89bb      	ldrh	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b219      	sxth	r1, r3
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf0c      	ite	eq
 8001406:	2301      	moveq	r3, #1
 8001408:	2300      	movne	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	f7ff fe7f 	bl	8001110 <set>
		for(int16_t j=0; j<w; j++) {
 8001412:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001416:	b29b      	uxth	r3, r3
 8001418:	3301      	adds	r3, #1
 800141a:	b29b      	uxth	r3, r3
 800141c:	82bb      	strh	r3, [r7, #20]
 800141e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001422:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbad      	blt.n	8001386 <display_bitmap+0x4a>
	for(int16_t i=0; i<h; i++) {
 800142a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800142e:	b29b      	uxth	r3, r3
 8001430:	3301      	adds	r3, #1
 8001432:	b29b      	uxth	r3, r3
 8001434:	82fb      	strh	r3, [r7, #22]
 8001436:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800143a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800143e:	429a      	cmp	r2, r3
 8001440:	db9e      	blt.n	8001380 <display_bitmap+0x44>
		}
	}
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <character>:

static void character(const int16_t x, const int16_t y, const display_color_t color, const display_font_t font, const char c) {
 800144c:	b082      	sub	sp, #8
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
 800145a:	460b      	mov	r3, r1
 800145c:	80bb      	strh	r3, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	70fb      	strb	r3, [r7, #3]
	const void *src = &font.data[(c - ' ')*font.height];
 8001462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001464:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001468:	3b20      	subs	r3, #32
 800146a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800146e:	fb01 f303 	mul.w	r3, r1, r3
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
	const uint16_t byte_per_row = ceilf((float)font.width/16.f);
 8001478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001488:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800148c:	eeb0 0a47 	vmov.f32	s0, s14
 8001490:	f00f fb52 	bl	8010b38 <ceilf>
 8001494:	eef0 7a40 	vmov.f32	s15, s0
 8001498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800149c:	ee17 3a90 	vmov	r3, s15
 80014a0:	81fb      	strh	r3, [r7, #14]

	for(int16_t i=0; i<font.height; i++) {
 80014a2:	2300      	movs	r3, #0
 80014a4:	82fb      	strh	r3, [r7, #22]
 80014a6:	e05a      	b.n	800155e <character+0x112>
		for(int16_t j=0; j<font.width; j++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	82bb      	strh	r3, [r7, #20]
 80014ac:	e04b      	b.n	8001546 <character+0xfa>

			if(((uint16_t *)src)[i*byte_per_row + j/16] & (1<<(15 - j%16)))
 80014ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b2:	89fa      	ldrh	r2, [r7, #14]
 80014b4:	fb03 f202 	mul.w	r2, r3, r2
 80014b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da00      	bge.n	80014c2 <character+0x76>
 80014c0:	330f      	adds	r3, #15
 80014c2:	111b      	asrs	r3, r3, #4
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4413      	add	r3, r2
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014d6:	425a      	negs	r2, r3
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	f002 020f 	and.w	r2, r2, #15
 80014e0:	bf58      	it	pl
 80014e2:	4253      	negpl	r3, r2
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	f1c3 030f 	rsb	r3, r3, #15
 80014ea:	fa41 f303 	asr.w	r3, r1, r3
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00e      	beq.n	8001514 <character+0xc8>
				set(j + x, i + y, color);
 80014f6:	8aba      	ldrh	r2, [r7, #20]
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4413      	add	r3, r2
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b218      	sxth	r0, r3
 8001500:	8afa      	ldrh	r2, [r7, #22]
 8001502:	88bb      	ldrh	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21b      	sxth	r3, r3
 800150a:	78fa      	ldrb	r2, [r7, #3]
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fdff 	bl	8001110 <set>
 8001512:	e012      	b.n	800153a <character+0xee>
			else
				set(j + x, i + y, !color);
 8001514:	8aba      	ldrh	r2, [r7, #20]
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	4413      	add	r3, r2
 800151a:	b29b      	uxth	r3, r3
 800151c:	b218      	sxth	r0, r3
 800151e:	8afa      	ldrh	r2, [r7, #22]
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	b29b      	uxth	r3, r3
 8001526:	b219      	sxth	r1, r3
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf0c      	ite	eq
 800152e:	2301      	moveq	r3, #1
 8001530:	2300      	movne	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	f7ff fdeb 	bl	8001110 <set>
		for(int16_t j=0; j<font.width; j++) {
 800153a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800153e:	b29b      	uxth	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	b29b      	uxth	r3, r3
 8001544:	82bb      	strh	r3, [r7, #20]
 8001546:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800154a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800154e:	4293      	cmp	r3, r2
 8001550:	dbad      	blt.n	80014ae <character+0x62>
	for(int16_t i=0; i<font.height; i++) {
 8001552:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001556:	b29b      	uxth	r3, r3
 8001558:	3301      	adds	r3, #1
 800155a:	b29b      	uxth	r3, r3
 800155c:	82fb      	strh	r3, [r7, #22]
 800155e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001562:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001566:	4293      	cmp	r3, r2
 8001568:	db9e      	blt.n	80014a8 <character+0x5c>
		}
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001576:	b002      	add	sp, #8
 8001578:	4770      	bx	lr

0800157a <display_printf>:

void display_printf(const int16_t x, const int16_t y, const display_color_t color, const display_font_t font, const char *format, ...) {
 800157a:	b40c      	push	{r2, r3}
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af02      	add	r7, sp, #8
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001584:	4603      	mov	r3, r0
 8001586:	80fb      	strh	r3, [r7, #6]
 8001588:	460b      	mov	r3, r1
 800158a:	80bb      	strh	r3, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	70fb      	strb	r3, [r7, #3]
	va_list valist;
	va_start(valist, format);
 8001590:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001594:	627b      	str	r3, [r7, #36]	; 0x24

	char buffer[22] = {0};
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	821a      	strh	r2, [r3, #16]
	vsnprintf(buffer, 22, format, valist);
 80015aa:	f107 000c 	add.w	r0, r7, #12
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015b2:	2116      	movs	r1, #22
 80015b4:	f00c fb9c 	bl	800dcf0 <vsniprintf>

	const size_t n = strlen(buffer);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe0f 	bl	80001e0 <strlen>
 80015c2:	62b8      	str	r0, [r7, #40]	; 0x28

	for(size_t i=0; i<n; i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c8:	e01c      	b.n	8001604 <display_printf+0x8a>
		character(x + i*font.width, y, color, font, buffer[i]);
 80015ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	fb12 f303 	smulbb	r3, r2, r3
 80015d8:	b29a      	uxth	r2, r3
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	4413      	add	r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b218      	sxth	r0, r3
 80015e2:	f107 020c 	add.w	r2, r7, #12
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015fa:	f7ff ff27 	bl	800144c <character>
	for(size_t i=0; i<n; i++) {
 80015fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001600:	3301      	adds	r3, #1
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	429a      	cmp	r2, r3
 800160a:	d3de      	bcc.n	80015ca <display_printf+0x50>
	}
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001618:	b002      	add	sp, #8
 800161a:	4770      	bx	lr

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f001 fc23 	bl	8002e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f8f1 	bl	800180c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162a:	f000 fb9d 	bl	8001d68 <MX_GPIO_Init>
  MX_DMA_Init();
 800162e:	f000 fb7b 	bl	8001d28 <MX_DMA_Init>
  MX_I2C1_Init();
 8001632:	f000 f9cf 	bl	80019d4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001636:	f000 fa29 	bl	8001a8c <MX_I2C3_Init>
  MX_ADC1_Init();
 800163a:	f000 f94f 	bl	80018dc <MX_ADC1_Init>
  MX_I2C2_Init();
 800163e:	f000 f9f7 	bl	8001a30 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001642:	f000 fb47 	bl	8001cd4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001646:	f000 fa4f 	bl	8001ae8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800164a:	f000 fac3 	bl	8001bd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800164e:	2100      	movs	r1, #0
 8001650:	4856      	ldr	r0, [pc, #344]	; (80017ac <main+0x190>)
 8001652:	f004 fd41 	bl	80060d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001656:	2100      	movs	r1, #0
 8001658:	4855      	ldr	r0, [pc, #340]	; (80017b0 <main+0x194>)
 800165a:	f004 fd3d 	bl	80060d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800165e:	2104      	movs	r1, #4
 8001660:	4853      	ldr	r0, [pc, #332]	; (80017b0 <main+0x194>)
 8001662:	f004 fd39 	bl	80060d8 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, values_adc, 4);
 8001666:	2204      	movs	r2, #4
 8001668:	4952      	ldr	r1, [pc, #328]	; (80017b4 <main+0x198>)
 800166a:	4853      	ldr	r0, [pc, #332]	; (80017b8 <main+0x19c>)
 800166c:	f001 fcd8 	bl	8003020 <HAL_ADC_Start_DMA>

  TOF2.vl53l0x_c.I2cHandle = &hi2c1;
 8001670:	4b52      	ldr	r3, [pc, #328]	; (80017bc <main+0x1a0>)
 8001672:	4a53      	ldr	r2, [pc, #332]	; (80017c0 <main+0x1a4>)
 8001674:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  TOF2.vl53l0x_c.I2cDevAddr = 0x52;
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <main+0x1a0>)
 800167a:	2252      	movs	r2, #82	; 0x52
 800167c:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

  TOF3.vl53l0x_c.I2cHandle = &hi2c1;
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <main+0x1a8>)
 8001682:	4a4f      	ldr	r2, [pc, #316]	; (80017c0 <main+0x1a4>)
 8001684:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  TOF3.vl53l0x_c.I2cDevAddr = 0x52;
 8001688:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <main+0x1a8>)
 800168a:	2252      	movs	r2, #82	; 0x52
 800168c:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

  TOF4.vl53l0x_c.I2cHandle = &hi2c3;
 8001690:	4b4d      	ldr	r3, [pc, #308]	; (80017c8 <main+0x1ac>)
 8001692:	4a4e      	ldr	r2, [pc, #312]	; (80017cc <main+0x1b0>)
 8001694:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  TOF4.vl53l0x_c.I2cDevAddr = 0x52;
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <main+0x1ac>)
 800169a:	2252      	movs	r2, #82	; 0x52
 800169c:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

  TOF5.vl53l0x_c.I2cHandle = &hi2c3;
 80016a0:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <main+0x1b4>)
 80016a2:	4a4a      	ldr	r2, [pc, #296]	; (80017cc <main+0x1b0>)
 80016a4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  TOF5.vl53l0x_c.I2cDevAddr = 0x52;
 80016a8:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <main+0x1b4>)
 80016aa:	2252      	movs	r2, #82	; 0x52
 80016ac:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

  HAL_GPIO_WritePin(TOF_X2_GPIO_Port, TOF_X2_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b6:	4847      	ldr	r0, [pc, #284]	; (80017d4 <main+0x1b8>)
 80016b8:	f002 fe8e 	bl	80043d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOF_X3_GPIO_Port, TOF_X3_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c2:	4844      	ldr	r0, [pc, #272]	; (80017d4 <main+0x1b8>)
 80016c4:	f002 fe88 	bl	80043d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOF_X4_GPIO_Port, TOF_X4_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ce:	4842      	ldr	r0, [pc, #264]	; (80017d8 <main+0x1bc>)
 80016d0:	f002 fe82 	bl	80043d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOF_X5_GPIO_Port, TOF_X5_Pin, GPIO_PIN_RESET); // Disable XSHUT
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016da:	4840      	ldr	r0, [pc, #256]	; (80017dc <main+0x1c0>)
 80016dc:	f002 fe7c 	bl	80043d8 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80016e0:	2014      	movs	r0, #20
 80016e2:	f001 fc35 	bl	8002f50 <HAL_Delay>
  //HAL_GPIO_WritePin(TOF_X3_GPIO_Port, TOF_X3_Pin, GPIO_PIN_SET); // Enable XSHUT


  HAL_GPIO_WritePin(TOF_X2_GPIO_Port, TOF_X2_Pin, GPIO_PIN_SET); // Enable XSHUT
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ec:	4839      	ldr	r0, [pc, #228]	; (80017d4 <main+0x1b8>)
 80016ee:	f002 fe73 	bl	80043d8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80016f2:	2032      	movs	r0, #50	; 0x32
 80016f4:	f001 fc2c 	bl	8002f50 <HAL_Delay>

  tof_vl53l0_init(&TOF2.vl53l0x_c, &VhvSettings , &PhaseCal, &refSpadCount, &isApertureSpads);
 80016f8:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <main+0x1c4>)
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <main+0x1c8>)
 80016fe:	4a3a      	ldr	r2, [pc, #232]	; (80017e8 <main+0x1cc>)
 8001700:	493a      	ldr	r1, [pc, #232]	; (80017ec <main+0x1d0>)
 8001702:	483b      	ldr	r0, [pc, #236]	; (80017f0 <main+0x1d4>)
 8001704:	f001 fb40 	bl	8002d88 <tof_vl53l0_init>
  VL53L0X_SetDeviceAddress(&(TOF2.vl53l0x_c), 0x62);
 8001708:	2162      	movs	r1, #98	; 0x62
 800170a:	4839      	ldr	r0, [pc, #228]	; (80017f0 <main+0x1d4>)
 800170c:	f005 fd2d 	bl	800716a <VL53L0X_SetDeviceAddress>
  HAL_Delay(50);
 8001710:	2032      	movs	r0, #50	; 0x32
 8001712:	f001 fc1d 	bl	8002f50 <HAL_Delay>
  TOF2.vl53l0x_c.I2cDevAddr = 0x62;
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <main+0x1a0>)
 8001718:	2262      	movs	r2, #98	; 0x62
 800171a:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
  HAL_Delay(50);
 800171e:	2032      	movs	r0, #50	; 0x32
 8001720:	f001 fc16 	bl	8002f50 <HAL_Delay>


  //HAL_GPIO_WritePin(TOF_X2_GPIO_Port, TOF_X2_Pin, GPIO_PIN_SET); // Enable XSHUT
  HAL_GPIO_WritePin(TOF_X3_GPIO_Port, TOF_X3_Pin, GPIO_PIN_SET); // Enable XSHUT
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172a:	482a      	ldr	r0, [pc, #168]	; (80017d4 <main+0x1b8>)
 800172c:	f002 fe54 	bl	80043d8 <HAL_GPIO_WritePin>
  tof_vl53l0_init(&TOF3.vl53l0x_c, &VhvSettings , &PhaseCal, &refSpadCount, &isApertureSpads);
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <main+0x1c4>)
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <main+0x1c8>)
 8001736:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <main+0x1cc>)
 8001738:	492c      	ldr	r1, [pc, #176]	; (80017ec <main+0x1d0>)
 800173a:	482e      	ldr	r0, [pc, #184]	; (80017f4 <main+0x1d8>)
 800173c:	f001 fb24 	bl	8002d88 <tof_vl53l0_init>


  HAL_GPIO_WritePin(TOF_X4_GPIO_Port, TOF_X4_Pin, GPIO_PIN_SET); // Enable XSHUT
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	4824      	ldr	r0, [pc, #144]	; (80017d8 <main+0x1bc>)
 8001748:	f002 fe46 	bl	80043d8 <HAL_GPIO_WritePin>
  tof_vl53l0_init(&TOF4.vl53l0x_c, &VhvSettings , &PhaseCal, &refSpadCount, &isApertureSpads);
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <main+0x1c4>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <main+0x1c8>)
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <main+0x1cc>)
 8001754:	4925      	ldr	r1, [pc, #148]	; (80017ec <main+0x1d0>)
 8001756:	4828      	ldr	r0, [pc, #160]	; (80017f8 <main+0x1dc>)
 8001758:	f001 fb16 	bl	8002d88 <tof_vl53l0_init>
  //HAL_GPIO_WritePin(TOF_X5_GPIO_Port, TOF_X5_Pin, GPIO_PIN_SET); // Enable XSHUT


  //tof_vl53l0_init(&TOF5.vl53l0x_c, &VhvSettings , &PhaseCal, &refSpadCount, &isApertureSpads);

  display_init();
 800175c:	f7ff fd4e 	bl	80011fc <display_init>
  display_printf(15, 20, DISPLAY_COLOR_WHITE, display_font_7x10, "Miras minisumo");
 8001760:	4b26      	ldr	r3, [pc, #152]	; (80017fc <main+0x1e0>)
 8001762:	4a27      	ldr	r2, [pc, #156]	; (8001800 <main+0x1e4>)
 8001764:	9201      	str	r2, [sp, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	9200      	str	r2, [sp, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2201      	movs	r2, #1
 800176e:	2114      	movs	r1, #20
 8001770:	200f      	movs	r0, #15
 8001772:	f7ff ff02 	bl	800157a <display_printf>
  display_render();
 8001776:	f7ff fdb9 	bl	80012ec <display_render>
  battery.adc_reading = values_adc[0];
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <main+0x198>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <main+0x1e8>)
 8001782:	801a      	strh	r2, [r3, #0]
  initAverage(& (battery.adc_average), battery.adc_reading);
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <main+0x1e8>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	481f      	ldr	r0, [pc, #124]	; (8001808 <main+0x1ec>)
 800178c:	f000 fee8 	bl	8002560 <initAverage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1)
 8001790:	2110      	movs	r1, #16
 8001792:	4810      	ldr	r0, [pc, #64]	; (80017d4 <main+0x1b8>)
 8001794:	f002 fe08 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d102      	bne.n	80017a4 <main+0x188>
		wait_for_fight_start();
 800179e:	f000 fc65 	bl	800206c <wait_for_fight_start>
 80017a2:	e7f5      	b.n	8001790 <main+0x174>
	else
		debug_screen();
 80017a4:	f000 fb9a 	bl	8001edc <debug_screen>
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1)
 80017a8:	e7f2      	b.n	8001790 <main+0x174>
 80017aa:	bf00      	nop
 80017ac:	20000a60 	.word	0x20000a60
 80017b0:	20000aa8 	.word	0x20000aa8
 80017b4:	20000b60 	.word	0x20000b60
 80017b8:	200008bc 	.word	0x200008bc
 80017bc:	20000b70 	.word	0x20000b70
 80017c0:	20000964 	.word	0x20000964
 80017c4:	20000d1c 	.word	0x20000d1c
 80017c8:	20000ec8 	.word	0x20000ec8
 80017cc:	20000a0c 	.word	0x20000a0c
 80017d0:	20001074 	.word	0x20001074
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020400 	.word	0x40020400
 80017e0:	20001224 	.word	0x20001224
 80017e4:	20001220 	.word	0x20001220
 80017e8:	20001226 	.word	0x20001226
 80017ec:	20001225 	.word	0x20001225
 80017f0:	20000b8c 	.word	0x20000b8c
 80017f4:	20000d38 	.word	0x20000d38
 80017f8:	20000ee4 	.word	0x20000ee4
 80017fc:	0801195c 	.word	0x0801195c
 8001800:	08010bd8 	.word	0x08010bd8
 8001804:	20000b34 	.word	0x20000b34
 8001808:	20000b40 	.word	0x20000b40

0800180c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b094      	sub	sp, #80	; 0x50
 8001810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001812:	f107 0320 	add.w	r3, r7, #32
 8001816:	2230      	movs	r2, #48	; 0x30
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f00a fce0 	bl	800c1e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <SystemClock_Config+0xc8>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <SystemClock_Config+0xc8>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <SystemClock_Config+0xc8>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <SystemClock_Config+0xcc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <SystemClock_Config+0xcc>)
 8001856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <SystemClock_Config+0xcc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800186c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001872:	2302      	movs	r3, #2
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800187c:	2304      	movs	r3, #4
 800187e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001880:	2364      	movs	r3, #100	; 0x64
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001884:	2302      	movs	r3, #2
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001888:	2304      	movs	r3, #4
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fee1 	bl	8005658 <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800189c:	f000 fb18 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a0:	230f      	movs	r3, #15
 80018a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a4:	2302      	movs	r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	2103      	movs	r1, #3
 80018bc:	4618      	mov	r0, r3
 80018be:	f004 f943 	bl	8005b48 <HAL_RCC_ClockConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018c8:	f000 fb02 	bl	8001ed0 <Error_Handler>
  }
}
 80018cc:	bf00      	nop
 80018ce:	3750      	adds	r7, #80	; 0x50
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40007000 	.word	0x40007000

080018dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018e2:	463b      	mov	r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018ee:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <MX_ADC1_Init+0xec>)
 80018f0:	4a36      	ldr	r2, [pc, #216]	; (80019cc <MX_ADC1_Init+0xf0>)
 80018f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <MX_ADC1_Init+0xec>)
 80018f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <MX_ADC1_Init+0xec>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <MX_ADC1_Init+0xec>)
 8001904:	2201      	movs	r2, #1
 8001906:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001908:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <MX_ADC1_Init+0xec>)
 800190a:	2201      	movs	r2, #1
 800190c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <MX_ADC1_Init+0xec>)
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <MX_ADC1_Init+0xec>)
 8001918:	2200      	movs	r2, #0
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <MX_ADC1_Init+0xec>)
 800191e:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <MX_ADC1_Init+0xf4>)
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <MX_ADC1_Init+0xec>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <MX_ADC1_Init+0xec>)
 800192a:	2204      	movs	r2, #4
 800192c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <MX_ADC1_Init+0xec>)
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <MX_ADC1_Init+0xec>)
 8001938:	2201      	movs	r2, #1
 800193a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800193c:	4822      	ldr	r0, [pc, #136]	; (80019c8 <MX_ADC1_Init+0xec>)
 800193e:	f001 fb2b 	bl	8002f98 <HAL_ADC_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001948:	f000 fac2 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800194c:	2309      	movs	r3, #9
 800194e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001950:	2301      	movs	r3, #1
 8001952:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001954:	2307      	movs	r3, #7
 8001956:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	481a      	ldr	r0, [pc, #104]	; (80019c8 <MX_ADC1_Init+0xec>)
 800195e:	f001 fc6d 	bl	800323c <HAL_ADC_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001968:	f000 fab2 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800196c:	230b      	movs	r3, #11
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001970:	2302      	movs	r3, #2
 8001972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	4813      	ldr	r0, [pc, #76]	; (80019c8 <MX_ADC1_Init+0xec>)
 800197a:	f001 fc5f 	bl	800323c <HAL_ADC_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001984:	f000 faa4 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001988:	230c      	movs	r3, #12
 800198a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800198c:	2303      	movs	r3, #3
 800198e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <MX_ADC1_Init+0xec>)
 8001996:	f001 fc51 	bl	800323c <HAL_ADC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80019a0:	f000 fa96 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80019a4:	230d      	movs	r3, #13
 80019a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80019a8:	2304      	movs	r3, #4
 80019aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_ADC1_Init+0xec>)
 80019b2:	f001 fc43 	bl	800323c <HAL_ADC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80019bc:	f000 fa88 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200008bc 	.word	0x200008bc
 80019cc:	40012000 	.word	0x40012000
 80019d0:	0f000001 	.word	0x0f000001

080019d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <MX_I2C1_Init+0x54>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019e0:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <MX_I2C1_Init+0x58>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_I2C1_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <MX_I2C1_Init+0x50>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_I2C1_Init+0x50>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	; (8001a24 <MX_I2C1_Init+0x50>)
 8001a12:	f002 fcfb 	bl	800440c <HAL_I2C_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a1c:	f000 fa58 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000964 	.word	0x20000964
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	000186a0 	.word	0x000186a0

08001a30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_I2C2_Init+0x50>)
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <MX_I2C2_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_I2C2_Init+0x50>)
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_I2C2_Init+0x58>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_I2C2_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_I2C2_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_I2C2_Init+0x50>)
 8001a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_I2C2_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_I2C2_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_I2C2_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_I2C2_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_I2C2_Init+0x50>)
 8001a6e:	f002 fccd 	bl	800440c <HAL_I2C_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a78:	f000 fa2a 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200009b8 	.word	0x200009b8
 8001a84:	40005800 	.word	0x40005800
 8001a88:	000186a0 	.word	0x000186a0

08001a8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <MX_I2C3_Init+0x50>)
 8001a92:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <MX_I2C3_Init+0x54>)
 8001a94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_I2C3_Init+0x50>)
 8001a98:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_I2C3_Init+0x58>)
 8001a9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_I2C3_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_I2C3_Init+0x50>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_I2C3_Init+0x50>)
 8001aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <MX_I2C3_Init+0x50>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_I2C3_Init+0x50>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <MX_I2C3_Init+0x50>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_I2C3_Init+0x50>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <MX_I2C3_Init+0x50>)
 8001aca:	f002 fc9f 	bl	800440c <HAL_I2C_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ad4:	f000 f9fc 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000a0c 	.word	0x20000a0c
 8001ae0:	40005c00 	.word	0x40005c00
 8001ae4:	000186a0 	.word	0x000186a0

08001ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08e      	sub	sp, #56	; 0x38
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	f107 0320 	add.w	r3, r7, #32
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001b22:	220f      	movs	r2, #15
 8001b24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001b2e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b34:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b40:	4823      	ldr	r0, [pc, #140]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001b42:	f004 fa21 	bl	8005f88 <HAL_TIM_Base_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b4c:	f000 f9c0 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	481c      	ldr	r0, [pc, #112]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001b5e:	f004 fc2d 	bl	80063bc <HAL_TIM_ConfigClockSource>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b68:	f000 f9b2 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b6c:	4818      	ldr	r0, [pc, #96]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001b6e:	f004 fa5a 	bl	8006026 <HAL_TIM_PWM_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b78:	f000 f9aa 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b84:	f107 0320 	add.w	r3, r7, #32
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001b8c:	f004 ffaa 	bl	8006ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001b96:	f000 f99b 	bl	8001ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9a:	2360      	movs	r3, #96	; 0x60
 8001b9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2200      	movs	r2, #0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001bb2:	f004 fb41 	bl	8006238 <HAL_TIM_PWM_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001bbc:	f000 f988 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bc0:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <MX_TIM2_Init+0xe8>)
 8001bc2:	f000 ff0f 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 8001bc6:	bf00      	nop
 8001bc8:	3738      	adds	r7, #56	; 0x38
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000a60 	.word	0x20000a60

08001bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08e      	sub	sp, #56	; 0x38
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 0320 	add.w	r3, r7, #32
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
 8001c00:	615a      	str	r2, [r3, #20]
 8001c02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c06:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001c16:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c18:	2263      	movs	r2, #99	; 0x63
 8001c1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c28:	4828      	ldr	r0, [pc, #160]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c2a:	f004 f9ad 	bl	8005f88 <HAL_TIM_Base_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001c34:	f000 f94c 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c42:	4619      	mov	r1, r3
 8001c44:	4821      	ldr	r0, [pc, #132]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c46:	f004 fbb9 	bl	80063bc <HAL_TIM_ConfigClockSource>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001c50:	f000 f93e 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c54:	481d      	ldr	r0, [pc, #116]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c56:	f004 f9e6 	bl	8006026 <HAL_TIM_PWM_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001c60:	f000 f936 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	4619      	mov	r1, r3
 8001c72:	4816      	ldr	r0, [pc, #88]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c74:	f004 ff36 	bl	8006ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001c7e:	f000 f927 	bl	8001ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c82:	2360      	movs	r3, #96	; 0x60
 8001c84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2200      	movs	r2, #0
 8001c96:	4619      	mov	r1, r3
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001c9a:	f004 facd 	bl	8006238 <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001ca4:	f000 f914 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2204      	movs	r2, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001cb0:	f004 fac2 	bl	8006238 <HAL_TIM_PWM_ConfigChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001cba:	f000 f909 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cbe:	4803      	ldr	r0, [pc, #12]	; (8001ccc <MX_TIM3_Init+0xf8>)
 8001cc0:	f000 fe90 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 8001cc4:	bf00      	nop
 8001cc6:	3738      	adds	r7, #56	; 0x38
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000aa8 	.word	0x20000aa8
 8001cd0:	40000400 	.word	0x40000400

08001cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <MX_USART2_UART_Init+0x50>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d0c:	f004 ff58 	bl	8006bc0 <HAL_UART_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d16:	f000 f8db 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000af0 	.word	0x20000af0
 8001d24:	40004400 	.word	0x40004400

08001d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_DMA_Init+0x3c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <MX_DMA_Init+0x3c>)
 8001d38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_DMA_Init+0x3c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2038      	movs	r0, #56	; 0x38
 8001d50:	f001 fdff 	bl	8003952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d54:	2038      	movs	r0, #56	; 0x38
 8001d56:	f001 fe18 	bl	800398a <HAL_NVIC_EnableIRQ>

}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a4e      	ldr	r2, [pc, #312]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b48      	ldr	r3, [pc, #288]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a47      	ldr	r2, [pc, #284]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b45      	ldr	r3, [pc, #276]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a39      	ldr	r2, [pc, #228]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b37      	ldr	r3, [pc, #220]	; (8001ec0 <MX_GPIO_Init+0x158>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_X3_Pin|TOF_X2_Pin|TOF_X1_Pin|TOF_X6_Pin
 8001dee:	2200      	movs	r2, #0
 8001df0:	f64e 0120 	movw	r1, #59424	; 0xe820
 8001df4:	4833      	ldr	r0, [pc, #204]	; (8001ec4 <MX_GPIO_Init+0x15c>)
 8001df6:	f002 faef 	bl	80043d8 <HAL_GPIO_WritePin>
                          |LS_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motor_R_DIR_2_Pin|motor_R_DIR_1_Pin|user_LED_Pin|TOF_X5_Pin
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f246 3105 	movw	r1, #25349	; 0x6305
 8001e00:	4831      	ldr	r0, [pc, #196]	; (8001ec8 <MX_GPIO_Init+0x160>)
 8001e02:	f002 fae9 	bl	80043d8 <HAL_GPIO_WritePin>
                          |motor_L_DIR_1_Pin|motor_L_DIR_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_X4_GPIO_Port, TOF_X4_Pin, GPIO_PIN_RESET);
 8001e06:	2200      	movs	r2, #0
 8001e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0c:	482f      	ldr	r0, [pc, #188]	; (8001ecc <MX_GPIO_Init+0x164>)
 8001e0e:	f002 fae3 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOF_X3_Pin TOF_X2_Pin TOF_X1_Pin TOF_X6_Pin
                           LS_ON_Pin */
  GPIO_InitStruct.Pin = TOF_X3_Pin|TOF_X2_Pin|TOF_X1_Pin|TOF_X6_Pin
 8001e12:	f64e 0320 	movw	r3, #59424	; 0xe820
 8001e16:	617b      	str	r3, [r7, #20]
                          |LS_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4826      	ldr	r0, [pc, #152]	; (8001ec4 <MX_GPIO_Init+0x15c>)
 8001e2c:	f002 f938 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW4_Pin SW3_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin;
 8001e30:	23b0      	movs	r3, #176	; 0xb0
 8001e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4822      	ldr	r0, [pc, #136]	; (8001ecc <MX_GPIO_Init+0x164>)
 8001e44:	f002 f92c 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001e48:	2310      	movs	r3, #16
 8001e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	481a      	ldr	r0, [pc, #104]	; (8001ec4 <MX_GPIO_Init+0x15c>)
 8001e5c:	f002 f920 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_R_DIR_2_Pin motor_R_DIR_1_Pin user_LED_Pin TOF_X5_Pin
                           motor_L_DIR_1_Pin motor_L_DIR_2_Pin */
  GPIO_InitStruct.Pin = motor_R_DIR_2_Pin|motor_R_DIR_1_Pin|user_LED_Pin|TOF_X5_Pin
 8001e60:	f246 3305 	movw	r3, #25349	; 0x6305
 8001e64:	617b      	str	r3, [r7, #20]
                          |motor_L_DIR_1_Pin|motor_L_DIR_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <MX_GPIO_Init+0x160>)
 8001e7a:	f002 f911 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : starter_Pin */
  GPIO_InitStruct.Pin = starter_Pin;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(starter_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <MX_GPIO_Init+0x160>)
 8001e94:	f002 f904 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_X4_Pin */
  GPIO_InitStruct.Pin = TOF_X4_Pin;
 8001e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_X4_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4806      	ldr	r0, [pc, #24]	; (8001ecc <MX_GPIO_Init+0x164>)
 8001eb2:	f002 f8f5 	bl	80040a0 <HAL_GPIO_Init>

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020000 	.word	0x40020000

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <Error_Handler+0x8>
	...

08001edc <debug_screen>:
#define BACKING_UP_TIME 100		//ms
#define MAX_SPEED		 80		//0 - 100

#include "modes_of_operation.h"

void debug_screen(){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af04      	add	r7, sp, #16
	while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0){
 8001ee2:	e09a      	b.n	800201a <debug_screen+0x13e>
		if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1 )
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	4853      	ldr	r0, [pc, #332]	; (8002034 <debug_screen+0x158>)
 8001ee8:	f002 fa5e 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d106      	bne.n	8001f00 <debug_screen+0x24>
			HAL_GPIO_WritePin(LS_ON_GPIO_Port, LS_ON_Pin, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef8:	484f      	ldr	r0, [pc, #316]	; (8002038 <debug_screen+0x15c>)
 8001efa:	f002 fa6d 	bl	80043d8 <HAL_GPIO_WritePin>
 8001efe:	e005      	b.n	8001f0c <debug_screen+0x30>
		else
			HAL_GPIO_WritePin(LS_ON_GPIO_Port, LS_ON_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f06:	484c      	ldr	r0, [pc, #304]	; (8002038 <debug_screen+0x15c>)
 8001f08:	f002 fa66 	bl	80043d8 <HAL_GPIO_WritePin>

		battery.adc_reading = values_adc[0];
 8001f0c:	4b4b      	ldr	r3, [pc, #300]	; (800203c <debug_screen+0x160>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <debug_screen+0x164>)
 8001f14:	801a      	strh	r2, [r3, #0]
		display_fill(DISPLAY_COLOR_BLACK);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff f9cc 	bl	80012b4 <display_fill>
		display_printf(50, 0, DISPLAY_COLOR_WHITE, display_font_6x8, "%.2fV", calculateBatteryVoltage(& battery));
 8001f1c:	4848      	ldr	r0, [pc, #288]	; (8002040 <debug_screen+0x164>)
 8001f1e:	f7ff f873 	bl	8001008 <calculateBatteryVoltage>
 8001f22:	ee10 3a10 	vmov	r3, s0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb16 	bl	8000558 <__aeabi_f2d>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4944      	ldr	r1, [pc, #272]	; (8002044 <debug_screen+0x168>)
 8001f32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f36:	4b44      	ldr	r3, [pc, #272]	; (8002048 <debug_screen+0x16c>)
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	684b      	ldr	r3, [r1, #4]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	680b      	ldr	r3, [r1, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	2100      	movs	r1, #0
 8001f44:	2032      	movs	r0, #50	; 0x32
 8001f46:	f7ff fb18 	bl	800157a <display_printf>
		display_printf(0, 0, DISPLAY_COLOR_WHITE, display_font_6x8, "%d", (int) values_adc[KTIR_FRONT_LEFT]);
 8001f4a:	4b3c      	ldr	r3, [pc, #240]	; (800203c <debug_screen+0x160>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b3c      	ldr	r3, [pc, #240]	; (8002044 <debug_screen+0x168>)
 8001f52:	9202      	str	r2, [sp, #8]
 8001f54:	4a3d      	ldr	r2, [pc, #244]	; (800204c <debug_screen+0x170>)
 8001f56:	9201      	str	r2, [sp, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	9200      	str	r2, [sp, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2100      	movs	r1, #0
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff fb09 	bl	800157a <display_printf>
		display_printf(104, 00, DISPLAY_COLOR_WHITE, display_font_6x8, "%d", (int) values_adc[KTIR_FRONT_RIGHT]);
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <debug_screen+0x160>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b35      	ldr	r3, [pc, #212]	; (8002044 <debug_screen+0x168>)
 8001f70:	9202      	str	r2, [sp, #8]
 8001f72:	4a36      	ldr	r2, [pc, #216]	; (800204c <debug_screen+0x170>)
 8001f74:	9201      	str	r2, [sp, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	9200      	str	r2, [sp, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2068      	movs	r0, #104	; 0x68
 8001f82:	f7ff fafa 	bl	800157a <display_printf>
		display_printf(54, 56, DISPLAY_COLOR_WHITE, display_font_6x8, "%d", (int) values_adc[KTIR_BACK]);
 8001f86:	4b2d      	ldr	r3, [pc, #180]	; (800203c <debug_screen+0x160>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <debug_screen+0x168>)
 8001f8e:	9202      	str	r2, [sp, #8]
 8001f90:	4a2e      	ldr	r2, [pc, #184]	; (800204c <debug_screen+0x170>)
 8001f92:	9201      	str	r2, [sp, #4]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	9200      	str	r2, [sp, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2138      	movs	r1, #56	; 0x38
 8001f9e:	2036      	movs	r0, #54	; 0x36
 8001fa0:	f7ff faeb 	bl	800157a <display_printf>

		VL53L0X_PerformSingleRangingMeasurement(&(TOF2.vl53l0x_c), &(TOF2.RangingData));
 8001fa4:	492a      	ldr	r1, [pc, #168]	; (8002050 <debug_screen+0x174>)
 8001fa6:	482b      	ldr	r0, [pc, #172]	; (8002054 <debug_screen+0x178>)
 8001fa8:	f006 fba0 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
		//if(TOF2.RangingData.RangeStatus == 0){
			display_printf(10, 30, DISPLAY_COLOR_WHITE, display_font_6x8, "%i", TOF2.RangingData.RangeMilliMeter);
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <debug_screen+0x174>)
 8001fae:	891b      	ldrh	r3, [r3, #8]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <debug_screen+0x168>)
 8001fb4:	9202      	str	r2, [sp, #8]
 8001fb6:	4a28      	ldr	r2, [pc, #160]	; (8002058 <debug_screen+0x17c>)
 8001fb8:	9201      	str	r2, [sp, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	9200      	str	r2, [sp, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	211e      	movs	r1, #30
 8001fc4:	200a      	movs	r0, #10
 8001fc6:	f7ff fad8 	bl	800157a <display_printf>
		//}

		VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 8001fca:	4924      	ldr	r1, [pc, #144]	; (800205c <debug_screen+0x180>)
 8001fcc:	4824      	ldr	r0, [pc, #144]	; (8002060 <debug_screen+0x184>)
 8001fce:	f006 fb8d 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
		//if(TOF3.RangingData.RangeStatus == 0){
			display_printf(32, 20, DISPLAY_COLOR_WHITE, display_font_6x8, "%i", TOF3.RangingData.RangeMilliMeter);
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <debug_screen+0x180>)
 8001fd4:	891b      	ldrh	r3, [r3, #8]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <debug_screen+0x168>)
 8001fda:	9202      	str	r2, [sp, #8]
 8001fdc:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <debug_screen+0x17c>)
 8001fde:	9201      	str	r2, [sp, #4]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	9200      	str	r2, [sp, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2114      	movs	r1, #20
 8001fea:	2020      	movs	r0, #32
 8001fec:	f7ff fac5 	bl	800157a <display_printf>
		//}

		VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 8001ff0:	491c      	ldr	r1, [pc, #112]	; (8002064 <debug_screen+0x188>)
 8001ff2:	481d      	ldr	r0, [pc, #116]	; (8002068 <debug_screen+0x18c>)
 8001ff4:	f006 fb7a 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
		//if(TOF4.RangingData.RangeStatus == 0){
			display_printf(72, 20, DISPLAY_COLOR_WHITE, display_font_6x8, "%i", TOF4.RangingData.RangeMilliMeter);
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <debug_screen+0x188>)
 8001ffa:	891b      	ldrh	r3, [r3, #8]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <debug_screen+0x168>)
 8002000:	9202      	str	r2, [sp, #8]
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <debug_screen+0x17c>)
 8002004:	9201      	str	r2, [sp, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	9200      	str	r2, [sp, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	2114      	movs	r1, #20
 8002010:	2048      	movs	r0, #72	; 0x48
 8002012:	f7ff fab2 	bl	800157a <display_printf>
		//VL53L0X_PerformSingleRangingMeasurement(&(TOF5.vl53l0x_c), &(TOF5.RangingData));
		//if(TOF5.RangingData.RangeStatus == 0){
				//display_printf(100, 30, DISPLAY_COLOR_WHITE, display_font_6x8, "%i", TOF5.RangingData.RangeMilliMeter);
		//}

		display_render();
 8002016:	f7ff f969 	bl	80012ec <display_render>
	while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0){
 800201a:	2110      	movs	r1, #16
 800201c:	4806      	ldr	r0, [pc, #24]	; (8002038 <debug_screen+0x15c>)
 800201e:	f002 f9c3 	bl	80043a8 <HAL_GPIO_ReadPin>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	f43f af5d 	beq.w	8001ee4 <debug_screen+0x8>
	}
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40020000 	.word	0x40020000
 8002038:	40020800 	.word	0x40020800
 800203c:	20000b60 	.word	0x20000b60
 8002040:	20000b34 	.word	0x20000b34
 8002044:	08011954 	.word	0x08011954
 8002048:	08010be8 	.word	0x08010be8
 800204c:	08010bf0 	.word	0x08010bf0
 8002050:	20000b70 	.word	0x20000b70
 8002054:	20000b8c 	.word	0x20000b8c
 8002058:	08010bf4 	.word	0x08010bf4
 800205c:	20000d1c 	.word	0x20000d1c
 8002060:	20000d38 	.word	0x20000d38
 8002064:	20000ec8 	.word	0x20000ec8
 8002068:	20000ee4 	.word	0x20000ee4

0800206c <wait_for_fight_start>:

void wait_for_fight_start(){
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af02      	add	r7, sp, #8
	display_fill(DISPLAY_COLOR_BLACK);
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff f91e 	bl	80012b4 <display_fill>
	display_bitmap(0, 0, DISPLAY_COLOR_WHITE, bitmap_konar_vertical_128_64, 128, 64);
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <wait_for_fight_start+0x54>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2240      	movs	r2, #64	; 0x40
 800207e:	9201      	str	r2, [sp, #4]
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	9200      	str	r2, [sp, #0]
 8002084:	2201      	movs	r2, #1
 8002086:	2100      	movs	r1, #0
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff f957 	bl	800133c <display_bitmap>
	display_render();
 800208e:	f7ff f92d 	bl	80012ec <display_render>

	while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1){
 8002092:	e009      	b.n	80020a8 <wait_for_fight_start+0x3c>
		if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin))
 8002094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002098:	480a      	ldr	r0, [pc, #40]	; (80020c4 <wait_for_fight_start+0x58>)
 800209a:	f002 f985 	bl	80043a8 <HAL_GPIO_ReadPin>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <wait_for_fight_start+0x3c>
			fight();
 80020a4:	f000 f812 	bl	80020cc <fight>
	while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1){
 80020a8:	2110      	movs	r1, #16
 80020aa:	4807      	ldr	r0, [pc, #28]	; (80020c8 <wait_for_fight_start+0x5c>)
 80020ac:	f002 f97c 	bl	80043a8 <HAL_GPIO_ReadPin>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d0ee      	beq.n	8002094 <wait_for_fight_start+0x28>
	}
}
 80020b6:	bf00      	nop
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000000 	.word	0x20000000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020800 	.word	0x40020800

080020cc <fight>:

void fight(){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
	servo_set_eangle(20);
 80020d2:	2014      	movs	r0, #20
 80020d4:	f000 fa28 	bl	8002528 <servo_set_eangle>
	HAL_GPIO_WritePin(LS_ON_GPIO_Port, LS_ON_Pin, GPIO_PIN_SET);
 80020d8:	2201      	movs	r2, #1
 80020da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020de:	48a9      	ldr	r0, [pc, #676]	; (8002384 <fight+0x2b8>)
 80020e0:	f002 f97a 	bl	80043d8 <HAL_GPIO_WritePin>

	int8_t speed_diff = 50;
 80020e4:	2332      	movs	r3, #50	; 0x32
 80020e6:	75fb      	strb	r3, [r7, #23]

	motor_L_set_direction(FORWARD);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f000 f9c9 	bl	8002480 <motor_L_set_direction>
	motor_R_set_direction(FORWARD);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f000 f9f2 	bl	80024d8 <motor_R_set_direction>

	if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin))
 80020f4:	2120      	movs	r1, #32
 80020f6:	48a4      	ldr	r0, [pc, #656]	; (8002388 <fight+0x2bc>)
 80020f8:	f002 f956 	bl	80043a8 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <fight+0x3a>
		speed_diff = -50;
 8002102:	23ce      	movs	r3, #206	; 0xce
 8002104:	75fb      	strb	r3, [r7, #23]

	motor_L_set_speed(50 + speed_diff);
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	3332      	adds	r3, #50	; 0x32
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f98b 	bl	8002428 <motor_L_set_speed>
	motor_R_set_speed(50 - speed_diff);
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f99a 	bl	8002454 <motor_R_set_speed>
	VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 8002120:	499a      	ldr	r1, [pc, #616]	; (800238c <fight+0x2c0>)
 8002122:	489b      	ldr	r0, [pc, #620]	; (8002390 <fight+0x2c4>)
 8002124:	f006 fae2 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
	VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 8002128:	499a      	ldr	r1, [pc, #616]	; (8002394 <fight+0x2c8>)
 800212a:	489b      	ldr	r0, [pc, #620]	; (8002398 <fight+0x2cc>)
 800212c:	f006 fade 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
	while((TOF3.RangingData.RangeMilliMeter > SENSING_DISTANCE) && (TOF4.RangingData.RangeMilliMeter > SENSING_DISTANCE)){
 8002130:	e00f      	b.n	8002152 <fight+0x86>
		if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 0)
 8002132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002136:	4899      	ldr	r0, [pc, #612]	; (800239c <fight+0x2d0>)
 8002138:	f002 f936 	bl	80043a8 <HAL_GPIO_ReadPin>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d012      	beq.n	8002168 <fight+0x9c>
			break;
		VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 8002142:	4992      	ldr	r1, [pc, #584]	; (800238c <fight+0x2c0>)
 8002144:	4892      	ldr	r0, [pc, #584]	; (8002390 <fight+0x2c4>)
 8002146:	f006 fad1 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
		VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 800214a:	4992      	ldr	r1, [pc, #584]	; (8002394 <fight+0x2c8>)
 800214c:	4892      	ldr	r0, [pc, #584]	; (8002398 <fight+0x2cc>)
 800214e:	f006 facd 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
	while((TOF3.RangingData.RangeMilliMeter > SENSING_DISTANCE) && (TOF4.RangingData.RangeMilliMeter > SENSING_DISTANCE)){
 8002152:	4b8e      	ldr	r3, [pc, #568]	; (800238c <fight+0x2c0>)
 8002154:	891b      	ldrh	r3, [r3, #8]
 8002156:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800215a:	d906      	bls.n	800216a <fight+0x9e>
 800215c:	4b8d      	ldr	r3, [pc, #564]	; (8002394 <fight+0x2c8>)
 800215e:	891b      	ldrh	r3, [r3, #8]
 8002160:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002164:	d8e5      	bhi.n	8002132 <fight+0x66>
 8002166:	e000      	b.n	800216a <fight+0x9e>
			break;
 8002168:	bf00      	nop
	}

	motor_L_set_speed(100);
 800216a:	2064      	movs	r0, #100	; 0x64
 800216c:	f000 f95c 	bl	8002428 <motor_L_set_speed>
	motor_R_set_speed(100);
 8002170:	2064      	movs	r0, #100	; 0x64
 8002172:	f000 f96f 	bl	8002454 <motor_R_set_speed>

	while(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 1){
 8002176:	e131      	b.n	80023dc <fight+0x310>
		motor_L_set_direction(FORWARD);
 8002178:	2000      	movs	r0, #0
 800217a:	f000 f981 	bl	8002480 <motor_L_set_direction>
		motor_R_set_direction(FORWARD);
 800217e:	2000      	movs	r0, #0
 8002180:	f000 f9aa 	bl	80024d8 <motor_R_set_direction>
		VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 8002184:	4981      	ldr	r1, [pc, #516]	; (800238c <fight+0x2c0>)
 8002186:	4882      	ldr	r0, [pc, #520]	; (8002390 <fight+0x2c4>)
 8002188:	f006 fab0 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
		VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 800218c:	4981      	ldr	r1, [pc, #516]	; (8002394 <fight+0x2c8>)
 800218e:	4882      	ldr	r0, [pc, #520]	; (8002398 <fight+0x2cc>)
 8002190:	f006 faac 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>

		//both are detecting
		if((TOF3.RangingData.RangeMilliMeter < SENSING_DISTANCE) && (TOF4.RangingData.RangeMilliMeter < SENSING_DISTANCE)){
 8002194:	4b7d      	ldr	r3, [pc, #500]	; (800238c <fight+0x2c0>)
 8002196:	891b      	ldrh	r3, [r3, #8]
 8002198:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800219c:	d211      	bcs.n	80021c2 <fight+0xf6>
 800219e:	4b7d      	ldr	r3, [pc, #500]	; (8002394 <fight+0x2c8>)
 80021a0:	891b      	ldrh	r3, [r3, #8]
 80021a2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80021a6:	d20c      	bcs.n	80021c2 <fight+0xf6>
			motor_L_set_speed(100);
 80021a8:	2064      	movs	r0, #100	; 0x64
 80021aa:	f000 f93d 	bl	8002428 <motor_L_set_speed>
			motor_R_set_speed(100);
 80021ae:	2064      	movs	r0, #100	; 0x64
 80021b0:	f000 f950 	bl	8002454 <motor_R_set_speed>
			HAL_GPIO_WritePin(user_LED_GPIO_Port, user_LED_Pin, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ba:	4878      	ldr	r0, [pc, #480]	; (800239c <fight+0x2d0>)
 80021bc:	f002 f90c 	bl	80043d8 <HAL_GPIO_WritePin>
 80021c0:	e10c      	b.n	80023dc <fight+0x310>
		}
		//left is detecting
		else if(TOF3.RangingData.RangeMilliMeter < SENSING_DISTANCE){
 80021c2:	4b72      	ldr	r3, [pc, #456]	; (800238c <fight+0x2c0>)
 80021c4:	891b      	ldrh	r3, [r3, #8]
 80021c6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80021ca:	d211      	bcs.n	80021f0 <fight+0x124>
			motor_L_set_speed(TOF3.RangingData.RangeMilliMeter / (SENSING_DISTANCE/100));
 80021cc:	4b6f      	ldr	r3, [pc, #444]	; (800238c <fight+0x2c0>)
 80021ce:	891b      	ldrh	r3, [r3, #8]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f926 	bl	8002428 <motor_L_set_speed>
			motor_R_set_speed(100);
 80021dc:	2064      	movs	r0, #100	; 0x64
 80021de:	f000 f939 	bl	8002454 <motor_R_set_speed>
			HAL_GPIO_WritePin(user_LED_GPIO_Port, user_LED_Pin, GPIO_PIN_SET);
 80021e2:	2201      	movs	r2, #1
 80021e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021e8:	486c      	ldr	r0, [pc, #432]	; (800239c <fight+0x2d0>)
 80021ea:	f002 f8f5 	bl	80043d8 <HAL_GPIO_WritePin>
 80021ee:	e0f5      	b.n	80023dc <fight+0x310>
		}
		//right is detecting
		else if(TOF4.RangingData.RangeMilliMeter < SENSING_DISTANCE){
 80021f0:	4b68      	ldr	r3, [pc, #416]	; (8002394 <fight+0x2c8>)
 80021f2:	891b      	ldrh	r3, [r3, #8]
 80021f4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80021f8:	d211      	bcs.n	800221e <fight+0x152>
			motor_L_set_speed(100);
 80021fa:	2064      	movs	r0, #100	; 0x64
 80021fc:	f000 f914 	bl	8002428 <motor_L_set_speed>
			motor_R_set_speed(TOF4.RangingData.RangeMilliMeter / (SENSING_DISTANCE/100));
 8002200:	4b64      	ldr	r3, [pc, #400]	; (8002394 <fight+0x2c8>)
 8002202:	891b      	ldrh	r3, [r3, #8]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	b29b      	uxth	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f922 	bl	8002454 <motor_R_set_speed>
			HAL_GPIO_WritePin(user_LED_GPIO_Port, user_LED_Pin, GPIO_PIN_SET);
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002216:	4861      	ldr	r0, [pc, #388]	; (800239c <fight+0x2d0>)
 8002218:	f002 f8de 	bl	80043d8 <HAL_GPIO_WritePin>
 800221c:	e0de      	b.n	80023dc <fight+0x310>
		}
		//none are detecting
		else if((TOF3.RangingData.RangeMilliMeter > SENSING_DISTANCE) && (TOF4.RangingData.RangeMilliMeter > SENSING_DISTANCE)){
 800221e:	4b5b      	ldr	r3, [pc, #364]	; (800238c <fight+0x2c0>)
 8002220:	891b      	ldrh	r3, [r3, #8]
 8002222:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002226:	f240 80d9 	bls.w	80023dc <fight+0x310>
 800222a:	4b5a      	ldr	r3, [pc, #360]	; (8002394 <fight+0x2c8>)
 800222c:	891b      	ldrh	r3, [r3, #8]
 800222e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002232:	f240 80d3 	bls.w	80023dc <fight+0x310>
			motor_L_set_speed(90);
 8002236:	205a      	movs	r0, #90	; 0x5a
 8002238:	f000 f8f6 	bl	8002428 <motor_L_set_speed>
			motor_R_set_speed(90);
 800223c:	205a      	movs	r0, #90	; 0x5a
 800223e:	f000 f909 	bl	8002454 <motor_R_set_speed>
			HAL_GPIO_WritePin(user_LED_GPIO_Port, user_LED_Pin, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002248:	4854      	ldr	r0, [pc, #336]	; (800239c <fight+0x2d0>)
 800224a:	f002 f8c5 	bl	80043d8 <HAL_GPIO_WritePin>

			if(values_adc[KTIR_FRONT_LEFT] < LINE_BORDER){
 800224e:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <fight+0x2d4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f640 726d 	movw	r2, #3949	; 0xf6d
 8002256:	4293      	cmp	r3, r2
 8002258:	d855      	bhi.n	8002306 <fight+0x23a>
				motor_L_set_direction(BACKWARD);
 800225a:	2001      	movs	r0, #1
 800225c:	f000 f910 	bl	8002480 <motor_L_set_direction>
				motor_R_set_direction(BACKWARD);
 8002260:	2001      	movs	r0, #1
 8002262:	f000 f939 	bl	80024d8 <motor_R_set_direction>
				motor_L_set_speed(100);
 8002266:	2064      	movs	r0, #100	; 0x64
 8002268:	f000 f8de 	bl	8002428 <motor_L_set_speed>
				motor_R_set_speed(100);
 800226c:	2064      	movs	r0, #100	; 0x64
 800226e:	f000 f8f1 	bl	8002454 <motor_R_set_speed>
				for(int i = 0; i < BACKING_UP_TIME; ++i){
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	e013      	b.n	80022a0 <fight+0x1d4>
					if(values_adc[KTIR_BACK] < LINE_BORDER)
 8002278:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <fight+0x2d4>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f640 726d 	movw	r2, #3949	; 0xf6d
 8002280:	4293      	cmp	r3, r2
 8002282:	d911      	bls.n	80022a8 <fight+0x1dc>
						break;
					if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 0)
 8002284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002288:	4844      	ldr	r0, [pc, #272]	; (800239c <fight+0x2d0>)
 800228a:	f002 f88d 	bl	80043a8 <HAL_GPIO_ReadPin>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <fight+0x1e0>
						break;
					HAL_Delay(1);
 8002294:	2001      	movs	r0, #1
 8002296:	f000 fe5b 	bl	8002f50 <HAL_Delay>
				for(int i = 0; i < BACKING_UP_TIME; ++i){
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	3301      	adds	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b63      	cmp	r3, #99	; 0x63
 80022a4:	dde8      	ble.n	8002278 <fight+0x1ac>
 80022a6:	e002      	b.n	80022ae <fight+0x1e2>
						break;
 80022a8:	bf00      	nop
 80022aa:	e000      	b.n	80022ae <fight+0x1e2>
						break;
 80022ac:	bf00      	nop
				}
				motor_L_set_direction(FORWARD);
 80022ae:	2000      	movs	r0, #0
 80022b0:	f000 f8e6 	bl	8002480 <motor_L_set_direction>
				for(int i = 0; i < TURNING_TIME; ++i){
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e01f      	b.n	80022fa <fight+0x22e>
					if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 0)
 80022ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022be:	4837      	ldr	r0, [pc, #220]	; (800239c <fight+0x2d0>)
 80022c0:	f002 f872 	bl	80043a8 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01c      	beq.n	8002304 <fight+0x238>
						break;
					VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 80022ca:	4930      	ldr	r1, [pc, #192]	; (800238c <fight+0x2c0>)
 80022cc:	4830      	ldr	r0, [pc, #192]	; (8002390 <fight+0x2c4>)
 80022ce:	f006 fa0d 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
					VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 80022d2:	4930      	ldr	r1, [pc, #192]	; (8002394 <fight+0x2c8>)
 80022d4:	4830      	ldr	r0, [pc, #192]	; (8002398 <fight+0x2cc>)
 80022d6:	f006 fa09 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
					if((TOF3.RangingData.RangeMilliMeter < SENSING_DISTANCE) || (TOF4.RangingData.RangeMilliMeter < SENSING_DISTANCE))
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <fight+0x2c0>)
 80022dc:	891b      	ldrh	r3, [r3, #8]
 80022de:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80022e2:	d310      	bcc.n	8002306 <fight+0x23a>
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <fight+0x2c8>)
 80022e6:	891b      	ldrh	r3, [r3, #8]
 80022e8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80022ec:	d30b      	bcc.n	8002306 <fight+0x23a>
						break;
					HAL_Delay(1);
 80022ee:	2001      	movs	r0, #1
 80022f0:	f000 fe2e 	bl	8002f50 <HAL_Delay>
				for(int i = 0; i < TURNING_TIME; ++i){
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3301      	adds	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002300:	dbdb      	blt.n	80022ba <fight+0x1ee>
 8002302:	e000      	b.n	8002306 <fight+0x23a>
						break;
 8002304:	bf00      	nop
				}
			}
			if(values_adc[KTIR_FRONT_RIGHT] < LINE_BORDER){
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <fight+0x2d4>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f640 726d 	movw	r2, #3949	; 0xf6d
 800230e:	4293      	cmp	r3, r2
 8002310:	d864      	bhi.n	80023dc <fight+0x310>
				motor_L_set_direction(BACKWARD);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 f8b4 	bl	8002480 <motor_L_set_direction>
				motor_R_set_direction(BACKWARD);
 8002318:	2001      	movs	r0, #1
 800231a:	f000 f8dd 	bl	80024d8 <motor_R_set_direction>
				motor_L_set_speed(100);
 800231e:	2064      	movs	r0, #100	; 0x64
 8002320:	f000 f882 	bl	8002428 <motor_L_set_speed>
				motor_R_set_speed(100);
 8002324:	2064      	movs	r0, #100	; 0x64
 8002326:	f000 f895 	bl	8002454 <motor_R_set_speed>
				for(int i = 0; i < BACKING_UP_TIME; ++i){
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	e013      	b.n	8002358 <fight+0x28c>
					if(values_adc[KTIR_BACK] < LINE_BORDER)
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <fight+0x2d4>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f640 726d 	movw	r2, #3949	; 0xf6d
 8002338:	4293      	cmp	r3, r2
 800233a:	d911      	bls.n	8002360 <fight+0x294>
						break;
					if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 0)
 800233c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002340:	4816      	ldr	r0, [pc, #88]	; (800239c <fight+0x2d0>)
 8002342:	f002 f831 	bl	80043a8 <HAL_GPIO_ReadPin>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00b      	beq.n	8002364 <fight+0x298>
						break;
					HAL_Delay(1);
 800234c:	2001      	movs	r0, #1
 800234e:	f000 fdff 	bl	8002f50 <HAL_Delay>
				for(int i = 0; i < BACKING_UP_TIME; ++i){
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3301      	adds	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b63      	cmp	r3, #99	; 0x63
 800235c:	dde8      	ble.n	8002330 <fight+0x264>
 800235e:	e002      	b.n	8002366 <fight+0x29a>
						break;
 8002360:	bf00      	nop
 8002362:	e000      	b.n	8002366 <fight+0x29a>
						break;
 8002364:	bf00      	nop
				}
				motor_R_set_direction(FORWARD);
 8002366:	2000      	movs	r0, #0
 8002368:	f000 f8b6 	bl	80024d8 <motor_R_set_direction>
				for(int i = 0; i < TURNING_TIME; ++i){
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	e030      	b.n	80023d4 <fight+0x308>
					if(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 0)
 8002372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002376:	4809      	ldr	r0, [pc, #36]	; (800239c <fight+0x2d0>)
 8002378:	f002 f816 	bl	80043a8 <HAL_GPIO_ReadPin>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d110      	bne.n	80023a4 <fight+0x2d8>
						break;
 8002382:	e02b      	b.n	80023dc <fight+0x310>
 8002384:	40020800 	.word	0x40020800
 8002388:	40020000 	.word	0x40020000
 800238c:	20000d1c 	.word	0x20000d1c
 8002390:	20000d38 	.word	0x20000d38
 8002394:	20000ec8 	.word	0x20000ec8
 8002398:	20000ee4 	.word	0x20000ee4
 800239c:	40020400 	.word	0x40020400
 80023a0:	20000b60 	.word	0x20000b60
					VL53L0X_PerformSingleRangingMeasurement(&(TOF3.vl53l0x_c), &(TOF3.RangingData));
 80023a4:	491a      	ldr	r1, [pc, #104]	; (8002410 <fight+0x344>)
 80023a6:	481b      	ldr	r0, [pc, #108]	; (8002414 <fight+0x348>)
 80023a8:	f006 f9a0 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
					VL53L0X_PerformSingleRangingMeasurement(&(TOF4.vl53l0x_c), &(TOF4.RangingData));
 80023ac:	491a      	ldr	r1, [pc, #104]	; (8002418 <fight+0x34c>)
 80023ae:	481b      	ldr	r0, [pc, #108]	; (800241c <fight+0x350>)
 80023b0:	f006 f99c 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
					if((TOF3.RangingData.RangeMilliMeter < SENSING_DISTANCE) || (TOF4.RangingData.RangeMilliMeter < SENSING_DISTANCE))
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <fight+0x344>)
 80023b6:	891b      	ldrh	r3, [r3, #8]
 80023b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80023bc:	d30e      	bcc.n	80023dc <fight+0x310>
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <fight+0x34c>)
 80023c0:	891b      	ldrh	r3, [r3, #8]
 80023c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80023c6:	d309      	bcc.n	80023dc <fight+0x310>
						break;
					HAL_Delay(1);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f000 fdc1 	bl	8002f50 <HAL_Delay>
				for(int i = 0; i < TURNING_TIME; ++i){
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3301      	adds	r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80023da:	dbca      	blt.n	8002372 <fight+0x2a6>
	while(HAL_GPIO_ReadPin(starter_GPIO_Port, starter_Pin) == 1){
 80023dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e0:	480f      	ldr	r0, [pc, #60]	; (8002420 <fight+0x354>)
 80023e2:	f001 ffe1 	bl	80043a8 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f43f aec5 	beq.w	8002178 <fight+0xac>
				}
			}
		}
	}

	motor_L_set_speed(0);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f000 f81a 	bl	8002428 <motor_L_set_speed>
	motor_R_set_speed(0);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f000 f82d 	bl	8002454 <motor_R_set_speed>
	HAL_GPIO_WritePin(LS_ON_GPIO_Port, LS_ON_Pin, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002400:	4808      	ldr	r0, [pc, #32]	; (8002424 <fight+0x358>)
 8002402:	f001 ffe9 	bl	80043d8 <HAL_GPIO_WritePin>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000d1c 	.word	0x20000d1c
 8002414:	20000d38 	.word	0x20000d38
 8002418:	20000ec8 	.word	0x20000ec8
 800241c:	20000ee4 	.word	0x20000ee4
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800

08002428 <motor_L_set_speed>:
/**
 * @brief
 *
 * @param speed 0-100
 */
void motor_L_set_speed(uint8_t speed){
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
	if(speed < 0)
		speed = 0;
	else if(speed > 100)
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b64      	cmp	r3, #100	; 0x64
 8002436:	d901      	bls.n	800243c <motor_L_set_speed+0x14>
		speed = 100;
 8002438:	2364      	movs	r3, #100	; 0x64
 800243a:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <motor_L_set_speed+0x28>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	79fa      	ldrb	r2, [r7, #7]
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	20000aa8 	.word	0x20000aa8

08002454 <motor_R_set_speed>:
/**
 * @brief
 *
 * @param speed 0-100
 */
void motor_R_set_speed(uint8_t speed){
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
	if(speed < 0)
		speed = 0;
	else if(speed > 100)
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	2b64      	cmp	r3, #100	; 0x64
 8002462:	d901      	bls.n	8002468 <motor_R_set_speed+0x14>
		speed = 100;
 8002464:	2364      	movs	r3, #100	; 0x64
 8002466:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <motor_R_set_speed+0x28>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	79fa      	ldrb	r2, [r7, #7]
 800246e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	20000aa8 	.word	0x20000aa8

08002480 <motor_L_set_direction>:

void motor_L_set_direction(motor_direction direction){
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <motor_L_set_direction+0x16>
 8002490:	2b01      	cmp	r3, #1
 8002492:	d00d      	beq.n	80024b0 <motor_L_set_direction+0x30>
		case BACKWARD:
			HAL_GPIO_WritePin(motor_L_DIR_1_GPIO_Port, motor_L_DIR_1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(motor_L_DIR_2_GPIO_Port, motor_L_DIR_2_Pin, GPIO_PIN_SET);
			break;
	}
}
 8002494:	e019      	b.n	80024ca <motor_L_set_direction+0x4a>
			HAL_GPIO_WritePin(motor_L_DIR_1_GPIO_Port, motor_L_DIR_1_Pin, GPIO_PIN_SET);
 8002496:	2201      	movs	r2, #1
 8002498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <motor_L_set_direction+0x54>)
 800249e:	f001 ff9b 	bl	80043d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor_L_DIR_2_GPIO_Port, motor_L_DIR_2_Pin, GPIO_PIN_RESET);
 80024a2:	2200      	movs	r2, #0
 80024a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024a8:	480a      	ldr	r0, [pc, #40]	; (80024d4 <motor_L_set_direction+0x54>)
 80024aa:	f001 ff95 	bl	80043d8 <HAL_GPIO_WritePin>
			break;
 80024ae:	e00c      	b.n	80024ca <motor_L_set_direction+0x4a>
			HAL_GPIO_WritePin(motor_L_DIR_1_GPIO_Port, motor_L_DIR_1_Pin, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b6:	4807      	ldr	r0, [pc, #28]	; (80024d4 <motor_L_set_direction+0x54>)
 80024b8:	f001 ff8e 	bl	80043d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor_L_DIR_2_GPIO_Port, motor_L_DIR_2_Pin, GPIO_PIN_SET);
 80024bc:	2201      	movs	r2, #1
 80024be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024c2:	4804      	ldr	r0, [pc, #16]	; (80024d4 <motor_L_set_direction+0x54>)
 80024c4:	f001 ff88 	bl	80043d8 <HAL_GPIO_WritePin>
			break;
 80024c8:	bf00      	nop
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40020400 	.word	0x40020400

080024d8 <motor_R_set_direction>:

void motor_R_set_direction(motor_direction direction){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <motor_R_set_direction+0x16>
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d00b      	beq.n	8002504 <motor_R_set_direction+0x2c>
		case BACKWARD:
			HAL_GPIO_WritePin(motor_R_DIR_1_GPIO_Port, motor_R_DIR_1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(motor_R_DIR_2_GPIO_Port, motor_R_DIR_2_Pin, GPIO_PIN_RESET);
			break;
	}
}
 80024ec:	e015      	b.n	800251a <motor_R_set_direction+0x42>
			HAL_GPIO_WritePin(motor_R_DIR_1_GPIO_Port, motor_R_DIR_1_Pin, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2104      	movs	r1, #4
 80024f2:	480c      	ldr	r0, [pc, #48]	; (8002524 <motor_R_set_direction+0x4c>)
 80024f4:	f001 ff70 	bl	80043d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor_R_DIR_2_GPIO_Port, motor_R_DIR_2_Pin, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	2101      	movs	r1, #1
 80024fc:	4809      	ldr	r0, [pc, #36]	; (8002524 <motor_R_set_direction+0x4c>)
 80024fe:	f001 ff6b 	bl	80043d8 <HAL_GPIO_WritePin>
			break;
 8002502:	e00a      	b.n	800251a <motor_R_set_direction+0x42>
			HAL_GPIO_WritePin(motor_R_DIR_1_GPIO_Port, motor_R_DIR_1_Pin, GPIO_PIN_SET);
 8002504:	2201      	movs	r2, #1
 8002506:	2104      	movs	r1, #4
 8002508:	4806      	ldr	r0, [pc, #24]	; (8002524 <motor_R_set_direction+0x4c>)
 800250a:	f001 ff65 	bl	80043d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor_R_DIR_2_GPIO_Port, motor_R_DIR_2_Pin, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	2101      	movs	r1, #1
 8002512:	4804      	ldr	r0, [pc, #16]	; (8002524 <motor_R_set_direction+0x4c>)
 8002514:	f001 ff60 	bl	80043d8 <HAL_GPIO_WritePin>
			break;
 8002518:	bf00      	nop
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40020400 	.word	0x40020400

08002528 <servo_set_eangle>:
/**
 * @brief
 *
 * @param eangle 0-180
 */
void servo_set_eangle(uint8_t eangle){
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse_duration;

	pulse_duration = MIN_PULSE_SERVO + ((eangle * STEP) / 1000);
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	b29b      	uxth	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	441a      	add	r2, r3
 800253c:	0052      	lsls	r2, r2, #1
 800253e:	4413      	add	r3, r2
 8002540:	b29b      	uxth	r3, r3
 8002542:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002546:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_duration);
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <servo_set_eangle+0x34>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	89fa      	ldrh	r2, [r7, #14]
 800254e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	20000a60 	.word	0x20000a60

08002560 <initAverage>:
 * @brief initializes the filter, this function must be called before using the filter
 *
 * @param mvngAverage
 * @param initialValue is the average value at the beginning
 */
void initAverage(MovingAverage* mvngAverage, uint16_t initialValue){
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < NUM_OF_READINGS; ++i)
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e007      	b.n	8002582 <initAverage+0x22>
		mvngAverage->readings[i] = initialValue;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	8879      	ldrh	r1, [r7, #2]
 8002578:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < NUM_OF_READINGS; ++i)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3301      	adds	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b09      	cmp	r3, #9
 8002586:	ddf4      	ble.n	8002572 <initAverage+0x12>
	mvngAverage->readIndex = 0;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	751a      	strb	r2, [r3, #20]
	mvngAverage->average = initialValue;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	887a      	ldrh	r2, [r7, #2]
 8002592:	839a      	strh	r2, [r3, #28]
	mvngAverage->total = initialValue * NUM_OF_READINGS;
 8002594:	887a      	ldrh	r2, [r7, #2]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	461a      	mov	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <calculateAverage>:
 *
 * @param mvngAverage
 * @param reading value that is being averaged out
 * @return uint16_t averaged value
 */
uint16_t calculateAverage(MovingAverage * mvngAverage, uint16_t reading){
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
	mvngAverage->total -= mvngAverage->readings[mvngAverage->readIndex];    //subtract the last reading:
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	7d12      	ldrb	r2, [r2, #20]
 80025c4:	4611      	mov	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80025cc:	1a9a      	subs	r2, r3, r2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	619a      	str	r2, [r3, #24]
	mvngAverage->readings[mvngAverage->readIndex] = reading;      			//read from the sensor:
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7d1b      	ldrb	r3, [r3, #20]
 80025d6:	4619      	mov	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	mvngAverage->total += mvngAverage->readings[mvngAverage->readIndex];    //add the reading to the total:
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	7d12      	ldrb	r2, [r2, #20]
 80025e8:	4611      	mov	r1, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	619a      	str	r2, [r3, #24]
	++mvngAverage->readIndex;                        						//advance to the next position in the array:
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7d1b      	ldrb	r3, [r3, #20]
 80025fa:	3301      	adds	r3, #1
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	751a      	strb	r2, [r3, #20]
	if (mvngAverage->readIndex >= NUM_OF_READINGS)   						//if we're at the end of the array...
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7d1b      	ldrb	r3, [r3, #20]
 8002606:	2b09      	cmp	r3, #9
 8002608:	d902      	bls.n	8002610 <calculateAverage+0x60>
		mvngAverage->readIndex = 0;                   						//...wrap around to the beginning:
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	751a      	strb	r2, [r3, #20]
	mvngAverage->average = mvngAverage->total / NUM_OF_READINGS;  			//calculate the average:
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a07      	ldr	r2, [pc, #28]	; (8002634 <calculateAverage+0x84>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	08db      	lsrs	r3, r3, #3
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	839a      	strh	r2, [r3, #28]
	return mvngAverage->average;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8b9b      	ldrh	r3, [r3, #28]
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	cccccccd 	.word	0xcccccccd

08002638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_MspInit+0x4c>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <HAL_MspInit+0x4c>)
 8002648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <HAL_MspInit+0x4c>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_MspInit+0x4c>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a08      	ldr	r2, [pc, #32]	; (8002684 <HAL_MspInit+0x4c>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_MspInit+0x4c>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800

08002688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a3c      	ldr	r2, [pc, #240]	; (8002798 <HAL_ADC_MspInit+0x110>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d171      	bne.n	800278e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b3b      	ldr	r3, [pc, #236]	; (800279c <HAL_ADC_MspInit+0x114>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a3a      	ldr	r2, [pc, #232]	; (800279c <HAL_ADC_MspInit+0x114>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b38      	ldr	r3, [pc, #224]	; (800279c <HAL_ADC_MspInit+0x114>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b34      	ldr	r3, [pc, #208]	; (800279c <HAL_ADC_MspInit+0x114>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a33      	ldr	r2, [pc, #204]	; (800279c <HAL_ADC_MspInit+0x114>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_ADC_MspInit+0x114>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_ADC_MspInit+0x114>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a2c      	ldr	r2, [pc, #176]	; (800279c <HAL_ADC_MspInit+0x114>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_ADC_MspInit+0x114>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = adc_line_sensor1_Pin|adc_line_sensor2_Pin|adc_line_sensor3_Pin;
 80026fe:	230e      	movs	r3, #14
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002702:	2303      	movs	r3, #3
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	4823      	ldr	r0, [pc, #140]	; (80027a0 <HAL_ADC_MspInit+0x118>)
 8002712:	f001 fcc5 	bl	80040a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = adc_bat_meas_Pin;
 8002716:	2302      	movs	r3, #2
 8002718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800271a:	2303      	movs	r3, #3
 800271c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(adc_bat_meas_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	481e      	ldr	r0, [pc, #120]	; (80027a4 <HAL_ADC_MspInit+0x11c>)
 800272a:	f001 fcb9 	bl	80040a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <HAL_ADC_MspInit+0x124>)
 8002732:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002734:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 8002736:	2200      	movs	r2, #0
 8002738:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 8002748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800274c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 8002750:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002754:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 8002758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 8002760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002764:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 800276e:	2200      	movs	r2, #0
 8002770:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002772:	480d      	ldr	r0, [pc, #52]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 8002774:	f001 f924 	bl	80039c0 <HAL_DMA_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800277e:	f7ff fba7 	bl	8001ed0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 8002786:	639a      	str	r2, [r3, #56]	; 0x38
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_ADC_MspInit+0x120>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800278e:	bf00      	nop
 8002790:	3728      	adds	r7, #40	; 0x28
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40012000 	.word	0x40012000
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020800 	.word	0x40020800
 80027a4:	40020400 	.word	0x40020400
 80027a8:	20000904 	.word	0x20000904
 80027ac:	40026410 	.word	0x40026410

080027b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a63      	ldr	r2, [pc, #396]	; (800295c <HAL_I2C_MspInit+0x1ac>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d12c      	bne.n	800282c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	4b62      	ldr	r3, [pc, #392]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a61      	ldr	r2, [pc, #388]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ee:	23c0      	movs	r3, #192	; 0xc0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027f2:	2312      	movs	r3, #18
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027fe:	2304      	movs	r3, #4
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002806:	4619      	mov	r1, r3
 8002808:	4856      	ldr	r0, [pc, #344]	; (8002964 <HAL_I2C_MspInit+0x1b4>)
 800280a:	f001 fc49 	bl	80040a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	4b53      	ldr	r3, [pc, #332]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a52      	ldr	r2, [pc, #328]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 8002818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b50      	ldr	r3, [pc, #320]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800282a:	e093      	b.n	8002954 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a4d      	ldr	r2, [pc, #308]	; (8002968 <HAL_I2C_MspInit+0x1b8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d13d      	bne.n	80028b2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	4b49      	ldr	r3, [pc, #292]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a48      	ldr	r2, [pc, #288]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002858:	2312      	movs	r3, #18
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002860:	2303      	movs	r3, #3
 8002862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002864:	2304      	movs	r3, #4
 8002866:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286c:	4619      	mov	r1, r3
 800286e:	483d      	ldr	r0, [pc, #244]	; (8002964 <HAL_I2C_MspInit+0x1b4>)
 8002870:	f001 fc16 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002874:	2308      	movs	r3, #8
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002878:	2312      	movs	r3, #18
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002884:	2309      	movs	r3, #9
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288c:	4619      	mov	r1, r3
 800288e:	4835      	ldr	r0, [pc, #212]	; (8002964 <HAL_I2C_MspInit+0x1b4>)
 8002890:	f001 fc06 	bl	80040a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	4a30      	ldr	r2, [pc, #192]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 800289e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028a2:	6413      	str	r3, [r2, #64]	; 0x40
 80028a4:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	697b      	ldr	r3, [r7, #20]
}
 80028b0:	e050      	b.n	8002954 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2d      	ldr	r2, [pc, #180]	; (800296c <HAL_I2C_MspInit+0x1bc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d14b      	bne.n	8002954 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	4a26      	ldr	r2, [pc, #152]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	6313      	str	r3, [r2, #48]	; 0x30
 80028cc:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6313      	str	r3, [r2, #48]	; 0x30
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028fa:	2312      	movs	r3, #18
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002902:	2303      	movs	r3, #3
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002906:	2304      	movs	r3, #4
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290e:	4619      	mov	r1, r3
 8002910:	4817      	ldr	r0, [pc, #92]	; (8002970 <HAL_I2C_MspInit+0x1c0>)
 8002912:	f001 fbc5 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291c:	2312      	movs	r3, #18
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002928:	2304      	movs	r3, #4
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002930:	4619      	mov	r1, r3
 8002932:	4810      	ldr	r0, [pc, #64]	; (8002974 <HAL_I2C_MspInit+0x1c4>)
 8002934:	f001 fbb4 	bl	80040a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 8002942:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002946:	6413      	str	r3, [r2, #64]	; 0x40
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_I2C_MspInit+0x1b0>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]
}
 8002954:	bf00      	nop
 8002956:	3738      	adds	r7, #56	; 0x38
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40005400 	.word	0x40005400
 8002960:	40023800 	.word	0x40023800
 8002964:	40020400 	.word	0x40020400
 8002968:	40005800 	.word	0x40005800
 800296c:	40005c00 	.word	0x40005c00
 8002970:	40020800 	.word	0x40020800
 8002974:	40020000 	.word	0x40020000

08002978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d10e      	bne.n	80029a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_TIM_Base_MspInit+0x64>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_TIM_Base_MspInit+0x64>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_TIM_Base_MspInit+0x64>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029a6:	e012      	b.n	80029ce <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <HAL_TIM_Base_MspInit+0x68>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10d      	bne.n	80029ce <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_TIM_Base_MspInit+0x64>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a08      	ldr	r2, [pc, #32]	; (80029dc <HAL_TIM_Base_MspInit+0x64>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_TIM_Base_MspInit+0x64>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40000400 	.word	0x40000400

080029e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a04:	d11f      	bne.n	8002a46 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b31      	ldr	r3, [pc, #196]	; (8002ad0 <HAL_TIM_MspPostInit+0xec>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a30      	ldr	r2, [pc, #192]	; (8002ad0 <HAL_TIM_MspPostInit+0xec>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <HAL_TIM_MspPostInit+0xec>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = servo_Pin;
 8002a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a34:	2301      	movs	r3, #1
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4825      	ldr	r0, [pc, #148]	; (8002ad4 <HAL_TIM_MspPostInit+0xf0>)
 8002a40:	f001 fb2e 	bl	80040a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a44:	e040      	b.n	8002ac8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a23      	ldr	r2, [pc, #140]	; (8002ad8 <HAL_TIM_MspPostInit+0xf4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d13b      	bne.n	8002ac8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <HAL_TIM_MspPostInit+0xec>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_TIM_MspPostInit+0xec>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_TIM_MspPostInit+0xec>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_TIM_MspPostInit+0xec>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <HAL_TIM_MspPostInit+0xec>)
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_TIM_MspPostInit+0xec>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = motor_R_PWM_Pin;
 8002a88:	2340      	movs	r3, #64	; 0x40
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor_R_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <HAL_TIM_MspPostInit+0xf0>)
 8002aa4:	f001 fafc 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = motor_L_PWM_Pin;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor_L_PWM_GPIO_Port, &GPIO_InitStruct);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4806      	ldr	r0, [pc, #24]	; (8002adc <HAL_TIM_MspPostInit+0xf8>)
 8002ac4:	f001 faec 	bl	80040a0 <HAL_GPIO_Init>
}
 8002ac8:	bf00      	nop
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40020400 	.word	0x40020400

08002ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <HAL_UART_MspInit+0x84>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d12b      	bne.n	8002b5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_UART_MspInit+0x88>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_UART_MspInit+0x88>)
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_UART_MspInit+0x88>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_UART_MspInit+0x88>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <HAL_UART_MspInit+0x88>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_UART_MspInit+0x88>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	f107 0314 	add.w	r3, r7, #20
 8002b52:	4619      	mov	r1, r3
 8002b54:	4805      	ldr	r0, [pc, #20]	; (8002b6c <HAL_UART_MspInit+0x8c>)
 8002b56:	f001 faa3 	bl	80040a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b5a:	bf00      	nop
 8002b5c:	3728      	adds	r7, #40	; 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40004400 	.word	0x40004400
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020000 	.word	0x40020000

08002b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <NMI_Handler+0x4>

08002b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <HardFault_Handler+0x4>

08002b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <MemManage_Handler+0x4>

08002b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <BusFault_Handler+0x4>

08002b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <UsageFault_Handler+0x4>

08002b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bbc:	f000 f9a8 	bl	8002f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <DMA2_Stream0_IRQHandler+0x10>)
 8002bca:	f000 ffff 	bl	8003bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000904 	.word	0x20000904

08002bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return 1;
 8002bdc:	2301      	movs	r3, #1
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_kill>:

int _kill(int pid, int sig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bf2:	f009 fabd 	bl	800c170 <__errno>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2216      	movs	r2, #22
 8002bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <_exit>:

void _exit (int status)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ffe7 	bl	8002be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c1a:	e7fe      	b.n	8002c1a <_exit+0x12>

08002c1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e00a      	b.n	8002c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c2e:	f3af 8000 	nop.w
 8002c32:	4601      	mov	r1, r0
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	60ba      	str	r2, [r7, #8]
 8002c3a:	b2ca      	uxtb	r2, r1
 8002c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	3301      	adds	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	dbf0      	blt.n	8002c2e <_read+0x12>
  }

  return len;
 8002c4c:	687b      	ldr	r3, [r7, #4]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e009      	b.n	8002c7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	60ba      	str	r2, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	dbf1      	blt.n	8002c68 <_write+0x12>
  }
  return len;
 8002c84:	687b      	ldr	r3, [r7, #4]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_close>:

int _close(int file)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb6:	605a      	str	r2, [r3, #4]
  return 0;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <_isatty>:

int _isatty(int file)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cce:	2301      	movs	r3, #1
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <_sbrk+0x5c>)
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <_sbrk+0x60>)
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <_sbrk+0x64>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <_sbrk+0x64>)
 8002d16:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <_sbrk+0x68>)
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <_sbrk+0x64>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d207      	bcs.n	8002d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d28:	f009 fa22 	bl	800c170 <__errno>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	220c      	movs	r2, #12
 8002d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
 8002d36:	e009      	b.n	8002d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <_sbrk+0x64>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <_sbrk+0x64>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <_sbrk+0x64>)
 8002d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20020000 	.word	0x20020000
 8002d58:	00000400 	.word	0x00000400
 8002d5c:	20001228 	.word	0x20001228
 8002d60:	20001280 	.word	0x20001280

08002d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <SystemInit+0x20>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <SystemInit+0x20>)
 8002d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <tof_vl53l0_init>:
 * @param pVhvSettings
 * @param pPhaseCal
 * @param refSpadCount
 * @param isApertureSpads
 */
void tof_vl53l0_init(VL53L0X_Dev_t * Dev, uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint32_t *refSpadCount, uint8_t *isApertureSpads){
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
  //
  // VL53L0X init for Single Measurement
  //
  VL53L0X_WaitDeviceBooted(Dev);
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f004 fce6 	bl	8007768 <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit(Dev);
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f004 f9fd 	bl	800719c <VL53L0X_DataInit>
  VL53L0X_StaticInit(Dev);
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f004 fb5e 	bl	8007464 <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, pVhvSettings, pPhaseCal);
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f005 f9fb 	bl	80081a8 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, refSpadCount, isApertureSpads);
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	6839      	ldr	r1, [r7, #0]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f005 fe84 	bl	8008ac4 <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f004 fd70 	bl	80078a4 <VL53L0X_SetDeviceMode>
  //
  // Enable/Disable Sigma and Signal check
  //
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f004 ffe7 	bl	8007d9c <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002dce:	2201      	movs	r2, #1
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f004 ffe2 	bl	8007d9c <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002dd8:	f641 1299 	movw	r2, #6553	; 0x1999
 8002ddc:	2101      	movs	r1, #1
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f005 f88c 	bl	8007efc <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002de4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002de8:	2100      	movs	r1, #0
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f005 f886 	bl	8007efc <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8002df0:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f004 fdb3 	bl	8007960 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002dfa:	2212      	movs	r2, #18
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f004 fdd4 	bl	80079ac <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002e04:	220e      	movs	r2, #14
 8002e06:	2101      	movs	r1, #1
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f004 fdcf 	bl	80079ac <VL53L0X_SetVcselPulsePeriod>

}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e1e:	490e      	ldr	r1, [pc, #56]	; (8002e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e20:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e24:	e002      	b.n	8002e2c <LoopCopyDataInit>

08002e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2a:	3304      	adds	r3, #4

08002e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e30:	d3f9      	bcc.n	8002e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e34:	4c0b      	ldr	r4, [pc, #44]	; (8002e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e38:	e001      	b.n	8002e3e <LoopFillZerobss>

08002e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e3c:	3204      	adds	r2, #4

08002e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e40:	d3fb      	bcc.n	8002e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e42:	f7ff ff8f 	bl	8002d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e46:	f009 f999 	bl	800c17c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4a:	f7fe fbe7 	bl	800161c <main>
  bx  lr    
 8002e4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e58:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 8002e5c:	0801223c 	.word	0x0801223c
  ldr r2, =_sbss
 8002e60:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 8002e64:	20001280 	.word	0x20001280

08002e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <ADC_IRQHandler>
	...

08002e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <HAL_Init+0x40>)
 8002e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_Init+0x40>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_Init+0x40>)
 8002e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_Init+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_Init+0x40>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e94:	2003      	movs	r0, #3
 8002e96:	f000 fd51 	bl	800393c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9a:	200f      	movs	r0, #15
 8002e9c:	f000 f808 	bl	8002eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea0:	f7ff fbca 	bl	8002638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023c00 	.word	0x40023c00

08002eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_InitTick+0x54>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_InitTick+0x58>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fd69 	bl	80039a6 <HAL_SYSTICK_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00e      	b.n	8002efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b0f      	cmp	r3, #15
 8002ee2:	d80a      	bhi.n	8002efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	f000 fd31 	bl	8003952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef0:	4a06      	ldr	r2, [pc, #24]	; (8002f0c <HAL_InitTick+0x5c>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000004 	.word	0x20000004
 8002f08:	2000000c 	.word	0x2000000c
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_IncTick+0x20>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_IncTick+0x24>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <HAL_IncTick+0x24>)
 8002f22:	6013      	str	r3, [r2, #0]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	2000000c 	.word	0x2000000c
 8002f34:	2000122c 	.word	0x2000122c

08002f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_GetTick+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	2000122c 	.word	0x2000122c

08002f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7ff ffee 	bl	8002f38 <HAL_GetTick>
 8002f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d005      	beq.n	8002f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_Delay+0x44>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f76:	bf00      	nop
 8002f78:	f7ff ffde 	bl	8002f38 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d8f7      	bhi.n	8002f78 <HAL_Delay+0x28>
  {
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	2000000c 	.word	0x2000000c

08002f98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e033      	b.n	8003016 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fb66 	bl	8002688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fde:	f023 0302 	bic.w	r3, r3, #2
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa58 	bl	80034a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
 8003006:	e001      	b.n	800300c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_ADC_Start_DMA+0x1e>
 800303a:	2302      	movs	r3, #2
 800303c:	e0ce      	b.n	80031dc <HAL_ADC_Start_DMA+0x1bc>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d018      	beq.n	8003086 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003064:	4b5f      	ldr	r3, [pc, #380]	; (80031e4 <HAL_ADC_Start_DMA+0x1c4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5f      	ldr	r2, [pc, #380]	; (80031e8 <HAL_ADC_Start_DMA+0x1c8>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0c9a      	lsrs	r2, r3, #18
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003078:	e002      	b.n	8003080 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	3b01      	subs	r3, #1
 800307e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f9      	bne.n	800307a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003094:	d107      	bne.n	80030a6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f040 8086 	bne.w	80031c2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f4:	d106      	bne.n	8003104 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f023 0206 	bic.w	r2, r3, #6
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	645a      	str	r2, [r3, #68]	; 0x44
 8003102:	e002      	b.n	800310a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003112:	4b36      	ldr	r3, [pc, #216]	; (80031ec <HAL_ADC_Start_DMA+0x1cc>)
 8003114:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	4a35      	ldr	r2, [pc, #212]	; (80031f0 <HAL_ADC_Start_DMA+0x1d0>)
 800311c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003122:	4a34      	ldr	r2, [pc, #208]	; (80031f4 <HAL_ADC_Start_DMA+0x1d4>)
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	4a33      	ldr	r2, [pc, #204]	; (80031f8 <HAL_ADC_Start_DMA+0x1d8>)
 800312c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003136:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003146:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003156:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	334c      	adds	r3, #76	; 0x4c
 8003162:	4619      	mov	r1, r3
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f000 fcd8 	bl	8003b1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10f      	bne.n	8003198 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d129      	bne.n	80031da <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	e020      	b.n	80031da <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a17      	ldr	r2, [pc, #92]	; (80031fc <HAL_ADC_Start_DMA+0x1dc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d11b      	bne.n	80031da <HAL_ADC_Start_DMA+0x1ba>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d114      	bne.n	80031da <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	e00b      	b.n	80031da <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f043 0210 	orr.w	r2, r3, #16
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000004 	.word	0x20000004
 80031e8:	431bde83 	.word	0x431bde83
 80031ec:	40012300 	.word	0x40012300
 80031f0:	08003699 	.word	0x08003699
 80031f4:	08003753 	.word	0x08003753
 80031f8:	0800376f 	.word	0x0800376f
 80031fc:	40012000 	.word	0x40012000

08003200 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x1c>
 8003254:	2302      	movs	r3, #2
 8003256:	e113      	b.n	8003480 <HAL_ADC_ConfigChannel+0x244>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b09      	cmp	r3, #9
 8003266:	d925      	bls.n	80032b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68d9      	ldr	r1, [r3, #12]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	3b1e      	subs	r3, #30
 800327e:	2207      	movs	r2, #7
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43da      	mvns	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	400a      	ands	r2, r1
 800328c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68d9      	ldr	r1, [r3, #12]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	4618      	mov	r0, r3
 80032a0:	4603      	mov	r3, r0
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4403      	add	r3, r0
 80032a6:	3b1e      	subs	r3, #30
 80032a8:	409a      	lsls	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	e022      	b.n	80032fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6919      	ldr	r1, [r3, #16]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	2207      	movs	r2, #7
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43da      	mvns	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	400a      	ands	r2, r1
 80032d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4618      	mov	r0, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4403      	add	r3, r0
 80032f0:	409a      	lsls	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d824      	bhi.n	800334c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	3b05      	subs	r3, #5
 8003314:	221f      	movs	r2, #31
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	400a      	ands	r2, r1
 8003322:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	4618      	mov	r0, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	3b05      	subs	r3, #5
 800333e:	fa00 f203 	lsl.w	r2, r0, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	635a      	str	r2, [r3, #52]	; 0x34
 800334a:	e04c      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d824      	bhi.n	800339e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	3b23      	subs	r3, #35	; 0x23
 8003366:	221f      	movs	r2, #31
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43da      	mvns	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	400a      	ands	r2, r1
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	4618      	mov	r0, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	3b23      	subs	r3, #35	; 0x23
 8003390:	fa00 f203 	lsl.w	r2, r0, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
 800339c:	e023      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	3b41      	subs	r3, #65	; 0x41
 80033b0:	221f      	movs	r2, #31
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	400a      	ands	r2, r1
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4618      	mov	r0, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	3b41      	subs	r3, #65	; 0x41
 80033da:	fa00 f203 	lsl.w	r2, r0, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e6:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_ADC_ConfigChannel+0x250>)
 80033e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a28      	ldr	r2, [pc, #160]	; (8003490 <HAL_ADC_ConfigChannel+0x254>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10f      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1d8>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b12      	cmp	r3, #18
 80033fa:	d10b      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <HAL_ADC_ConfigChannel+0x254>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d12b      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x23a>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <HAL_ADC_ConfigChannel+0x258>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d003      	beq.n	8003430 <HAL_ADC_ConfigChannel+0x1f4>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b11      	cmp	r3, #17
 800342e:	d122      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a11      	ldr	r2, [pc, #68]	; (8003494 <HAL_ADC_ConfigChannel+0x258>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003452:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_ADC_ConfigChannel+0x25c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a11      	ldr	r2, [pc, #68]	; (800349c <HAL_ADC_ConfigChannel+0x260>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	0c9a      	lsrs	r2, r3, #18
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003468:	e002      	b.n	8003470 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3b01      	subs	r3, #1
 800346e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f9      	bne.n	800346a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40012300 	.word	0x40012300
 8003490:	40012000 	.word	0x40012000
 8003494:	10000012 	.word	0x10000012
 8003498:	20000004 	.word	0x20000004
 800349c:	431bde83 	.word	0x431bde83

080034a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <ADC_Init+0x1f0>)
 80034aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	021a      	lsls	r2, r3, #8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6899      	ldr	r1, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	4a58      	ldr	r2, [pc, #352]	; (8003694 <ADC_Init+0x1f4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003546:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6899      	ldr	r1, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6899      	ldr	r1, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	e00f      	b.n	800359e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800358c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800359c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0202 	bic.w	r2, r2, #2
 80035ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6899      	ldr	r1, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	7e1b      	ldrb	r3, [r3, #24]
 80035b8:	005a      	lsls	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01b      	beq.n	8003604 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	3b01      	subs	r3, #1
 80035f8:	035a      	lsls	r2, r3, #13
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	e007      	b.n	8003614 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003612:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	3b01      	subs	r3, #1
 8003630:	051a      	lsls	r2, r3, #20
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6899      	ldr	r1, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003656:	025a      	lsls	r2, r3, #9
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6899      	ldr	r1, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	029a      	lsls	r2, r3, #10
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40012300 	.word	0x40012300
 8003694:	0f000001 	.word	0x0f000001

08003698 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d13c      	bne.n	800372c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d12b      	bne.n	8003724 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d127      	bne.n	8003724 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d006      	beq.n	80036f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d119      	bne.n	8003724 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0220 	bic.w	r2, r2, #32
 80036fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d105      	bne.n	8003724 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0201 	orr.w	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff fd6b 	bl	8003200 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800372a:	e00e      	b.n	800374a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff fd75 	bl	8003228 <HAL_ADC_ErrorCallback>
}
 800373e:	e004      	b.n	800374a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff fd57 	bl	8003214 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2240      	movs	r2, #64	; 0x40
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f043 0204 	orr.w	r2, r3, #4
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f7ff fd4a 	bl	8003228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b8:	4013      	ands	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ce:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	60d3      	str	r3, [r2, #12]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <__NVIC_GetPriorityGrouping+0x18>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	f003 0307 	and.w	r3, r3, #7
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db0b      	blt.n	800382a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4907      	ldr	r1, [pc, #28]	; (8003838 <__NVIC_EnableIRQ+0x38>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2001      	movs	r0, #1
 8003822:	fa00 f202 	lsl.w	r2, r0, r2
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000e100 	.word	0xe000e100

0800383c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384c:	2b00      	cmp	r3, #0
 800384e:	db0a      	blt.n	8003866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	490c      	ldr	r1, [pc, #48]	; (8003888 <__NVIC_SetPriority+0x4c>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	440b      	add	r3, r1
 8003860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003864:	e00a      	b.n	800387c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4908      	ldr	r1, [pc, #32]	; (800388c <__NVIC_SetPriority+0x50>)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	3b04      	subs	r3, #4
 8003874:	0112      	lsls	r2, r2, #4
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	440b      	add	r3, r1
 800387a:	761a      	strb	r2, [r3, #24]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000e100 	.word	0xe000e100
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f1c3 0307 	rsb	r3, r3, #7
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	bf28      	it	cs
 80038ae:	2304      	movcs	r3, #4
 80038b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d902      	bls.n	80038c0 <NVIC_EncodePriority+0x30>
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3b03      	subs	r3, #3
 80038be:	e000      	b.n	80038c2 <NVIC_EncodePriority+0x32>
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	f04f 32ff 	mov.w	r2, #4294967295
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	401a      	ands	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d8:	f04f 31ff 	mov.w	r1, #4294967295
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	43d9      	mvns	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	4313      	orrs	r3, r2
         );
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3724      	adds	r7, #36	; 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3b01      	subs	r3, #1
 8003904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003908:	d301      	bcc.n	800390e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800390a:	2301      	movs	r3, #1
 800390c:	e00f      	b.n	800392e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <SysTick_Config+0x40>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003916:	210f      	movs	r1, #15
 8003918:	f04f 30ff 	mov.w	r0, #4294967295
 800391c:	f7ff ff8e 	bl	800383c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <SysTick_Config+0x40>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003926:	4b04      	ldr	r3, [pc, #16]	; (8003938 <SysTick_Config+0x40>)
 8003928:	2207      	movs	r2, #7
 800392a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	e000e010 	.word	0xe000e010

0800393c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ff29 	bl	800379c <__NVIC_SetPriorityGrouping>
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003952:	b580      	push	{r7, lr}
 8003954:	b086      	sub	sp, #24
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003964:	f7ff ff3e 	bl	80037e4 <__NVIC_GetPriorityGrouping>
 8003968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	6978      	ldr	r0, [r7, #20]
 8003970:	f7ff ff8e 	bl	8003890 <NVIC_EncodePriority>
 8003974:	4602      	mov	r2, r0
 8003976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff5d 	bl	800383c <__NVIC_SetPriority>
}
 8003982:	bf00      	nop
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	4603      	mov	r3, r0
 8003992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff31 	bl	8003800 <__NVIC_EnableIRQ>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ffa2 	bl	80038f8 <SysTick_Config>
 80039b4:	4603      	mov	r3, r0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039cc:	f7ff fab4 	bl	8002f38 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e099      	b.n	8003b10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039fc:	e00f      	b.n	8003a1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039fe:	f7ff fa9b 	bl	8002f38 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d908      	bls.n	8003a1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2203      	movs	r2, #3
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e078      	b.n	8003b10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e8      	bne.n	80039fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4b38      	ldr	r3, [pc, #224]	; (8003b18 <HAL_DMA_Init+0x158>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d107      	bne.n	8003a88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	4313      	orrs	r3, r2
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0307 	bic.w	r3, r3, #7
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d117      	bne.n	8003ae2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fa6f 	bl	8003fa8 <DMA_CheckFifoParam>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2240      	movs	r2, #64	; 0x40
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e016      	b.n	8003b10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fa26 	bl	8003f3c <DMA_CalcBaseAndBitshift>
 8003af0:	4603      	mov	r3, r0
 8003af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	223f      	movs	r2, #63	; 0x3f
 8003afa:	409a      	lsls	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	f010803f 	.word	0xf010803f

08003b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_DMA_Start_IT+0x26>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e040      	b.n	8003bc4 <HAL_DMA_Start_IT+0xa8>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d12f      	bne.n	8003bb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f9b8 	bl	8003ee0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	223f      	movs	r2, #63	; 0x3f
 8003b76:	409a      	lsls	r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0216 	orr.w	r2, r2, #22
 8003b8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0208 	orr.w	r2, r2, #8
 8003ba2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e005      	b.n	8003bc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bd8:	4b8e      	ldr	r3, [pc, #568]	; (8003e14 <HAL_DMA_IRQHandler+0x248>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a8e      	ldr	r2, [pc, #568]	; (8003e18 <HAL_DMA_IRQHandler+0x24c>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0a9b      	lsrs	r3, r3, #10
 8003be4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01a      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d013      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0204 	bic.w	r2, r2, #4
 8003c1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	2208      	movs	r2, #8
 8003c26:	409a      	lsls	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	f043 0202 	orr.w	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	2204      	movs	r2, #4
 8003c74:	409a      	lsls	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d012      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	2204      	movs	r2, #4
 8003c92:	409a      	lsls	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	f043 0204 	orr.w	r2, r3, #4
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	2210      	movs	r2, #16
 8003caa:	409a      	lsls	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d043      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d03c      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d018      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d108      	bne.n	8003cfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d024      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
 8003cfa:	e01f      	b.n	8003d3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01b      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
 8003d0c:	e016      	b.n	8003d3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d107      	bne.n	8003d2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0208 	bic.w	r2, r2, #8
 8003d2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	2220      	movs	r2, #32
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 808f 	beq.w	8003e6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8087 	beq.w	8003e6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	2220      	movs	r2, #32
 8003d64:	409a      	lsls	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d136      	bne.n	8003de4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0216 	bic.w	r2, r2, #22
 8003d84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x1da>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0208 	bic.w	r2, r2, #8
 8003db4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	223f      	movs	r2, #63	; 0x3f
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d07e      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
        }
        return;
 8003de2:	e079      	b.n	8003ed8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d01d      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10d      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d031      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
 8003e10:	e02c      	b.n	8003e6c <HAL_DMA_IRQHandler+0x2a0>
 8003e12:	bf00      	nop
 8003e14:	20000004 	.word	0x20000004
 8003e18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d023      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	4798      	blx	r3
 8003e2c:	e01e      	b.n	8003e6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0210 	bic.w	r2, r2, #16
 8003e4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d032      	beq.n	8003eda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d022      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2205      	movs	r2, #5
 8003e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d307      	bcc.n	8003eb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f2      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x2cc>
 8003eb2:	e000      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003eb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	4798      	blx	r3
 8003ed6:	e000      	b.n	8003eda <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ed8:	bf00      	nop
    }
  }
}
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003efc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d108      	bne.n	8003f20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f1e:	e007      	b.n	8003f30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	3b10      	subs	r3, #16
 8003f4c:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <DMA_CalcBaseAndBitshift+0x64>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f56:	4a13      	ldr	r2, [pc, #76]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x68>)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d909      	bls.n	8003f7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	1d1a      	adds	r2, r3, #4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f7c:	e007      	b.n	8003f8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	aaaaaaab 	.word	0xaaaaaaab
 8003fa4:	08011d7c 	.word	0x08011d7c

08003fa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d11f      	bne.n	8004002 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d856      	bhi.n	8004076 <DMA_CheckFifoParam+0xce>
 8003fc8:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <DMA_CheckFifoParam+0x28>)
 8003fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fce:	bf00      	nop
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003ff3 	.word	0x08003ff3
 8003fd8:	08003fe1 	.word	0x08003fe1
 8003fdc:	08004077 	.word	0x08004077
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d046      	beq.n	800407a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff0:	e043      	b.n	800407a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ffa:	d140      	bne.n	800407e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004000:	e03d      	b.n	800407e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400a:	d121      	bne.n	8004050 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b03      	cmp	r3, #3
 8004010:	d837      	bhi.n	8004082 <DMA_CheckFifoParam+0xda>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <DMA_CheckFifoParam+0x70>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	08004029 	.word	0x08004029
 800401c:	0800402f 	.word	0x0800402f
 8004020:	08004029 	.word	0x08004029
 8004024:	08004041 	.word	0x08004041
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e030      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d025      	beq.n	8004086 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800403e:	e022      	b.n	8004086 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004048:	d11f      	bne.n	800408a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800404e:	e01c      	b.n	800408a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d903      	bls.n	800405e <DMA_CheckFifoParam+0xb6>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d003      	beq.n	8004064 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800405c:	e018      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
      break;
 8004062:	e015      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00e      	beq.n	800408e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
      break;
 8004074:	e00b      	b.n	800408e <DMA_CheckFifoParam+0xe6>
      break;
 8004076:	bf00      	nop
 8004078:	e00a      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
      break;
 800407a:	bf00      	nop
 800407c:	e008      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
      break;
 800407e:	bf00      	nop
 8004080:	e006      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
      break;
 8004082:	bf00      	nop
 8004084:	e004      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
      break;
 8004086:	bf00      	nop
 8004088:	e002      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
      break;   
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <DMA_CheckFifoParam+0xe8>
      break;
 800408e:	bf00      	nop
    }
  } 
  
  return status; 
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop

080040a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b089      	sub	sp, #36	; 0x24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	e159      	b.n	8004370 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040bc:	2201      	movs	r2, #1
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	f040 8148 	bne.w	800436a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d005      	beq.n	80040f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d130      	bne.n	8004154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	2203      	movs	r2, #3
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4013      	ands	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004128:	2201      	movs	r2, #1
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 0201 	and.w	r2, r3, #1
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b03      	cmp	r3, #3
 800415e:	d017      	beq.n	8004190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	2203      	movs	r2, #3
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d123      	bne.n	80041e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	08da      	lsrs	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3208      	adds	r2, #8
 80041a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	220f      	movs	r2, #15
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4013      	ands	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	08da      	lsrs	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3208      	adds	r2, #8
 80041de:	69b9      	ldr	r1, [r7, #24]
 80041e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	2203      	movs	r2, #3
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 0203 	and.w	r2, r3, #3
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a2 	beq.w	800436a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	4b57      	ldr	r3, [pc, #348]	; (8004388 <HAL_GPIO_Init+0x2e8>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	4a56      	ldr	r2, [pc, #344]	; (8004388 <HAL_GPIO_Init+0x2e8>)
 8004230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004234:	6453      	str	r3, [r2, #68]	; 0x44
 8004236:	4b54      	ldr	r3, [pc, #336]	; (8004388 <HAL_GPIO_Init+0x2e8>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004242:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_GPIO_Init+0x2ec>)
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	089b      	lsrs	r3, r3, #2
 8004248:	3302      	adds	r3, #2
 800424a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	220f      	movs	r2, #15
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a49      	ldr	r2, [pc, #292]	; (8004390 <HAL_GPIO_Init+0x2f0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d019      	beq.n	80042a2 <HAL_GPIO_Init+0x202>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a48      	ldr	r2, [pc, #288]	; (8004394 <HAL_GPIO_Init+0x2f4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_GPIO_Init+0x1fe>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a47      	ldr	r2, [pc, #284]	; (8004398 <HAL_GPIO_Init+0x2f8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00d      	beq.n	800429a <HAL_GPIO_Init+0x1fa>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a46      	ldr	r2, [pc, #280]	; (800439c <HAL_GPIO_Init+0x2fc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <HAL_GPIO_Init+0x1f6>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a45      	ldr	r2, [pc, #276]	; (80043a0 <HAL_GPIO_Init+0x300>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_GPIO_Init+0x1f2>
 800428e:	2304      	movs	r3, #4
 8004290:	e008      	b.n	80042a4 <HAL_GPIO_Init+0x204>
 8004292:	2307      	movs	r3, #7
 8004294:	e006      	b.n	80042a4 <HAL_GPIO_Init+0x204>
 8004296:	2303      	movs	r3, #3
 8004298:	e004      	b.n	80042a4 <HAL_GPIO_Init+0x204>
 800429a:	2302      	movs	r3, #2
 800429c:	e002      	b.n	80042a4 <HAL_GPIO_Init+0x204>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_GPIO_Init+0x204>
 80042a2:	2300      	movs	r3, #0
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	f002 0203 	and.w	r2, r2, #3
 80042aa:	0092      	lsls	r2, r2, #2
 80042ac:	4093      	lsls	r3, r2
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b4:	4935      	ldr	r1, [pc, #212]	; (800438c <HAL_GPIO_Init+0x2ec>)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	089b      	lsrs	r3, r3, #2
 80042ba:	3302      	adds	r3, #2
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042c2:	4b38      	ldr	r3, [pc, #224]	; (80043a4 <HAL_GPIO_Init+0x304>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042e6:	4a2f      	ldr	r2, [pc, #188]	; (80043a4 <HAL_GPIO_Init+0x304>)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042ec:	4b2d      	ldr	r3, [pc, #180]	; (80043a4 <HAL_GPIO_Init+0x304>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004310:	4a24      	ldr	r2, [pc, #144]	; (80043a4 <HAL_GPIO_Init+0x304>)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004316:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_GPIO_Init+0x304>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800433a:	4a1a      	ldr	r2, [pc, #104]	; (80043a4 <HAL_GPIO_Init+0x304>)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004340:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <HAL_GPIO_Init+0x304>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004364:	4a0f      	ldr	r2, [pc, #60]	; (80043a4 <HAL_GPIO_Init+0x304>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3301      	adds	r3, #1
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	2b0f      	cmp	r3, #15
 8004374:	f67f aea2 	bls.w	80040bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	40013800 	.word	0x40013800
 8004390:	40020000 	.word	0x40020000
 8004394:	40020400 	.word	0x40020400
 8004398:	40020800 	.word	0x40020800
 800439c:	40020c00 	.word	0x40020c00
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40013c00 	.word	0x40013c00

080043a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	887b      	ldrh	r3, [r7, #2]
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
 80043c4:	e001      	b.n	80043ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
 80043e4:	4613      	mov	r3, r2
 80043e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043e8:	787b      	ldrb	r3, [r7, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043f4:	e003      	b.n	80043fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	619a      	str	r2, [r3, #24]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e12b      	b.n	8004676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fe f9bc 	bl	80027b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800445e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800446e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004470:	f001 fd62 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8004474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4a81      	ldr	r2, [pc, #516]	; (8004680 <HAL_I2C_Init+0x274>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d807      	bhi.n	8004490 <HAL_I2C_Init+0x84>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a80      	ldr	r2, [pc, #512]	; (8004684 <HAL_I2C_Init+0x278>)
 8004484:	4293      	cmp	r3, r2
 8004486:	bf94      	ite	ls
 8004488:	2301      	movls	r3, #1
 800448a:	2300      	movhi	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e006      	b.n	800449e <HAL_I2C_Init+0x92>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a7d      	ldr	r2, [pc, #500]	; (8004688 <HAL_I2C_Init+0x27c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	bf94      	ite	ls
 8004498:	2301      	movls	r3, #1
 800449a:	2300      	movhi	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0e7      	b.n	8004676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a78      	ldr	r2, [pc, #480]	; (800468c <HAL_I2C_Init+0x280>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	0c9b      	lsrs	r3, r3, #18
 80044b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a6a      	ldr	r2, [pc, #424]	; (8004680 <HAL_I2C_Init+0x274>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d802      	bhi.n	80044e0 <HAL_I2C_Init+0xd4>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	3301      	adds	r3, #1
 80044de:	e009      	b.n	80044f4 <HAL_I2C_Init+0xe8>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	4a69      	ldr	r2, [pc, #420]	; (8004690 <HAL_I2C_Init+0x284>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	099b      	lsrs	r3, r3, #6
 80044f2:	3301      	adds	r3, #1
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004506:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	495c      	ldr	r1, [pc, #368]	; (8004680 <HAL_I2C_Init+0x274>)
 8004510:	428b      	cmp	r3, r1
 8004512:	d819      	bhi.n	8004548 <HAL_I2C_Init+0x13c>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1e59      	subs	r1, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004522:	1c59      	adds	r1, r3, #1
 8004524:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004528:	400b      	ands	r3, r1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_I2C_Init+0x138>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1e59      	subs	r1, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	fbb1 f3f3 	udiv	r3, r1, r3
 800453c:	3301      	adds	r3, #1
 800453e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004542:	e051      	b.n	80045e8 <HAL_I2C_Init+0x1dc>
 8004544:	2304      	movs	r3, #4
 8004546:	e04f      	b.n	80045e8 <HAL_I2C_Init+0x1dc>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d111      	bne.n	8004574 <HAL_I2C_Init+0x168>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1e58      	subs	r0, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6859      	ldr	r1, [r3, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	440b      	add	r3, r1
 800455e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004562:	3301      	adds	r3, #1
 8004564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e012      	b.n	800459a <HAL_I2C_Init+0x18e>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1e58      	subs	r0, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	0099      	lsls	r1, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	fbb0 f3f3 	udiv	r3, r0, r3
 800458a:	3301      	adds	r3, #1
 800458c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_I2C_Init+0x196>
 800459e:	2301      	movs	r3, #1
 80045a0:	e022      	b.n	80045e8 <HAL_I2C_Init+0x1dc>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10e      	bne.n	80045c8 <HAL_I2C_Init+0x1bc>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1e58      	subs	r0, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6859      	ldr	r1, [r3, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	440b      	add	r3, r1
 80045b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80045bc:	3301      	adds	r3, #1
 80045be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c6:	e00f      	b.n	80045e8 <HAL_I2C_Init+0x1dc>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	1e58      	subs	r0, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6859      	ldr	r1, [r3, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	0099      	lsls	r1, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	fbb0 f3f3 	udiv	r3, r0, r3
 80045de:	3301      	adds	r3, #1
 80045e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	6809      	ldr	r1, [r1, #0]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6911      	ldr	r1, [r2, #16]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68d2      	ldr	r2, [r2, #12]
 8004622:	4311      	orrs	r1, r2
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	430b      	orrs	r3, r1
 800462a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	000186a0 	.word	0x000186a0
 8004684:	001e847f 	.word	0x001e847f
 8004688:	003d08ff 	.word	0x003d08ff
 800468c:	431bde83 	.word	0x431bde83
 8004690:	10624dd3 	.word	0x10624dd3

08004694 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	461a      	mov	r2, r3
 80046a0:	460b      	mov	r3, r1
 80046a2:	817b      	strh	r3, [r7, #10]
 80046a4:	4613      	mov	r3, r2
 80046a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046a8:	f7fe fc46 	bl	8002f38 <HAL_GetTick>
 80046ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	f040 80e0 	bne.w	800487c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	2319      	movs	r3, #25
 80046c2:	2201      	movs	r2, #1
 80046c4:	4970      	ldr	r1, [pc, #448]	; (8004888 <HAL_I2C_Master_Transmit+0x1f4>)
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fde8 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
 80046d4:	e0d3      	b.n	800487e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_I2C_Master_Transmit+0x50>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e0cc      	b.n	800487e <HAL_I2C_Master_Transmit+0x1ea>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d007      	beq.n	800470a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004718:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2221      	movs	r2, #33	; 0x21
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2210      	movs	r2, #16
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	893a      	ldrh	r2, [r7, #8]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a50      	ldr	r2, [pc, #320]	; (800488c <HAL_I2C_Master_Transmit+0x1f8>)
 800474a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800474c:	8979      	ldrh	r1, [r7, #10]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	6a3a      	ldr	r2, [r7, #32]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fbbc 	bl	8004ed0 <I2C_MasterRequestWrite>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e08d      	b.n	800487e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004778:	e066      	b.n	8004848 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	6a39      	ldr	r1, [r7, #32]
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fe62 	bl	8005448 <I2C_WaitOnTXEFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00d      	beq.n	80047a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2b04      	cmp	r3, #4
 8004790:	d107      	bne.n	80047a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e06b      	b.n	800487e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	781a      	ldrb	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d11b      	bne.n	800481c <HAL_I2C_Master_Transmit+0x188>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d017      	beq.n	800481c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	6a39      	ldr	r1, [r7, #32]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fe52 	bl	80054ca <I2C_WaitOnBTFFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00d      	beq.n	8004848 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	2b04      	cmp	r3, #4
 8004832:	d107      	bne.n	8004844 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004842:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e01a      	b.n	800487e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	d194      	bne.n	800477a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	e000      	b.n	800487e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800487c:	2302      	movs	r3, #2
  }
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	00100002 	.word	0x00100002
 800488c:	ffff0000 	.word	0xffff0000

08004890 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08c      	sub	sp, #48	; 0x30
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	461a      	mov	r2, r3
 800489c:	460b      	mov	r3, r1
 800489e:	817b      	strh	r3, [r7, #10]
 80048a0:	4613      	mov	r3, r2
 80048a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048a4:	f7fe fb48 	bl	8002f38 <HAL_GetTick>
 80048a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	f040 820b 	bne.w	8004cce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2319      	movs	r3, #25
 80048be:	2201      	movs	r2, #1
 80048c0:	497c      	ldr	r1, [pc, #496]	; (8004ab4 <HAL_I2C_Master_Receive+0x224>)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fcea 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
 80048d0:	e1fe      	b.n	8004cd0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_I2C_Master_Receive+0x50>
 80048dc:	2302      	movs	r3, #2
 80048de:	e1f7      	b.n	8004cd0 <HAL_I2C_Master_Receive+0x440>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d007      	beq.n	8004906 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004914:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2222      	movs	r2, #34	; 0x22
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2210      	movs	r2, #16
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	893a      	ldrh	r2, [r7, #8]
 8004936:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a5c      	ldr	r2, [pc, #368]	; (8004ab8 <HAL_I2C_Master_Receive+0x228>)
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004948:	8979      	ldrh	r1, [r7, #10]
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fb40 	bl	8004fd4 <I2C_MasterRequestRead>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e1b8      	b.n	8004cd0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d113      	bne.n	800498e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004966:	2300      	movs	r3, #0
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	623b      	str	r3, [r7, #32]
 800497a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e18c      	b.n	8004ca8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	2b01      	cmp	r3, #1
 8004994:	d11b      	bne.n	80049ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e16c      	b.n	8004ca8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d11b      	bne.n	8004a0e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	e14c      	b.n	8004ca8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a34:	e138      	b.n	8004ca8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	f200 80f1 	bhi.w	8004c22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d123      	bne.n	8004a90 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fd7d 	bl	800554c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e139      	b.n	8004cd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a8e:	e10b      	b.n	8004ca8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d14e      	bne.n	8004b36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	4906      	ldr	r1, [pc, #24]	; (8004abc <HAL_I2C_Master_Receive+0x22c>)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fbfa 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d008      	beq.n	8004ac0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e10e      	b.n	8004cd0 <HAL_I2C_Master_Receive+0x440>
 8004ab2:	bf00      	nop
 8004ab4:	00100002 	.word	0x00100002
 8004ab8:	ffff0000 	.word	0xffff0000
 8004abc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b34:	e0b8      	b.n	8004ca8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4966      	ldr	r1, [pc, #408]	; (8004cd8 <HAL_I2C_Master_Receive+0x448>)
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fbab 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0bf      	b.n	8004cd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	2200      	movs	r2, #0
 8004b9a:	494f      	ldr	r1, [pc, #316]	; (8004cd8 <HAL_I2C_Master_Receive+0x448>)
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fb7d 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e091      	b.n	8004cd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c20:	e042      	b.n	8004ca8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fc90 	bl	800554c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e04c      	b.n	8004cd0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d118      	bne.n	8004ca8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f47f aec2 	bne.w	8004a36 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e000      	b.n	8004cd0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004cce:	2302      	movs	r3, #2
  }
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3728      	adds	r7, #40	; 0x28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	00010004 	.word	0x00010004

08004cdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	817b      	strh	r3, [r7, #10]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	813b      	strh	r3, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cf6:	f7fe f91f 	bl	8002f38 <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	f040 80d9 	bne.w	8004ebc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2319      	movs	r3, #25
 8004d10:	2201      	movs	r2, #1
 8004d12:	496d      	ldr	r1, [pc, #436]	; (8004ec8 <HAL_I2C_Mem_Write+0x1ec>)
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fac1 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
 8004d22:	e0cc      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2C_Mem_Write+0x56>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e0c5      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d007      	beq.n	8004d58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2221      	movs	r2, #33	; 0x21
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2240      	movs	r2, #64	; 0x40
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a4d      	ldr	r2, [pc, #308]	; (8004ecc <HAL_I2C_Mem_Write+0x1f0>)
 8004d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d9a:	88f8      	ldrh	r0, [r7, #6]
 8004d9c:	893a      	ldrh	r2, [r7, #8]
 8004d9e:	8979      	ldrh	r1, [r7, #10]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4603      	mov	r3, r0
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f9e0 	bl	8005170 <I2C_RequestMemoryWrite>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d052      	beq.n	8004e5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e081      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fb42 	bl	8005448 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d107      	bne.n	8004de2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e06b      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	781a      	ldrb	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d11b      	bne.n	8004e5c <HAL_I2C_Mem_Write+0x180>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	781a      	ldrb	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1aa      	bne.n	8004dba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fb2e 	bl	80054ca <I2C_WaitOnBTFFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d107      	bne.n	8004e8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e016      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e000      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	00100002 	.word	0x00100002
 8004ecc:	ffff0000 	.word	0xffff0000

08004ed0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	460b      	mov	r3, r1
 8004ede:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d006      	beq.n	8004efa <I2C_MasterRequestWrite+0x2a>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d003      	beq.n	8004efa <I2C_MasterRequestWrite+0x2a>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ef8:	d108      	bne.n	8004f0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e00b      	b.n	8004f24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	2b12      	cmp	r3, #18
 8004f12:	d107      	bne.n	8004f24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f9b3 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d103      	bne.n	8004f54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e035      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f60:	d108      	bne.n	8004f74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f62:	897b      	ldrh	r3, [r7, #10]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f70:	611a      	str	r2, [r3, #16]
 8004f72:	e01b      	b.n	8004fac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f74:	897b      	ldrh	r3, [r7, #10]
 8004f76:	11db      	asrs	r3, r3, #7
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	f003 0306 	and.w	r3, r3, #6
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f063 030f 	orn	r3, r3, #15
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <I2C_MasterRequestWrite+0xfc>)
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f9d9 	bl	800534a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e010      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fa2:	897b      	ldrh	r3, [r7, #10]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4907      	ldr	r1, [pc, #28]	; (8004fd0 <I2C_MasterRequestWrite+0x100>)
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f9c9 	bl	800534a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	00010008 	.word	0x00010008
 8004fd0:	00010002 	.word	0x00010002

08004fd4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d006      	beq.n	800500e <I2C_MasterRequestRead+0x3a>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d003      	beq.n	800500e <I2C_MasterRequestRead+0x3a>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800500c:	d108      	bne.n	8005020 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e00b      	b.n	8005038 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	2b11      	cmp	r3, #17
 8005026:	d107      	bne.n	8005038 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005036:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f929 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00d      	beq.n	800506c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d103      	bne.n	8005068 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e079      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005074:	d108      	bne.n	8005088 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005076:	897b      	ldrh	r3, [r7, #10]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	611a      	str	r2, [r3, #16]
 8005086:	e05f      	b.n	8005148 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005088:	897b      	ldrh	r3, [r7, #10]
 800508a:	11db      	asrs	r3, r3, #7
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0306 	and.w	r3, r3, #6
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f063 030f 	orn	r3, r3, #15
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4930      	ldr	r1, [pc, #192]	; (8005168 <I2C_MasterRequestRead+0x194>)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f94f 	bl	800534a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e054      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050b6:	897b      	ldrh	r3, [r7, #10]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4929      	ldr	r1, [pc, #164]	; (800516c <I2C_MasterRequestRead+0x198>)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f93f 	bl	800534a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e044      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f8c7 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005122:	d103      	bne.n	800512c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e017      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005130:	897b      	ldrh	r3, [r7, #10]
 8005132:	11db      	asrs	r3, r3, #7
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 0306 	and.w	r3, r3, #6
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f063 030e 	orn	r3, r3, #14
 8005140:	b2da      	uxtb	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4907      	ldr	r1, [pc, #28]	; (800516c <I2C_MasterRequestRead+0x198>)
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f8fb 	bl	800534a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	00010008 	.word	0x00010008
 800516c:	00010002 	.word	0x00010002

08005170 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	4608      	mov	r0, r1
 800517a:	4611      	mov	r1, r2
 800517c:	461a      	mov	r2, r3
 800517e:	4603      	mov	r3, r0
 8005180:	817b      	strh	r3, [r7, #10]
 8005182:	460b      	mov	r3, r1
 8005184:	813b      	strh	r3, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005198:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f878 	bl	800529c <I2C_WaitOnFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c0:	d103      	bne.n	80051ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e05f      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	6a3a      	ldr	r2, [r7, #32]
 80051e2:	492d      	ldr	r1, [pc, #180]	; (8005298 <I2C_RequestMemoryWrite+0x128>)
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f8b0 	bl	800534a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e04c      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	6a39      	ldr	r1, [r7, #32]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f91a 	bl	8005448 <I2C_WaitOnTXEFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b04      	cmp	r3, #4
 8005220:	d107      	bne.n	8005232 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005230:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e02b      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d105      	bne.n	8005248 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800523c:	893b      	ldrh	r3, [r7, #8]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	611a      	str	r2, [r3, #16]
 8005246:	e021      	b.n	800528c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005248:	893b      	ldrh	r3, [r7, #8]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	b29b      	uxth	r3, r3
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	6a39      	ldr	r1, [r7, #32]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f8f4 	bl	8005448 <I2C_WaitOnTXEFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	2b04      	cmp	r3, #4
 800526c:	d107      	bne.n	800527e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e005      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005282:	893b      	ldrh	r3, [r7, #8]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	00010002 	.word	0x00010002

0800529c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ac:	e025      	b.n	80052fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d021      	beq.n	80052fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b6:	f7fd fe3f 	bl	8002f38 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d302      	bcc.n	80052cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d116      	bne.n	80052fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e023      	b.n	8005342 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0c1b      	lsrs	r3, r3, #16
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d10d      	bne.n	8005320 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	43da      	mvns	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4013      	ands	r3, r2
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf0c      	ite	eq
 8005316:	2301      	moveq	r3, #1
 8005318:	2300      	movne	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	e00c      	b.n	800533a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	43da      	mvns	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4013      	ands	r3, r2
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	bf0c      	ite	eq
 8005332:	2301      	moveq	r3, #1
 8005334:	2300      	movne	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	429a      	cmp	r2, r3
 800533e:	d0b6      	beq.n	80052ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
 8005356:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005358:	e051      	b.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005368:	d123      	bne.n	80053b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005378:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005382:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f043 0204 	orr.w	r2, r3, #4
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e046      	b.n	8005440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d021      	beq.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fd fdbd 	bl	8002f38 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d116      	bne.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f043 0220 	orr.w	r2, r3, #32
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e020      	b.n	8005440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	0c1b      	lsrs	r3, r3, #16
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d10c      	bne.n	8005422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	43da      	mvns	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4013      	ands	r3, r2
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	bf14      	ite	ne
 800541a:	2301      	movne	r3, #1
 800541c:	2300      	moveq	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	e00b      	b.n	800543a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	43da      	mvns	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4013      	ands	r3, r2
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d18d      	bne.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005454:	e02d      	b.n	80054b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f8ce 	bl	80055f8 <I2C_IsAcknowledgeFailed>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e02d      	b.n	80054c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d021      	beq.n	80054b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fd fd63 	bl	8002f38 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e007      	b.n	80054c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d1ca      	bne.n	8005456 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054d6:	e02d      	b.n	8005534 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f88d 	bl	80055f8 <I2C_IsAcknowledgeFailed>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e02d      	b.n	8005544 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ee:	d021      	beq.n	8005534 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f0:	f7fd fd22 	bl	8002f38 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d116      	bne.n	8005534 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	f043 0220 	orr.w	r2, r3, #32
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e007      	b.n	8005544 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b04      	cmp	r3, #4
 8005540:	d1ca      	bne.n	80054d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005558:	e042      	b.n	80055e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	f003 0310 	and.w	r3, r3, #16
 8005564:	2b10      	cmp	r3, #16
 8005566:	d119      	bne.n	800559c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0210 	mvn.w	r2, #16
 8005570:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e029      	b.n	80055f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559c:	f7fd fccc 	bl	8002f38 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d302      	bcc.n	80055b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d116      	bne.n	80055e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	f043 0220 	orr.w	r2, r3, #32
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e007      	b.n	80055f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	d1b5      	bne.n	800555a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560e:	d11b      	bne.n	8005648 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005618:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	f043 0204 	orr.w	r2, r3, #4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e267      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d075      	beq.n	8005762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005676:	4b88      	ldr	r3, [pc, #544]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b04      	cmp	r3, #4
 8005680:	d00c      	beq.n	800569c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005682:	4b85      	ldr	r3, [pc, #532]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800568a:	2b08      	cmp	r3, #8
 800568c:	d112      	bne.n	80056b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800568e:	4b82      	ldr	r3, [pc, #520]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800569a:	d10b      	bne.n	80056b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800569c:	4b7e      	ldr	r3, [pc, #504]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d05b      	beq.n	8005760 <HAL_RCC_OscConfig+0x108>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d157      	bne.n	8005760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e242      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056bc:	d106      	bne.n	80056cc <HAL_RCC_OscConfig+0x74>
 80056be:	4b76      	ldr	r3, [pc, #472]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a75      	ldr	r2, [pc, #468]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80056c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	e01d      	b.n	8005708 <HAL_RCC_OscConfig+0xb0>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056d4:	d10c      	bne.n	80056f0 <HAL_RCC_OscConfig+0x98>
 80056d6:	4b70      	ldr	r3, [pc, #448]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a6f      	ldr	r2, [pc, #444]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80056dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	4b6d      	ldr	r3, [pc, #436]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6c      	ldr	r2, [pc, #432]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e00b      	b.n	8005708 <HAL_RCC_OscConfig+0xb0>
 80056f0:	4b69      	ldr	r3, [pc, #420]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a68      	ldr	r2, [pc, #416]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80056f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	4b66      	ldr	r3, [pc, #408]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a65      	ldr	r2, [pc, #404]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 8005702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d013      	beq.n	8005738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005710:	f7fd fc12 	bl	8002f38 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005718:	f7fd fc0e 	bl	8002f38 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	; 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e207      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	4b5b      	ldr	r3, [pc, #364]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0xc0>
 8005736:	e014      	b.n	8005762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fd fbfe 	bl	8002f38 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005740:	f7fd fbfa 	bl	8002f38 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b64      	cmp	r3, #100	; 0x64
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e1f3      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005752:	4b51      	ldr	r3, [pc, #324]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0xe8>
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d063      	beq.n	8005836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800576e:	4b4a      	ldr	r3, [pc, #296]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 030c 	and.w	r3, r3, #12
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800577a:	4b47      	ldr	r3, [pc, #284]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005782:	2b08      	cmp	r3, #8
 8005784:	d11c      	bne.n	80057c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005786:	4b44      	ldr	r3, [pc, #272]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d116      	bne.n	80057c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005792:	4b41      	ldr	r3, [pc, #260]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_RCC_OscConfig+0x152>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d001      	beq.n	80057aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e1c7      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057aa:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4937      	ldr	r1, [pc, #220]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057be:	e03a      	b.n	8005836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d020      	beq.n	800580a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057c8:	4b34      	ldr	r3, [pc, #208]	; (800589c <HAL_RCC_OscConfig+0x244>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ce:	f7fd fbb3 	bl	8002f38 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057d6:	f7fd fbaf 	bl	8002f38 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e1a8      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e8:	4b2b      	ldr	r3, [pc, #172]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f4:	4b28      	ldr	r3, [pc, #160]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4925      	ldr	r1, [pc, #148]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 8005804:	4313      	orrs	r3, r2
 8005806:	600b      	str	r3, [r1, #0]
 8005808:	e015      	b.n	8005836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800580a:	4b24      	ldr	r3, [pc, #144]	; (800589c <HAL_RCC_OscConfig+0x244>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005810:	f7fd fb92 	bl	8002f38 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005818:	f7fd fb8e 	bl	8002f38 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e187      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800582a:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d036      	beq.n	80058b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800584a:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <HAL_RCC_OscConfig+0x248>)
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005850:	f7fd fb72 	bl	8002f38 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005858:	f7fd fb6e 	bl	8002f38 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e167      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586a:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCC_OscConfig+0x240>)
 800586c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCC_OscConfig+0x200>
 8005876:	e01b      	b.n	80058b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005878:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <HAL_RCC_OscConfig+0x248>)
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800587e:	f7fd fb5b 	bl	8002f38 <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005884:	e00e      	b.n	80058a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005886:	f7fd fb57 	bl	8002f38 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d907      	bls.n	80058a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e150      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
 8005898:	40023800 	.word	0x40023800
 800589c:	42470000 	.word	0x42470000
 80058a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a4:	4b88      	ldr	r3, [pc, #544]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1ea      	bne.n	8005886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 8097 	beq.w	80059ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058c2:	4b81      	ldr	r3, [pc, #516]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10f      	bne.n	80058ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ce:	2300      	movs	r3, #0
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	4b7d      	ldr	r3, [pc, #500]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	4a7c      	ldr	r2, [pc, #496]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058dc:	6413      	str	r3, [r2, #64]	; 0x40
 80058de:	4b7a      	ldr	r3, [pc, #488]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ea:	2301      	movs	r3, #1
 80058ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ee:	4b77      	ldr	r3, [pc, #476]	; (8005acc <HAL_RCC_OscConfig+0x474>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d118      	bne.n	800592c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058fa:	4b74      	ldr	r3, [pc, #464]	; (8005acc <HAL_RCC_OscConfig+0x474>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a73      	ldr	r2, [pc, #460]	; (8005acc <HAL_RCC_OscConfig+0x474>)
 8005900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005906:	f7fd fb17 	bl	8002f38 <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800590e:	f7fd fb13 	bl	8002f38 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e10c      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005920:	4b6a      	ldr	r3, [pc, #424]	; (8005acc <HAL_RCC_OscConfig+0x474>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d106      	bne.n	8005942 <HAL_RCC_OscConfig+0x2ea>
 8005934:	4b64      	ldr	r3, [pc, #400]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	4a63      	ldr	r2, [pc, #396]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6713      	str	r3, [r2, #112]	; 0x70
 8005940:	e01c      	b.n	800597c <HAL_RCC_OscConfig+0x324>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b05      	cmp	r3, #5
 8005948:	d10c      	bne.n	8005964 <HAL_RCC_OscConfig+0x30c>
 800594a:	4b5f      	ldr	r3, [pc, #380]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594e:	4a5e      	ldr	r2, [pc, #376]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005950:	f043 0304 	orr.w	r3, r3, #4
 8005954:	6713      	str	r3, [r2, #112]	; 0x70
 8005956:	4b5c      	ldr	r3, [pc, #368]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	4a5b      	ldr	r2, [pc, #364]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	6713      	str	r3, [r2, #112]	; 0x70
 8005962:	e00b      	b.n	800597c <HAL_RCC_OscConfig+0x324>
 8005964:	4b58      	ldr	r3, [pc, #352]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	4a57      	ldr	r2, [pc, #348]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	6713      	str	r3, [r2, #112]	; 0x70
 8005970:	4b55      	ldr	r3, [pc, #340]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	4a54      	ldr	r2, [pc, #336]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005976:	f023 0304 	bic.w	r3, r3, #4
 800597a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d015      	beq.n	80059b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005984:	f7fd fad8 	bl	8002f38 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800598c:	f7fd fad4 	bl	8002f38 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	; 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e0cb      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a2:	4b49      	ldr	r3, [pc, #292]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0ee      	beq.n	800598c <HAL_RCC_OscConfig+0x334>
 80059ae:	e014      	b.n	80059da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059b0:	f7fd fac2 	bl	8002f38 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b6:	e00a      	b.n	80059ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b8:	f7fd fabe 	bl	8002f38 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0b5      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ce:	4b3e      	ldr	r3, [pc, #248]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1ee      	bne.n	80059b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d105      	bne.n	80059ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e0:	4b39      	ldr	r3, [pc, #228]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	4a38      	ldr	r2, [pc, #224]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a1 	beq.w	8005b38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059f6:	4b34      	ldr	r3, [pc, #208]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d05c      	beq.n	8005abc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d141      	bne.n	8005a8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a0a:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <HAL_RCC_OscConfig+0x478>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fd fa92 	bl	8002f38 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fd fa8e 	bl	8002f38 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e087      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2a:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69da      	ldr	r2, [r3, #28]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	019b      	lsls	r3, r3, #6
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	041b      	lsls	r3, r3, #16
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	061b      	lsls	r3, r3, #24
 8005a5a:	491b      	ldr	r1, [pc, #108]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a60:	4b1b      	ldr	r3, [pc, #108]	; (8005ad0 <HAL_RCC_OscConfig+0x478>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a66:	f7fd fa67 	bl	8002f38 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fd fa63 	bl	8002f38 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e05c      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a80:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f0      	beq.n	8005a6e <HAL_RCC_OscConfig+0x416>
 8005a8c:	e054      	b.n	8005b38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8e:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <HAL_RCC_OscConfig+0x478>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a94:	f7fd fa50 	bl	8002f38 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a9c:	f7fd fa4c 	bl	8002f38 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e045      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aae:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f0      	bne.n	8005a9c <HAL_RCC_OscConfig+0x444>
 8005aba:	e03d      	b.n	8005b38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d107      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e038      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40007000 	.word	0x40007000
 8005ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ad4:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <HAL_RCC_OscConfig+0x4ec>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d028      	beq.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d121      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d11a      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b04:	4013      	ands	r3, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d111      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d107      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d001      	beq.n	8005b38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800

08005b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0cc      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b5c:	4b68      	ldr	r3, [pc, #416]	; (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d90c      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6a:	4b65      	ldr	r3, [pc, #404]	; (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b63      	ldr	r3, [pc, #396]	; (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0b8      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b9c:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a58      	ldr	r2, [pc, #352]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb4:	4b53      	ldr	r3, [pc, #332]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4a52      	ldr	r2, [pc, #328]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc0:	4b50      	ldr	r3, [pc, #320]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	494d      	ldr	r1, [pc, #308]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d044      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be6:	4b47      	ldr	r3, [pc, #284]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d119      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e07f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d003      	beq.n	8005c06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d107      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c06:	4b3f      	ldr	r3, [pc, #252]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e06f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c16:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e067      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c26:	4b37      	ldr	r3, [pc, #220]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f023 0203 	bic.w	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4934      	ldr	r1, [pc, #208]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c38:	f7fd f97e 	bl	8002f38 <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3e:	e00a      	b.n	8005c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c40:	f7fd f97a 	bl	8002f38 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e04f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c56:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 020c 	and.w	r2, r3, #12
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d1eb      	bne.n	8005c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c68:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d20c      	bcs.n	8005c90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c76:	4b22      	ldr	r3, [pc, #136]	; (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b20      	ldr	r3, [pc, #128]	; (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e032      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c9c:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4916      	ldr	r1, [pc, #88]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cba:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	490e      	ldr	r1, [pc, #56]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cce:	f000 f821 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	490a      	ldr	r1, [pc, #40]	; (8005d08 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce0:	5ccb      	ldrb	r3, [r1, r3]
 8005ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce6:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fd f8de 	bl	8002eb0 <HAL_InitTick>

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023c00 	.word	0x40023c00
 8005d04:	40023800 	.word	0x40023800
 8005d08:	08011d64 	.word	0x08011d64
 8005d0c:	20000004 	.word	0x20000004
 8005d10:	20000008 	.word	0x20000008

08005d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d18:	b094      	sub	sp, #80	; 0x50
 8005d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d20:	2300      	movs	r3, #0
 8005d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d24:	2300      	movs	r3, #0
 8005d26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d2c:	4b79      	ldr	r3, [pc, #484]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 030c 	and.w	r3, r3, #12
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d00d      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x40>
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	f200 80e1 	bhi.w	8005f00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_RCC_GetSysClockFreq+0x34>
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d003      	beq.n	8005d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d46:	e0db      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d48:	4b73      	ldr	r3, [pc, #460]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d4c:	e0db      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d4e:	4b73      	ldr	r3, [pc, #460]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x208>)
 8005d50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d52:	e0d8      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d54:	4b6f      	ldr	r3, [pc, #444]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d5e:	4b6d      	ldr	r3, [pc, #436]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d063      	beq.n	8005e32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d6a:	4b6a      	ldr	r3, [pc, #424]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	099b      	lsrs	r3, r3, #6
 8005d70:	2200      	movs	r2, #0
 8005d72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d7e:	2300      	movs	r3, #0
 8005d80:	637b      	str	r3, [r7, #52]	; 0x34
 8005d82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d86:	4622      	mov	r2, r4
 8005d88:	462b      	mov	r3, r5
 8005d8a:	f04f 0000 	mov.w	r0, #0
 8005d8e:	f04f 0100 	mov.w	r1, #0
 8005d92:	0159      	lsls	r1, r3, #5
 8005d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d98:	0150      	lsls	r0, r2, #5
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4621      	mov	r1, r4
 8005da0:	1a51      	subs	r1, r2, r1
 8005da2:	6139      	str	r1, [r7, #16]
 8005da4:	4629      	mov	r1, r5
 8005da6:	eb63 0301 	sbc.w	r3, r3, r1
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005db8:	4659      	mov	r1, fp
 8005dba:	018b      	lsls	r3, r1, #6
 8005dbc:	4651      	mov	r1, sl
 8005dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dc2:	4651      	mov	r1, sl
 8005dc4:	018a      	lsls	r2, r1, #6
 8005dc6:	4651      	mov	r1, sl
 8005dc8:	ebb2 0801 	subs.w	r8, r2, r1
 8005dcc:	4659      	mov	r1, fp
 8005dce:	eb63 0901 	sbc.w	r9, r3, r1
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005de6:	4690      	mov	r8, r2
 8005de8:	4699      	mov	r9, r3
 8005dea:	4623      	mov	r3, r4
 8005dec:	eb18 0303 	adds.w	r3, r8, r3
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	462b      	mov	r3, r5
 8005df4:	eb49 0303 	adc.w	r3, r9, r3
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e06:	4629      	mov	r1, r5
 8005e08:	024b      	lsls	r3, r1, #9
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e10:	4621      	mov	r1, r4
 8005e12:	024a      	lsls	r2, r1, #9
 8005e14:	4610      	mov	r0, r2
 8005e16:	4619      	mov	r1, r3
 8005e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e24:	f7fa ff38 	bl	8000c98 <__aeabi_uldivmod>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e30:	e058      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e32:	4b38      	ldr	r3, [pc, #224]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	099b      	lsrs	r3, r3, #6
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	2300      	movs	r3, #0
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
 8005e48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	464b      	mov	r3, r9
 8005e50:	f04f 0000 	mov.w	r0, #0
 8005e54:	f04f 0100 	mov.w	r1, #0
 8005e58:	0159      	lsls	r1, r3, #5
 8005e5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e5e:	0150      	lsls	r0, r2, #5
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4641      	mov	r1, r8
 8005e66:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e84:	ebb2 040a 	subs.w	r4, r2, sl
 8005e88:	eb63 050b 	sbc.w	r5, r3, fp
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	00eb      	lsls	r3, r5, #3
 8005e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e9a:	00e2      	lsls	r2, r4, #3
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	461d      	mov	r5, r3
 8005ea0:	4643      	mov	r3, r8
 8005ea2:	18e3      	adds	r3, r4, r3
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	eb45 0303 	adc.w	r3, r5, r3
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eba:	4629      	mov	r1, r5
 8005ebc:	028b      	lsls	r3, r1, #10
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	028a      	lsls	r2, r1, #10
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ece:	2200      	movs	r2, #0
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	61fa      	str	r2, [r7, #28]
 8005ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed8:	f7fa fede 	bl	8000c98 <__aeabi_uldivmod>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	0c1b      	lsrs	r3, r3, #16
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ef4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005efe:	e002      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f00:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3750      	adds	r7, #80	; 0x50
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800
 8005f18:	00f42400 	.word	0x00f42400
 8005f1c:	007a1200 	.word	0x007a1200

08005f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f24:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000004 	.word	0x20000004

08005f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f3c:	f7ff fff0 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0a9b      	lsrs	r3, r3, #10
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4903      	ldr	r1, [pc, #12]	; (8005f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	08011d74 	.word	0x08011d74

08005f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f64:	f7ff ffdc 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	0b5b      	lsrs	r3, r3, #13
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	4903      	ldr	r1, [pc, #12]	; (8005f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f76:	5ccb      	ldrb	r3, [r1, r3]
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40023800 	.word	0x40023800
 8005f84:	08011d74 	.word	0x08011d74

08005f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e041      	b.n	800601e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fc fce2 	bl	8002978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f000 fac0 	bl	800654c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e041      	b.n	80060bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d106      	bne.n	8006052 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f839 	bl	80060c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2202      	movs	r2, #2
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3304      	adds	r3, #4
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f000 fa71 	bl	800654c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d109      	bne.n	80060fc <HAL_TIM_PWM_Start+0x24>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	bf14      	ite	ne
 80060f4:	2301      	movne	r3, #1
 80060f6:	2300      	moveq	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	e022      	b.n	8006142 <HAL_TIM_PWM_Start+0x6a>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d109      	bne.n	8006116 <HAL_TIM_PWM_Start+0x3e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b01      	cmp	r3, #1
 800610c:	bf14      	ite	ne
 800610e:	2301      	movne	r3, #1
 8006110:	2300      	moveq	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	e015      	b.n	8006142 <HAL_TIM_PWM_Start+0x6a>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b08      	cmp	r3, #8
 800611a:	d109      	bne.n	8006130 <HAL_TIM_PWM_Start+0x58>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	e008      	b.n	8006142 <HAL_TIM_PWM_Start+0x6a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	bf14      	ite	ne
 800613c:	2301      	movne	r3, #1
 800613e:	2300      	moveq	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e068      	b.n	800621c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <HAL_TIM_PWM_Start+0x82>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006158:	e013      	b.n	8006182 <HAL_TIM_PWM_Start+0xaa>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b04      	cmp	r3, #4
 800615e:	d104      	bne.n	800616a <HAL_TIM_PWM_Start+0x92>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006168:	e00b      	b.n	8006182 <HAL_TIM_PWM_Start+0xaa>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d104      	bne.n	800617a <HAL_TIM_PWM_Start+0xa2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006178:	e003      	b.n	8006182 <HAL_TIM_PWM_Start+0xaa>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2201      	movs	r2, #1
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fc84 	bl	8006a98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a23      	ldr	r2, [pc, #140]	; (8006224 <HAL_TIM_PWM_Start+0x14c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d107      	bne.n	80061aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <HAL_TIM_PWM_Start+0x14c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d018      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x10e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061bc:	d013      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x10e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a19      	ldr	r2, [pc, #100]	; (8006228 <HAL_TIM_PWM_Start+0x150>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00e      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x10e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a17      	ldr	r2, [pc, #92]	; (800622c <HAL_TIM_PWM_Start+0x154>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d009      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x10e>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a16      	ldr	r2, [pc, #88]	; (8006230 <HAL_TIM_PWM_Start+0x158>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d004      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x10e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a14      	ldr	r2, [pc, #80]	; (8006234 <HAL_TIM_PWM_Start+0x15c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d111      	bne.n	800620a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b06      	cmp	r3, #6
 80061f6:	d010      	beq.n	800621a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006208:	e007      	b.n	800621a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0201 	orr.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40010000 	.word	0x40010000
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40014000 	.word	0x40014000

08006238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006252:	2302      	movs	r3, #2
 8006254:	e0ae      	b.n	80063b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b0c      	cmp	r3, #12
 8006262:	f200 809f 	bhi.w	80063a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006266:	a201      	add	r2, pc, #4	; (adr r2, 800626c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080063a5 	.word	0x080063a5
 8006274:	080063a5 	.word	0x080063a5
 8006278:	080063a5 	.word	0x080063a5
 800627c:	080062e1 	.word	0x080062e1
 8006280:	080063a5 	.word	0x080063a5
 8006284:	080063a5 	.word	0x080063a5
 8006288:	080063a5 	.word	0x080063a5
 800628c:	08006323 	.word	0x08006323
 8006290:	080063a5 	.word	0x080063a5
 8006294:	080063a5 	.word	0x080063a5
 8006298:	080063a5 	.word	0x080063a5
 800629c:	08006363 	.word	0x08006363
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68b9      	ldr	r1, [r7, #8]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 f9d0 	bl	800664c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0208 	orr.w	r2, r2, #8
 80062ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0204 	bic.w	r2, r2, #4
 80062ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6999      	ldr	r1, [r3, #24]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	691a      	ldr	r2, [r3, #16]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	619a      	str	r2, [r3, #24]
      break;
 80062de:	e064      	b.n	80063aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fa16 	bl	8006718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800630a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6999      	ldr	r1, [r3, #24]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	021a      	lsls	r2, r3, #8
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	619a      	str	r2, [r3, #24]
      break;
 8006320:	e043      	b.n	80063aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fa61 	bl	80067f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0208 	orr.w	r2, r2, #8
 800633c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0204 	bic.w	r2, r2, #4
 800634c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69d9      	ldr	r1, [r3, #28]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	61da      	str	r2, [r3, #28]
      break;
 8006360:	e023      	b.n	80063aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	4618      	mov	r0, r3
 800636a:	f000 faab 	bl	80068c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69da      	ldr	r2, [r3, #28]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800637c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69d9      	ldr	r1, [r3, #28]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	021a      	lsls	r2, r3, #8
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	61da      	str	r2, [r3, #28]
      break;
 80063a2:	e002      	b.n	80063aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	75fb      	strb	r3, [r7, #23]
      break;
 80063a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_TIM_ConfigClockSource+0x1c>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e0b4      	b.n	8006542 <HAL_TIM_ConfigClockSource+0x186>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006410:	d03e      	beq.n	8006490 <HAL_TIM_ConfigClockSource+0xd4>
 8006412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006416:	f200 8087 	bhi.w	8006528 <HAL_TIM_ConfigClockSource+0x16c>
 800641a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641e:	f000 8086 	beq.w	800652e <HAL_TIM_ConfigClockSource+0x172>
 8006422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006426:	d87f      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x16c>
 8006428:	2b70      	cmp	r3, #112	; 0x70
 800642a:	d01a      	beq.n	8006462 <HAL_TIM_ConfigClockSource+0xa6>
 800642c:	2b70      	cmp	r3, #112	; 0x70
 800642e:	d87b      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x16c>
 8006430:	2b60      	cmp	r3, #96	; 0x60
 8006432:	d050      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x11a>
 8006434:	2b60      	cmp	r3, #96	; 0x60
 8006436:	d877      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x16c>
 8006438:	2b50      	cmp	r3, #80	; 0x50
 800643a:	d03c      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0xfa>
 800643c:	2b50      	cmp	r3, #80	; 0x50
 800643e:	d873      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x16c>
 8006440:	2b40      	cmp	r3, #64	; 0x40
 8006442:	d058      	beq.n	80064f6 <HAL_TIM_ConfigClockSource+0x13a>
 8006444:	2b40      	cmp	r3, #64	; 0x40
 8006446:	d86f      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x16c>
 8006448:	2b30      	cmp	r3, #48	; 0x30
 800644a:	d064      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x15a>
 800644c:	2b30      	cmp	r3, #48	; 0x30
 800644e:	d86b      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x16c>
 8006450:	2b20      	cmp	r3, #32
 8006452:	d060      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x15a>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d867      	bhi.n	8006528 <HAL_TIM_ConfigClockSource+0x16c>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d05c      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x15a>
 800645c:	2b10      	cmp	r3, #16
 800645e:	d05a      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x15a>
 8006460:	e062      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	6899      	ldr	r1, [r3, #8]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f000 faf1 	bl	8006a58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	609a      	str	r2, [r3, #8]
      break;
 800648e:	e04f      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	6899      	ldr	r1, [r3, #8]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f000 fada 	bl	8006a58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064b2:	609a      	str	r2, [r3, #8]
      break;
 80064b4:	e03c      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6859      	ldr	r1, [r3, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	461a      	mov	r2, r3
 80064c4:	f000 fa4e 	bl	8006964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2150      	movs	r1, #80	; 0x50
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 faa7 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 80064d4:	e02c      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6859      	ldr	r1, [r3, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f000 fa6d 	bl	80069c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2160      	movs	r1, #96	; 0x60
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fa97 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 80064f4:	e01c      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6859      	ldr	r1, [r3, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	461a      	mov	r2, r3
 8006504:	f000 fa2e 	bl	8006964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2140      	movs	r1, #64	; 0x40
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fa87 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 8006514:	e00c      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f000 fa7e 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 8006526:	e003      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
      break;
 800652c:	e000      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800652e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a34      	ldr	r2, [pc, #208]	; (8006630 <TIM_Base_SetConfig+0xe4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00f      	beq.n	8006584 <TIM_Base_SetConfig+0x38>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656a:	d00b      	beq.n	8006584 <TIM_Base_SetConfig+0x38>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a31      	ldr	r2, [pc, #196]	; (8006634 <TIM_Base_SetConfig+0xe8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d007      	beq.n	8006584 <TIM_Base_SetConfig+0x38>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a30      	ldr	r2, [pc, #192]	; (8006638 <TIM_Base_SetConfig+0xec>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d003      	beq.n	8006584 <TIM_Base_SetConfig+0x38>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a2f      	ldr	r2, [pc, #188]	; (800663c <TIM_Base_SetConfig+0xf0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d108      	bne.n	8006596 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a25      	ldr	r2, [pc, #148]	; (8006630 <TIM_Base_SetConfig+0xe4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d01b      	beq.n	80065d6 <TIM_Base_SetConfig+0x8a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a4:	d017      	beq.n	80065d6 <TIM_Base_SetConfig+0x8a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a22      	ldr	r2, [pc, #136]	; (8006634 <TIM_Base_SetConfig+0xe8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <TIM_Base_SetConfig+0x8a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a21      	ldr	r2, [pc, #132]	; (8006638 <TIM_Base_SetConfig+0xec>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00f      	beq.n	80065d6 <TIM_Base_SetConfig+0x8a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a20      	ldr	r2, [pc, #128]	; (800663c <TIM_Base_SetConfig+0xf0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00b      	beq.n	80065d6 <TIM_Base_SetConfig+0x8a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <TIM_Base_SetConfig+0xf4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d007      	beq.n	80065d6 <TIM_Base_SetConfig+0x8a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1e      	ldr	r2, [pc, #120]	; (8006644 <TIM_Base_SetConfig+0xf8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_Base_SetConfig+0x8a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <TIM_Base_SetConfig+0xfc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d108      	bne.n	80065e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a08      	ldr	r2, [pc, #32]	; (8006630 <TIM_Base_SetConfig+0xe4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d103      	bne.n	800661c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	615a      	str	r2, [r3, #20]
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40010000 	.word	0x40010000
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40014000 	.word	0x40014000
 8006644:	40014400 	.word	0x40014400
 8006648:	40014800 	.word	0x40014800

0800664c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0303 	bic.w	r3, r3, #3
 8006682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f023 0302 	bic.w	r3, r3, #2
 8006694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1c      	ldr	r2, [pc, #112]	; (8006714 <TIM_OC1_SetConfig+0xc8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d10c      	bne.n	80066c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0308 	bic.w	r3, r3, #8
 80066ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 0304 	bic.w	r3, r3, #4
 80066c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a13      	ldr	r2, [pc, #76]	; (8006714 <TIM_OC1_SetConfig+0xc8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d111      	bne.n	80066ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	621a      	str	r2, [r3, #32]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	40010000 	.word	0x40010000

08006718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f023 0210 	bic.w	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0320 	bic.w	r3, r3, #32
 8006762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a1e      	ldr	r2, [pc, #120]	; (80067ec <TIM_OC2_SetConfig+0xd4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d10d      	bne.n	8006794 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800677e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006792:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a15      	ldr	r2, [pc, #84]	; (80067ec <TIM_OC2_SetConfig+0xd4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d113      	bne.n	80067c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40010000 	.word	0x40010000

080067f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0303 	bic.w	r3, r3, #3
 8006826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a1d      	ldr	r2, [pc, #116]	; (80068c0 <TIM_OC3_SetConfig+0xd0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d10d      	bne.n	800686a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	021b      	lsls	r3, r3, #8
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a14      	ldr	r2, [pc, #80]	; (80068c0 <TIM_OC3_SetConfig+0xd0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d113      	bne.n	800689a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	621a      	str	r2, [r3, #32]
}
 80068b4:	bf00      	nop
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	40010000 	.word	0x40010000

080068c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800690e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	031b      	lsls	r3, r3, #12
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a10      	ldr	r2, [pc, #64]	; (8006960 <TIM_OC4_SetConfig+0x9c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d109      	bne.n	8006938 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	019b      	lsls	r3, r3, #6
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	621a      	str	r2, [r3, #32]
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40010000 	.word	0x40010000

08006964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f023 0201 	bic.w	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800698e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f023 030a 	bic.w	r3, r3, #10
 80069a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b087      	sub	sp, #28
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f023 0210 	bic.w	r2, r3, #16
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	031b      	lsls	r3, r3, #12
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f043 0307 	orr.w	r3, r3, #7
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	609a      	str	r2, [r3, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	021a      	lsls	r2, r3, #8
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	609a      	str	r2, [r3, #8]
}
 8006a8c:	bf00      	nop
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f003 031f 	and.w	r3, r3, #31
 8006aaa:	2201      	movs	r2, #1
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1a      	ldr	r2, [r3, #32]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	401a      	ands	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a1a      	ldr	r2, [r3, #32]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 031f 	and.w	r3, r3, #31
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
	...

08006ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e050      	b.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1c      	ldr	r2, [pc, #112]	; (8006bac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d018      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b48:	d013      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a18      	ldr	r2, [pc, #96]	; (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00e      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a16      	ldr	r2, [pc, #88]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d009      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d004      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a13      	ldr	r2, [pc, #76]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d10c      	bne.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40014000 	.word	0x40014000

08006bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e03f      	b.n	8006c52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fb ff7a 	bl	8002ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2224      	movs	r2, #36	; 0x24
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f829 	bl	8006c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	695a      	ldr	r2, [r3, #20]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c60:	b0c0      	sub	sp, #256	; 0x100
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	68d9      	ldr	r1, [r3, #12]
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	ea40 0301 	orr.w	r3, r0, r1
 8006c84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cb4:	f021 010c 	bic.w	r1, r1, #12
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd6:	6999      	ldr	r1, [r3, #24]
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	ea40 0301 	orr.w	r3, r0, r1
 8006ce2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4b8f      	ldr	r3, [pc, #572]	; (8006f28 <UART_SetConfig+0x2cc>)
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d005      	beq.n	8006cfc <UART_SetConfig+0xa0>
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	4b8d      	ldr	r3, [pc, #564]	; (8006f2c <UART_SetConfig+0x2d0>)
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d104      	bne.n	8006d06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cfc:	f7ff f930 	bl	8005f60 <HAL_RCC_GetPCLK2Freq>
 8006d00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d04:	e003      	b.n	8006d0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d06:	f7ff f917 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8006d0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d18:	f040 810c 	bne.w	8006f34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d2e:	4622      	mov	r2, r4
 8006d30:	462b      	mov	r3, r5
 8006d32:	1891      	adds	r1, r2, r2
 8006d34:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d36:	415b      	adcs	r3, r3
 8006d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d3e:	4621      	mov	r1, r4
 8006d40:	eb12 0801 	adds.w	r8, r2, r1
 8006d44:	4629      	mov	r1, r5
 8006d46:	eb43 0901 	adc.w	r9, r3, r1
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d5e:	4690      	mov	r8, r2
 8006d60:	4699      	mov	r9, r3
 8006d62:	4623      	mov	r3, r4
 8006d64:	eb18 0303 	adds.w	r3, r8, r3
 8006d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	eb49 0303 	adc.w	r3, r9, r3
 8006d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	18db      	adds	r3, r3, r3
 8006d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d90:	4613      	mov	r3, r2
 8006d92:	eb42 0303 	adc.w	r3, r2, r3
 8006d96:	657b      	str	r3, [r7, #84]	; 0x54
 8006d98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006da0:	f7f9 ff7a 	bl	8000c98 <__aeabi_uldivmod>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4b61      	ldr	r3, [pc, #388]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006daa:	fba3 2302 	umull	r2, r3, r3, r2
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	011c      	lsls	r4, r3, #4
 8006db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006dc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006dc4:	4642      	mov	r2, r8
 8006dc6:	464b      	mov	r3, r9
 8006dc8:	1891      	adds	r1, r2, r2
 8006dca:	64b9      	str	r1, [r7, #72]	; 0x48
 8006dcc:	415b      	adcs	r3, r3
 8006dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	eb12 0a01 	adds.w	sl, r2, r1
 8006dda:	4649      	mov	r1, r9
 8006ddc:	eb43 0b01 	adc.w	fp, r3, r1
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006df4:	4692      	mov	sl, r2
 8006df6:	469b      	mov	fp, r3
 8006df8:	4643      	mov	r3, r8
 8006dfa:	eb1a 0303 	adds.w	r3, sl, r3
 8006dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e02:	464b      	mov	r3, r9
 8006e04:	eb4b 0303 	adc.w	r3, fp, r3
 8006e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e20:	460b      	mov	r3, r1
 8006e22:	18db      	adds	r3, r3, r3
 8006e24:	643b      	str	r3, [r7, #64]	; 0x40
 8006e26:	4613      	mov	r3, r2
 8006e28:	eb42 0303 	adc.w	r3, r2, r3
 8006e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e36:	f7f9 ff2f 	bl	8000c98 <__aeabi_uldivmod>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4b3b      	ldr	r3, [pc, #236]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006e42:	fba3 2301 	umull	r2, r3, r3, r1
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	2264      	movs	r2, #100	; 0x64
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	1acb      	subs	r3, r1, r3
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e56:	4b36      	ldr	r3, [pc, #216]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006e58:	fba3 2302 	umull	r2, r3, r3, r2
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e64:	441c      	add	r4, r3
 8006e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e78:	4642      	mov	r2, r8
 8006e7a:	464b      	mov	r3, r9
 8006e7c:	1891      	adds	r1, r2, r2
 8006e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e80:	415b      	adcs	r3, r3
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e88:	4641      	mov	r1, r8
 8006e8a:	1851      	adds	r1, r2, r1
 8006e8c:	6339      	str	r1, [r7, #48]	; 0x30
 8006e8e:	4649      	mov	r1, r9
 8006e90:	414b      	adcs	r3, r1
 8006e92:	637b      	str	r3, [r7, #52]	; 0x34
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	00cb      	lsls	r3, r1, #3
 8006ea4:	4651      	mov	r1, sl
 8006ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eaa:	4651      	mov	r1, sl
 8006eac:	00ca      	lsls	r2, r1, #3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	189b      	adds	r3, r3, r2
 8006eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	460a      	mov	r2, r1
 8006ec0:	eb42 0303 	adc.w	r3, r2, r3
 8006ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006edc:	460b      	mov	r3, r1
 8006ede:	18db      	adds	r3, r3, r3
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	eb42 0303 	adc.w	r3, r2, r3
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006eee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ef2:	f7f9 fed1 	bl	8000c98 <__aeabi_uldivmod>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006efc:	fba3 1302 	umull	r1, r3, r3, r2
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	2164      	movs	r1, #100	; 0x64
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	3332      	adds	r3, #50	; 0x32
 8006f0e:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <UART_SetConfig+0x2d4>)
 8006f10:	fba2 2303 	umull	r2, r3, r2, r3
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	f003 0207 	and.w	r2, r3, #7
 8006f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4422      	add	r2, r4
 8006f22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f24:	e105      	b.n	8007132 <UART_SetConfig+0x4d6>
 8006f26:	bf00      	nop
 8006f28:	40011000 	.word	0x40011000
 8006f2c:	40011400 	.word	0x40011400
 8006f30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f46:	4642      	mov	r2, r8
 8006f48:	464b      	mov	r3, r9
 8006f4a:	1891      	adds	r1, r2, r2
 8006f4c:	6239      	str	r1, [r7, #32]
 8006f4e:	415b      	adcs	r3, r3
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
 8006f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f56:	4641      	mov	r1, r8
 8006f58:	1854      	adds	r4, r2, r1
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	eb43 0501 	adc.w	r5, r3, r1
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	00eb      	lsls	r3, r5, #3
 8006f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f6e:	00e2      	lsls	r2, r4, #3
 8006f70:	4614      	mov	r4, r2
 8006f72:	461d      	mov	r5, r3
 8006f74:	4643      	mov	r3, r8
 8006f76:	18e3      	adds	r3, r4, r3
 8006f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	eb45 0303 	adc.w	r3, r5, r3
 8006f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	008b      	lsls	r3, r1, #2
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fac:	4621      	mov	r1, r4
 8006fae:	008a      	lsls	r2, r1, #2
 8006fb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006fb4:	f7f9 fe70 	bl	8000c98 <__aeabi_uldivmod>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4b60      	ldr	r3, [pc, #384]	; (8007140 <UART_SetConfig+0x4e4>)
 8006fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	011c      	lsls	r4, r3, #4
 8006fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fd8:	4642      	mov	r2, r8
 8006fda:	464b      	mov	r3, r9
 8006fdc:	1891      	adds	r1, r2, r2
 8006fde:	61b9      	str	r1, [r7, #24]
 8006fe0:	415b      	adcs	r3, r3
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fe8:	4641      	mov	r1, r8
 8006fea:	1851      	adds	r1, r2, r1
 8006fec:	6139      	str	r1, [r7, #16]
 8006fee:	4649      	mov	r1, r9
 8006ff0:	414b      	adcs	r3, r1
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007000:	4659      	mov	r1, fp
 8007002:	00cb      	lsls	r3, r1, #3
 8007004:	4651      	mov	r1, sl
 8007006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800700a:	4651      	mov	r1, sl
 800700c:	00ca      	lsls	r2, r1, #3
 800700e:	4610      	mov	r0, r2
 8007010:	4619      	mov	r1, r3
 8007012:	4603      	mov	r3, r0
 8007014:	4642      	mov	r2, r8
 8007016:	189b      	adds	r3, r3, r2
 8007018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800701c:	464b      	mov	r3, r9
 800701e:	460a      	mov	r2, r1
 8007020:	eb42 0303 	adc.w	r3, r2, r3
 8007024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	67bb      	str	r3, [r7, #120]	; 0x78
 8007032:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007040:	4649      	mov	r1, r9
 8007042:	008b      	lsls	r3, r1, #2
 8007044:	4641      	mov	r1, r8
 8007046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800704a:	4641      	mov	r1, r8
 800704c:	008a      	lsls	r2, r1, #2
 800704e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007052:	f7f9 fe21 	bl	8000c98 <__aeabi_uldivmod>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4b39      	ldr	r3, [pc, #228]	; (8007140 <UART_SetConfig+0x4e4>)
 800705c:	fba3 1302 	umull	r1, r3, r3, r2
 8007060:	095b      	lsrs	r3, r3, #5
 8007062:	2164      	movs	r1, #100	; 0x64
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	3332      	adds	r3, #50	; 0x32
 800706e:	4a34      	ldr	r2, [pc, #208]	; (8007140 <UART_SetConfig+0x4e4>)
 8007070:	fba2 2303 	umull	r2, r3, r2, r3
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800707a:	441c      	add	r4, r3
 800707c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007080:	2200      	movs	r2, #0
 8007082:	673b      	str	r3, [r7, #112]	; 0x70
 8007084:	677a      	str	r2, [r7, #116]	; 0x74
 8007086:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800708a:	4642      	mov	r2, r8
 800708c:	464b      	mov	r3, r9
 800708e:	1891      	adds	r1, r2, r2
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	415b      	adcs	r3, r3
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800709a:	4641      	mov	r1, r8
 800709c:	1851      	adds	r1, r2, r1
 800709e:	6039      	str	r1, [r7, #0]
 80070a0:	4649      	mov	r1, r9
 80070a2:	414b      	adcs	r3, r1
 80070a4:	607b      	str	r3, [r7, #4]
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070b2:	4659      	mov	r1, fp
 80070b4:	00cb      	lsls	r3, r1, #3
 80070b6:	4651      	mov	r1, sl
 80070b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070bc:	4651      	mov	r1, sl
 80070be:	00ca      	lsls	r2, r1, #3
 80070c0:	4610      	mov	r0, r2
 80070c2:	4619      	mov	r1, r3
 80070c4:	4603      	mov	r3, r0
 80070c6:	4642      	mov	r2, r8
 80070c8:	189b      	adds	r3, r3, r2
 80070ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80070cc:	464b      	mov	r3, r9
 80070ce:	460a      	mov	r2, r1
 80070d0:	eb42 0303 	adc.w	r3, r2, r3
 80070d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	663b      	str	r3, [r7, #96]	; 0x60
 80070e0:	667a      	str	r2, [r7, #100]	; 0x64
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070ee:	4649      	mov	r1, r9
 80070f0:	008b      	lsls	r3, r1, #2
 80070f2:	4641      	mov	r1, r8
 80070f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070f8:	4641      	mov	r1, r8
 80070fa:	008a      	lsls	r2, r1, #2
 80070fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007100:	f7f9 fdca 	bl	8000c98 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <UART_SetConfig+0x4e4>)
 800710a:	fba3 1302 	umull	r1, r3, r3, r2
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	2164      	movs	r1, #100	; 0x64
 8007112:	fb01 f303 	mul.w	r3, r1, r3
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	011b      	lsls	r3, r3, #4
 800711a:	3332      	adds	r3, #50	; 0x32
 800711c:	4a08      	ldr	r2, [pc, #32]	; (8007140 <UART_SetConfig+0x4e4>)
 800711e:	fba2 2303 	umull	r2, r3, r2, r3
 8007122:	095b      	lsrs	r3, r3, #5
 8007124:	f003 020f 	and.w	r2, r3, #15
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4422      	add	r2, r4
 8007130:	609a      	str	r2, [r3, #8]
}
 8007132:	bf00      	nop
 8007134:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007138:	46bd      	mov	sp, r7
 800713a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713e:	bf00      	nop
 8007140:	51eb851f 	.word	0x51eb851f

08007144 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fcca 	bl	8008aee <VL53L0X_get_offset_calibration_data_micro_meter>
 800715a:	4603      	mov	r3, r0
 800715c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800715e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	460b      	mov	r3, r1
 8007174:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	218a      	movs	r1, #138	; 0x8a
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f004 fec3 	bl	800bf10 <VL53L0X_WrByte>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800718e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800719c:	b5b0      	push	{r4, r5, r7, lr}
 800719e:	b096      	sub	sp, #88	; 0x58
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80071aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80071b2:	2200      	movs	r2, #0
 80071b4:	2188      	movs	r1, #136	; 0x88
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f004 feaa 	bl	800bf10 <VL53L0X_WrByte>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071d0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80071da:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a9e      	ldr	r2, [pc, #632]	; (800745c <VL53L0X_DataInit+0x2c0>)
 80071e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a9d      	ldr	r2, [pc, #628]	; (8007460 <VL53L0X_DataInit+0x2c4>)
 80071ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80071f4:	f107 0310 	add.w	r3, r7, #16
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fac2 	bl	8007784 <VL53L0X_GetDeviceParameters>
 8007200:	4603      	mov	r3, r0
 8007202:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007206:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800720a:	2b00      	cmp	r3, #0
 800720c:	d112      	bne.n	8007234 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800720e:	2300      	movs	r3, #0
 8007210:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007212:	2300      	movs	r3, #0
 8007214:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f103 0410 	add.w	r4, r3, #16
 800721c:	f107 0510 	add.w	r5, r7, #16
 8007220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800722a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800722c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2264      	movs	r2, #100	; 0x64
 8007238:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007242:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800724c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007256:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007262:	2201      	movs	r2, #1
 8007264:	2180      	movs	r1, #128	; 0x80
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f004 fe52 	bl	800bf10 <VL53L0X_WrByte>
 800726c:	4603      	mov	r3, r0
 800726e:	461a      	mov	r2, r3
 8007270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007274:	4313      	orrs	r3, r2
 8007276:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800727a:	2201      	movs	r2, #1
 800727c:	21ff      	movs	r1, #255	; 0xff
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f004 fe46 	bl	800bf10 <VL53L0X_WrByte>
 8007284:	4603      	mov	r3, r0
 8007286:	461a      	mov	r2, r3
 8007288:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800728c:	4313      	orrs	r3, r2
 800728e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007292:	2200      	movs	r2, #0
 8007294:	2100      	movs	r1, #0
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f004 fe3a 	bl	800bf10 <VL53L0X_WrByte>
 800729c:	4603      	mov	r3, r0
 800729e:	461a      	mov	r2, r3
 80072a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072a4:	4313      	orrs	r3, r2
 80072a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80072aa:	f107 030f 	add.w	r3, r7, #15
 80072ae:	461a      	mov	r2, r3
 80072b0:	2191      	movs	r1, #145	; 0x91
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f004 feae 	bl	800c014 <VL53L0X_RdByte>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072c0:	4313      	orrs	r3, r2
 80072c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80072c6:	7bfa      	ldrb	r2, [r7, #15]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80072ce:	2201      	movs	r2, #1
 80072d0:	2100      	movs	r1, #0
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f004 fe1c 	bl	800bf10 <VL53L0X_WrByte>
 80072d8:	4603      	mov	r3, r0
 80072da:	461a      	mov	r2, r3
 80072dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80072e6:	2200      	movs	r2, #0
 80072e8:	21ff      	movs	r1, #255	; 0xff
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f004 fe10 	bl	800bf10 <VL53L0X_WrByte>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072f8:	4313      	orrs	r3, r2
 80072fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80072fe:	2200      	movs	r2, #0
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f004 fe04 	bl	800bf10 <VL53L0X_WrByte>
 8007308:	4603      	mov	r3, r0
 800730a:	461a      	mov	r2, r3
 800730c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007310:	4313      	orrs	r3, r2
 8007312:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007316:	2300      	movs	r3, #0
 8007318:	653b      	str	r3, [r7, #80]	; 0x50
 800731a:	e014      	b.n	8007346 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800731c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007320:	2b00      	cmp	r3, #0
 8007322:	d114      	bne.n	800734e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007326:	b29b      	uxth	r3, r3
 8007328:	2201      	movs	r2, #1
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fd35 	bl	8007d9c <VL53L0X_SetLimitCheckEnable>
 8007332:	4603      	mov	r3, r0
 8007334:	461a      	mov	r2, r3
 8007336:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800733a:	4313      	orrs	r3, r2
 800733c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007342:	3301      	adds	r3, #1
 8007344:	653b      	str	r3, [r7, #80]	; 0x50
 8007346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007348:	2b05      	cmp	r3, #5
 800734a:	dde7      	ble.n	800731c <VL53L0X_DataInit+0x180>
 800734c:	e000      	b.n	8007350 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800734e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007350:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007354:	2b00      	cmp	r3, #0
 8007356:	d107      	bne.n	8007368 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007358:	2200      	movs	r2, #0
 800735a:	2102      	movs	r1, #2
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fd1d 	bl	8007d9c <VL53L0X_SetLimitCheckEnable>
 8007362:	4603      	mov	r3, r0
 8007364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007368:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800736c:	2b00      	cmp	r3, #0
 800736e:	d107      	bne.n	8007380 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007370:	2200      	movs	r2, #0
 8007372:	2103      	movs	r1, #3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fd11 	bl	8007d9c <VL53L0X_SetLimitCheckEnable>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007380:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007384:	2b00      	cmp	r3, #0
 8007386:	d107      	bne.n	8007398 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007388:	2200      	movs	r2, #0
 800738a:	2104      	movs	r1, #4
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fd05 	bl	8007d9c <VL53L0X_SetLimitCheckEnable>
 8007392:	4603      	mov	r3, r0
 8007394:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007398:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800739c:	2b00      	cmp	r3, #0
 800739e:	d107      	bne.n	80073b0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80073a0:	2200      	movs	r2, #0
 80073a2:	2105      	movs	r1, #5
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fcf9 	bl	8007d9c <VL53L0X_SetLimitCheckEnable>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80073b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d108      	bne.n	80073ca <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80073b8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80073bc:	2100      	movs	r1, #0
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fd9c 	bl	8007efc <VL53L0X_SetLimitCheckValue>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80073ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d108      	bne.n	80073e4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80073d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073d6:	2101      	movs	r1, #1
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fd8f 	bl	8007efc <VL53L0X_SetLimitCheckValue>
 80073de:	4603      	mov	r3, r0
 80073e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d108      	bne.n	80073fe <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80073ec:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80073f0:	2102      	movs	r1, #2
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fd82 	bl	8007efc <VL53L0X_SetLimitCheckValue>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007402:	2b00      	cmp	r3, #0
 8007404:	d107      	bne.n	8007416 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007406:	2200      	movs	r2, #0
 8007408:	2103      	movs	r1, #3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fd76 	bl	8007efc <VL53L0X_SetLimitCheckValue>
 8007410:	4603      	mov	r3, r0
 8007412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007416:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10f      	bne.n	800743e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	22ff      	movs	r2, #255	; 0xff
 8007422:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007426:	22ff      	movs	r2, #255	; 0xff
 8007428:	2101      	movs	r1, #1
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f004 fd70 	bl	800bf10 <VL53L0X_WrByte>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800743e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007442:	2b00      	cmp	r3, #0
 8007444:	d103      	bne.n	800744e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800744e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007452:	4618      	mov	r0, r3
 8007454:	3758      	adds	r7, #88	; 0x58
 8007456:	46bd      	mov	sp, r7
 8007458:	bdb0      	pop	{r4, r5, r7, pc}
 800745a:	bf00      	nop
 800745c:	00016b85 	.word	0x00016b85
 8007460:	000970a4 	.word	0x000970a4

08007464 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8007464:	b5b0      	push	{r4, r5, r7, lr}
 8007466:	b09e      	sub	sp, #120	; 0x78
 8007468:	af02      	add	r7, sp, #8
 800746a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800746c:	2300      	movs	r3, #0
 800746e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8007472:	f107 031c 	add.w	r3, r7, #28
 8007476:	2240      	movs	r2, #64	; 0x40
 8007478:	2100      	movs	r1, #0
 800747a:	4618      	mov	r0, r3
 800747c:	f004 feb0 	bl	800c1e0 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80074a0:	2101      	movs	r1, #1
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f002 fa79 	bl	800999a <VL53L0X_get_info_from_device>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80074b4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80074bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80074c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d80d      	bhi.n	80074e4 <VL53L0X_StaticInit+0x80>
 80074c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d102      	bne.n	80074d6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80074d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d806      	bhi.n	80074e4 <VL53L0X_StaticInit+0x80>
 80074d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10e      	bne.n	80074fc <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80074de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	d90b      	bls.n	80074fc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80074e4:	f107 0218 	add.w	r2, r7, #24
 80074e8:	f107 0314 	add.w	r3, r7, #20
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 fcf8 	bl	8008ee4 <VL53L0X_perform_ref_spad_management>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80074fa:	e009      	b.n	8007510 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80074fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007500:	461a      	mov	r2, r3
 8007502:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 fef9 	bl	80092fc <VL53L0X_set_reference_spads>
 800750a:	4603      	mov	r3, r0
 800750c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007510:	4b94      	ldr	r3, [pc, #592]	; (8007764 <VL53L0X_StaticInit+0x300>)
 8007512:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007514:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10f      	bne.n	800753c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8007522:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007526:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007534:	66bb      	str	r3, [r7, #104]	; 0x68
 8007536:	e001      	b.n	800753c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007538:	4b8a      	ldr	r3, [pc, #552]	; (8007764 <VL53L0X_StaticInit+0x300>)
 800753a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800753c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007544:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f003 fdcc 	bl	800b0e4 <VL53L0X_load_tuning_settings>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007552:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800755a:	2300      	movs	r3, #0
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	2304      	movs	r3, #4
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 f8f1 	bl	800874c <VL53L0X_SetGpioConfig>
 800756a:	4603      	mov	r3, r0
 800756c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007570:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007574:	2b00      	cmp	r3, #0
 8007576:	d121      	bne.n	80075bc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007578:	2201      	movs	r2, #1
 800757a:	21ff      	movs	r1, #255	; 0xff
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f004 fcc7 	bl	800bf10 <VL53L0X_WrByte>
 8007582:	4603      	mov	r3, r0
 8007584:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8007588:	f107 031a 	add.w	r3, r7, #26
 800758c:	461a      	mov	r2, r3
 800758e:	2184      	movs	r1, #132	; 0x84
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f004 fd69 	bl	800c068 <VL53L0X_RdWord>
 8007596:	4603      	mov	r3, r0
 8007598:	461a      	mov	r2, r3
 800759a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800759e:	4313      	orrs	r3, r2
 80075a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80075a4:	2200      	movs	r2, #0
 80075a6:	21ff      	movs	r1, #255	; 0xff
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f004 fcb1 	bl	800bf10 <VL53L0X_WrByte>
 80075ae:	4603      	mov	r3, r0
 80075b0:	461a      	mov	r2, r3
 80075b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075b6:	4313      	orrs	r3, r2
 80075b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80075bc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d105      	bne.n	80075d0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80075c4:	8b7b      	ldrh	r3, [r7, #26]
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	461a      	mov	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80075d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d108      	bne.n	80075ea <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80075d8:	f107 031c 	add.w	r3, r7, #28
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f8d0 	bl	8007784 <VL53L0X_GetDeviceParameters>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80075ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d110      	bne.n	8007614 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80075f2:	f107 0319 	add.w	r3, r7, #25
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f992 	bl	8007922 <VL53L0X_GetFractionEnable>
 80075fe:	4603      	mov	r3, r0
 8007600:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007604:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007608:	2b00      	cmp	r3, #0
 800760a:	d103      	bne.n	8007614 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800760c:	7e7a      	ldrb	r2, [r7, #25]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007614:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10e      	bne.n	800763a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f103 0410 	add.w	r4, r3, #16
 8007622:	f107 051c 	add.w	r5, r7, #28
 8007626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800762a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800762c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800762e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007632:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800763a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800763e:	2b00      	cmp	r3, #0
 8007640:	d111      	bne.n	8007666 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8007642:	f107 0319 	add.w	r3, r7, #25
 8007646:	461a      	mov	r2, r3
 8007648:	2101      	movs	r1, #1
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f004 fce2 	bl	800c014 <VL53L0X_RdByte>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007656:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800765e:	7e7a      	ldrb	r2, [r7, #25]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007666:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800766a:	2b00      	cmp	r3, #0
 800766c:	d107      	bne.n	800767e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800766e:	2200      	movs	r2, #0
 8007670:	2100      	movs	r1, #0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f9ca 	bl	8007a0c <VL53L0X_SetSequenceStepEnable>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800767e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007682:	2b00      	cmp	r3, #0
 8007684:	d107      	bne.n	8007696 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007686:	2200      	movs	r2, #0
 8007688:	2102      	movs	r1, #2
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f9be 	bl	8007a0c <VL53L0X_SetSequenceStepEnable>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007696:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2203      	movs	r2, #3
 80076a2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80076a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d109      	bne.n	80076c2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80076ae:	f107 0313 	add.w	r3, r7, #19
 80076b2:	461a      	mov	r2, r3
 80076b4:	2100      	movs	r1, #0
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f990 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d103      	bne.n	80076d2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80076ca:	7cfa      	ldrb	r2, [r7, #19]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80076d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80076da:	f107 0313 	add.w	r3, r7, #19
 80076de:	461a      	mov	r2, r3
 80076e0:	2101      	movs	r1, #1
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f97a 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80076f6:	7cfa      	ldrb	r2, [r7, #19]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80076fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007702:	2b00      	cmp	r3, #0
 8007704:	d109      	bne.n	800771a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8007706:	f107 030c 	add.w	r3, r7, #12
 800770a:	461a      	mov	r2, r3
 800770c:	2103      	movs	r1, #3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f002 fec4 	bl	800a49c <get_sequence_step_timeout>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800771a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800771e:	2b00      	cmp	r3, #0
 8007720:	d103      	bne.n	800772a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800772a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8007732:	f107 030c 	add.w	r3, r7, #12
 8007736:	461a      	mov	r2, r3
 8007738:	2104      	movs	r1, #4
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f002 feae 	bl	800a49c <get_sequence_step_timeout>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007746:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800774a:	2b00      	cmp	r3, #0
 800774c:	d103      	bne.n	8007756 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007756:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800775a:	4618      	mov	r0, r3
 800775c:	3770      	adds	r7, #112	; 0x70
 800775e:	46bd      	mov	sp, r7
 8007760:	bdb0      	pop	{r4, r5, r7, pc}
 8007762:	bf00      	nop
 8007764:	20000010 	.word	0x20000010

08007768 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8007770:	239d      	movs	r3, #157	; 0x9d
 8007772:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8007774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f8b0 	bl	80078fc <VL53L0X_GetDeviceMode>
 800779c:	4603      	mov	r3, r0
 800779e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80077a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d107      	bne.n	80077b8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	3308      	adds	r3, #8
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa78 	bl	8007ca4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80077b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2200      	movs	r2, #0
 80077c4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80077c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d107      	bne.n	80077de <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	3310      	adds	r3, #16
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 faae 	bl	8007d36 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80077da:	4603      	mov	r3, r0
 80077dc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80077de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d107      	bne.n	80077f6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	3314      	adds	r3, #20
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff fca9 	bl	8007144 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80077f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d134      	bne.n	8007868 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80077fe:	2300      	movs	r3, #0
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	e02a      	b.n	800785a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d12a      	bne.n	8007862 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	b299      	uxth	r1, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	3308      	adds	r3, #8
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	4413      	add	r3, r2
 800781a:	3304      	adds	r3, #4
 800781c:	461a      	mov	r2, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fbce 	bl	8007fc0 <VL53L0X_GetLimitCheckValue>
 8007824:	4603      	mov	r3, r0
 8007826:	461a      	mov	r2, r3
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	4313      	orrs	r3, r2
 800782c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800782e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d117      	bne.n	8007866 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	b299      	uxth	r1, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	3318      	adds	r3, #24
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	4413      	add	r3, r2
 8007842:	461a      	mov	r2, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fb35 	bl	8007eb4 <VL53L0X_GetLimitCheckEnable>
 800784a:	4603      	mov	r3, r0
 800784c:	461a      	mov	r2, r3
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	4313      	orrs	r3, r2
 8007852:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	3301      	adds	r3, #1
 8007858:	60bb      	str	r3, [r7, #8]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b05      	cmp	r3, #5
 800785e:	ddd1      	ble.n	8007804 <VL53L0X_GetDeviceParameters+0x80>
 8007860:	e002      	b.n	8007868 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007862:	bf00      	nop
 8007864:	e000      	b.n	8007868 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007866:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d107      	bne.n	8007880 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	333c      	adds	r3, #60	; 0x3c
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fc30 	bl	80080dc <VL53L0X_GetWrapAroundCheckEnable>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d107      	bne.n	8007898 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	3304      	adds	r3, #4
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f879 	bl	8007986 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007898:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	2b15      	cmp	r3, #21
 80078b8:	bf8c      	ite	hi
 80078ba:	2201      	movhi	r2, #1
 80078bc:	2200      	movls	r2, #0
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	d10e      	bne.n	80078e2 <VL53L0X_SetDeviceMode+0x3e>
 80078c4:	2201      	movs	r2, #1
 80078c6:	409a      	lsls	r2, r3
 80078c8:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <VL53L0X_SetDeviceMode+0x54>)
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bf14      	ite	ne
 80078d0:	2301      	movne	r3, #1
 80078d2:	2300      	moveq	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	78fa      	ldrb	r2, [r7, #3]
 80078de:	741a      	strb	r2, [r3, #16]
		break;
 80078e0:	e001      	b.n	80078e6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80078e2:	23f8      	movs	r3, #248	; 0xf8
 80078e4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	0030000b 	.word	0x0030000b

080078fc <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7c1a      	ldrb	r2, [r3, #16]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007912:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	2109      	movs	r1, #9
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f004 fb6d 	bl	800c014 <VL53L0X_RdByte>
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800793e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d106      	bne.n	8007954 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	b2da      	uxtb	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007954:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f003 fa26 	bl	800adc2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007976:	4603      	mov	r3, r0
 8007978:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800797a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007990:	2300      	movs	r3, #0
 8007992:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f003 faf3 	bl	800af82 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80079a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
 80079b8:	4613      	mov	r3, r2
 80079ba:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079bc:	2300      	movs	r3, #0
 80079be:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80079c0:	78ba      	ldrb	r2, [r7, #2]
 80079c2:	78fb      	ldrb	r3, [r7, #3]
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f002 ff3b 	bl	800a842 <VL53L0X_set_vcsel_pulse_period>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80079d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	460b      	mov	r3, r1
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	4619      	mov	r1, r3
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f003 f9ad 	bl	800ad54 <VL53L0X_get_vcsel_pulse_period>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80079fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007a28:	f107 030f 	add.w	r3, r7, #15
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	2101      	movs	r1, #1
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f004 faef 	bl	800c014 <VL53L0X_RdByte>
 8007a36:	4603      	mov	r3, r0
 8007a38:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8007a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d15a      	bne.n	8007afc <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007a46:	78bb      	ldrb	r3, [r7, #2]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d12b      	bne.n	8007aa4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d825      	bhi.n	8007a9e <VL53L0X_SetSequenceStepEnable+0x92>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a6d 	.word	0x08007a6d
 8007a5c:	08007a77 	.word	0x08007a77
 8007a60:	08007a81 	.word	0x08007a81
 8007a64:	08007a8b 	.word	0x08007a8b
 8007a68:	08007a95 	.word	0x08007a95
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007a6c:	7dbb      	ldrb	r3, [r7, #22]
 8007a6e:	f043 0310 	orr.w	r3, r3, #16
 8007a72:	75bb      	strb	r3, [r7, #22]
				break;
 8007a74:	e043      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007a76:	7dbb      	ldrb	r3, [r7, #22]
 8007a78:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007a7c:	75bb      	strb	r3, [r7, #22]
				break;
 8007a7e:	e03e      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007a80:	7dbb      	ldrb	r3, [r7, #22]
 8007a82:	f043 0304 	orr.w	r3, r3, #4
 8007a86:	75bb      	strb	r3, [r7, #22]
				break;
 8007a88:	e039      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007a8a:	7dbb      	ldrb	r3, [r7, #22]
 8007a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a90:	75bb      	strb	r3, [r7, #22]
				break;
 8007a92:	e034      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007a94:	7dbb      	ldrb	r3, [r7, #22]
 8007a96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a9a:	75bb      	strb	r3, [r7, #22]
				break;
 8007a9c:	e02f      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a9e:	23fc      	movs	r3, #252	; 0xfc
 8007aa0:	75fb      	strb	r3, [r7, #23]
 8007aa2:	e02c      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d825      	bhi.n	8007af6 <VL53L0X_SetSequenceStepEnable+0xea>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ac5 	.word	0x08007ac5
 8007ab4:	08007acf 	.word	0x08007acf
 8007ab8:	08007ad9 	.word	0x08007ad9
 8007abc:	08007ae3 	.word	0x08007ae3
 8007ac0:	08007aed 	.word	0x08007aed
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007ac4:	7dbb      	ldrb	r3, [r7, #22]
 8007ac6:	f023 0310 	bic.w	r3, r3, #16
 8007aca:	75bb      	strb	r3, [r7, #22]
				break;
 8007acc:	e017      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007ace:	7dbb      	ldrb	r3, [r7, #22]
 8007ad0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007ad4:	75bb      	strb	r3, [r7, #22]
				break;
 8007ad6:	e012      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007ad8:	7dbb      	ldrb	r3, [r7, #22]
 8007ada:	f023 0304 	bic.w	r3, r3, #4
 8007ade:	75bb      	strb	r3, [r7, #22]
				break;
 8007ae0:	e00d      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007ae2:	7dbb      	ldrb	r3, [r7, #22]
 8007ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae8:	75bb      	strb	r3, [r7, #22]
				break;
 8007aea:	e008      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007aec:	7dbb      	ldrb	r3, [r7, #22]
 8007aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af2:	75bb      	strb	r3, [r7, #22]
				break;
 8007af4:	e003      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007af6:	23fc      	movs	r3, #252	; 0xfc
 8007af8:	75fb      	strb	r3, [r7, #23]
 8007afa:	e000      	b.n	8007afe <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007afc:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	7dba      	ldrb	r2, [r7, #22]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d01e      	beq.n	8007b44 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d107      	bne.n	8007b1e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007b0e:	7dbb      	ldrb	r3, [r7, #22]
 8007b10:	461a      	mov	r2, r3
 8007b12:	2101      	movs	r1, #1
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f004 f9fb 	bl	800bf10 <VL53L0X_WrByte>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d103      	bne.n	8007b2e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7dba      	ldrb	r2, [r7, #22]
 8007b2a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d106      	bne.n	8007b44 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007b3c:	6939      	ldr	r1, [r7, #16]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff ff0e 	bl	8007960 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	607b      	str	r3, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	72fb      	strb	r3, [r7, #11]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d836      	bhi.n	8007be0 <sequence_step_enabled+0x90>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <sequence_step_enabled+0x28>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b8d 	.word	0x08007b8d
 8007b7c:	08007b9f 	.word	0x08007b9f
 8007b80:	08007bb1 	.word	0x08007bb1
 8007b84:	08007bc3 	.word	0x08007bc3
 8007b88:	08007bd5 	.word	0x08007bd5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007b8c:	7abb      	ldrb	r3, [r7, #10]
 8007b8e:	111b      	asrs	r3, r3, #4
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	701a      	strb	r2, [r3, #0]
		break;
 8007b9c:	e022      	b.n	8007be4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007b9e:	7abb      	ldrb	r3, [r7, #10]
 8007ba0:	10db      	asrs	r3, r3, #3
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	701a      	strb	r2, [r3, #0]
		break;
 8007bae:	e019      	b.n	8007be4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007bb0:	7abb      	ldrb	r3, [r7, #10]
 8007bb2:	109b      	asrs	r3, r3, #2
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	701a      	strb	r2, [r3, #0]
		break;
 8007bc0:	e010      	b.n	8007be4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007bc2:	7abb      	ldrb	r3, [r7, #10]
 8007bc4:	119b      	asrs	r3, r3, #6
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	701a      	strb	r2, [r3, #0]
		break;
 8007bd2:	e007      	b.n	8007be4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007bd4:	7abb      	ldrb	r3, [r7, #10]
 8007bd6:	09db      	lsrs	r3, r3, #7
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	701a      	strb	r2, [r3, #0]
		break;
 8007bde:	e001      	b.n	8007be4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007be0:	23fc      	movs	r3, #252	; 0xfc
 8007be2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007be4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007c06:	f107 030e 	add.w	r3, r7, #14
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f004 fa00 	bl	800c014 <VL53L0X_RdByte>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d107      	bne.n	8007c30 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007c20:	7bba      	ldrb	r2, [r7, #14]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff ff92 	bl	8007b50 <sequence_step_enabled>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d108      	bne.n	8007c4a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007c38:	7bba      	ldrb	r2, [r7, #14]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	3302      	adds	r3, #2
 8007c3e:	2101      	movs	r1, #1
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff ff85 	bl	8007b50 <sequence_step_enabled>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d108      	bne.n	8007c64 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007c52:	7bba      	ldrb	r2, [r7, #14]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	3301      	adds	r3, #1
 8007c58:	2102      	movs	r1, #2
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff ff78 	bl	8007b50 <sequence_step_enabled>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d108      	bne.n	8007c7e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007c6c:	7bba      	ldrb	r2, [r7, #14]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	3303      	adds	r3, #3
 8007c72:	2103      	movs	r1, #3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff ff6b 	bl	8007b50 <sequence_step_enabled>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d108      	bne.n	8007c98 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007c86:	7bba      	ldrb	r2, [r7, #14]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	2104      	movs	r1, #4
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff ff5e 	bl	8007b50 <sequence_step_enabled>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007cb2:	f107 030c 	add.w	r3, r7, #12
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	21f8      	movs	r1, #248	; 0xf8
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f004 f9d4 	bl	800c068 <VL53L0X_RdWord>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d108      	bne.n	8007cde <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007ccc:	f107 0308 	add.w	r3, r7, #8
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	2104      	movs	r1, #4
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f004 f9ff 	bl	800c0d8 <VL53L0X_RdDWord>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10c      	bne.n	8007d00 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007ce6:	89bb      	ldrh	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	89ba      	ldrh	r2, [r7, #12]
 8007cf0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7f1b      	ldrb	r3, [r3, #28]
 8007d1e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	7bba      	ldrb	r2, [r7, #14]
 8007d24:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b086      	sub	sp, #24
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007d44:	f107 030e 	add.w	r3, r7, #14
 8007d48:	461a      	mov	r2, r3
 8007d4a:	2120      	movs	r1, #32
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f004 f98b 	bl	800c068 <VL53L0X_RdWord>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d118      	bne.n	8007d90 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007d5e:	89fb      	ldrh	r3, [r7, #14]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	771a      	strb	r2, [r3, #28]
 8007d76:	e00b      	b.n	8007d90 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007d78:	89fb      	ldrh	r3, [r7, #14]
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	807b      	strh	r3, [r7, #2]
 8007da8:	4613      	mov	r3, r2
 8007daa:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dac:	2300      	movs	r3, #0
 8007dae:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007dbc:	887b      	ldrh	r3, [r7, #2]
 8007dbe:	2b05      	cmp	r3, #5
 8007dc0:	d902      	bls.n	8007dc8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007dc2:	23fc      	movs	r3, #252	; 0xfc
 8007dc4:	75fb      	strb	r3, [r7, #23]
 8007dc6:	e05b      	b.n	8007e80 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007dc8:	787b      	ldrb	r3, [r7, #1]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d106      	bne.n	8007ddc <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	73bb      	strb	r3, [r7, #14]
 8007dda:	e00a      	b.n	8007df2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ddc:	887b      	ldrh	r3, [r7, #2]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	330c      	adds	r3, #12
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007dee:	2301      	movs	r3, #1
 8007df0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007df2:	887b      	ldrh	r3, [r7, #2]
 8007df4:	2b05      	cmp	r3, #5
 8007df6:	d841      	bhi.n	8007e7c <VL53L0X_SetLimitCheckEnable+0xe0>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <VL53L0X_SetLimitCheckEnable+0x64>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e19 	.word	0x08007e19
 8007e04:	08007e23 	.word	0x08007e23
 8007e08:	08007e39 	.word	0x08007e39
 8007e0c:	08007e43 	.word	0x08007e43
 8007e10:	08007e4d 	.word	0x08007e4d
 8007e14:	08007e65 	.word	0x08007e65

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	7bfa      	ldrb	r2, [r7, #15]
 8007e1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007e20:	e02e      	b.n	8007e80 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	2144      	movs	r1, #68	; 0x44
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f004 f893 	bl	800bf58 <VL53L0X_WrWord>
 8007e32:	4603      	mov	r3, r0
 8007e34:	75fb      	strb	r3, [r7, #23]

			break;
 8007e36:	e023      	b.n	8007e80 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7bfa      	ldrb	r2, [r7, #15]
 8007e3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007e40:	e01e      	b.n	8007e80 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7bfa      	ldrb	r2, [r7, #15]
 8007e46:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007e4a:	e019      	b.n	8007e80 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007e52:	7b7b      	ldrb	r3, [r7, #13]
 8007e54:	22fe      	movs	r2, #254	; 0xfe
 8007e56:	2160      	movs	r1, #96	; 0x60
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f004 f8a7 	bl	800bfac <VL53L0X_UpdateByte>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007e62:	e00d      	b.n	8007e80 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007e6a:	7b7b      	ldrb	r3, [r7, #13]
 8007e6c:	22ef      	movs	r2, #239	; 0xef
 8007e6e:	2160      	movs	r1, #96	; 0x60
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f004 f89b 	bl	800bfac <VL53L0X_UpdateByte>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007e7a:	e001      	b.n	8007e80 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e7c:	23fc      	movs	r3, #252	; 0xfc
 8007e7e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10f      	bne.n	8007ea8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007e88:	787b      	ldrb	r3, [r7, #1]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007e8e:	887b      	ldrh	r3, [r7, #2]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	4413      	add	r3, r2
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007e9a:	e005      	b.n	8007ea8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007e9c:	887b      	ldrh	r3, [r7, #2]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007ec6:	897b      	ldrh	r3, [r7, #10]
 8007ec8:	2b05      	cmp	r3, #5
 8007eca:	d905      	bls.n	8007ed8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ecc:	23fc      	movs	r3, #252	; 0xfc
 8007ece:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e008      	b.n	8007eea <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007ed8:	897b      	ldrh	r3, [r7, #10]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	4413      	add	r3, r2
 8007ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	7dba      	ldrb	r2, [r7, #22]
 8007ee8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	371c      	adds	r7, #28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	460b      	mov	r3, r1
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007f0e:	897b      	ldrh	r3, [r7, #10]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f18:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007f1a:	7dbb      	ldrb	r3, [r7, #22]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d107      	bne.n	8007f30 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f20:	897b      	ldrh	r3, [r7, #10]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	330c      	adds	r3, #12
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	605a      	str	r2, [r3, #4]
 8007f2e:	e040      	b.n	8007fb2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007f30:	897b      	ldrh	r3, [r7, #10]
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d830      	bhi.n	8007f98 <VL53L0X_SetLimitCheckValue+0x9c>
 8007f36:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <VL53L0X_SetLimitCheckValue+0x40>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007f55 	.word	0x08007f55
 8007f40:	08007f5d 	.word	0x08007f5d
 8007f44:	08007f73 	.word	0x08007f73
 8007f48:	08007f7b 	.word	0x08007f7b
 8007f4c:	08007f83 	.word	0x08007f83
 8007f50:	08007f83 	.word	0x08007f83

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007f5a:	e01f      	b.n	8007f9c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	461a      	mov	r2, r3
 8007f64:	2144      	movs	r1, #68	; 0x44
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f003 fff6 	bl	800bf58 <VL53L0X_WrWord>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007f70:	e014      	b.n	8007f9c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007f78:	e010      	b.n	8007f9c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007f80:	e00c      	b.n	8007f9c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	461a      	mov	r2, r3
 8007f8a:	2164      	movs	r1, #100	; 0x64
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f003 ffe3 	bl	800bf58 <VL53L0X_WrWord>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007f96:	e001      	b.n	8007f9c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f98:	23fc      	movs	r3, #252	; 0xfc
 8007f9a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007fa4:	897b      	ldrh	r3, [r7, #10]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop

08007fc0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007fd6:	897b      	ldrh	r3, [r7, #10]
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	d847      	bhi.n	800806c <VL53L0X_GetLimitCheckValue+0xac>
 8007fdc:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <VL53L0X_GetLimitCheckValue+0x24>)
 8007fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe2:	bf00      	nop
 8007fe4:	08007ffd 	.word	0x08007ffd
 8007fe8:	08008009 	.word	0x08008009
 8007fec:	0800802f 	.word	0x0800802f
 8007ff0:	0800803b 	.word	0x0800803b
 8007ff4:	08008047 	.word	0x08008047
 8007ff8:	08008047 	.word	0x08008047

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008000:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	77bb      	strb	r3, [r7, #30]
		break;
 8008006:	e033      	b.n	8008070 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008008:	f107 0316 	add.w	r3, r7, #22
 800800c:	461a      	mov	r2, r3
 800800e:	2144      	movs	r1, #68	; 0x44
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f004 f829 	bl	800c068 <VL53L0X_RdWord>
 8008016:	4603      	mov	r3, r0
 8008018:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800801a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d102      	bne.n	8008028 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008022:	8afb      	ldrh	r3, [r7, #22]
 8008024:	025b      	lsls	r3, r3, #9
 8008026:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008028:	2301      	movs	r3, #1
 800802a:	77bb      	strb	r3, [r7, #30]
		break;
 800802c:	e020      	b.n	8008070 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008032:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	77bb      	strb	r3, [r7, #30]
		break;
 8008038:	e01a      	b.n	8008070 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	77bb      	strb	r3, [r7, #30]
		break;
 8008044:	e014      	b.n	8008070 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008046:	f107 0316 	add.w	r3, r7, #22
 800804a:	461a      	mov	r2, r3
 800804c:	2164      	movs	r1, #100	; 0x64
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f004 f80a 	bl	800c068 <VL53L0X_RdWord>
 8008054:	4603      	mov	r3, r0
 8008056:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008058:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d102      	bne.n	8008066 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008060:	8afb      	ldrh	r3, [r7, #22]
 8008062:	025b      	lsls	r3, r3, #9
 8008064:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	77bb      	strb	r3, [r7, #30]
		break;
 800806a:	e001      	b.n	8008070 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800806c:	23fc      	movs	r3, #252	; 0xfc
 800806e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008070:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d12a      	bne.n	80080ce <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8008078:	7fbb      	ldrb	r3, [r7, #30]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d124      	bne.n	80080c8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d110      	bne.n	80080a6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8008084:	897b      	ldrh	r3, [r7, #10]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	330c      	adds	r3, #12
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008098:	897b      	ldrh	r3, [r7, #10]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80080a4:	e013      	b.n	80080ce <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80080ac:	897b      	ldrh	r3, [r7, #10]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	330c      	adds	r3, #12
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80080ba:	897b      	ldrh	r3, [r7, #10]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80080c6:	e002      	b.n	80080ce <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080ce:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop

080080dc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80080ea:	f107 030e 	add.w	r3, r7, #14
 80080ee:	461a      	mov	r2, r3
 80080f0:	2101      	movs	r1, #1
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f003 ff8e 	bl	800c014 <VL53L0X_RdByte>
 80080f8:	4603      	mov	r3, r0
 80080fa:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80080fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10e      	bne.n	8008122 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008104:	7bba      	ldrb	r2, [r7, #14]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	b25b      	sxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	da03      	bge.n	800811c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2201      	movs	r2, #1
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	e002      	b.n	8008122 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d104      	bne.n	8008134 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781a      	ldrb	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008134:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008148:	2300      	movs	r3, #0
 800814a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800814c:	f107 030e 	add.w	r3, r7, #14
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff fbd2 	bl	80078fc <VL53L0X_GetDeviceMode>
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800815c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d107      	bne.n	8008174 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d104      	bne.n	8008174 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f898 	bl	80082a0 <VL53L0X_StartMeasurement>
 8008170:	4603      	mov	r3, r0
 8008172:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 fb3f 	bl	8009800 <VL53L0X_measurement_poll_for_completion>
 8008182:	4603      	mov	r3, r0
 8008184:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800818e:	7bbb      	ldrb	r3, [r7, #14]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d103      	bne.n	800819c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2203      	movs	r2, #3
 8008198:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800819c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80081b8:	2301      	movs	r3, #1
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f001 fae1 	bl	8009786 <VL53L0X_perform_ref_calibration>
 80081c4:	4603      	mov	r3, r0
 80081c6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80081c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80081ea:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80081ec:	7dbb      	ldrb	r3, [r7, #22]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d005      	beq.n	80081fe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80081f2:	7dbb      	ldrb	r3, [r7, #22]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d002      	beq.n	80081fe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80081f8:	7dbb      	ldrb	r3, [r7, #22]
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d147      	bne.n	800828e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80081fe:	f107 030c 	add.w	r3, r7, #12
 8008202:	f107 0210 	add.w	r2, r7, #16
 8008206:	2101      	movs	r1, #1
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fbc3 	bl	8008994 <VL53L0X_GetInterruptThresholds>
 800820e:	4603      	mov	r3, r0
 8008210:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008218:	d803      	bhi.n	8008222 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800821a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800821c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008220:	d935      	bls.n	800828e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008222:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d131      	bne.n	800828e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d006      	beq.n	800823e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008230:	491a      	ldr	r1, [pc, #104]	; (800829c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f002 ff56 	bl	800b0e4 <VL53L0X_load_tuning_settings>
 8008238:	4603      	mov	r3, r0
 800823a:	75fb      	strb	r3, [r7, #23]
 800823c:	e027      	b.n	800828e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800823e:	2204      	movs	r2, #4
 8008240:	21ff      	movs	r1, #255	; 0xff
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f003 fe64 	bl	800bf10 <VL53L0X_WrByte>
 8008248:	4603      	mov	r3, r0
 800824a:	461a      	mov	r2, r3
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	4313      	orrs	r3, r2
 8008250:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008252:	2200      	movs	r2, #0
 8008254:	2170      	movs	r1, #112	; 0x70
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f003 fe5a 	bl	800bf10 <VL53L0X_WrByte>
 800825c:	4603      	mov	r3, r0
 800825e:	461a      	mov	r2, r3
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	4313      	orrs	r3, r2
 8008264:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008266:	2200      	movs	r2, #0
 8008268:	21ff      	movs	r1, #255	; 0xff
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f003 fe50 	bl	800bf10 <VL53L0X_WrByte>
 8008270:	4603      	mov	r3, r0
 8008272:	461a      	mov	r2, r3
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	4313      	orrs	r3, r2
 8008278:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800827a:	2200      	movs	r2, #0
 800827c:	2180      	movs	r1, #128	; 0x80
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f003 fe46 	bl	800bf10 <VL53L0X_WrByte>
 8008284:	4603      	mov	r3, r0
 8008286:	461a      	mov	r2, r3
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	4313      	orrs	r3, r2
 800828c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800828e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000104 	.word	0x20000104

080082a0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80082ac:	2301      	movs	r3, #1
 80082ae:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80082b0:	f107 030e 	add.w	r3, r7, #14
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fb20 	bl	80078fc <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80082bc:	2201      	movs	r2, #1
 80082be:	2180      	movs	r1, #128	; 0x80
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f003 fe25 	bl	800bf10 <VL53L0X_WrByte>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80082ca:	2201      	movs	r2, #1
 80082cc:	21ff      	movs	r1, #255	; 0xff
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f003 fe1e 	bl	800bf10 <VL53L0X_WrByte>
 80082d4:	4603      	mov	r3, r0
 80082d6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80082d8:	2200      	movs	r2, #0
 80082da:	2100      	movs	r1, #0
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f003 fe17 	bl	800bf10 <VL53L0X_WrByte>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80082ec:	461a      	mov	r2, r3
 80082ee:	2191      	movs	r1, #145	; 0x91
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f003 fe0d 	bl	800bf10 <VL53L0X_WrByte>
 80082f6:	4603      	mov	r3, r0
 80082f8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80082fa:	2201      	movs	r2, #1
 80082fc:	2100      	movs	r1, #0
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f003 fe06 	bl	800bf10 <VL53L0X_WrByte>
 8008304:	4603      	mov	r3, r0
 8008306:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008308:	2200      	movs	r2, #0
 800830a:	21ff      	movs	r1, #255	; 0xff
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f003 fdff 	bl	800bf10 <VL53L0X_WrByte>
 8008312:	4603      	mov	r3, r0
 8008314:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008316:	2200      	movs	r2, #0
 8008318:	2180      	movs	r1, #128	; 0x80
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f003 fdf8 	bl	800bf10 <VL53L0X_WrByte>
 8008320:	4603      	mov	r3, r0
 8008322:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b03      	cmp	r3, #3
 8008328:	d054      	beq.n	80083d4 <VL53L0X_StartMeasurement+0x134>
 800832a:	2b03      	cmp	r3, #3
 800832c:	dc6c      	bgt.n	8008408 <VL53L0X_StartMeasurement+0x168>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <VL53L0X_StartMeasurement+0x98>
 8008332:	2b01      	cmp	r3, #1
 8008334:	d034      	beq.n	80083a0 <VL53L0X_StartMeasurement+0x100>
 8008336:	e067      	b.n	8008408 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008338:	2201      	movs	r2, #1
 800833a:	2100      	movs	r1, #0
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f003 fde7 	bl	800bf10 <VL53L0X_WrByte>
 8008342:	4603      	mov	r3, r0
 8008344:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800834a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d15d      	bne.n	800840e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d008      	beq.n	800836e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800835c:	f107 030d 	add.w	r3, r7, #13
 8008360:	461a      	mov	r2, r3
 8008362:	2100      	movs	r1, #0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f003 fe55 	bl	800c014 <VL53L0X_RdByte>
 800836a:	4603      	mov	r3, r0
 800836c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	3301      	adds	r3, #1
 8008372:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008374:	7b7a      	ldrb	r2, [r7, #13]
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	4013      	ands	r3, r2
 800837a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800837c:	7bfa      	ldrb	r2, [r7, #15]
 800837e:	429a      	cmp	r2, r3
 8008380:	d107      	bne.n	8008392 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8008382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d103      	bne.n	8008392 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008390:	d3e1      	bcc.n	8008356 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008398:	d339      	bcc.n	800840e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800839a:	23f9      	movs	r3, #249	; 0xf9
 800839c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800839e:	e036      	b.n	800840e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80083a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d105      	bne.n	80083b4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80083a8:	2101      	movs	r1, #1
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff ff12 	bl	80081d4 <VL53L0X_CheckAndLoadInterruptSettings>
 80083b0:	4603      	mov	r3, r0
 80083b2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80083b4:	2202      	movs	r2, #2
 80083b6:	2100      	movs	r1, #0
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f003 fda9 	bl	800bf10 <VL53L0X_WrByte>
 80083be:	4603      	mov	r3, r0
 80083c0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80083c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d123      	bne.n	8008412 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2204      	movs	r2, #4
 80083ce:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80083d2:	e01e      	b.n	8008412 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80083d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d105      	bne.n	80083e8 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80083dc:	2101      	movs	r1, #1
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7ff fef8 	bl	80081d4 <VL53L0X_CheckAndLoadInterruptSettings>
 80083e4:	4603      	mov	r3, r0
 80083e6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80083e8:	2204      	movs	r2, #4
 80083ea:	2100      	movs	r1, #0
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f003 fd8f 	bl	800bf10 <VL53L0X_WrByte>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80083f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10b      	bne.n	8008416 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2204      	movs	r2, #4
 8008402:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008406:	e006      	b.n	8008416 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008408:	23f8      	movs	r3, #248	; 0xf8
 800840a:	75fb      	strb	r3, [r7, #23]
 800840c:	e004      	b.n	8008418 <VL53L0X_StartMeasurement+0x178>
		break;
 800840e:	bf00      	nop
 8008410:	e002      	b.n	8008418 <VL53L0X_StartMeasurement+0x178>
		break;
 8008412:	bf00      	nop
 8008414:	e000      	b.n	8008418 <VL53L0X_StartMeasurement+0x178>
		break;
 8008416:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008438:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b04      	cmp	r3, #4
 800843e:	d112      	bne.n	8008466 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008440:	f107 0308 	add.w	r3, r7, #8
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fb1a 	bl	8008a80 <VL53L0X_GetInterruptMaskStatus>
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b04      	cmp	r3, #4
 8008454:	d103      	bne.n	800845e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2201      	movs	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	e01c      	b.n	8008498 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2200      	movs	r2, #0
 8008462:	701a      	strb	r2, [r3, #0]
 8008464:	e018      	b.n	8008498 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8008466:	f107 030d 	add.w	r3, r7, #13
 800846a:	461a      	mov	r2, r3
 800846c:	2114      	movs	r1, #20
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f003 fdd0 	bl	800c014 <VL53L0X_RdByte>
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8008478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10b      	bne.n	8008498 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008480:	7b7b      	ldrb	r3, [r7, #13]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2201      	movs	r2, #1
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	e002      	b.n	8008498 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2200      	movs	r2, #0
 8008496:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008498:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80084a4:	b5b0      	push	{r4, r5, r7, lr}
 80084a6:	b096      	sub	sp, #88	; 0x58
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084ae:	2300      	movs	r3, #0
 80084b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80084b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80084b8:	230c      	movs	r3, #12
 80084ba:	2114      	movs	r1, #20
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f003 fcfb 	bl	800beb8 <VL53L0X_ReadMulti>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80084c8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 80d1 	bne.w	8008674 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2200      	movs	r2, #0
 80084d6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80084de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4413      	add	r3, r2
 80084f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2200      	movs	r2, #0
 80084f8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80084fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80084fe:	b29b      	uxth	r3, r3
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	b29a      	uxth	r2, r3
 8008504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008508:	b29b      	uxth	r3, r3
 800850a:	4413      	add	r3, r2
 800850c:	b29b      	uxth	r3, r3
 800850e:	025b      	lsls	r3, r3, #9
 8008510:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008516:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008518:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800851c:	b29b      	uxth	r3, r3
 800851e:	021b      	lsls	r3, r3, #8
 8008520:	b29a      	uxth	r2, r3
 8008522:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008526:	b29b      	uxth	r3, r3
 8008528:	4413      	add	r3, r2
 800852a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800852e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008532:	025b      	lsls	r3, r3, #9
 8008534:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800853a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800853e:	b29b      	uxth	r3, r3
 8008540:	021b      	lsls	r3, r3, #8
 8008542:	b29a      	uxth	r2, r3
 8008544:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008548:	b29b      	uxth	r3, r3
 800854a:	4413      	add	r3, r2
 800854c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008556:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008558:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800855c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8008566:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800856e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008572:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008578:	d046      	beq.n	8008608 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800857a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800857c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008580:	fb02 f303 	mul.w	r3, r2, r3
 8008584:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008588:	4a57      	ldr	r2, [pc, #348]	; (80086e8 <VL53L0X_GetRangingMeasurementData+0x244>)
 800858a:	fb82 1203 	smull	r1, r2, r2, r3
 800858e:	1192      	asrs	r2, r2, #6
 8008590:	17db      	asrs	r3, r3, #31
 8008592:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008594:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	7f1b      	ldrb	r3, [r3, #28]
 80085a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80085a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d02c      	beq.n	8008608 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80085ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085b0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80085b4:	fb02 f303 	mul.w	r3, r2, r3
 80085b8:	121a      	asrs	r2, r3, #8
					<= 0) {
 80085ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80085bc:	429a      	cmp	r2, r3
 80085be:	d10d      	bne.n	80085dc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80085c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d004      	beq.n	80085d2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80085c8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80085cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80085d0:	e016      	b.n	8008600 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80085d2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80085d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80085da:	e011      	b.n	8008600 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80085dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80085e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085e2:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80085e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085e8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80085ec:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80085f0:	121b      	asrs	r3, r3, #8
 80085f2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80085f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80085f8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80085fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008600:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008604:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008608:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00d      	beq.n	800862c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8008610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008614:	089b      	lsrs	r3, r3, #2
 8008616:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800861c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008620:	b2db      	uxtb	r3, r3
 8008622:	019b      	lsls	r3, r3, #6
 8008624:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	75da      	strb	r2, [r3, #23]
 800862a:	e006      	b.n	800863a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008632:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2200      	movs	r2, #0
 8008638:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800863a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800863e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008642:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	4613      	mov	r3, r2
 800864e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f003 f9e5 	bl	800ba20 <VL53L0X_get_pal_range_status>
 8008656:	4603      	mov	r3, r0
 8008658:	461a      	mov	r2, r3
 800865a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800865e:	4313      	orrs	r3, r2
 8008660:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008664:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008668:	2b00      	cmp	r3, #0
 800866a:	d103      	bne.n	8008674 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800866c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008674:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008678:	2b00      	cmp	r3, #0
 800867a:	d12f      	bne.n	80086dc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f107 040c 	add.w	r4, r7, #12
 8008682:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800868a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800868e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008696:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800869c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80086a4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80086aa:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80086b0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80086b6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80086bc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80086c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80086cc:	f107 050c 	add.w	r5, r7, #12
 80086d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80086d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80086dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3750      	adds	r7, #80	; 0x50
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bdb0      	pop	{r4, r5, r7, pc}
 80086e8:	10624dd3 	.word	0x10624dd3

080086ec <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80086fa:	2100      	movs	r1, #0
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff f8d1 	bl	80078a4 <VL53L0X_SetDeviceMode>
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff fd16 	bl	8008140 <VL53L0X_PerformSingleMeasurement>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d105      	bne.n	800872c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff febe 	bl	80084a4 <VL53L0X_GetRangingMeasurementData>
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800872c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d105      	bne.n	8008740 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008734:	2100      	movs	r1, #0
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f962 	bl	8008a00 <VL53L0X_ClearInterruptMask>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008740:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	4608      	mov	r0, r1
 8008756:	4611      	mov	r1, r2
 8008758:	461a      	mov	r2, r3
 800875a:	4603      	mov	r3, r0
 800875c:	70fb      	strb	r3, [r7, #3]
 800875e:	460b      	mov	r3, r1
 8008760:	70bb      	strb	r3, [r7, #2]
 8008762:	4613      	mov	r3, r2
 8008764:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008766:	2300      	movs	r3, #0
 8008768:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008770:	23f6      	movs	r3, #246	; 0xf6
 8008772:	73fb      	strb	r3, [r7, #15]
 8008774:	e107      	b.n	8008986 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008776:	78bb      	ldrb	r3, [r7, #2]
 8008778:	2b14      	cmp	r3, #20
 800877a:	d110      	bne.n	800879e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800877c:	7e3b      	ldrb	r3, [r7, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008782:	2310      	movs	r3, #16
 8008784:	73bb      	strb	r3, [r7, #14]
 8008786:	e001      	b.n	800878c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008788:	2301      	movs	r3, #1
 800878a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	461a      	mov	r2, r3
 8008790:	2184      	movs	r1, #132	; 0x84
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f003 fbbc 	bl	800bf10 <VL53L0X_WrByte>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]
 800879c:	e0f3      	b.n	8008986 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800879e:	78bb      	ldrb	r3, [r7, #2]
 80087a0:	2b15      	cmp	r3, #21
 80087a2:	f040 8097 	bne.w	80088d4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80087a6:	2201      	movs	r2, #1
 80087a8:	21ff      	movs	r1, #255	; 0xff
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f003 fbb0 	bl	800bf10 <VL53L0X_WrByte>
 80087b0:	4603      	mov	r3, r0
 80087b2:	461a      	mov	r2, r3
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80087ba:	2200      	movs	r2, #0
 80087bc:	2100      	movs	r1, #0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f003 fba6 	bl	800bf10 <VL53L0X_WrByte>
 80087c4:	4603      	mov	r3, r0
 80087c6:	461a      	mov	r2, r3
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80087ce:	2200      	movs	r2, #0
 80087d0:	21ff      	movs	r1, #255	; 0xff
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f003 fb9c 	bl	800bf10 <VL53L0X_WrByte>
 80087d8:	4603      	mov	r3, r0
 80087da:	461a      	mov	r2, r3
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	4313      	orrs	r3, r2
 80087e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80087e2:	2201      	movs	r2, #1
 80087e4:	2180      	movs	r1, #128	; 0x80
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f003 fb92 	bl	800bf10 <VL53L0X_WrByte>
 80087ec:	4603      	mov	r3, r0
 80087ee:	461a      	mov	r2, r3
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80087f6:	2202      	movs	r2, #2
 80087f8:	2185      	movs	r1, #133	; 0x85
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f003 fb88 	bl	800bf10 <VL53L0X_WrByte>
 8008800:	4603      	mov	r3, r0
 8008802:	461a      	mov	r2, r3
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4313      	orrs	r3, r2
 8008808:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800880a:	2204      	movs	r2, #4
 800880c:	21ff      	movs	r1, #255	; 0xff
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f003 fb7e 	bl	800bf10 <VL53L0X_WrByte>
 8008814:	4603      	mov	r3, r0
 8008816:	461a      	mov	r2, r3
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	4313      	orrs	r3, r2
 800881c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800881e:	2200      	movs	r2, #0
 8008820:	21cd      	movs	r1, #205	; 0xcd
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f003 fb74 	bl	800bf10 <VL53L0X_WrByte>
 8008828:	4603      	mov	r3, r0
 800882a:	461a      	mov	r2, r3
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	4313      	orrs	r3, r2
 8008830:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008832:	2211      	movs	r2, #17
 8008834:	21cc      	movs	r1, #204	; 0xcc
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f003 fb6a 	bl	800bf10 <VL53L0X_WrByte>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	4313      	orrs	r3, r2
 8008844:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008846:	2207      	movs	r2, #7
 8008848:	21ff      	movs	r1, #255	; 0xff
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f003 fb60 	bl	800bf10 <VL53L0X_WrByte>
 8008850:	4603      	mov	r3, r0
 8008852:	461a      	mov	r2, r3
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	4313      	orrs	r3, r2
 8008858:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800885a:	2200      	movs	r2, #0
 800885c:	21be      	movs	r1, #190	; 0xbe
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f003 fb56 	bl	800bf10 <VL53L0X_WrByte>
 8008864:	4603      	mov	r3, r0
 8008866:	461a      	mov	r2, r3
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	4313      	orrs	r3, r2
 800886c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800886e:	2206      	movs	r2, #6
 8008870:	21ff      	movs	r1, #255	; 0xff
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f003 fb4c 	bl	800bf10 <VL53L0X_WrByte>
 8008878:	4603      	mov	r3, r0
 800887a:	461a      	mov	r2, r3
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	4313      	orrs	r3, r2
 8008880:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008882:	2209      	movs	r2, #9
 8008884:	21cc      	movs	r1, #204	; 0xcc
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f003 fb42 	bl	800bf10 <VL53L0X_WrByte>
 800888c:	4603      	mov	r3, r0
 800888e:	461a      	mov	r2, r3
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	4313      	orrs	r3, r2
 8008894:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008896:	2200      	movs	r2, #0
 8008898:	21ff      	movs	r1, #255	; 0xff
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f003 fb38 	bl	800bf10 <VL53L0X_WrByte>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80088aa:	2201      	movs	r2, #1
 80088ac:	21ff      	movs	r1, #255	; 0xff
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f003 fb2e 	bl	800bf10 <VL53L0X_WrByte>
 80088b4:	4603      	mov	r3, r0
 80088b6:	461a      	mov	r2, r3
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80088be:	2200      	movs	r2, #0
 80088c0:	2100      	movs	r1, #0
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f003 fb24 	bl	800bf10 <VL53L0X_WrByte>
 80088c8:	4603      	mov	r3, r0
 80088ca:	461a      	mov	r2, r3
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	73fb      	strb	r3, [r7, #15]
 80088d2:	e058      	b.n	8008986 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80088d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d121      	bne.n	8008920 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80088dc:	787b      	ldrb	r3, [r7, #1]
 80088de:	2b04      	cmp	r3, #4
 80088e0:	d81b      	bhi.n	800891a <VL53L0X_SetGpioConfig+0x1ce>
 80088e2:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <VL53L0X_SetGpioConfig+0x19c>)
 80088e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e8:	080088fd 	.word	0x080088fd
 80088ec:	08008903 	.word	0x08008903
 80088f0:	08008909 	.word	0x08008909
 80088f4:	0800890f 	.word	0x0800890f
 80088f8:	08008915 	.word	0x08008915
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73bb      	strb	r3, [r7, #14]
				break;
 8008900:	e00f      	b.n	8008922 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008902:	2301      	movs	r3, #1
 8008904:	73bb      	strb	r3, [r7, #14]
				break;
 8008906:	e00c      	b.n	8008922 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008908:	2302      	movs	r3, #2
 800890a:	73bb      	strb	r3, [r7, #14]
				break;
 800890c:	e009      	b.n	8008922 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800890e:	2303      	movs	r3, #3
 8008910:	73bb      	strb	r3, [r7, #14]
				break;
 8008912:	e006      	b.n	8008922 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008914:	2304      	movs	r3, #4
 8008916:	73bb      	strb	r3, [r7, #14]
				break;
 8008918:	e003      	b.n	8008922 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800891a:	23f5      	movs	r3, #245	; 0xf5
 800891c:	73fb      	strb	r3, [r7, #15]
 800891e:	e000      	b.n	8008922 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008920:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d107      	bne.n	800893a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800892a:	7bbb      	ldrb	r3, [r7, #14]
 800892c:	461a      	mov	r2, r3
 800892e:	210a      	movs	r1, #10
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f003 faed 	bl	800bf10 <VL53L0X_WrByte>
 8008936:	4603      	mov	r3, r0
 8008938:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800893a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10f      	bne.n	8008962 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008942:	7e3b      	ldrb	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d102      	bne.n	800894e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	73bb      	strb	r3, [r7, #14]
 800894c:	e001      	b.n	8008952 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800894e:	2310      	movs	r3, #16
 8008950:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008952:	7bbb      	ldrb	r3, [r7, #14]
 8008954:	22ef      	movs	r2, #239	; 0xef
 8008956:	2184      	movs	r1, #132	; 0x84
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f003 fb27 	bl	800bfac <VL53L0X_UpdateByte>
 800895e:	4603      	mov	r3, r0
 8008960:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	787a      	ldrb	r2, [r7, #1]
 800896e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d105      	bne.n	8008986 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800897a:	2100      	movs	r1, #0
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f83f 	bl	8008a00 <VL53L0X_ClearInterruptMask>
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop

08008994 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	607a      	str	r2, [r7, #4]
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	460b      	mov	r3, r1
 80089a2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089a4:	2300      	movs	r3, #0
 80089a6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80089a8:	f107 0314 	add.w	r3, r7, #20
 80089ac:	461a      	mov	r2, r3
 80089ae:	210e      	movs	r1, #14
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f003 fb59 	bl	800c068 <VL53L0X_RdWord>
 80089b6:	4603      	mov	r3, r0
 80089b8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80089ba:	8abb      	ldrh	r3, [r7, #20]
 80089bc:	045b      	lsls	r3, r3, #17
 80089be:	461a      	mov	r2, r3
 80089c0:	4b0e      	ldr	r3, [pc, #56]	; (80089fc <VL53L0X_GetInterruptThresholds+0x68>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80089c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10f      	bne.n	80089f0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80089d0:	f107 0314 	add.w	r3, r7, #20
 80089d4:	461a      	mov	r2, r3
 80089d6:	210c      	movs	r1, #12
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f003 fb45 	bl	800c068 <VL53L0X_RdWord>
 80089de:	4603      	mov	r3, r0
 80089e0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80089e2:	8abb      	ldrh	r3, [r7, #20]
 80089e4:	045b      	lsls	r3, r3, #17
 80089e6:	461a      	mov	r2, r3
 80089e8:	4b04      	ldr	r3, [pc, #16]	; (80089fc <VL53L0X_GetInterruptThresholds+0x68>)
 80089ea:	4013      	ands	r3, r2
		*pThresholdHigh =
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	1ffe0000 	.word	0x1ffe0000

08008a00 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008a12:	2201      	movs	r2, #1
 8008a14:	210b      	movs	r1, #11
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f003 fa7a 	bl	800bf10 <VL53L0X_WrByte>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008a20:	2200      	movs	r2, #0
 8008a22:	210b      	movs	r1, #11
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f003 fa73 	bl	800bf10 <VL53L0X_WrByte>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008a34:	f107 030d 	add.w	r3, r7, #13
 8008a38:	461a      	mov	r2, r3
 8008a3a:	2113      	movs	r1, #19
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f003 fae9 	bl	800c014 <VL53L0X_RdByte>
 8008a42:	4603      	mov	r3, r0
 8008a44:	461a      	mov	r2, r3
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008a52:	7b7b      	ldrb	r3, [r7, #13]
 8008a54:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d006      	beq.n	8008a6a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d803      	bhi.n	8008a6a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0d3      	beq.n	8008a12 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d901      	bls.n	8008a74 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008a70:	23f4      	movs	r3, #244	; 0xf4
 8008a72:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008a8e:	f107 030e 	add.w	r3, r7, #14
 8008a92:	461a      	mov	r2, r3
 8008a94:	2113      	movs	r1, #19
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f003 fabc 	bl	800c014 <VL53L0X_RdByte>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	f003 0207 	and.w	r2, r3, #7
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	f003 0318 	and.w	r3, r3, #24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008ab4:	23fa      	movs	r3, #250	; 0xfa
 8008ab6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 fa03 	bl	8008ee4 <VL53L0X_perform_ref_spad_management>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008afc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008b00:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b06:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008b08:	f107 0308 	add.w	r3, r7, #8
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2128      	movs	r1, #40	; 0x28
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f003 faa9 	bl	800c068 <VL53L0X_RdWord>
 8008b16:	4603      	mov	r3, r0
 8008b18:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d11e      	bne.n	8008b60 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008b22:	893b      	ldrh	r3, [r7, #8]
 8008b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008b2c:	893b      	ldrh	r3, [r7, #8]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	dd0b      	ble.n	8008b50 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008b38:	893a      	ldrh	r2, [r7, #8]
 8008b3a:	897b      	ldrh	r3, [r7, #10]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	b21b      	sxth	r3, r3
 8008b42:	461a      	mov	r2, r3
					* 250;
 8008b44:	23fa      	movs	r3, #250	; 0xfa
 8008b46:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	e007      	b.n	8008b60 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008b50:	893b      	ldrh	r3, [r7, #8]
 8008b52:	b21b      	sxth	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	23fa      	movs	r3, #250	; 0xfa
 8008b58:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b08b      	sub	sp, #44	; 0x2c
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008b7a:	2308      	movs	r3, #8
 8008b7c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	f04f 32ff 	mov.w	r2, #4294967295
 8008b88:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b92:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b9c:	69b9      	ldr	r1, [r7, #24]
 8008b9e:	fb01 f202 	mul.w	r2, r1, r2
 8008ba2:	1a9b      	subs	r3, r3, r2
 8008ba4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8008baa:	e030      	b.n	8008c0e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	4413      	add	r3, r2
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d11e      	bne.n	8008c00 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008bc2:	7ffa      	ldrb	r2, [r7, #31]
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	fa42 f303 	asr.w	r3, r2, r3
 8008bca:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008bd0:	e016      	b.n	8008c00 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008bd2:	7ffb      	ldrb	r3, [r7, #31]
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00b      	beq.n	8008bf4 <get_next_good_spad+0x88>
				success = 1;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	fb03 f202 	mul.w	r2, r3, r2
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	4413      	add	r3, r2
 8008bec:	461a      	mov	r2, r3
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	601a      	str	r2, [r3, #0]
				break;
 8008bf2:	e009      	b.n	8008c08 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008bf4:	7ffb      	ldrb	r3, [r7, #31]
 8008bf6:	085b      	lsrs	r3, r3, #1
 8008bf8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008c00:	6a3a      	ldr	r2, [r7, #32]
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d3e4      	bcc.n	8008bd2 <get_next_good_spad+0x66>
				coarseIndex++) {
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d202      	bcs.n	8008c1c <get_next_good_spad+0xb0>
 8008c16:	7fbb      	ldrb	r3, [r7, #30]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0c7      	beq.n	8008bac <get_next_good_spad+0x40>
		}
	}
}
 8008c1c:	bf00      	nop
 8008c1e:	372c      	adds	r7, #44	; 0x2c
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008c30:	2301      	movs	r3, #1
 8008c32:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	099b      	lsrs	r3, r3, #6
 8008c38:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008c3a:	4a07      	ldr	r2, [pc, #28]	; (8008c58 <is_aperture+0x30>)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <is_aperture+0x22>
		isAperture = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	200002bc 	.word	0x200002bc

08008c5c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b089      	sub	sp, #36	; 0x24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008c6c:	2308      	movs	r3, #8
 8008c6e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c78:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c82:	69b9      	ldr	r1, [r7, #24]
 8008c84:	fb01 f202 	mul.w	r2, r1, r2
 8008c88:	1a9b      	subs	r3, r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d302      	bcc.n	8008c9a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008c94:	23ce      	movs	r3, #206	; 0xce
 8008c96:	77fb      	strb	r3, [r7, #31]
 8008c98:	e010      	b.n	8008cbc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b25a      	sxtb	r2, r3
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cac:	b25b      	sxtb	r3, r3
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	b259      	sxtb	r1, r3
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	b2ca      	uxtb	r2, r1
 8008cba:	701a      	strb	r2, [r3, #0]

	return status;
 8008cbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3724      	adds	r7, #36	; 0x24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8008cd6:	2306      	movs	r3, #6
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	21b0      	movs	r1, #176	; 0xb0
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f003 f8bb 	bl	800be58 <VL53L0X_WriteMulti>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8008ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008cfc:	2306      	movs	r3, #6
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	21b0      	movs	r1, #176	; 0xb0
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f003 f8d8 	bl	800beb8 <VL53L0X_ReadMulti>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08c      	sub	sp, #48	; 0x30
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	607a      	str	r2, [r7, #4]
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	460b      	mov	r3, r1
 8008d26:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d30:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d34:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008d36:	2300      	movs	r3, #0
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d3a:	e02b      	b.n	8008d94 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008d3c:	f107 031c 	add.w	r3, r7, #28
 8008d40:	6a3a      	ldr	r2, [r7, #32]
 8008d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7ff ff11 	bl	8008b6c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d50:	d103      	bne.n	8008d5a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008d52:	23ce      	movs	r3, #206	; 0xce
 8008d54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008d58:	e020      	b.n	8008d9c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d60:	4413      	add	r3, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff ff60 	bl	8008c28 <is_aperture>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d003      	beq.n	8008d7a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008d72:	23ce      	movs	r3, #206	; 0xce
 8008d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008d78:	e010      	b.n	8008d9c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008d7e:	6a3a      	ldr	r2, [r7, #32]
 8008d80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d82:	6838      	ldr	r0, [r7, #0]
 8008d84:	f7ff ff6a 	bl	8008c5c <enable_spad_bit>
		currentSpad++;
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	3301      	adds	r3, #1
 8008d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d3cf      	bcc.n	8008d3c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9e:	6a3a      	ldr	r2, [r7, #32]
 8008da0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008da2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff ff8d 	bl	8008ccc <set_ref_spad_map>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008db8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d121      	bne.n	8008e04 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008dc0:	f107 0314 	add.w	r3, r7, #20
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f7ff ff93 	bl	8008cf2 <get_ref_spad_map>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008dd6:	e011      	b.n	8008dfc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	4413      	add	r3, r2
 8008dde:	781a      	ldrb	r2, [r3, #0]
 8008de0:	f107 0114 	add.w	r1, r7, #20
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	440b      	add	r3, r1
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d003      	beq.n	8008df6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008dee:	23ce      	movs	r3, #206	; 0xce
 8008df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008df4:	e006      	b.n	8008e04 <enable_ref_spads+0xec>
			}
			i++;
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	3301      	adds	r3, #1
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d3e9      	bcc.n	8008dd8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008e04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3730      	adds	r7, #48	; 0x30
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08a      	sub	sp, #40	; 0x28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008e2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008e30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d107      	bne.n	8008e48 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008e38:	22c0      	movs	r2, #192	; 0xc0
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f003 f867 	bl	800bf10 <VL53L0X_WrByte>
 8008e42:	4603      	mov	r3, r0
 8008e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008e48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d108      	bne.n	8008e62 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008e50:	f107 0308 	add.w	r3, r7, #8
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7ff fc48 	bl	80086ec <VL53L0X_PerformSingleRangingMeasurement>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008e62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d107      	bne.n	8008e7a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	21ff      	movs	r1, #255	; 0xff
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f003 f84e 	bl	800bf10 <VL53L0X_WrByte>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008e7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d107      	bne.n	8008e92 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	21b6      	movs	r1, #182	; 0xb6
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f003 f8ee 	bl	800c068 <VL53L0X_RdWord>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008e92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d107      	bne.n	8008eaa <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	21ff      	movs	r1, #255	; 0xff
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f003 f836 	bl	800bf10 <VL53L0X_WrByte>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008eaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d112      	bne.n	8008ed8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	2101      	movs	r1, #1
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f003 f828 	bl	800bf10 <VL53L0X_WrByte>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008ec6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d104      	bne.n	8008ed8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008ed4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3728      	adds	r7, #40	; 0x28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008ee4:	b590      	push	{r4, r7, lr}
 8008ee6:	b09d      	sub	sp, #116	; 0x74
 8008ee8:	af06      	add	r7, sp, #24
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008ef6:	23b4      	movs	r3, #180	; 0xb4
 8008ef8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8008efc:	2303      	movs	r3, #3
 8008efe:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008f00:	232c      	movs	r3, #44	; 0x2c
 8008f02:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008f10:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008f14:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008f1e:	2306      	movs	r3, #6
 8008f20:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008f48:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f4e:	e009      	b.n	8008f64 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f60:	3301      	adds	r3, #1
 8008f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d3f1      	bcc.n	8008f50 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	21ff      	movs	r1, #255	; 0xff
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f002 ffcd 	bl	800bf10 <VL53L0X_WrByte>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008f7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d107      	bne.n	8008f94 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008f84:	2200      	movs	r2, #0
 8008f86:	214f      	movs	r1, #79	; 0x4f
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f002 ffc1 	bl	800bf10 <VL53L0X_WrByte>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008f94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d107      	bne.n	8008fac <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008f9c:	222c      	movs	r2, #44	; 0x2c
 8008f9e:	214e      	movs	r1, #78	; 0x4e
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f002 ffb5 	bl	800bf10 <VL53L0X_WrByte>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008fac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d107      	bne.n	8008fc4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	21ff      	movs	r1, #255	; 0xff
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f002 ffa9 	bl	800bf10 <VL53L0X_WrByte>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008fc4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d109      	bne.n	8008fe0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008fcc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	21b6      	movs	r1, #182	; 0xb6
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f002 ff9b 	bl	800bf10 <VL53L0X_WrByte>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008fe0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d107      	bne.n	8008ff8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2180      	movs	r1, #128	; 0x80
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f002 ff8f 	bl	800bf10 <VL53L0X_WrByte>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008ff8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009000:	f107 0210 	add.w	r2, r7, #16
 8009004:	f107 0111 	add.w	r1, r7, #17
 8009008:	2300      	movs	r3, #0
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fbbb 	bl	8009786 <VL53L0X_perform_ref_calibration>
 8009010:	4603      	mov	r3, r0
 8009012:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009016:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800901a:	2b00      	cmp	r3, #0
 800901c:	d121      	bne.n	8009062 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009024:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800902a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800903a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800903e:	f107 0218 	add.w	r2, r7, #24
 8009042:	9204      	str	r2, [sp, #16]
 8009044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009046:	9203      	str	r2, [sp, #12]
 8009048:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800904a:	9202      	str	r2, [sp, #8]
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	4623      	mov	r3, r4
 8009054:	4602      	mov	r2, r0
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f7ff fe5e 	bl	8008d18 <enable_ref_spads>
 800905c:	4603      	mov	r3, r0
 800905e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009062:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009066:	2b00      	cmp	r3, #0
 8009068:	d174      	bne.n	8009154 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800906e:	f107 0312 	add.w	r3, r7, #18
 8009072:	4619      	mov	r1, r3
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f7ff fecb 	bl	8008e10 <perform_ref_signal_measurement>
 800907a:	4603      	mov	r3, r0
 800907c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009080:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009084:	2b00      	cmp	r3, #0
 8009086:	d161      	bne.n	800914c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009088:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800908a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800908c:	429a      	cmp	r2, r3
 800908e:	d25d      	bcs.n	800914c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009090:	2300      	movs	r3, #0
 8009092:	64bb      	str	r3, [r7, #72]	; 0x48
 8009094:	e009      	b.n	80090aa <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800909a:	4413      	add	r3, r2
 800909c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80090a0:	2200      	movs	r2, #0
 80090a2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80090a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a6:	3301      	adds	r3, #1
 80090a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80090aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d3f1      	bcc.n	8009096 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80090b2:	e002      	b.n	80090ba <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80090b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b6:	3301      	adds	r3, #1
 80090b8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80090ba:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80090be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c0:	4413      	add	r3, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff fdb0 	bl	8008c28 <is_aperture>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d103      	bne.n	80090d6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80090ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d3ee      	bcc.n	80090b4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80090d6:	2301      	movs	r3, #1
 80090d8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80090da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090dc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80090ea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80090ee:	f107 0218 	add.w	r2, r7, #24
 80090f2:	9204      	str	r2, [sp, #16]
 80090f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090f6:	9203      	str	r2, [sp, #12]
 80090f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090fa:	9202      	str	r2, [sp, #8]
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	4623      	mov	r3, r4
 8009104:	4602      	mov	r2, r0
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f7ff fe06 	bl	8008d18 <enable_ref_spads>
 800910c:	4603      	mov	r3, r0
 800910e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009112:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009116:	2b00      	cmp	r3, #0
 8009118:	d11b      	bne.n	8009152 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800911e:	f107 0312 	add.w	r3, r7, #18
 8009122:	4619      	mov	r1, r3
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f7ff fe73 	bl	8008e10 <perform_ref_signal_measurement>
 800912a:	4603      	mov	r3, r0
 800912c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009130:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10c      	bne.n	8009152 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009138:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800913a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800913c:	429a      	cmp	r2, r3
 800913e:	d208      	bcs.n	8009152 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009140:	2301      	movs	r3, #1
 8009142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800914a:	e002      	b.n	8009152 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009150:	e000      	b.n	8009154 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009152:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009154:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009158:	2b00      	cmp	r3, #0
 800915a:	f040 80af 	bne.w	80092bc <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800915e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009160:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009162:	429a      	cmp	r2, r3
 8009164:	f240 80aa 	bls.w	80092bc <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800916e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009170:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009178:	f107 031c 	add.w	r3, r7, #28
 800917c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800917e:	4618      	mov	r0, r3
 8009180:	f003 f820 	bl	800c1c4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009184:	8a7b      	ldrh	r3, [r7, #18]
 8009186:	461a      	mov	r2, r3
 8009188:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	bfb8      	it	lt
 8009190:	425b      	neglt	r3, r3
 8009192:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800919a:	e086      	b.n	80092aa <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80091a2:	f107 0314 	add.w	r3, r7, #20
 80091a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091aa:	f7ff fcdf 	bl	8008b6c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d103      	bne.n	80091be <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80091b6:	23ce      	movs	r3, #206	; 0xce
 80091b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80091bc:	e07e      	b.n	80092bc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80091be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	4413      	add	r3, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7ff fd2e 	bl	8008c28 <is_aperture>
 80091cc:	4603      	mov	r3, r0
 80091ce:	461a      	mov	r2, r3
 80091d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d003      	beq.n	80091de <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80091dc:	e06e      	b.n	80092bc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80091de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e0:	3301      	adds	r3, #1
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80091ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7ff fd32 	bl	8008c5c <enable_spad_bit>
 80091f8:	4603      	mov	r3, r0
 80091fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80091fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10c      	bne.n	8009220 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009208:	3301      	adds	r3, #1
 800920a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009212:	4619      	mov	r1, r3
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7ff fd59 	bl	8008ccc <set_ref_spad_map>
 800921a:	4603      	mov	r3, r0
 800921c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009220:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009224:	2b00      	cmp	r3, #0
 8009226:	d146      	bne.n	80092b6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009228:	f107 0312 	add.w	r3, r7, #18
 800922c:	4619      	mov	r1, r3
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f7ff fdee 	bl	8008e10 <perform_ref_signal_measurement>
 8009234:	4603      	mov	r3, r0
 8009236:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800923a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800923e:	2b00      	cmp	r3, #0
 8009240:	d13b      	bne.n	80092ba <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009242:	8a7b      	ldrh	r3, [r7, #18]
 8009244:	461a      	mov	r2, r3
 8009246:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	bfb8      	it	lt
 800924e:	425b      	neglt	r3, r3
 8009250:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009252:	8a7b      	ldrh	r3, [r7, #18]
 8009254:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009256:	429a      	cmp	r2, r3
 8009258:	d21c      	bcs.n	8009294 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800925a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800925e:	429a      	cmp	r2, r3
 8009260:	d914      	bls.n	800928c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009262:	f107 031c 	add.w	r3, r7, #28
 8009266:	4619      	mov	r1, r3
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff fd2f 	bl	8008ccc <set_ref_spad_map>
 800926e:	4603      	mov	r3, r0
 8009270:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800927a:	f107 011c 	add.w	r1, r7, #28
 800927e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009280:	4618      	mov	r0, r3
 8009282:	f002 ff9f 	bl	800c1c4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8009286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009288:	3b01      	subs	r3, #1
 800928a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800928c:	2301      	movs	r3, #1
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009292:	e00a      	b.n	80092aa <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800929e:	f107 031c 	add.w	r3, r7, #28
 80092a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092a4:	4618      	mov	r0, r3
 80092a6:	f002 ff8d 	bl	800c1c4 <memcpy>
		while (!complete) {
 80092aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f43f af74 	beq.w	800919c <VL53L0X_perform_ref_spad_management+0x2b8>
 80092b4:	e002      	b.n	80092bc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80092b6:	bf00      	nop
 80092b8:	e000      	b.n	80092bc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80092ba:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80092bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d115      	bne.n	80092f0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092c8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80092d0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	781a      	ldrb	r2, [r3, #0]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80092f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	375c      	adds	r7, #92	; 0x5c
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd90      	pop	{r4, r7, pc}

080092fc <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80092fc:	b590      	push	{r4, r7, lr}
 80092fe:	b093      	sub	sp, #76	; 0x4c
 8009300:	af06      	add	r7, sp, #24
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800930a:	2300      	movs	r3, #0
 800930c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009314:	23b4      	movs	r3, #180	; 0xb4
 8009316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800931a:	2306      	movs	r3, #6
 800931c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800931e:	232c      	movs	r3, #44	; 0x2c
 8009320:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009322:	2201      	movs	r2, #1
 8009324:	21ff      	movs	r1, #255	; 0xff
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f002 fdf2 	bl	800bf10 <VL53L0X_WrByte>
 800932c:	4603      	mov	r3, r0
 800932e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009332:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009336:	2b00      	cmp	r3, #0
 8009338:	d107      	bne.n	800934a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800933a:	2200      	movs	r2, #0
 800933c:	214f      	movs	r1, #79	; 0x4f
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f002 fde6 	bl	800bf10 <VL53L0X_WrByte>
 8009344:	4603      	mov	r3, r0
 8009346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800934a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800934e:	2b00      	cmp	r3, #0
 8009350:	d107      	bne.n	8009362 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009352:	222c      	movs	r2, #44	; 0x2c
 8009354:	214e      	movs	r1, #78	; 0x4e
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f002 fdda 	bl	800bf10 <VL53L0X_WrByte>
 800935c:	4603      	mov	r3, r0
 800935e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009362:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009366:	2b00      	cmp	r3, #0
 8009368:	d107      	bne.n	800937a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800936a:	2200      	movs	r2, #0
 800936c:	21ff      	movs	r1, #255	; 0xff
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f002 fdce 	bl	800bf10 <VL53L0X_WrByte>
 8009374:	4603      	mov	r3, r0
 8009376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800937a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800937e:	2b00      	cmp	r3, #0
 8009380:	d109      	bne.n	8009396 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009386:	461a      	mov	r2, r3
 8009388:	21b6      	movs	r1, #182	; 0xb6
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f002 fdc0 	bl	800bf10 <VL53L0X_WrByte>
 8009390:	4603      	mov	r3, r0
 8009392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8009396:	2300      	movs	r3, #0
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
 800939a:	e009      	b.n	80093b0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80093a6:	2200      	movs	r2, #0
 80093a8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	3301      	adds	r3, #1
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
 80093b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d3f1      	bcc.n	800939c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d011      	beq.n	80093e2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80093be:	e002      	b.n	80093c6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	3301      	adds	r3, #1
 80093c4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80093c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80093ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093cc:	4413      	add	r3, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff fc2a 	bl	8008c28 <is_aperture>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d103      	bne.n	80093e2 <VL53L0X_set_reference_spads+0xe6>
 80093da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d3ee      	bcc.n	80093c0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80093ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093f2:	79f9      	ldrb	r1, [r7, #7]
 80093f4:	f107 0214 	add.w	r2, r7, #20
 80093f8:	9204      	str	r2, [sp, #16]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	9203      	str	r2, [sp, #12]
 80093fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009400:	9202      	str	r2, [sp, #8]
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4623      	mov	r3, r4
 800940a:	4602      	mov	r2, r0
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7ff fc83 	bl	8008d18 <enable_ref_spads>
 8009412:	4603      	mov	r3, r0
 8009414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8009418:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10c      	bne.n	800943a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	b2da      	uxtb	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	79fa      	ldrb	r2, [r7, #7]
 8009436:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800943a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800943e:	4618      	mov	r0, r3
 8009440:	3734      	adds	r7, #52	; 0x34
 8009442:	46bd      	mov	sp, r7
 8009444:	bd90      	pop	{r4, r7, pc}

08009446 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10a      	bne.n	8009474 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	f043 0301 	orr.w	r3, r3, #1
 8009464:	b2db      	uxtb	r3, r3
 8009466:	461a      	mov	r2, r3
 8009468:	2100      	movs	r1, #0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f002 fd50 	bl	800bf10 <VL53L0X_WrByte>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8009474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d104      	bne.n	8009486 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f9bf 	bl	8009800 <VL53L0X_measurement_poll_for_completion>
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d105      	bne.n	800949a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800948e:	2100      	movs	r1, #0
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff fab5 	bl	8008a00 <VL53L0X_ClearInterruptMask>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800949a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d106      	bne.n	80094b0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80094a2:	2200      	movs	r2, #0
 80094a4:	2100      	movs	r1, #0
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f002 fd32 	bl	800bf10 <VL53L0X_WrByte>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]

	return Status;
 80094b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	4608      	mov	r0, r1
 80094c6:	4611      	mov	r1, r2
 80094c8:	461a      	mov	r2, r3
 80094ca:	4603      	mov	r3, r0
 80094cc:	70fb      	strb	r3, [r7, #3]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70bb      	strb	r3, [r7, #2]
 80094d2:	4613      	mov	r3, r2
 80094d4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80094de:	2201      	movs	r2, #1
 80094e0:	21ff      	movs	r1, #255	; 0xff
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f002 fd14 	bl	800bf10 <VL53L0X_WrByte>
 80094e8:	4603      	mov	r3, r0
 80094ea:	461a      	mov	r2, r3
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80094f2:	2200      	movs	r2, #0
 80094f4:	2100      	movs	r1, #0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f002 fd0a 	bl	800bf10 <VL53L0X_WrByte>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	4313      	orrs	r3, r2
 8009504:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009506:	2200      	movs	r2, #0
 8009508:	21ff      	movs	r1, #255	; 0xff
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f002 fd00 	bl	800bf10 <VL53L0X_WrByte>
 8009510:	4603      	mov	r3, r0
 8009512:	461a      	mov	r2, r3
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4313      	orrs	r3, r2
 8009518:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d01e      	beq.n	800955e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009520:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d009      	beq.n	800953c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	21cb      	movs	r1, #203	; 0xcb
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f002 fd71 	bl	800c014 <VL53L0X_RdByte>
 8009532:	4603      	mov	r3, r0
 8009534:	461a      	mov	r2, r3
 8009536:	7bfb      	ldrb	r3, [r7, #15]
 8009538:	4313      	orrs	r3, r2
 800953a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800953c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009540:	2b00      	cmp	r3, #0
 8009542:	d02a      	beq.n	800959a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009544:	f107 030e 	add.w	r3, r7, #14
 8009548:	461a      	mov	r2, r3
 800954a:	21ee      	movs	r1, #238	; 0xee
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f002 fd61 	bl	800c014 <VL53L0X_RdByte>
 8009552:	4603      	mov	r3, r0
 8009554:	461a      	mov	r2, r3
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	4313      	orrs	r3, r2
 800955a:	73fb      	strb	r3, [r7, #15]
 800955c:	e01d      	b.n	800959a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800955e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00a      	beq.n	800957c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8009566:	78bb      	ldrb	r3, [r7, #2]
 8009568:	461a      	mov	r2, r3
 800956a:	21cb      	movs	r1, #203	; 0xcb
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f002 fccf 	bl	800bf10 <VL53L0X_WrByte>
 8009572:	4603      	mov	r3, r0
 8009574:	461a      	mov	r2, r3
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	4313      	orrs	r3, r2
 800957a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800957c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00a      	beq.n	800959a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8009584:	787b      	ldrb	r3, [r7, #1]
 8009586:	2280      	movs	r2, #128	; 0x80
 8009588:	21ee      	movs	r1, #238	; 0xee
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f002 fd0e 	bl	800bfac <VL53L0X_UpdateByte>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	4313      	orrs	r3, r2
 8009598:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800959a:	2201      	movs	r2, #1
 800959c:	21ff      	movs	r1, #255	; 0xff
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f002 fcb6 	bl	800bf10 <VL53L0X_WrByte>
 80095a4:	4603      	mov	r3, r0
 80095a6:	461a      	mov	r2, r3
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80095ae:	2201      	movs	r2, #1
 80095b0:	2100      	movs	r1, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f002 fcac 	bl	800bf10 <VL53L0X_WrByte>
 80095b8:	4603      	mov	r3, r0
 80095ba:	461a      	mov	r2, r3
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	4313      	orrs	r3, r2
 80095c0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80095c2:	2200      	movs	r2, #0
 80095c4:	21ff      	movs	r1, #255	; 0xff
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f002 fca2 	bl	800bf10 <VL53L0X_WrByte>
 80095cc:	4603      	mov	r3, r0
 80095ce:	461a      	mov	r2, r3
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	f023 0310 	bic.w	r3, r3, #16
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	701a      	strb	r2, [r3, #0]

	return Status;
 80095e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b08a      	sub	sp, #40	; 0x28
 80095f2:	af04      	add	r7, sp, #16
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	4611      	mov	r1, r2
 80095fa:	461a      	mov	r2, r3
 80095fc:	460b      	mov	r3, r1
 80095fe:	71fb      	strb	r3, [r7, #7]
 8009600:	4613      	mov	r3, r2
 8009602:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009604:	2300      	movs	r3, #0
 8009606:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009608:	2300      	movs	r3, #0
 800960a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009618:	79bb      	ldrb	r3, [r7, #6]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009624:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009626:	2201      	movs	r2, #1
 8009628:	2101      	movs	r1, #1
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f002 fc70 	bl	800bf10 <VL53L0X_WrByte>
 8009630:	4603      	mov	r3, r0
 8009632:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800963c:	2140      	movs	r1, #64	; 0x40
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff ff01 	bl	8009446 <VL53L0X_perform_single_ref_calibration>
 8009644:	4603      	mov	r3, r0
 8009646:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d115      	bne.n	800967c <VL53L0X_perform_vhv_calibration+0x8e>
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d112      	bne.n	800967c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009656:	7d39      	ldrb	r1, [r7, #20]
 8009658:	7d7a      	ldrb	r2, [r7, #21]
 800965a:	2300      	movs	r3, #0
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	2301      	movs	r3, #1
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	f107 0313 	add.w	r3, r7, #19
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	460b      	mov	r3, r1
 800966e:	2101      	movs	r1, #1
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff ff23 	bl	80094bc <VL53L0X_ref_calibration_io>
 8009676:	4603      	mov	r3, r0
 8009678:	75fb      	strb	r3, [r7, #23]
 800967a:	e002      	b.n	8009682 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2200      	movs	r2, #0
 8009680:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009682:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d112      	bne.n	80096b0 <VL53L0X_perform_vhv_calibration+0xc2>
 800968a:	79bb      	ldrb	r3, [r7, #6]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00f      	beq.n	80096b0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009690:	7dbb      	ldrb	r3, [r7, #22]
 8009692:	461a      	mov	r2, r3
 8009694:	2101      	movs	r1, #1
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f002 fc3a 	bl	800bf10 <VL53L0X_WrByte>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80096a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d103      	bne.n	80096b0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	7dba      	ldrb	r2, [r7, #22]
 80096ac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80096b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08a      	sub	sp, #40	; 0x28
 80096c0:	af04      	add	r7, sp, #16
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4611      	mov	r1, r2
 80096c8:	461a      	mov	r2, r3
 80096ca:	460b      	mov	r3, r1
 80096cc:	71fb      	strb	r3, [r7, #7]
 80096ce:	4613      	mov	r3, r2
 80096d0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80096e2:	79bb      	ldrb	r3, [r7, #6]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d003      	beq.n	80096f0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80096ee:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80096f0:	2202      	movs	r2, #2
 80096f2:	2101      	movs	r1, #1
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f002 fc0b 	bl	800bf10 <VL53L0X_WrByte>
 80096fa:	4603      	mov	r3, r0
 80096fc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80096fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d105      	bne.n	8009712 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009706:	2100      	movs	r1, #0
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f7ff fe9c 	bl	8009446 <VL53L0X_perform_single_ref_calibration>
 800970e:	4603      	mov	r3, r0
 8009710:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009712:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d115      	bne.n	8009746 <VL53L0X_perform_phase_calibration+0x8a>
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d112      	bne.n	8009746 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009720:	7d39      	ldrb	r1, [r7, #20]
 8009722:	7d7a      	ldrb	r2, [r7, #21]
 8009724:	2301      	movs	r3, #1
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	2300      	movs	r3, #0
 800972a:	9302      	str	r3, [sp, #8]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	f107 0313 	add.w	r3, r7, #19
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	460b      	mov	r3, r1
 8009738:	2101      	movs	r1, #1
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f7ff febe 	bl	80094bc <VL53L0X_ref_calibration_io>
 8009740:	4603      	mov	r3, r0
 8009742:	75fb      	strb	r3, [r7, #23]
 8009744:	e002      	b.n	800974c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2200      	movs	r2, #0
 800974a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800974c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d112      	bne.n	800977a <VL53L0X_perform_phase_calibration+0xbe>
 8009754:	79bb      	ldrb	r3, [r7, #6]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00f      	beq.n	800977a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800975a:	7dbb      	ldrb	r3, [r7, #22]
 800975c:	461a      	mov	r2, r3
 800975e:	2101      	movs	r1, #1
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f002 fbd5 	bl	800bf10 <VL53L0X_WrByte>
 8009766:	4603      	mov	r3, r0
 8009768:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800976a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d103      	bne.n	800977a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	7dba      	ldrb	r2, [r7, #22]
 8009776:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800977a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b086      	sub	sp, #24
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
 8009792:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009794:	2300      	movs	r3, #0
 8009796:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80097a2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80097a4:	78fa      	ldrb	r2, [r7, #3]
 80097a6:	2300      	movs	r3, #0
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7ff ff1f 	bl	80095ee <VL53L0X_perform_vhv_calibration>
 80097b0:	4603      	mov	r3, r0
 80097b2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80097b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d107      	bne.n	80097cc <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	2300      	movs	r3, #0
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7ff ff7a 	bl	80096bc <VL53L0X_perform_phase_calibration>
 80097c8:	4603      	mov	r3, r0
 80097ca:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80097cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10f      	bne.n	80097f4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80097d4:	7dbb      	ldrb	r3, [r7, #22]
 80097d6:	461a      	mov	r2, r3
 80097d8:	2101      	movs	r1, #1
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f002 fb98 	bl	800bf10 <VL53L0X_WrByte>
 80097e0:	4603      	mov	r3, r0
 80097e2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80097e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	7dba      	ldrb	r2, [r7, #22]
 80097f0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80097f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009808:	2300      	movs	r3, #0
 800980a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009814:	f107 030f 	add.w	r3, r7, #15
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7fe fe02 	bl	8008424 <VL53L0X_GetMeasurementDataReady>
 8009820:	4603      	mov	r3, r0
 8009822:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009824:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d110      	bne.n	800984e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d00f      	beq.n	8009852 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	3301      	adds	r3, #1
 8009836:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800983e:	d302      	bcc.n	8009846 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009840:	23f9      	movs	r3, #249	; 0xf9
 8009842:	75fb      	strb	r3, [r7, #23]
			break;
 8009844:	e006      	b.n	8009854 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f002 fc82 	bl	800c150 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800984c:	e7e2      	b.n	8009814 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800984e:	bf00      	nop
 8009850:	e000      	b.n	8009854 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8009852:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009854:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800986e:	79fb      	ldrb	r3, [r7, #7]
 8009870:	3301      	adds	r3, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009878:	7bfb      	ldrb	r3, [r7, #15]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8009886:	b480      	push	{r7}
 8009888:	b085      	sub	sp, #20
 800988a:	af00      	add	r7, sp, #0
 800988c:	4603      	mov	r3, r0
 800988e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	085b      	lsrs	r3, r3, #1
 8009898:	b2db      	uxtb	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80098b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098bc:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80098be:	e002      	b.n	80098c6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	089b      	lsrs	r3, r3, #2
 80098c4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d8f8      	bhi.n	80098c0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80098ce:	e017      	b.n	8009900 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	4413      	add	r3, r2
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d30b      	bcc.n	80098f4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	4413      	add	r3, r2
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	085b      	lsrs	r3, r3, #1
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	4413      	add	r3, r2
 80098f0:	60fb      	str	r3, [r7, #12]
 80098f2:	e002      	b.n	80098fa <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	085b      	lsrs	r3, r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	089b      	lsrs	r3, r3, #2
 80098fe:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e4      	bne.n	80098d0 <VL53L0X_isqrt+0x24>
	}

	return res;
 8009906:	68fb      	ldr	r3, [r7, #12]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800991c:	2300      	movs	r3, #0
 800991e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009920:	2200      	movs	r2, #0
 8009922:	2183      	movs	r1, #131	; 0x83
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f002 faf3 	bl	800bf10 <VL53L0X_WrByte>
 800992a:	4603      	mov	r3, r0
 800992c:	461a      	mov	r2, r3
 800992e:	7dfb      	ldrb	r3, [r7, #23]
 8009930:	4313      	orrs	r3, r2
 8009932:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d11e      	bne.n	800997a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009940:	f107 030f 	add.w	r3, r7, #15
 8009944:	461a      	mov	r2, r3
 8009946:	2183      	movs	r1, #131	; 0x83
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f002 fb63 	bl	800c014 <VL53L0X_RdByte>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10a      	bne.n	800996e <VL53L0X_device_read_strobe+0x5a>
 8009958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d106      	bne.n	800996e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	3301      	adds	r3, #1
 8009964:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800996c:	d3e8      	bcc.n	8009940 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009974:	d301      	bcc.n	800997a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009976:	23f9      	movs	r3, #249	; 0xf9
 8009978:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800997a:	2201      	movs	r2, #1
 800997c:	2183      	movs	r1, #131	; 0x83
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f002 fac6 	bl	800bf10 <VL53L0X_WrByte>
 8009984:	4603      	mov	r3, r0
 8009986:	461a      	mov	r2, r3
 8009988:	7dfb      	ldrb	r3, [r7, #23]
 800998a:	4313      	orrs	r3, r2
 800998c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800998e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b098      	sub	sp, #96	; 0x60
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099a6:	2300      	movs	r3, #0
 80099a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80099ca:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80099ce:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80099e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80099e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80099ea:	2b07      	cmp	r3, #7
 80099ec:	f000 8408 	beq.w	800a200 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80099f0:	2201      	movs	r2, #1
 80099f2:	2180      	movs	r1, #128	; 0x80
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f002 fa8b 	bl	800bf10 <VL53L0X_WrByte>
 80099fa:	4603      	mov	r3, r0
 80099fc:	461a      	mov	r2, r3
 80099fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a02:	4313      	orrs	r3, r2
 8009a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009a08:	2201      	movs	r2, #1
 8009a0a:	21ff      	movs	r1, #255	; 0xff
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f002 fa7f 	bl	800bf10 <VL53L0X_WrByte>
 8009a12:	4603      	mov	r3, r0
 8009a14:	461a      	mov	r2, r3
 8009a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009a20:	2200      	movs	r2, #0
 8009a22:	2100      	movs	r1, #0
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f002 fa73 	bl	800bf10 <VL53L0X_WrByte>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a32:	4313      	orrs	r3, r2
 8009a34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009a38:	2206      	movs	r2, #6
 8009a3a:	21ff      	movs	r1, #255	; 0xff
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f002 fa67 	bl	800bf10 <VL53L0X_WrByte>
 8009a42:	4603      	mov	r3, r0
 8009a44:	461a      	mov	r2, r3
 8009a46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009a50:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009a54:	461a      	mov	r2, r3
 8009a56:	2183      	movs	r1, #131	; 0x83
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f002 fadb 	bl	800c014 <VL53L0X_RdByte>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	461a      	mov	r2, r3
 8009a62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a70:	f043 0304 	orr.w	r3, r3, #4
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	461a      	mov	r2, r3
 8009a78:	2183      	movs	r1, #131	; 0x83
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f002 fa48 	bl	800bf10 <VL53L0X_WrByte>
 8009a80:	4603      	mov	r3, r0
 8009a82:	461a      	mov	r2, r3
 8009a84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009a8e:	2207      	movs	r2, #7
 8009a90:	21ff      	movs	r1, #255	; 0xff
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f002 fa3c 	bl	800bf10 <VL53L0X_WrByte>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	2181      	movs	r1, #129	; 0x81
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f002 fa30 	bl	800bf10 <VL53L0X_WrByte>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f002 fb46 	bl	800c150 <VL53L0X_PollingDelay>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009acc:	4313      	orrs	r3, r2
 8009ace:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	2180      	movs	r1, #128	; 0x80
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f002 fa1a 	bl	800bf10 <VL53L0X_WrByte>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009aea:	78fb      	ldrb	r3, [r7, #3]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 8098 	beq.w	8009c26 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009af6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009afa:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f040 8091 	bne.w	8009c26 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009b04:	226b      	movs	r2, #107	; 0x6b
 8009b06:	2194      	movs	r1, #148	; 0x94
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f002 fa01 	bl	800bf10 <VL53L0X_WrByte>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	461a      	mov	r2, r3
 8009b12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b16:	4313      	orrs	r3, r2
 8009b18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7ff fef9 	bl	8009914 <VL53L0X_device_read_strobe>
 8009b22:	4603      	mov	r3, r0
 8009b24:	461a      	mov	r2, r3
 8009b26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b34:	461a      	mov	r2, r3
 8009b36:	2190      	movs	r1, #144	; 0x90
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f002 facd 	bl	800c0d8 <VL53L0X_RdDWord>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	461a      	mov	r2, r3
 8009b42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b56:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	0bdb      	lsrs	r3, r3, #15
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009b68:	2224      	movs	r2, #36	; 0x24
 8009b6a:	2194      	movs	r1, #148	; 0x94
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f002 f9cf 	bl	800bf10 <VL53L0X_WrByte>
 8009b72:	4603      	mov	r3, r0
 8009b74:	461a      	mov	r2, r3
 8009b76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff fec7 	bl	8009914 <VL53L0X_device_read_strobe>
 8009b86:	4603      	mov	r3, r0
 8009b88:	461a      	mov	r2, r3
 8009b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b98:	461a      	mov	r2, r3
 8009b9a:	2190      	movs	r1, #144	; 0x90
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f002 fa9b 	bl	800c0d8 <VL53L0X_RdDWord>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009baa:	4313      	orrs	r3, r2
 8009bac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	0e1b      	lsrs	r3, r3, #24
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bba:	0c1b      	lsrs	r3, r3, #16
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	0a1b      	lsrs	r3, r3, #8
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009bce:	2225      	movs	r2, #37	; 0x25
 8009bd0:	2194      	movs	r1, #148	; 0x94
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f002 f99c 	bl	800bf10 <VL53L0X_WrByte>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009be0:	4313      	orrs	r3, r2
 8009be2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7ff fe94 	bl	8009914 <VL53L0X_device_read_strobe>
 8009bec:	4603      	mov	r3, r0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009bfe:	461a      	mov	r2, r3
 8009c00:	2190      	movs	r1, #144	; 0x90
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f002 fa68 	bl	800c0d8 <VL53L0X_RdDWord>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c10:	4313      	orrs	r3, r2
 8009c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	0e1b      	lsrs	r3, r3, #24
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c20:	0c1b      	lsrs	r3, r3, #16
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009c26:	78fb      	ldrb	r3, [r7, #3]
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 8189 	beq.w	8009f44 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009c32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c36:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f040 8182 	bne.w	8009f44 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009c40:	2202      	movs	r2, #2
 8009c42:	2194      	movs	r1, #148	; 0x94
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f002 f963 	bl	800bf10 <VL53L0X_WrByte>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c52:	4313      	orrs	r3, r2
 8009c54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff fe5b 	bl	8009914 <VL53L0X_device_read_strobe>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	461a      	mov	r2, r3
 8009c62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c66:	4313      	orrs	r3, r2
 8009c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009c6c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009c70:	461a      	mov	r2, r3
 8009c72:	2190      	movs	r1, #144	; 0x90
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f002 f9cd 	bl	800c014 <VL53L0X_RdByte>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c82:	4313      	orrs	r3, r2
 8009c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009c88:	227b      	movs	r2, #123	; 0x7b
 8009c8a:	2194      	movs	r1, #148	; 0x94
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f002 f93f 	bl	800bf10 <VL53L0X_WrByte>
 8009c92:	4603      	mov	r3, r0
 8009c94:	461a      	mov	r2, r3
 8009c96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7ff fe37 	bl	8009914 <VL53L0X_device_read_strobe>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	461a      	mov	r2, r3
 8009caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009cb4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009cb8:	461a      	mov	r2, r3
 8009cba:	2190      	movs	r1, #144	; 0x90
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f002 f9a9 	bl	800c014 <VL53L0X_RdByte>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009cd0:	2277      	movs	r2, #119	; 0x77
 8009cd2:	2194      	movs	r1, #148	; 0x94
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f002 f91b 	bl	800bf10 <VL53L0X_WrByte>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	461a      	mov	r2, r3
 8009cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fe13 	bl	8009914 <VL53L0X_device_read_strobe>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009cfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d00:	461a      	mov	r2, r3
 8009d02:	2190      	movs	r1, #144	; 0x90
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f002 f9e7 	bl	800c0d8 <VL53L0X_RdDWord>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d12:	4313      	orrs	r3, r2
 8009d14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	0e5b      	lsrs	r3, r3, #25
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	0c9b      	lsrs	r3, r3, #18
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	0adb      	lsrs	r3, r3, #11
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	091b      	lsrs	r3, r3, #4
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	00db      	lsls	r3, r3, #3
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009d62:	2278      	movs	r2, #120	; 0x78
 8009d64:	2194      	movs	r1, #148	; 0x94
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f002 f8d2 	bl	800bf10 <VL53L0X_WrByte>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d74:	4313      	orrs	r3, r2
 8009d76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff fdca 	bl	8009914 <VL53L0X_device_read_strobe>
 8009d80:	4603      	mov	r3, r0
 8009d82:	461a      	mov	r2, r3
 8009d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d92:	461a      	mov	r2, r3
 8009d94:	2190      	movs	r1, #144	; 0x90
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f002 f99e 	bl	800c0d8 <VL53L0X_RdDWord>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009da4:	4313      	orrs	r3, r2
 8009da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	0f5b      	lsrs	r3, r3, #29
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009db4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009db6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dba:	4413      	add	r3, r2
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	0d9b      	lsrs	r3, r3, #22
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	0bdb      	lsrs	r3, r3, #15
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	0a1b      	lsrs	r3, r3, #8
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	085b      	lsrs	r3, r3, #1
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	019b      	lsls	r3, r3, #6
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009e0a:	2279      	movs	r2, #121	; 0x79
 8009e0c:	2194      	movs	r1, #148	; 0x94
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f002 f87e 	bl	800bf10 <VL53L0X_WrByte>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff fd76 	bl	8009914 <VL53L0X_device_read_strobe>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e30:	4313      	orrs	r3, r2
 8009e32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	2190      	movs	r1, #144	; 0x90
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f002 f94a 	bl	800c0d8 <VL53L0X_RdDWord>
 8009e44:	4603      	mov	r3, r0
 8009e46:	461a      	mov	r2, r3
 8009e48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	0e9b      	lsrs	r3, r3, #26
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009e5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e62:	4413      	add	r3, r2
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	0cdb      	lsrs	r3, r3, #19
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	0b1b      	lsrs	r3, r3, #12
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	095b      	lsrs	r3, r3, #5
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009ea4:	227a      	movs	r2, #122	; 0x7a
 8009ea6:	2194      	movs	r1, #148	; 0x94
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f002 f831 	bl	800bf10 <VL53L0X_WrByte>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff fd29 	bl	8009914 <VL53L0X_device_read_strobe>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009ed0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	2190      	movs	r1, #144	; 0x90
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f002 f8fd 	bl	800c0d8 <VL53L0X_RdDWord>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	0f9b      	lsrs	r3, r3, #30
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef6:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009efc:	4413      	add	r3, r2
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	0ddb      	lsrs	r3, r3, #23
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	0c1b      	lsrs	r3, r3, #16
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	0a5b      	lsrs	r3, r3, #9
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	089b      	lsrs	r3, r3, #2
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 80f1 	beq.w	800a132 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009f50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f54:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f040 80ea 	bne.w	800a132 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009f5e:	227b      	movs	r2, #123	; 0x7b
 8009f60:	2194      	movs	r1, #148	; 0x94
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f001 ffd4 	bl	800bf10 <VL53L0X_WrByte>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f70:	4313      	orrs	r3, r2
 8009f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7ff fccc 	bl	8009914 <VL53L0X_device_read_strobe>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f84:	4313      	orrs	r3, r2
 8009f86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f8e:	461a      	mov	r2, r3
 8009f90:	2190      	movs	r1, #144	; 0x90
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f002 f8a0 	bl	800c0d8 <VL53L0X_RdDWord>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009fa6:	227c      	movs	r2, #124	; 0x7c
 8009fa8:	2194      	movs	r1, #148	; 0x94
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f001 ffb0 	bl	800bf10 <VL53L0X_WrByte>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff fca8 	bl	8009914 <VL53L0X_device_read_strobe>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	2190      	movs	r1, #144	; 0x90
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f002 f87c 	bl	800c0d8 <VL53L0X_RdDWord>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009fee:	2273      	movs	r2, #115	; 0x73
 8009ff0:	2194      	movs	r1, #148	; 0x94
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 ff8c 	bl	800bf10 <VL53L0X_WrByte>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a000:	4313      	orrs	r3, r2
 800a002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7ff fc84 	bl	8009914 <VL53L0X_device_read_strobe>
 800a00c:	4603      	mov	r3, r0
 800a00e:	461a      	mov	r2, r3
 800a010:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a014:	4313      	orrs	r3, r2
 800a016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a01a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a01e:	461a      	mov	r2, r3
 800a020:	2190      	movs	r1, #144	; 0x90
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f002 f858 	bl	800c0d8 <VL53L0X_RdDWord>
 800a028:	4603      	mov	r3, r0
 800a02a:	461a      	mov	r2, r3
 800a02c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a030:	4313      	orrs	r3, r2
 800a032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800a036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a038:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a03e:	2274      	movs	r2, #116	; 0x74
 800a040:	2194      	movs	r1, #148	; 0x94
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 ff64 	bl	800bf10 <VL53L0X_WrByte>
 800a048:	4603      	mov	r3, r0
 800a04a:	461a      	mov	r2, r3
 800a04c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a050:	4313      	orrs	r3, r2
 800a052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff fc5c 	bl	8009914 <VL53L0X_device_read_strobe>
 800a05c:	4603      	mov	r3, r0
 800a05e:	461a      	mov	r2, r3
 800a060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a064:	4313      	orrs	r3, r2
 800a066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a06a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a06e:	461a      	mov	r2, r3
 800a070:	2190      	movs	r1, #144	; 0x90
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f002 f830 	bl	800c0d8 <VL53L0X_RdDWord>
 800a078:	4603      	mov	r3, r0
 800a07a:	461a      	mov	r2, r3
 800a07c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a080:	4313      	orrs	r3, r2
 800a082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a08a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a08c:	4313      	orrs	r3, r2
 800a08e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a090:	2275      	movs	r2, #117	; 0x75
 800a092:	2194      	movs	r1, #148	; 0x94
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 ff3b 	bl	800bf10 <VL53L0X_WrByte>
 800a09a:	4603      	mov	r3, r0
 800a09c:	461a      	mov	r2, r3
 800a09e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff fc33 	bl	8009914 <VL53L0X_device_read_strobe>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a0bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	2190      	movs	r1, #144	; 0x90
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f002 f807 	bl	800c0d8 <VL53L0X_RdDWord>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a0e0:	2276      	movs	r2, #118	; 0x76
 800a0e2:	2194      	movs	r1, #148	; 0x94
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f001 ff13 	bl	800bf10 <VL53L0X_WrByte>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff fc0b 	bl	8009914 <VL53L0X_device_read_strobe>
 800a0fe:	4603      	mov	r3, r0
 800a100:	461a      	mov	r2, r3
 800a102:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a106:	4313      	orrs	r3, r2
 800a108:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a10c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a110:	461a      	mov	r2, r3
 800a112:	2190      	movs	r1, #144	; 0x90
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f001 ffdf 	bl	800c0d8 <VL53L0X_RdDWord>
 800a11a:	4603      	mov	r3, r0
 800a11c:	461a      	mov	r2, r3
 800a11e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a122:	4313      	orrs	r3, r2
 800a124:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a12c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a12e:	4313      	orrs	r3, r2
 800a130:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a132:	2200      	movs	r2, #0
 800a134:	2181      	movs	r1, #129	; 0x81
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f001 feea 	bl	800bf10 <VL53L0X_WrByte>
 800a13c:	4603      	mov	r3, r0
 800a13e:	461a      	mov	r2, r3
 800a140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a144:	4313      	orrs	r3, r2
 800a146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a14a:	2206      	movs	r2, #6
 800a14c:	21ff      	movs	r1, #255	; 0xff
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f001 fede 	bl	800bf10 <VL53L0X_WrByte>
 800a154:	4603      	mov	r3, r0
 800a156:	461a      	mov	r2, r3
 800a158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a15c:	4313      	orrs	r3, r2
 800a15e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a162:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a166:	461a      	mov	r2, r3
 800a168:	2183      	movs	r1, #131	; 0x83
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 ff52 	bl	800c014 <VL53L0X_RdByte>
 800a170:	4603      	mov	r3, r0
 800a172:	461a      	mov	r2, r3
 800a174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a178:	4313      	orrs	r3, r2
 800a17a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a17e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a182:	f023 0304 	bic.w	r3, r3, #4
 800a186:	b2db      	uxtb	r3, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	2183      	movs	r1, #131	; 0x83
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f001 febf 	bl	800bf10 <VL53L0X_WrByte>
 800a192:	4603      	mov	r3, r0
 800a194:	461a      	mov	r2, r3
 800a196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a19a:	4313      	orrs	r3, r2
 800a19c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	21ff      	movs	r1, #255	; 0xff
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f001 feb3 	bl	800bf10 <VL53L0X_WrByte>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f001 fea7 	bl	800bf10 <VL53L0X_WrByte>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	21ff      	movs	r1, #255	; 0xff
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f001 fe9b 	bl	800bf10 <VL53L0X_WrByte>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	461a      	mov	r2, r3
 800a1de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	2180      	movs	r1, #128	; 0x80
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f001 fe8f 	bl	800bf10 <VL53L0X_WrByte>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a200:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a204:	2b00      	cmp	r3, #0
 800a206:	f040 808f 	bne.w	800a328 <VL53L0X_get_info_from_device+0x98e>
 800a20a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a20e:	2b07      	cmp	r3, #7
 800a210:	f000 808a 	beq.w	800a328 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d024      	beq.n	800a268 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a21e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a222:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a226:	2b00      	cmp	r3, #0
 800a228:	d11e      	bne.n	800a268 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a230:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a23a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a23e:	2300      	movs	r3, #0
 800a240:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a242:	e00e      	b.n	800a262 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a244:	f107 0208 	add.w	r2, r7, #8
 800a248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a24a:	4413      	add	r3, r2
 800a24c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a252:	4413      	add	r3, r2
 800a254:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a258:	460a      	mov	r2, r1
 800a25a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a25e:	3301      	adds	r3, #1
 800a260:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a264:	2b05      	cmp	r3, #5
 800a266:	dded      	ble.n	800a244 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d018      	beq.n	800a2a4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a272:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a276:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d112      	bne.n	800a2a4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a27e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a288:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	33f3      	adds	r3, #243	; 0xf3
 800a296:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a298:	f107 0310 	add.w	r3, r7, #16
 800a29c:	4619      	mov	r1, r3
 800a29e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2a0:	f002 fe46 	bl	800cf30 <strcpy>

		}

		if (((option & 4) == 4) &&
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	f003 0304 	and.w	r3, r3, #4
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d030      	beq.n	800a310 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a2ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a2b2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d12a      	bne.n	800a310 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a2ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2cc:	025b      	lsls	r3, r3, #9
 800a2ce:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2d4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a2de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d011      	beq.n	800a308 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800a2e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a2ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2f2:	fb02 f303 	mul.w	r3, r2, r3
 800a2f6:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a2f8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800a2fc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a300:	425b      	negs	r3, r3
 800a302:	b29b      	uxth	r3, r3
 800a304:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a308:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a310:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a314:	78fb      	ldrb	r3, [r7, #3]
 800a316:	4313      	orrs	r3, r2
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a31e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a328:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3760      	adds	r7, #96	; 0x60
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a334:	b480      	push	{r7}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a340:	f240 6277 	movw	r2, #1655	; 0x677
 800a344:	f04f 0300 	mov.w	r3, #0
 800a348:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a34c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a350:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a352:	78fb      	ldrb	r3, [r7, #3]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	fb02 f303 	mul.w	r3, r2, r3
 800a360:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a362:	68bb      	ldr	r3, [r7, #8]
}
 800a364:	4618      	mov	r0, r3
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a378:	2300      	movs	r3, #0
 800a37a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d017      	beq.n	800a3ba <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a390:	e005      	b.n	800a39e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	085b      	lsrs	r3, r3, #1
 800a396:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a398:	89fb      	ldrh	r3, [r7, #14]
 800a39a:	3301      	adds	r3, #1
 800a39c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1f4      	bne.n	800a392 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a3a8:	89fb      	ldrh	r3, [r7, #14]
 800a3aa:	021b      	lsls	r3, r3, #8
 800a3ac:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a3b6:	4413      	add	r3, r2
 800a3b8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a3ba:	8afb      	ldrh	r3, [r7, #22]

}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	371c      	adds	r7, #28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a3d6:	88fb      	ldrh	r3, [r7, #6]
 800a3d8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a3da:	88fa      	ldrh	r2, [r7, #6]
 800a3dc:	0a12      	lsrs	r2, r2, #8
 800a3de:	b292      	uxth	r2, r2
 800a3e0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	4613      	mov	r3, r2
 800a400:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	4619      	mov	r1, r3
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f7ff ff92 	bl	800a334 <VL53L0X_calc_macro_period_ps>
 800a410:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a418:	4a0a      	ldr	r2, [pc, #40]	; (800a444 <VL53L0X_calc_timeout_mclks+0x50>)
 800a41a:	fba2 2303 	umull	r2, r3, r2, r3
 800a41e:	099b      	lsrs	r3, r3, #6
 800a420:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a428:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	085b      	lsrs	r3, r3, #1
 800a430:	441a      	add	r2, r3
	timeout_period_mclks =
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	fbb2 f3f3 	udiv	r3, r2, r3
 800a438:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800a43a:	69fb      	ldr	r3, [r7, #28]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3720      	adds	r7, #32
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	10624dd3 	.word	0x10624dd3

0800a448 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	807b      	strh	r3, [r7, #2]
 800a454:	4613      	mov	r3, r2
 800a456:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a45c:	787b      	ldrb	r3, [r7, #1]
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7ff ff67 	bl	800a334 <VL53L0X_calc_macro_period_ps>
 800a466:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a46e:	4a0a      	ldr	r2, [pc, #40]	; (800a498 <VL53L0X_calc_timeout_us+0x50>)
 800a470:	fba2 2303 	umull	r2, r3, r2, r3
 800a474:	099b      	lsrs	r3, r3, #6
 800a476:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a478:	887b      	ldrh	r3, [r7, #2]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	fb02 f303 	mul.w	r3, r2, r3
 800a480:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a484:	4a04      	ldr	r2, [pc, #16]	; (800a498 <VL53L0X_calc_timeout_us+0x50>)
 800a486:	fba2 2303 	umull	r2, r3, r2, r3
 800a48a:	099b      	lsrs	r3, r3, #6
 800a48c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a48e:	697b      	ldr	r3, [r7, #20]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	10624dd3 	.word	0x10624dd3

0800a49c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b08c      	sub	sp, #48	; 0x30
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a4c2:	7afb      	ldrb	r3, [r7, #11]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <get_sequence_step_timeout+0x38>
 800a4c8:	7afb      	ldrb	r3, [r7, #11]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d002      	beq.n	800a4d4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d128      	bne.n	800a526 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a4d4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a4d8:	461a      	mov	r2, r3
 800a4da:	2100      	movs	r1, #0
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f7fd fa7d 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a4e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d109      	bne.n	800a504 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a4f0:	f107 0320 	add.w	r3, r7, #32
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	2146      	movs	r1, #70	; 0x46
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f001 fd8b 	bl	800c014 <VL53L0X_RdByte>
 800a4fe:	4603      	mov	r3, r0
 800a500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a504:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff ff5c 	bl	800a3c8 <VL53L0X_decode_timeout>
 800a510:	4603      	mov	r3, r0
 800a512:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a514:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a518:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a51a:	4619      	mov	r1, r3
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f7ff ff93 	bl	800a448 <VL53L0X_calc_timeout_us>
 800a522:	62b8      	str	r0, [r7, #40]	; 0x28
 800a524:	e092      	b.n	800a64c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a526:	7afb      	ldrb	r3, [r7, #11]
 800a528:	2b03      	cmp	r3, #3
 800a52a:	d135      	bne.n	800a598 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a52c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a530:	461a      	mov	r2, r3
 800a532:	2100      	movs	r1, #0
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f7fd fa51 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 800a53a:	4603      	mov	r3, r0
 800a53c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a540:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a544:	2b00      	cmp	r3, #0
 800a546:	f040 8081 	bne.w	800a64c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a54a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a54e:	461a      	mov	r2, r3
 800a550:	2100      	movs	r1, #0
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f7fd fa42 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a55e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a562:	2b00      	cmp	r3, #0
 800a564:	d109      	bne.n	800a57a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a566:	f107 031e 	add.w	r3, r7, #30
 800a56a:	461a      	mov	r2, r3
 800a56c:	2151      	movs	r1, #81	; 0x51
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f001 fd7a 	bl	800c068 <VL53L0X_RdWord>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a57a:	8bfb      	ldrh	r3, [r7, #30]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7ff ff23 	bl	800a3c8 <VL53L0X_decode_timeout>
 800a582:	4603      	mov	r3, r0
 800a584:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a586:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a58a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a58c:	4619      	mov	r1, r3
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7ff ff5a 	bl	800a448 <VL53L0X_calc_timeout_us>
 800a594:	62b8      	str	r0, [r7, #40]	; 0x28
 800a596:	e059      	b.n	800a64c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d156      	bne.n	800a64c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a59e:	f107 0314 	add.w	r3, r7, #20
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7fd fb25 	bl	8007bf4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d01d      	beq.n	800a5f0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a5b4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f7fd fa0d 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a5c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10f      	bne.n	800a5f0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a5d0:	f107 031e 	add.w	r3, r7, #30
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	2151      	movs	r1, #81	; 0x51
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f001 fd45 	bl	800c068 <VL53L0X_RdWord>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a5e4:	8bfb      	ldrh	r3, [r7, #30]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7ff feee 	bl	800a3c8 <VL53L0X_decode_timeout>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a5f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d109      	bne.n	800a60c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a5f8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	2101      	movs	r1, #1
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f7fd f9eb 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 800a606:	4603      	mov	r3, r0
 800a608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a60c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10f      	bne.n	800a634 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a614:	f107 031c 	add.w	r3, r7, #28
 800a618:	461a      	mov	r2, r3
 800a61a:	2171      	movs	r1, #113	; 0x71
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f001 fd23 	bl	800c068 <VL53L0X_RdWord>
 800a622:	4603      	mov	r3, r0
 800a624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a628:	8bbb      	ldrh	r3, [r7, #28]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff fecc 	bl	800a3c8 <VL53L0X_decode_timeout>
 800a630:	4603      	mov	r3, r0
 800a632:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a634:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a636:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a63c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a642:	4619      	mov	r1, r3
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f7ff feff 	bl	800a448 <VL53L0X_calc_timeout_us>
 800a64a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a650:	601a      	str	r2, [r3, #0]

	return Status;
 800a652:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a656:	4618      	mov	r0, r3
 800a658:	3730      	adds	r7, #48	; 0x30
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b08a      	sub	sp, #40	; 0x28
 800a662:	af00      	add	r7, sp, #0
 800a664:	60f8      	str	r0, [r7, #12]
 800a666:	460b      	mov	r3, r1
 800a668:	607a      	str	r2, [r7, #4]
 800a66a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a66c:	2300      	movs	r3, #0
 800a66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a672:	7afb      	ldrb	r3, [r7, #11]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d005      	beq.n	800a684 <set_sequence_step_timeout+0x26>
 800a678:	7afb      	ldrb	r3, [r7, #11]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d002      	beq.n	800a684 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a67e:	7afb      	ldrb	r3, [r7, #11]
 800a680:	2b02      	cmp	r3, #2
 800a682:	d138      	bne.n	800a6f6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a684:	f107 031b 	add.w	r3, r7, #27
 800a688:	461a      	mov	r2, r3
 800a68a:	2100      	movs	r1, #0
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f7fd f9a5 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 800a692:	4603      	mov	r3, r0
 800a694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a698:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d11a      	bne.n	800a6d6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a6a0:	7efb      	ldrb	r3, [r7, #27]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6879      	ldr	r1, [r7, #4]
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f7ff fea4 	bl	800a3f4 <VL53L0X_calc_timeout_mclks>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a6b0:	8bbb      	ldrh	r3, [r7, #28]
 800a6b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b6:	d903      	bls.n	800a6c0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a6b8:	23ff      	movs	r3, #255	; 0xff
 800a6ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6be:	e004      	b.n	800a6ca <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a6c0:	8bbb      	ldrh	r3, [r7, #28]
 800a6c2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a6ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a6d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f040 80ab 	bne.w	800a836 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a6e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	2146      	movs	r1, #70	; 0x46
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f001 fc11 	bl	800bf10 <VL53L0X_WrByte>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a6f4:	e09f      	b.n	800a836 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a6f6:	7afb      	ldrb	r3, [r7, #11]
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d135      	bne.n	800a768 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a6fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a700:	2b00      	cmp	r3, #0
 800a702:	d11b      	bne.n	800a73c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a704:	f107 031b 	add.w	r3, r7, #27
 800a708:	461a      	mov	r2, r3
 800a70a:	2100      	movs	r1, #0
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f7fd f965 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 800a712:	4603      	mov	r3, r0
 800a714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a718:	7efb      	ldrb	r3, [r7, #27]
 800a71a:	461a      	mov	r2, r3
 800a71c:	6879      	ldr	r1, [r7, #4]
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7ff fe68 	bl	800a3f4 <VL53L0X_calc_timeout_mclks>
 800a724:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a726:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff fe20 	bl	800a370 <VL53L0X_encode_timeout>
 800a730:	4603      	mov	r3, r0
 800a732:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a734:	8b3a      	ldrh	r2, [r7, #24]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a73c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a740:	2b00      	cmp	r3, #0
 800a742:	d108      	bne.n	800a756 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a744:	8b3b      	ldrh	r3, [r7, #24]
 800a746:	461a      	mov	r2, r3
 800a748:	2151      	movs	r1, #81	; 0x51
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f001 fc04 	bl	800bf58 <VL53L0X_WrWord>
 800a750:	4603      	mov	r3, r0
 800a752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a756:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d16b      	bne.n	800a836 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a766:	e066      	b.n	800a836 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	d160      	bne.n	800a830 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a76e:	f107 0310 	add.w	r3, r7, #16
 800a772:	4619      	mov	r1, r3
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f7fd fa3d 	bl	8007bf4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a77e:	7cfb      	ldrb	r3, [r7, #19]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d01d      	beq.n	800a7c0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a784:	f107 031b 	add.w	r3, r7, #27
 800a788:	461a      	mov	r2, r3
 800a78a:	2100      	movs	r1, #0
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7fd f925 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 800a792:	4603      	mov	r3, r0
 800a794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a798:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10f      	bne.n	800a7c0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a7a0:	f107 0318 	add.w	r3, r7, #24
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	2151      	movs	r1, #81	; 0x51
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f001 fc5d 	bl	800c068 <VL53L0X_RdWord>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a7b4:	8b3b      	ldrh	r3, [r7, #24]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff fe06 	bl	800a3c8 <VL53L0X_decode_timeout>
 800a7bc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a7be:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a7c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d109      	bne.n	800a7dc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a7c8:	f107 031b 	add.w	r3, r7, #27
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	2101      	movs	r1, #1
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7fd f903 	bl	80079dc <VL53L0X_GetVcselPulsePeriod>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a7dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d128      	bne.n	800a836 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a7e4:	7efb      	ldrb	r3, [r7, #27]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6879      	ldr	r1, [r7, #4]
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7ff fe02 	bl	800a3f4 <VL53L0X_calc_timeout_mclks>
 800a7f0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a7f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7f4:	6a3a      	ldr	r2, [r7, #32]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a7fa:	6a38      	ldr	r0, [r7, #32]
 800a7fc:	f7ff fdb8 	bl	800a370 <VL53L0X_encode_timeout>
 800a800:	4603      	mov	r3, r0
 800a802:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d108      	bne.n	800a81e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a80c:	8bfb      	ldrh	r3, [r7, #30]
 800a80e:	461a      	mov	r2, r3
 800a810:	2171      	movs	r1, #113	; 0x71
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f001 fba0 	bl	800bf58 <VL53L0X_WrWord>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a81e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a822:	2b00      	cmp	r3, #0
 800a824:	d107      	bne.n	800a836 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a82e:	e002      	b.n	800a836 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a830:	23fc      	movs	r3, #252	; 0xfc
 800a832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a836:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3728      	adds	r7, #40	; 0x28
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b08a      	sub	sp, #40	; 0x28
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	70fb      	strb	r3, [r7, #3]
 800a84e:	4613      	mov	r3, r2
 800a850:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a852:	2300      	movs	r3, #0
 800a854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a858:	230c      	movs	r3, #12
 800a85a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a85e:	2312      	movs	r3, #18
 800a860:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a864:	2308      	movs	r3, #8
 800a866:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a86a:	230e      	movs	r3, #14
 800a86c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a874:	78bb      	ldrb	r3, [r7, #2]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d003      	beq.n	800a888 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a880:	23fc      	movs	r3, #252	; 0xfc
 800a882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a886:	e020      	b.n	800a8ca <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a888:	78fb      	ldrb	r3, [r7, #3]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10d      	bne.n	800a8aa <VL53L0X_set_vcsel_pulse_period+0x68>
 800a88e:	78ba      	ldrb	r2, [r7, #2]
 800a890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a894:	429a      	cmp	r2, r3
 800a896:	d304      	bcc.n	800a8a2 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a898:	78ba      	ldrb	r2, [r7, #2]
 800a89a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d903      	bls.n	800a8aa <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8a2:	23fc      	movs	r3, #252	; 0xfc
 800a8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8a8:	e00f      	b.n	800a8ca <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a8aa:	78fb      	ldrb	r3, [r7, #3]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d10c      	bne.n	800a8ca <VL53L0X_set_vcsel_pulse_period+0x88>
 800a8b0:	78ba      	ldrb	r2, [r7, #2]
 800a8b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d304      	bcc.n	800a8c4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a8ba:	78ba      	ldrb	r2, [r7, #2]
 800a8bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d902      	bls.n	800a8ca <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8c4:	23fc      	movs	r3, #252	; 0xfc
 800a8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a8ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d002      	beq.n	800a8d8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a8d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8d6:	e239      	b.n	800ad4c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a8d8:	78fb      	ldrb	r3, [r7, #3]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d150      	bne.n	800a980 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a8de:	78bb      	ldrb	r3, [r7, #2]
 800a8e0:	2b0c      	cmp	r3, #12
 800a8e2:	d110      	bne.n	800a906 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a8e4:	2218      	movs	r2, #24
 800a8e6:	2157      	movs	r1, #87	; 0x57
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f001 fb11 	bl	800bf10 <VL53L0X_WrByte>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a8f4:	2208      	movs	r2, #8
 800a8f6:	2156      	movs	r1, #86	; 0x56
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f001 fb09 	bl	800bf10 <VL53L0X_WrByte>
 800a8fe:	4603      	mov	r3, r0
 800a900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a904:	e17f      	b.n	800ac06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a906:	78bb      	ldrb	r3, [r7, #2]
 800a908:	2b0e      	cmp	r3, #14
 800a90a:	d110      	bne.n	800a92e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a90c:	2230      	movs	r2, #48	; 0x30
 800a90e:	2157      	movs	r1, #87	; 0x57
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f001 fafd 	bl	800bf10 <VL53L0X_WrByte>
 800a916:	4603      	mov	r3, r0
 800a918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a91c:	2208      	movs	r2, #8
 800a91e:	2156      	movs	r1, #86	; 0x56
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f001 faf5 	bl	800bf10 <VL53L0X_WrByte>
 800a926:	4603      	mov	r3, r0
 800a928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a92c:	e16b      	b.n	800ac06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a92e:	78bb      	ldrb	r3, [r7, #2]
 800a930:	2b10      	cmp	r3, #16
 800a932:	d110      	bne.n	800a956 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a934:	2240      	movs	r2, #64	; 0x40
 800a936:	2157      	movs	r1, #87	; 0x57
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f001 fae9 	bl	800bf10 <VL53L0X_WrByte>
 800a93e:	4603      	mov	r3, r0
 800a940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a944:	2208      	movs	r2, #8
 800a946:	2156      	movs	r1, #86	; 0x56
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 fae1 	bl	800bf10 <VL53L0X_WrByte>
 800a94e:	4603      	mov	r3, r0
 800a950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a954:	e157      	b.n	800ac06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a956:	78bb      	ldrb	r3, [r7, #2]
 800a958:	2b12      	cmp	r3, #18
 800a95a:	f040 8154 	bne.w	800ac06 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a95e:	2250      	movs	r2, #80	; 0x50
 800a960:	2157      	movs	r1, #87	; 0x57
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f001 fad4 	bl	800bf10 <VL53L0X_WrByte>
 800a968:	4603      	mov	r3, r0
 800a96a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a96e:	2208      	movs	r2, #8
 800a970:	2156      	movs	r1, #86	; 0x56
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 facc 	bl	800bf10 <VL53L0X_WrByte>
 800a978:	4603      	mov	r3, r0
 800a97a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a97e:	e142      	b.n	800ac06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a980:	78fb      	ldrb	r3, [r7, #3]
 800a982:	2b01      	cmp	r3, #1
 800a984:	f040 813f 	bne.w	800ac06 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a988:	78bb      	ldrb	r3, [r7, #2]
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	d14c      	bne.n	800aa28 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a98e:	2210      	movs	r2, #16
 800a990:	2148      	movs	r1, #72	; 0x48
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f001 fabc 	bl	800bf10 <VL53L0X_WrByte>
 800a998:	4603      	mov	r3, r0
 800a99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a99e:	2208      	movs	r2, #8
 800a9a0:	2147      	movs	r1, #71	; 0x47
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f001 fab4 	bl	800bf10 <VL53L0X_WrByte>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	2132      	movs	r1, #50	; 0x32
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f001 faac 	bl	800bf10 <VL53L0X_WrByte>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a9c6:	220c      	movs	r2, #12
 800a9c8:	2130      	movs	r1, #48	; 0x30
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f001 faa0 	bl	800bf10 <VL53L0X_WrByte>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a9de:	2201      	movs	r2, #1
 800a9e0:	21ff      	movs	r1, #255	; 0xff
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f001 fa94 	bl	800bf10 <VL53L0X_WrByte>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a9f6:	2230      	movs	r2, #48	; 0x30
 800a9f8:	2130      	movs	r1, #48	; 0x30
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f001 fa88 	bl	800bf10 <VL53L0X_WrByte>
 800aa00:	4603      	mov	r3, r0
 800aa02:	461a      	mov	r2, r3
 800aa04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800aa0e:	2200      	movs	r2, #0
 800aa10:	21ff      	movs	r1, #255	; 0xff
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f001 fa7c 	bl	800bf10 <VL53L0X_WrByte>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa20:	4313      	orrs	r3, r2
 800aa22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa26:	e0ee      	b.n	800ac06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800aa28:	78bb      	ldrb	r3, [r7, #2]
 800aa2a:	2b0a      	cmp	r3, #10
 800aa2c:	d14c      	bne.n	800aac8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800aa2e:	2228      	movs	r2, #40	; 0x28
 800aa30:	2148      	movs	r1, #72	; 0x48
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f001 fa6c 	bl	800bf10 <VL53L0X_WrByte>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800aa3e:	2208      	movs	r2, #8
 800aa40:	2147      	movs	r1, #71	; 0x47
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f001 fa64 	bl	800bf10 <VL53L0X_WrByte>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800aa4e:	2203      	movs	r2, #3
 800aa50:	2132      	movs	r1, #50	; 0x32
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 fa5c 	bl	800bf10 <VL53L0X_WrByte>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa60:	4313      	orrs	r3, r2
 800aa62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800aa66:	2209      	movs	r2, #9
 800aa68:	2130      	movs	r1, #48	; 0x30
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f001 fa50 	bl	800bf10 <VL53L0X_WrByte>
 800aa70:	4603      	mov	r3, r0
 800aa72:	461a      	mov	r2, r3
 800aa74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800aa7e:	2201      	movs	r2, #1
 800aa80:	21ff      	movs	r1, #255	; 0xff
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f001 fa44 	bl	800bf10 <VL53L0X_WrByte>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa90:	4313      	orrs	r3, r2
 800aa92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800aa96:	2220      	movs	r2, #32
 800aa98:	2130      	movs	r1, #48	; 0x30
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f001 fa38 	bl	800bf10 <VL53L0X_WrByte>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800aaae:	2200      	movs	r2, #0
 800aab0:	21ff      	movs	r1, #255	; 0xff
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f001 fa2c 	bl	800bf10 <VL53L0X_WrByte>
 800aab8:	4603      	mov	r3, r0
 800aaba:	461a      	mov	r2, r3
 800aabc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aac0:	4313      	orrs	r3, r2
 800aac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aac6:	e09e      	b.n	800ac06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800aac8:	78bb      	ldrb	r3, [r7, #2]
 800aaca:	2b0c      	cmp	r3, #12
 800aacc:	d14c      	bne.n	800ab68 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800aace:	2238      	movs	r2, #56	; 0x38
 800aad0:	2148      	movs	r1, #72	; 0x48
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f001 fa1c 	bl	800bf10 <VL53L0X_WrByte>
 800aad8:	4603      	mov	r3, r0
 800aada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800aade:	2208      	movs	r2, #8
 800aae0:	2147      	movs	r1, #71	; 0x47
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 fa14 	bl	800bf10 <VL53L0X_WrByte>
 800aae8:	4603      	mov	r3, r0
 800aaea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800aaee:	2203      	movs	r2, #3
 800aaf0:	2132      	movs	r1, #50	; 0x32
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f001 fa0c 	bl	800bf10 <VL53L0X_WrByte>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	461a      	mov	r2, r3
 800aafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab00:	4313      	orrs	r3, r2
 800ab02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ab06:	2208      	movs	r2, #8
 800ab08:	2130      	movs	r1, #48	; 0x30
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f001 fa00 	bl	800bf10 <VL53L0X_WrByte>
 800ab10:	4603      	mov	r3, r0
 800ab12:	461a      	mov	r2, r3
 800ab14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ab1e:	2201      	movs	r2, #1
 800ab20:	21ff      	movs	r1, #255	; 0xff
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f001 f9f4 	bl	800bf10 <VL53L0X_WrByte>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab30:	4313      	orrs	r3, r2
 800ab32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ab36:	2220      	movs	r2, #32
 800ab38:	2130      	movs	r1, #48	; 0x30
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f001 f9e8 	bl	800bf10 <VL53L0X_WrByte>
 800ab40:	4603      	mov	r3, r0
 800ab42:	461a      	mov	r2, r3
 800ab44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ab4e:	2200      	movs	r2, #0
 800ab50:	21ff      	movs	r1, #255	; 0xff
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f001 f9dc 	bl	800bf10 <VL53L0X_WrByte>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab60:	4313      	orrs	r3, r2
 800ab62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab66:	e04e      	b.n	800ac06 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800ab68:	78bb      	ldrb	r3, [r7, #2]
 800ab6a:	2b0e      	cmp	r3, #14
 800ab6c:	d14b      	bne.n	800ac06 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800ab6e:	2248      	movs	r2, #72	; 0x48
 800ab70:	2148      	movs	r1, #72	; 0x48
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 f9cc 	bl	800bf10 <VL53L0X_WrByte>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800ab7e:	2208      	movs	r2, #8
 800ab80:	2147      	movs	r1, #71	; 0x47
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 f9c4 	bl	800bf10 <VL53L0X_WrByte>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ab8e:	2203      	movs	r2, #3
 800ab90:	2132      	movs	r1, #50	; 0x32
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 f9bc 	bl	800bf10 <VL53L0X_WrByte>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aba0:	4313      	orrs	r3, r2
 800aba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800aba6:	2207      	movs	r2, #7
 800aba8:	2130      	movs	r1, #48	; 0x30
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f001 f9b0 	bl	800bf10 <VL53L0X_WrByte>
 800abb0:	4603      	mov	r3, r0
 800abb2:	461a      	mov	r2, r3
 800abb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abb8:	4313      	orrs	r3, r2
 800abba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800abbe:	2201      	movs	r2, #1
 800abc0:	21ff      	movs	r1, #255	; 0xff
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f001 f9a4 	bl	800bf10 <VL53L0X_WrByte>
 800abc8:	4603      	mov	r3, r0
 800abca:	461a      	mov	r2, r3
 800abcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abd0:	4313      	orrs	r3, r2
 800abd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800abd6:	2220      	movs	r2, #32
 800abd8:	2130      	movs	r1, #48	; 0x30
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f001 f998 	bl	800bf10 <VL53L0X_WrByte>
 800abe0:	4603      	mov	r3, r0
 800abe2:	461a      	mov	r2, r3
 800abe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abe8:	4313      	orrs	r3, r2
 800abea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800abee:	2200      	movs	r2, #0
 800abf0:	21ff      	movs	r1, #255	; 0xff
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f001 f98c 	bl	800bf10 <VL53L0X_WrByte>
 800abf8:	4603      	mov	r3, r0
 800abfa:	461a      	mov	r2, r3
 800abfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac00:	4313      	orrs	r3, r2
 800ac02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800ac06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d17f      	bne.n	800ad0e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800ac0e:	78bb      	ldrb	r3, [r7, #2]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fe fe38 	bl	8009886 <VL53L0X_encode_vcsel_period>
 800ac16:	4603      	mov	r3, r0
 800ac18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800ac1c:	78fb      	ldrb	r3, [r7, #3]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d045      	beq.n	800acb2 <VL53L0X_set_vcsel_pulse_period+0x470>
 800ac26:	e06e      	b.n	800ad06 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ac28:	f107 0314 	add.w	r3, r7, #20
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	2103      	movs	r1, #3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff fc33 	bl	800a49c <get_sequence_step_timeout>
 800ac36:	4603      	mov	r3, r0
 800ac38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ac3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d109      	bne.n	800ac58 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ac44:	f107 0310 	add.w	r3, r7, #16
 800ac48:	461a      	mov	r2, r3
 800ac4a:	2102      	movs	r1, #2
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff fc25 	bl	800a49c <get_sequence_step_timeout>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ac58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d109      	bne.n	800ac74 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ac60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ac64:	461a      	mov	r2, r3
 800ac66:	2150      	movs	r1, #80	; 0x50
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f001 f951 	bl	800bf10 <VL53L0X_WrByte>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ac74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d108      	bne.n	800ac8e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	2103      	movs	r1, #3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff fceb 	bl	800a65e <set_sequence_step_timeout>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800ac8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d108      	bne.n	800aca8 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	2102      	movs	r1, #2
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff fcde 	bl	800a65e <set_sequence_step_timeout>
 800aca2:	4603      	mov	r3, r0
 800aca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	78ba      	ldrb	r2, [r7, #2]
 800acac:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800acb0:	e02e      	b.n	800ad10 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800acb2:	f107 0318 	add.w	r3, r7, #24
 800acb6:	461a      	mov	r2, r3
 800acb8:	2104      	movs	r1, #4
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff fbee 	bl	800a49c <get_sequence_step_timeout>
 800acc0:	4603      	mov	r3, r0
 800acc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800acc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acca:	2b00      	cmp	r3, #0
 800accc:	d109      	bne.n	800ace2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800acce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800acd2:	461a      	mov	r2, r3
 800acd4:	2170      	movs	r1, #112	; 0x70
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f001 f91a 	bl	800bf10 <VL53L0X_WrByte>
 800acdc:	4603      	mov	r3, r0
 800acde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ace2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d108      	bne.n	800acfc <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	461a      	mov	r2, r3
 800acee:	2104      	movs	r1, #4
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff fcb4 	bl	800a65e <set_sequence_step_timeout>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	78ba      	ldrb	r2, [r7, #2]
 800ad00:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ad04:	e004      	b.n	800ad10 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad06:	23fc      	movs	r3, #252	; 0xfc
 800ad08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad0c:	e000      	b.n	800ad10 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800ad0e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800ad10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d109      	bne.n	800ad2c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ad1e:	69f9      	ldr	r1, [r7, #28]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7fc fe1d 	bl	8007960 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ad26:	4603      	mov	r3, r0
 800ad28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800ad2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d109      	bne.n	800ad48 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800ad34:	f107 010f 	add.w	r1, r7, #15
 800ad38:	2301      	movs	r3, #1
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7fe fcbd 	bl	80096bc <VL53L0X_perform_phase_calibration>
 800ad42:	4603      	mov	r3, r0
 800ad44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800ad48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3728      	adds	r7, #40	; 0x28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad62:	2300      	movs	r3, #0
 800ad64:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ad66:	7afb      	ldrb	r3, [r7, #11]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d00a      	beq.n	800ad86 <VL53L0X_get_vcsel_pulse_period+0x32>
 800ad70:	e013      	b.n	800ad9a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ad72:	f107 0316 	add.w	r3, r7, #22
 800ad76:	461a      	mov	r2, r3
 800ad78:	2150      	movs	r1, #80	; 0x50
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f001 f94a 	bl	800c014 <VL53L0X_RdByte>
 800ad80:	4603      	mov	r3, r0
 800ad82:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ad84:	e00b      	b.n	800ad9e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ad86:	f107 0316 	add.w	r3, r7, #22
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	2170      	movs	r1, #112	; 0x70
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f001 f940 	bl	800c014 <VL53L0X_RdByte>
 800ad94:	4603      	mov	r3, r0
 800ad96:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ad98:	e001      	b.n	800ad9e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad9a:	23fc      	movs	r3, #252	; 0xfc
 800ad9c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ad9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d107      	bne.n	800adb6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ada6:	7dbb      	ldrb	r3, [r7, #22]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fe fd59 	bl	8009860 <VL53L0X_decode_vcsel_period>
 800adae:	4603      	mov	r3, r0
 800adb0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	701a      	strb	r2, [r3, #0]

	return Status;
 800adb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3718      	adds	r7, #24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b092      	sub	sp, #72	; 0x48
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adcc:	2300      	movs	r3, #0
 800adce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800add2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800add6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800add8:	f240 7376 	movw	r3, #1910	; 0x776
 800addc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800adde:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ade2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ade4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ade8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800adea:	f240 234e 	movw	r3, #590	; 0x24e
 800adee:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800adf0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800adf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800adf6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800adfa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800adfc:	f240 2326 	movw	r3, #550	; 0x226
 800ae00:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ae06:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ae0a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d205      	bcs.n	800ae24 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae18:	23fc      	movs	r3, #252	; 0xfc
 800ae1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ae1e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae22:	e0aa      	b.n	800af7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ae24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae28:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ae30:	f107 0314 	add.w	r3, r7, #20
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7fc fedc 	bl	8007bf4 <VL53L0X_GetSequenceStepEnables>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ae42:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d15b      	bne.n	800af02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ae4a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d105      	bne.n	800ae5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800ae50:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d102      	bne.n	800ae5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ae56:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d052      	beq.n	800af02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ae5c:	f107 0310 	add.w	r3, r7, #16
 800ae60:	461a      	mov	r2, r3
 800ae62:	2102      	movs	r1, #2
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff fb19 	bl	800a49c <get_sequence_step_timeout>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ae70:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ae78:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae7c:	e07d      	b.n	800af7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ae7e:	7d3b      	ldrb	r3, [r7, #20]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00f      	beq.n	800aea4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ae84:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ae86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae88:	4413      	add	r3, r2
 800ae8a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ae8c:	69fa      	ldr	r2, [r7, #28]
 800ae8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d204      	bcs.n	800ae9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ae94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	643b      	str	r3, [r7, #64]	; 0x40
 800ae9c:	e002      	b.n	800aea4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae9e:	23fc      	movs	r3, #252	; 0xfc
 800aea0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800aea4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800aeac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aeb0:	e063      	b.n	800af7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800aeb2:	7dbb      	ldrb	r3, [r7, #22]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d011      	beq.n	800aedc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebc:	4413      	add	r3, r2
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aec2:	69fa      	ldr	r2, [r7, #28]
 800aec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d204      	bcs.n	800aed4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800aeca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	643b      	str	r3, [r7, #64]	; 0x40
 800aed2:	e016      	b.n	800af02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aed4:	23fc      	movs	r3, #252	; 0xfc
 800aed6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aeda:	e012      	b.n	800af02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800aedc:	7d7b      	ldrb	r3, [r7, #21]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00f      	beq.n	800af02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aee6:	4413      	add	r3, r2
 800aee8:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aeea:	69fa      	ldr	r2, [r7, #28]
 800aeec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d204      	bcs.n	800aefc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800aef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	643b      	str	r3, [r7, #64]	; 0x40
 800aefa:	e002      	b.n	800af02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aefc:	23fc      	movs	r3, #252	; 0xfc
 800aefe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800af02:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800af06:	2b00      	cmp	r3, #0
 800af08:	d002      	beq.n	800af10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800af0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800af0e:	e034      	b.n	800af7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800af10:	7dfb      	ldrb	r3, [r7, #23]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d019      	beq.n	800af4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800af16:	f107 030c 	add.w	r3, r7, #12
 800af1a:	461a      	mov	r2, r3
 800af1c:	2103      	movs	r1, #3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7ff fabc 	bl	800a49c <get_sequence_step_timeout>
 800af24:	4603      	mov	r3, r0
 800af26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af2e:	4413      	add	r3, r2
 800af30:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800af32:	69fa      	ldr	r2, [r7, #28]
 800af34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af36:	429a      	cmp	r2, r3
 800af38:	d204      	bcs.n	800af44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800af3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	643b      	str	r3, [r7, #64]	; 0x40
 800af42:	e002      	b.n	800af4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800af44:	23fc      	movs	r3, #252	; 0xfc
 800af46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800af4a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d111      	bne.n	800af76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800af52:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00e      	beq.n	800af76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800af58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800af60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af62:	2104      	movs	r1, #4
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff fb7a 	bl	800a65e <set_sequence_step_timeout>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800af76:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3748      	adds	r7, #72	; 0x48
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b090      	sub	sp, #64	; 0x40
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af8c:	2300      	movs	r3, #0
 800af8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800af92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800af96:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800af98:	f240 7376 	movw	r3, #1910	; 0x776
 800af9c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800af9e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800afa2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800afa4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800afa8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800afaa:	f240 234e 	movw	r3, #590	; 0x24e
 800afae:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800afb0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800afb4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800afb6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800afba:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800afbc:	f240 2326 	movw	r3, #550	; 0x226
 800afc0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800afc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afca:	441a      	add	r2, r3
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800afd0:	f107 0318 	add.w	r3, r7, #24
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7fc fe0c 	bl	8007bf4 <VL53L0X_GetSequenceStepEnables>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800afe2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800afea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afee:	e075      	b.n	800b0dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800aff0:	7e3b      	ldrb	r3, [r7, #24]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d105      	bne.n	800b002 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800aff6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800affc:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800affe:	2b00      	cmp	r3, #0
 800b000:	d030      	beq.n	800b064 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800b002:	f107 0310 	add.w	r3, r7, #16
 800b006:	461a      	mov	r2, r3
 800b008:	2102      	movs	r1, #2
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff fa46 	bl	800a49c <get_sequence_step_timeout>
 800b010:	4603      	mov	r3, r0
 800b012:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800b016:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d122      	bne.n	800b064 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800b01e:	7e3b      	ldrb	r3, [r7, #24]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d007      	beq.n	800b034 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b028:	6939      	ldr	r1, [r7, #16]
 800b02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b02e:	441a      	add	r2, r3
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800b034:	7ebb      	ldrb	r3, [r7, #26]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d009      	beq.n	800b04e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800b03e:	6939      	ldr	r1, [r7, #16]
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	440b      	add	r3, r1
 800b044:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b046:	441a      	add	r2, r3
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	e00a      	b.n	800b064 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b04e:	7e7b      	ldrb	r3, [r7, #25]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d007      	beq.n	800b064 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b058:	6939      	ldr	r1, [r7, #16]
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b05e:	441a      	add	r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b064:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d114      	bne.n	800b096 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b06c:	7efb      	ldrb	r3, [r7, #27]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d011      	beq.n	800b096 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800b072:	f107 030c 	add.w	r3, r7, #12
 800b076:	461a      	mov	r2, r3
 800b078:	2103      	movs	r1, #3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7ff fa0e 	bl	800a49c <get_sequence_step_timeout>
 800b080:	4603      	mov	r3, r0
 800b082:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b08a:	68f9      	ldr	r1, [r7, #12]
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b090:	441a      	add	r2, r3
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b096:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d114      	bne.n	800b0c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b09e:	7f3b      	ldrb	r3, [r7, #28]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d011      	beq.n	800b0c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800b0a4:	f107 0314 	add.w	r3, r7, #20
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	2104      	movs	r1, #4
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7ff f9f5 	bl	800a49c <get_sequence_step_timeout>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b0bc:	6979      	ldr	r1, [r7, #20]
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b0c2:	441a      	add	r2, r3
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b0c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d103      	bne.n	800b0d8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b0d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3740      	adds	r7, #64	; 0x40
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b088      	sub	sp, #32
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b0f6:	e0c6      	b.n	800b286 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	3301      	adds	r3, #1
 800b106:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b108:	7cfb      	ldrb	r3, [r7, #19]
 800b10a:	2bff      	cmp	r3, #255	; 0xff
 800b10c:	f040 808d 	bne.w	800b22a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	4413      	add	r3, r2
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	747b      	strb	r3, [r7, #17]
			Index++;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	3301      	adds	r3, #1
 800b11e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800b120:	7c7b      	ldrb	r3, [r7, #17]
 800b122:	2b03      	cmp	r3, #3
 800b124:	d87e      	bhi.n	800b224 <VL53L0X_load_tuning_settings+0x140>
 800b126:	a201      	add	r2, pc, #4	; (adr r2, 800b12c <VL53L0X_load_tuning_settings+0x48>)
 800b128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12c:	0800b13d 	.word	0x0800b13d
 800b130:	0800b177 	.word	0x0800b177
 800b134:	0800b1b1 	.word	0x0800b1b1
 800b138:	0800b1eb 	.word	0x0800b1eb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	4413      	add	r3, r2
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	743b      	strb	r3, [r7, #16]
				Index++;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	3301      	adds	r3, #1
 800b14a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	4413      	add	r3, r2
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	3301      	adds	r3, #1
 800b15a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b15c:	7c3b      	ldrb	r3, [r7, #16]
 800b15e:	b29b      	uxth	r3, r3
 800b160:	021b      	lsls	r3, r3, #8
 800b162:	b29a      	uxth	r2, r3
 800b164:	7bfb      	ldrb	r3, [r7, #15]
 800b166:	b29b      	uxth	r3, r3
 800b168:	4413      	add	r3, r2
 800b16a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	89ba      	ldrh	r2, [r7, #12]
 800b170:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800b174:	e087      	b.n	800b286 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	4413      	add	r3, r2
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	743b      	strb	r3, [r7, #16]
				Index++;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	3301      	adds	r3, #1
 800b184:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	4413      	add	r3, r2
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	3301      	adds	r3, #1
 800b194:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b196:	7c3b      	ldrb	r3, [r7, #16]
 800b198:	b29b      	uxth	r3, r3
 800b19a:	021b      	lsls	r3, r3, #8
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	4413      	add	r3, r2
 800b1a4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	89ba      	ldrh	r2, [r7, #12]
 800b1aa:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800b1ae:	e06a      	b.n	800b286 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	743b      	strb	r3, [r7, #16]
				Index++;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b1d0:	7c3b      	ldrb	r3, [r7, #16]
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	021b      	lsls	r3, r3, #8
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	4413      	add	r3, r2
 800b1de:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	89ba      	ldrh	r2, [r7, #12]
 800b1e4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800b1e8:	e04d      	b.n	800b286 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	743b      	strb	r3, [r7, #16]
				Index++;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	4413      	add	r3, r2
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	3301      	adds	r3, #1
 800b208:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b20a:	7c3b      	ldrb	r3, [r7, #16]
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	021b      	lsls	r3, r3, #8
 800b210:	b29a      	uxth	r2, r3
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	b29b      	uxth	r3, r3
 800b216:	4413      	add	r3, r2
 800b218:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	89ba      	ldrh	r2, [r7, #12]
 800b21e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800b222:	e030      	b.n	800b286 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b224:	23fc      	movs	r3, #252	; 0xfc
 800b226:	77fb      	strb	r3, [r7, #31]
 800b228:	e02d      	b.n	800b286 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b22a:	7cfb      	ldrb	r3, [r7, #19]
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	d828      	bhi.n	800b282 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	4413      	add	r3, r2
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	3301      	adds	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b240:	2300      	movs	r3, #0
 800b242:	61bb      	str	r3, [r7, #24]
 800b244:	e00f      	b.n	800b266 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	4413      	add	r3, r2
 800b24c:	7819      	ldrb	r1, [r3, #0]
 800b24e:	f107 0208 	add.w	r2, r7, #8
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	4413      	add	r3, r2
 800b256:	460a      	mov	r2, r1
 800b258:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	3301      	adds	r3, #1
 800b25e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	3301      	adds	r3, #1
 800b264:	61bb      	str	r3, [r7, #24]
 800b266:	7cfb      	ldrb	r3, [r7, #19]
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	dbeb      	blt.n	800b246 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b26e:	7cfb      	ldrb	r3, [r7, #19]
 800b270:	f107 0208 	add.w	r2, r7, #8
 800b274:	7cb9      	ldrb	r1, [r7, #18]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fdee 	bl	800be58 <VL53L0X_WriteMulti>
 800b27c:	4603      	mov	r3, r0
 800b27e:	77fb      	strb	r3, [r7, #31]
 800b280:	e001      	b.n	800b286 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b282:	23fc      	movs	r3, #252	; 0xfc
 800b284:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	4413      	add	r3, r2
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d004      	beq.n	800b29c <VL53L0X_load_tuning_settings+0x1b8>
 800b292:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b296:	2b00      	cmp	r3, #0
 800b298:	f43f af2e 	beq.w	800b0f8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b29c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3720      	adds	r7, #32
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b2be:	f107 0313 	add.w	r3, r7, #19
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7fc fd21 	bl	8007d0c <VL53L0X_GetXTalkCompensationEnable>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800b2ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d111      	bne.n	800b2fa <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b2d6:	7cfb      	ldrb	r3, [r7, #19]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00e      	beq.n	800b2fa <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6a1b      	ldr	r3, [r3, #32]
 800b2e0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	8a9b      	ldrh	r3, [r3, #20]
 800b2e6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	fb02 f303 	mul.w	r3, r2, r3
 800b2ee:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	3380      	adds	r3, #128	; 0x80
 800b2f4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b2fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3720      	adds	r7, #32
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b086      	sub	sp, #24
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b312:	2300      	movs	r3, #0
 800b314:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b31e:	f107 0310 	add.w	r3, r7, #16
 800b322:	461a      	mov	r2, r3
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f7ff ffbe 	bl	800b2a8 <VL53L0X_get_total_xtalk_rate>
 800b32c:	4603      	mov	r3, r0
 800b32e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d105      	bne.n	800b344 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	441a      	add	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	601a      	str	r2, [r3, #0]

	return Status;
 800b344:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b09a      	sub	sp, #104	; 0x68
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800b35e:	2312      	movs	r3, #18
 800b360:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800b362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b366:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b368:	2342      	movs	r3, #66	; 0x42
 800b36a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800b36c:	2306      	movs	r3, #6
 800b36e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800b370:	2307      	movs	r3, #7
 800b372:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b374:	2300      	movs	r3, #0
 800b376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800b380:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b388:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800b38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b38c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b38e:	fb02 f303 	mul.w	r3, r2, r3
 800b392:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800b394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b396:	3380      	adds	r3, #128	; 0x80
 800b398:	0a1b      	lsrs	r3, r3, #8
 800b39a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3a0:	fb02 f303 	mul.w	r3, r2, r3
 800b3a4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d01a      	beq.n	800b3e6 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	029b      	lsls	r3, r3, #10
 800b3b4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3bc:	4413      	add	r3, r2
 800b3be:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b3c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b3ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	005b      	lsls	r3, r3, #1
 800b3d0:	4413      	add	r3, r2
 800b3d2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b3d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3d6:	fb03 f303 	mul.w	r3, r3, r3
 800b3da:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b3dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b3e2:	0c1b      	lsrs	r3, r3, #16
 800b3e4:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b3ea:	fb02 f303 	mul.w	r3, r2, r3
 800b3ee:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b3f6:	0c1b      	lsrs	r3, r3, #16
 800b3f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fc:	fb03 f303 	mul.w	r3, r3, r3
 800b400:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b404:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b408:	0c1b      	lsrs	r3, r3, #16
 800b40a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b40c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b40e:	085a      	lsrs	r2, r3, #1
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	441a      	add	r2, r3
 800b414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b416:	fbb2 f3f3 	udiv	r3, r2, r3
 800b41a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b420:	fb02 f303 	mul.w	r3, r2, r3
 800b424:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b42c:	d302      	bcc.n	800b434 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800b42e:	4b54      	ldr	r3, [pc, #336]	; (800b580 <VL53L0X_calc_dmax+0x230>)
 800b430:	663b      	str	r3, [r7, #96]	; 0x60
 800b432:	e015      	b.n	800b460 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b436:	085a      	lsrs	r2, r3, #1
 800b438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b43a:	441a      	add	r2, r3
 800b43c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b442:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b448:	fb02 f303 	mul.w	r3, r2, r3
 800b44c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b44e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b450:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b454:	0c1b      	lsrs	r3, r3, #16
 800b456:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b45a:	fb03 f303 	mul.w	r3, r3, r3
 800b45e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b462:	039b      	lsls	r3, r3, #14
 800b464:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b468:	4a46      	ldr	r2, [pc, #280]	; (800b584 <VL53L0X_calc_dmax+0x234>)
 800b46a:	fba2 2303 	umull	r2, r3, r2, r3
 800b46e:	099b      	lsrs	r3, r3, #6
 800b470:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b474:	fb03 f303 	mul.w	r3, r3, r3
 800b478:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b47c:	fb03 f303 	mul.w	r3, r3, r3
 800b480:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	3308      	adds	r3, #8
 800b486:	091b      	lsrs	r3, r3, #4
 800b488:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b48a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b494:	4613      	mov	r3, r2
 800b496:	005b      	lsls	r3, r3, #1
 800b498:	4413      	add	r3, r2
 800b49a:	011b      	lsls	r3, r3, #4
 800b49c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b4a4:	0b9b      	lsrs	r3, r3, #14
 800b4a6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b4a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4ac:	4413      	add	r3, r2
 800b4ae:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b4b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4b2:	085b      	lsrs	r3, r3, #1
 800b4b4:	69ba      	ldr	r2, [r7, #24]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	039b      	lsls	r3, r3, #14
 800b4c8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	085b      	lsrs	r3, r3, #1
 800b4ce:	69ba      	ldr	r2, [r7, #24]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b4d4:	69ba      	ldr	r2, [r7, #24]
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4dc:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b4e2:	fb02 f303 	mul.w	r3, r2, r3
 800b4e6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b4ee:	4a25      	ldr	r2, [pc, #148]	; (800b584 <VL53L0X_calc_dmax+0x234>)
 800b4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f4:	099b      	lsrs	r3, r3, #6
 800b4f6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	011b      	lsls	r3, r3, #4
 800b4fc:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b504:	4a1f      	ldr	r2, [pc, #124]	; (800b584 <VL53L0X_calc_dmax+0x234>)
 800b506:	fba2 2303 	umull	r2, r3, r2, r3
 800b50a:	099b      	lsrs	r3, r3, #6
 800b50c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b50e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b510:	3380      	adds	r3, #128	; 0x80
 800b512:	0a1b      	lsrs	r3, r3, #8
 800b514:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d008      	beq.n	800b52e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	085a      	lsrs	r2, r3, #1
 800b520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b522:	441a      	add	r2, r3
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	fbb2 f3f3 	udiv	r3, r2, r3
 800b52a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b52c:	e001      	b.n	800b532 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b532:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b534:	f7fe f9ba 	bl	80098ac <VL53L0X_isqrt>
 800b538:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d008      	beq.n	800b552 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	085a      	lsrs	r2, r3, #1
 800b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b546:	441a      	add	r2, r3
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b54e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b550:	e001      	b.n	800b556 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b556:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b558:	f7fe f9a8 	bl	80098ac <VL53L0X_isqrt>
 800b55c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b55e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b568:	429a      	cmp	r2, r3
 800b56a:	d902      	bls.n	800b572 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b56c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b56e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b570:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b572:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b576:	4618      	mov	r0, r3
 800b578:	3768      	adds	r7, #104	; 0x68
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	fff00000 	.word	0xfff00000
 800b584:	10624dd3 	.word	0x10624dd3

0800b588 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b0b4      	sub	sp, #208	; 0xd0
 800b58c:	af04      	add	r7, sp, #16
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b596:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b59a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b59e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b5a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b5a6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b5aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b5ae:	f241 235c 	movw	r3, #4700	; 0x125c
 800b5b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b5b6:	4b9e      	ldr	r3, [pc, #632]	; (800b830 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b5b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b5bc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b5c0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b5c2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b5c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ce:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b5d0:	4b98      	ldr	r3, [pc, #608]	; (800b834 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b5d2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b5d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5d8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b5da:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b5de:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b5e0:	f240 6377 	movw	r3, #1655	; 0x677
 800b5e4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6a1b      	ldr	r3, [r3, #32]
 800b5f0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5fa:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b5fe:	0c1b      	lsrs	r3, r3, #16
 800b600:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b608:	f107 0310 	add.w	r3, r7, #16
 800b60c:	461a      	mov	r2, r3
 800b60e:	68b9      	ldr	r1, [r7, #8]
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7ff fe78 	bl	800b306 <VL53L0X_get_total_signal_rate>
 800b616:	4603      	mov	r3, r0
 800b618:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b61c:	f107 0314 	add.w	r3, r7, #20
 800b620:	461a      	mov	r2, r3
 800b622:	68b9      	ldr	r1, [r7, #8]
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f7ff fe3f 	bl	800b2a8 <VL53L0X_get_total_xtalk_rate>
 800b62a:	4603      	mov	r3, r0
 800b62c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b636:	fb02 f303 	mul.w	r3, r2, r3
 800b63a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b63c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b63e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b642:	0c1b      	lsrs	r3, r3, #16
 800b644:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b64c:	fb02 f303 	mul.w	r3, r2, r3
 800b650:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b654:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d902      	bls.n	800b664 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b65e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b660:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b664:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d168      	bne.n	800b73e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b672:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b67c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b680:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b684:	461a      	mov	r2, r3
 800b686:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f7fe feb2 	bl	800a3f4 <VL53L0X_calc_timeout_mclks>
 800b690:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b6a2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b6a6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7fe fe9f 	bl	800a3f4 <VL53L0X_calc_timeout_mclks>
 800b6b6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b6be:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b6c2:	2b08      	cmp	r3, #8
 800b6c4:	d102      	bne.n	800b6cc <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b6cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6d0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b6d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b6d6:	fb02 f303 	mul.w	r3, r2, r3
 800b6da:	02db      	lsls	r3, r3, #11
 800b6dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b6e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b6e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b6e8:	4a53      	ldr	r2, [pc, #332]	; (800b838 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ee:	099b      	lsrs	r3, r3, #6
 800b6f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b6f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b6f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6fa:	fb02 f303 	mul.w	r3, r2, r3
 800b6fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b702:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b706:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b70a:	4a4b      	ldr	r2, [pc, #300]	; (800b838 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b70c:	fba2 2303 	umull	r2, r3, r2, r3
 800b710:	099b      	lsrs	r3, r3, #6
 800b712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	3380      	adds	r3, #128	; 0x80
 800b71a:	0a1b      	lsrs	r3, r3, #8
 800b71c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b724:	fb02 f303 	mul.w	r3, r2, r3
 800b728:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b72c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b730:	3380      	adds	r3, #128	; 0x80
 800b732:	0a1b      	lsrs	r3, r3, #8
 800b734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	021b      	lsls	r3, r3, #8
 800b73c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b73e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b742:	2b00      	cmp	r3, #0
 800b744:	d002      	beq.n	800b74c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b746:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b74a:	e15e      	b.n	800ba0a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b74c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10c      	bne.n	800b76c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b758:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b760:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	2200      	movs	r2, #0
 800b768:	601a      	str	r2, [r3, #0]
 800b76a:	e14c      	b.n	800ba06 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b76c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b770:	2b00      	cmp	r3, #0
 800b772:	d102      	bne.n	800b77a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b774:	2301      	movs	r3, #1
 800b776:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b77a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b77e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b782:	041a      	lsls	r2, r3, #16
 800b784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b786:	fbb2 f3f3 	udiv	r3, r2, r3
 800b78a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b78e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b794:	429a      	cmp	r2, r3
 800b796:	d902      	bls.n	800b79e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b79a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b79e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b7a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b7a6:	fb02 f303 	mul.w	r3, r2, r3
 800b7aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b7ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe f876 	bl	80098ac <VL53L0X_isqrt>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	891b      	ldrh	r3, [r3, #8]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7ce:	fb02 f303 	mul.w	r3, r2, r3
 800b7d2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b7d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7d6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b7d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7dc:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b7de:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b7e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b7e4:	4a14      	ldr	r2, [pc, #80]	; (800b838 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ea:	099b      	lsrs	r3, r3, #6
 800b7ec:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b7ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7f0:	041b      	lsls	r3, r3, #16
 800b7f2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b7f6:	4a10      	ldr	r2, [pc, #64]	; (800b838 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b7f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7fc:	099b      	lsrs	r3, r3, #6
 800b7fe:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b802:	021b      	lsls	r3, r3, #8
 800b804:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b806:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	bfb8      	it	lt
 800b812:	425b      	neglt	r3, r3
 800b814:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b818:	021b      	lsls	r3, r3, #8
 800b81a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	7e1b      	ldrb	r3, [r3, #24]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00b      	beq.n	800b83c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b82c:	e033      	b.n	800b896 <VL53L0X_calc_sigma_estimate+0x30e>
 800b82e:	bf00      	nop
 800b830:	028f87ae 	.word	0x028f87ae
 800b834:	0006999a 	.word	0x0006999a
 800b838:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b83c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b83e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b842:	fbb2 f3f3 	udiv	r3, r2, r3
 800b846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b854:	fb02 f303 	mul.w	r3, r2, r3
 800b858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b85c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b862:	4413      	add	r3, r2
 800b864:	0c1b      	lsrs	r3, r3, #16
 800b866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b86a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b86e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b87a:	085b      	lsrs	r3, r3, #1
 800b87c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b884:	fb03 f303 	mul.w	r3, r3, r3
 800b888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b88c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b890:	0b9b      	lsrs	r3, r3, #14
 800b892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b89a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b89c:	fb02 f303 	mul.w	r3, r2, r3
 800b8a0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b8a8:	0c1b      	lsrs	r3, r3, #16
 800b8aa:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	fb03 f303 	mul.w	r3, r3, r3
 800b8b2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b8b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b8b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b8c0:	0c1b      	lsrs	r3, r3, #16
 800b8c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c6:	fb03 f303 	mul.w	r3, r3, r3
 800b8ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d0:	4413      	add	r3, r2
 800b8d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b8d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8d6:	f7fd ffe9 	bl	80098ac <VL53L0X_isqrt>
 800b8da:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	041b      	lsls	r3, r3, #16
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	3332      	adds	r3, #50	; 0x32
 800b8e6:	4a4b      	ldr	r2, [pc, #300]	; (800ba14 <VL53L0X_calc_sigma_estimate+0x48c>)
 800b8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ec:	095a      	lsrs	r2, r3, #5
 800b8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b8f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8fc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b900:	fb02 f303 	mul.w	r3, r2, r3
 800b904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b90c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b910:	3308      	adds	r3, #8
 800b912:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b91a:	4a3f      	ldr	r2, [pc, #252]	; (800ba18 <VL53L0X_calc_sigma_estimate+0x490>)
 800b91c:	fba2 2303 	umull	r2, r3, r2, r3
 800b920:	0b5b      	lsrs	r3, r3, #13
 800b922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b92a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d902      	bls.n	800b936 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b930:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b932:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b936:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b93a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b93e:	4413      	add	r3, r2
 800b940:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b944:	4a35      	ldr	r2, [pc, #212]	; (800ba1c <VL53L0X_calc_sigma_estimate+0x494>)
 800b946:	fba2 2303 	umull	r2, r3, r2, r3
 800b94a:	099b      	lsrs	r3, r3, #6
 800b94c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b956:	441a      	add	r2, r3
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fd ffa4 	bl	80098ac <VL53L0X_isqrt>
 800b964:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	021b      	lsls	r3, r3, #8
 800b96a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b972:	4a2a      	ldr	r2, [pc, #168]	; (800ba1c <VL53L0X_calc_sigma_estimate+0x494>)
 800b974:	fba2 2303 	umull	r2, r3, r2, r3
 800b978:	099b      	lsrs	r3, r3, #6
 800b97a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b97c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b980:	fb03 f303 	mul.w	r3, r3, r3
 800b984:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	fb03 f303 	mul.w	r3, r3, r3
 800b98c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b98e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b992:	4413      	add	r3, r2
 800b994:	4618      	mov	r0, r3
 800b996:	f7fd ff89 	bl	80098ac <VL53L0X_isqrt>
 800b99a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b9a2:	fb02 f303 	mul.w	r3, r2, r3
 800b9a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b9aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d009      	beq.n	800b9c4 <VL53L0X_calc_sigma_estimate+0x43c>
 800b9b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d005      	beq.n	800b9c4 <VL53L0X_calc_sigma_estimate+0x43c>
 800b9b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b9bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d903      	bls.n	800b9cc <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b9c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b9c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b9d2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b9de:	6939      	ldr	r1, [r7, #16]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	9303      	str	r3, [sp, #12]
 800b9e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b9e8:	9302      	str	r3, [sp, #8]
 800b9ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9ee:	9301      	str	r3, [sp, #4]
 800b9f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f7ff fca8 	bl	800b350 <VL53L0X_calc_dmax>
 800ba00:	4603      	mov	r3, r0
 800ba02:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba06:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	37c0      	adds	r7, #192	; 0xc0
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	51eb851f 	.word	0x51eb851f
 800ba18:	d1b71759 	.word	0xd1b71759
 800ba1c:	10624dd3 	.word	0x10624dd3

0800ba20 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b090      	sub	sp, #64	; 0x40
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	607a      	str	r2, [r7, #4]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	72fb      	strb	r3, [r7, #11]
 800ba30:	4613      	mov	r3, r2
 800ba32:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba34:	2300      	movs	r3, #0
 800ba36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800ba46:	2300      	movs	r3, #0
 800ba48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ba64:	2300      	movs	r3, #0
 800ba66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800ba72:	7afb      	ldrb	r3, [r7, #11]
 800ba74:	10db      	asrs	r3, r3, #3
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	f003 030f 	and.w	r3, r3, #15
 800ba7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800ba80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d017      	beq.n	800bab8 <VL53L0X_get_pal_range_status+0x98>
 800ba88:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba8c:	2b05      	cmp	r3, #5
 800ba8e:	d013      	beq.n	800bab8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800ba90:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba94:	2b07      	cmp	r3, #7
 800ba96:	d00f      	beq.n	800bab8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800ba98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba9c:	2b0c      	cmp	r3, #12
 800ba9e:	d00b      	beq.n	800bab8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800baa0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800baa4:	2b0d      	cmp	r3, #13
 800baa6:	d007      	beq.n	800bab8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800baa8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800baac:	2b0e      	cmp	r3, #14
 800baae:	d003      	beq.n	800bab8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800bab0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bab4:	2b0f      	cmp	r3, #15
 800bab6:	d103      	bne.n	800bac0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800bab8:	2301      	movs	r3, #1
 800baba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800babe:	e002      	b.n	800bac6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bac6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d109      	bne.n	800bae2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bace:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800bad2:	461a      	mov	r2, r3
 800bad4:	2100      	movs	r1, #0
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f7fc f9ec 	bl	8007eb4 <VL53L0X_GetLimitCheckEnable>
 800badc:	4603      	mov	r3, r0
 800bade:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800bae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d02e      	beq.n	800bb48 <VL53L0X_get_pal_range_status+0x128>
 800baea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d12a      	bne.n	800bb48 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800baf2:	f107 0310 	add.w	r3, r7, #16
 800baf6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bafa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7ff fd43 	bl	800b588 <VL53L0X_calc_sigma_estimate>
 800bb02:	4603      	mov	r3, r0
 800bb04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800bb08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d103      	bne.n	800bb18 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb16:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800bb18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d113      	bne.n	800bb48 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800bb20:	f107 0320 	add.w	r3, r7, #32
 800bb24:	461a      	mov	r2, r3
 800bb26:	2100      	movs	r1, #0
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f7fc fa49 	bl	8007fc0 <VL53L0X_GetLimitCheckValue>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d006      	beq.n	800bb48 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800bb3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d902      	bls.n	800bb48 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800bb42:	2301      	movs	r3, #1
 800bb44:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bb48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d109      	bne.n	800bb64 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bb50:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800bb54:	461a      	mov	r2, r3
 800bb56:	2102      	movs	r1, #2
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f7fc f9ab 	bl	8007eb4 <VL53L0X_GetLimitCheckEnable>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800bb64:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d044      	beq.n	800bbf6 <VL53L0X_get_pal_range_status+0x1d6>
 800bb6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d140      	bne.n	800bbf6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bb74:	f107 031c 	add.w	r3, r7, #28
 800bb78:	461a      	mov	r2, r3
 800bb7a:	2102      	movs	r1, #2
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7fc fa1f 	bl	8007fc0 <VL53L0X_GetLimitCheckValue>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800bb88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d107      	bne.n	800bba0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bb90:	2201      	movs	r2, #1
 800bb92:	21ff      	movs	r1, #255	; 0xff
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 f9bb 	bl	800bf10 <VL53L0X_WrByte>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800bba0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d109      	bne.n	800bbbc <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800bba8:	f107 0316 	add.w	r3, r7, #22
 800bbac:	461a      	mov	r2, r3
 800bbae:	21b6      	movs	r1, #182	; 0xb6
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f000 fa59 	bl	800c068 <VL53L0X_RdWord>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800bbbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d107      	bne.n	800bbd4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	21ff      	movs	r1, #255	; 0xff
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 f9a1 	bl	800bf10 <VL53L0X_WrByte>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800bbd4:	8afb      	ldrh	r3, [r7, #22]
 800bbd6:	025b      	lsls	r3, r3, #9
 800bbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbde:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d006      	beq.n	800bbf6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800bbe8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800bbea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d902      	bls.n	800bbf6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bbf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d109      	bne.n	800bc12 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bbfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc02:	461a      	mov	r2, r3
 800bc04:	2103      	movs	r1, #3
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f7fc f954 	bl	8007eb4 <VL53L0X_GetLimitCheckEnable>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800bc12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d023      	beq.n	800bc62 <VL53L0X_get_pal_range_status+0x242>
 800bc1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d11f      	bne.n	800bc62 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800bc22:	893b      	ldrh	r3, [r7, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d102      	bne.n	800bc2e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc2c:	e005      	b.n	800bc3a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	021a      	lsls	r2, r3, #8
 800bc32:	893b      	ldrh	r3, [r7, #8]
 800bc34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc38:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bc3a:	f107 0318 	add.w	r3, r7, #24
 800bc3e:	461a      	mov	r2, r3
 800bc40:	2103      	movs	r1, #3
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f7fc f9bc 	bl	8007fc0 <VL53L0X_GetLimitCheckValue>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d006      	beq.n	800bc62 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800bc54:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800bc56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d202      	bcs.n	800bc62 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bc62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d14a      	bne.n	800bd00 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800bc6a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d103      	bne.n	800bc7a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800bc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	701a      	strb	r2, [r3, #0]
 800bc78:	e042      	b.n	800bd00 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800bc7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d007      	beq.n	800bc92 <VL53L0X_get_pal_range_status+0x272>
 800bc82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	d003      	beq.n	800bc92 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800bc8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	d103      	bne.n	800bc9a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800bc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc94:	2205      	movs	r2, #5
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e032      	b.n	800bd00 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800bc9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc9e:	2b06      	cmp	r3, #6
 800bca0:	d003      	beq.n	800bcaa <VL53L0X_get_pal_range_status+0x28a>
 800bca2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bca6:	2b09      	cmp	r3, #9
 800bca8:	d103      	bne.n	800bcb2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800bcaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcac:	2204      	movs	r2, #4
 800bcae:	701a      	strb	r2, [r3, #0]
 800bcb0:	e026      	b.n	800bd00 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800bcb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bcb6:	2b08      	cmp	r3, #8
 800bcb8:	d007      	beq.n	800bcca <VL53L0X_get_pal_range_status+0x2aa>
 800bcba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bcbe:	2b0a      	cmp	r3, #10
 800bcc0:	d003      	beq.n	800bcca <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800bcc2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d103      	bne.n	800bcd2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800bcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bccc:	2203      	movs	r2, #3
 800bcce:	701a      	strb	r2, [r3, #0]
 800bcd0:	e016      	b.n	800bd00 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800bcd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bcd6:	2b04      	cmp	r3, #4
 800bcd8:	d003      	beq.n	800bce2 <VL53L0X_get_pal_range_status+0x2c2>
 800bcda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d103      	bne.n	800bcea <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800bce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce4:	2202      	movs	r2, #2
 800bce6:	701a      	strb	r2, [r3, #0]
 800bce8:	e00a      	b.n	800bd00 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800bcea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d103      	bne.n	800bcfa <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800bcf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	701a      	strb	r2, [r3, #0]
 800bcf8:	e002      	b.n	800bd00 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800bcfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800bd00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d102      	bne.n	800bd0e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800bd08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bd0e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bd12:	461a      	mov	r2, r3
 800bd14:	2101      	movs	r1, #1
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7fc f8cc 	bl	8007eb4 <VL53L0X_GetLimitCheckEnable>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800bd22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d14f      	bne.n	800bdca <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800bd2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d003      	beq.n	800bd3a <VL53L0X_get_pal_range_status+0x31a>
 800bd32:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d103      	bne.n	800bd42 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd40:	e002      	b.n	800bd48 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd4e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800bd52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bd56:	2b04      	cmp	r3, #4
 800bd58:	d003      	beq.n	800bd62 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800bd5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d103      	bne.n	800bd6a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800bd62:	2301      	movs	r3, #1
 800bd64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd68:	e002      	b.n	800bd70 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800bd7a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <VL53L0X_get_pal_range_status+0x36a>
 800bd82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d103      	bne.n	800bd92 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd90:	e002      	b.n	800bd98 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800bda2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <VL53L0X_get_pal_range_status+0x392>
 800bdaa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d103      	bne.n	800bdba <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdb8:	e002      	b.n	800bdc0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bdc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bdca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3740      	adds	r7, #64	; 0x40
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b088      	sub	sp, #32
 800bdda:	af02      	add	r7, sp, #8
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	330a      	adds	r3, #10
 800bde6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800bdf4:	b299      	uxth	r1, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	4613      	mov	r3, r2
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	f7f8 fc47 	bl	8004694 <HAL_I2C_Master_Transmit>
 800be06:	4603      	mov	r3, r0
 800be08:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800be0a:	693b      	ldr	r3, [r7, #16]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af02      	add	r7, sp, #8
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	330a      	adds	r3, #10
 800be24:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800be32:	f043 0301 	orr.w	r3, r3, #1
 800be36:	b2db      	uxtb	r3, r3
 800be38:	b299      	uxth	r1, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	4613      	mov	r3, r2
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	f7f8 fd23 	bl	8004890 <HAL_I2C_Master_Receive>
 800be4a:	4603      	mov	r3, r0
 800be4c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800be4e:	693b      	ldr	r3, [r7, #16]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	607a      	str	r2, [r7, #4]
 800be62:	603b      	str	r3, [r7, #0]
 800be64:	460b      	mov	r3, r1
 800be66:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be68:	2300      	movs	r3, #0
 800be6a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2b3f      	cmp	r3, #63	; 0x3f
 800be70:	d902      	bls.n	800be78 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800be72:	f06f 0303 	mvn.w	r3, #3
 800be76:	e016      	b.n	800bea6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800be78:	4a0d      	ldr	r2, [pc, #52]	; (800beb0 <VL53L0X_WriteMulti+0x58>)
 800be7a:	7afb      	ldrb	r3, [r7, #11]
 800be7c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	6879      	ldr	r1, [r7, #4]
 800be82:	480c      	ldr	r0, [pc, #48]	; (800beb4 <VL53L0X_WriteMulti+0x5c>)
 800be84:	f000 f99e 	bl	800c1c4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	3301      	adds	r3, #1
 800be8c:	461a      	mov	r2, r3
 800be8e:	4908      	ldr	r1, [pc, #32]	; (800beb0 <VL53L0X_WriteMulti+0x58>)
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff ffa0 	bl	800bdd6 <_I2CWrite>
 800be96:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d001      	beq.n	800bea2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be9e:	23ec      	movs	r3, #236	; 0xec
 800bea0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3718      	adds	r7, #24
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	20001230 	.word	0x20001230
 800beb4:	20001231 	.word	0x20001231

0800beb8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	607a      	str	r2, [r7, #4]
 800bec2:	603b      	str	r3, [r7, #0]
 800bec4:	460b      	mov	r3, r1
 800bec6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bec8:	2300      	movs	r3, #0
 800beca:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800becc:	f107 030b 	add.w	r3, r7, #11
 800bed0:	2201      	movs	r2, #1
 800bed2:	4619      	mov	r1, r3
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f7ff ff7e 	bl	800bdd6 <_I2CWrite>
 800beda:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d002      	beq.n	800bee8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bee2:	23ec      	movs	r3, #236	; 0xec
 800bee4:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bee6:	e00c      	b.n	800bf02 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	6879      	ldr	r1, [r7, #4]
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7ff ff91 	bl	800be14 <_I2CRead>
 800bef2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800befa:	23ec      	movs	r3, #236	; 0xec
 800befc:	75fb      	strb	r3, [r7, #23]
 800befe:	e000      	b.n	800bf02 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800bf00:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bf02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3718      	adds	r7, #24
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
	...

0800bf10 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	70fb      	strb	r3, [r7, #3]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bf24:	4a0b      	ldr	r2, [pc, #44]	; (800bf54 <VL53L0X_WrByte+0x44>)
 800bf26:	78fb      	ldrb	r3, [r7, #3]
 800bf28:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800bf2a:	4a0a      	ldr	r2, [pc, #40]	; (800bf54 <VL53L0X_WrByte+0x44>)
 800bf2c:	78bb      	ldrb	r3, [r7, #2]
 800bf2e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800bf30:	2202      	movs	r2, #2
 800bf32:	4908      	ldr	r1, [pc, #32]	; (800bf54 <VL53L0X_WrByte+0x44>)
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff ff4e 	bl	800bdd6 <_I2CWrite>
 800bf3a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bf42:	23ec      	movs	r3, #236	; 0xec
 800bf44:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bf46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	20001230 	.word	0x20001230

0800bf58 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	70fb      	strb	r3, [r7, #3]
 800bf64:	4613      	mov	r3, r2
 800bf66:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bf6c:	4a0e      	ldr	r2, [pc, #56]	; (800bfa8 <VL53L0X_WrWord+0x50>)
 800bf6e:	78fb      	ldrb	r3, [r7, #3]
 800bf70:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800bf72:	883b      	ldrh	r3, [r7, #0]
 800bf74:	0a1b      	lsrs	r3, r3, #8
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	4b0b      	ldr	r3, [pc, #44]	; (800bfa8 <VL53L0X_WrWord+0x50>)
 800bf7c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800bf7e:	883b      	ldrh	r3, [r7, #0]
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	4b09      	ldr	r3, [pc, #36]	; (800bfa8 <VL53L0X_WrWord+0x50>)
 800bf84:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800bf86:	2203      	movs	r2, #3
 800bf88:	4907      	ldr	r1, [pc, #28]	; (800bfa8 <VL53L0X_WrWord+0x50>)
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7ff ff23 	bl	800bdd6 <_I2CWrite>
 800bf90:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d001      	beq.n	800bf9c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bf98:	23ec      	movs	r3, #236	; 0xec
 800bf9a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bf9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	20001230 	.word	0x20001230

0800bfac <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	4608      	mov	r0, r1
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	461a      	mov	r2, r3
 800bfba:	4603      	mov	r3, r0
 800bfbc:	70fb      	strb	r3, [r7, #3]
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	70bb      	strb	r3, [r7, #2]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800bfca:	f107 020e 	add.w	r2, r7, #14
 800bfce:	78fb      	ldrb	r3, [r7, #3]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f81e 	bl	800c014 <VL53L0X_RdByte>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800bfdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d110      	bne.n	800c006 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800bfe4:	7bba      	ldrb	r2, [r7, #14]
 800bfe6:	78bb      	ldrb	r3, [r7, #2]
 800bfe8:	4013      	ands	r3, r2
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	787b      	ldrb	r3, [r7, #1]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bff4:	7bba      	ldrb	r2, [r7, #14]
 800bff6:	78fb      	ldrb	r3, [r7, #3]
 800bff8:	4619      	mov	r1, r3
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff ff88 	bl	800bf10 <VL53L0X_WrByte>
 800c000:	4603      	mov	r3, r0
 800c002:	73fb      	strb	r3, [r7, #15]
 800c004:	e000      	b.n	800c008 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800c006:	bf00      	nop
done:
    return Status;
 800c008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	460b      	mov	r3, r1
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c022:	2300      	movs	r3, #0
 800c024:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c026:	f107 030b 	add.w	r3, r7, #11
 800c02a:	2201      	movs	r2, #1
 800c02c:	4619      	mov	r1, r3
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f7ff fed1 	bl	800bdd6 <_I2CWrite>
 800c034:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d002      	beq.n	800c042 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c03c:	23ec      	movs	r3, #236	; 0xec
 800c03e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c040:	e00c      	b.n	800c05c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800c042:	2201      	movs	r2, #1
 800c044:	6879      	ldr	r1, [r7, #4]
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f7ff fee4 	bl	800be14 <_I2CRead>
 800c04c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c054:	23ec      	movs	r3, #236	; 0xec
 800c056:	75fb      	strb	r3, [r7, #23]
 800c058:	e000      	b.n	800c05c <VL53L0X_RdByte+0x48>
    }
done:
 800c05a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800c05c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c060:	4618      	mov	r0, r3
 800c062:	3718      	adds	r7, #24
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	460b      	mov	r3, r1
 800c072:	607a      	str	r2, [r7, #4]
 800c074:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c076:	2300      	movs	r3, #0
 800c078:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c07a:	f107 030b 	add.w	r3, r7, #11
 800c07e:	2201      	movs	r2, #1
 800c080:	4619      	mov	r1, r3
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f7ff fea7 	bl	800bdd6 <_I2CWrite>
 800c088:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c090:	23ec      	movs	r3, #236	; 0xec
 800c092:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c094:	e017      	b.n	800c0c6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800c096:	2202      	movs	r2, #2
 800c098:	490e      	ldr	r1, [pc, #56]	; (800c0d4 <VL53L0X_RdWord+0x6c>)
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f7ff feba 	bl	800be14 <_I2CRead>
 800c0a0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d002      	beq.n	800c0ae <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c0a8:	23ec      	movs	r3, #236	; 0xec
 800c0aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c0ac:	e00b      	b.n	800c0c6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800c0ae:	4b09      	ldr	r3, [pc, #36]	; (800c0d4 <VL53L0X_RdWord+0x6c>)
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	021b      	lsls	r3, r3, #8
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	4b06      	ldr	r3, [pc, #24]	; (800c0d4 <VL53L0X_RdWord+0x6c>)
 800c0ba:	785b      	ldrb	r3, [r3, #1]
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	4413      	add	r3, r2
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800c0c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3718      	adds	r7, #24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20001230 	.word	0x20001230

0800c0d8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c0ea:	f107 030b 	add.w	r3, r7, #11
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f7ff fe6f 	bl	800bdd6 <_I2CWrite>
 800c0f8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c100:	23ec      	movs	r3, #236	; 0xec
 800c102:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c104:	e01b      	b.n	800c13e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800c106:	2204      	movs	r2, #4
 800c108:	4910      	ldr	r1, [pc, #64]	; (800c14c <VL53L0X_RdDWord+0x74>)
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f7ff fe82 	bl	800be14 <_I2CRead>
 800c110:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c118:	23ec      	movs	r3, #236	; 0xec
 800c11a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c11c:	e00f      	b.n	800c13e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800c11e:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <VL53L0X_RdDWord+0x74>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	061a      	lsls	r2, r3, #24
 800c124:	4b09      	ldr	r3, [pc, #36]	; (800c14c <VL53L0X_RdDWord+0x74>)
 800c126:	785b      	ldrb	r3, [r3, #1]
 800c128:	041b      	lsls	r3, r3, #16
 800c12a:	441a      	add	r2, r3
 800c12c:	4b07      	ldr	r3, [pc, #28]	; (800c14c <VL53L0X_RdDWord+0x74>)
 800c12e:	789b      	ldrb	r3, [r3, #2]
 800c130:	021b      	lsls	r3, r3, #8
 800c132:	4413      	add	r3, r2
 800c134:	4a05      	ldr	r2, [pc, #20]	; (800c14c <VL53L0X_RdDWord+0x74>)
 800c136:	78d2      	ldrb	r2, [r2, #3]
 800c138:	441a      	add	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800c13e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3718      	adds	r7, #24
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20001230 	.word	0x20001230

0800c150 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c158:	2300      	movs	r3, #0
 800c15a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800c15c:	2002      	movs	r0, #2
 800c15e:	f7f6 fef7 	bl	8002f50 <HAL_Delay>
    return status;
 800c162:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
	...

0800c170 <__errno>:
 800c170:	4b01      	ldr	r3, [pc, #4]	; (800c178 <__errno+0x8>)
 800c172:	6818      	ldr	r0, [r3, #0]
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	200002cc 	.word	0x200002cc

0800c17c <__libc_init_array>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	4d0d      	ldr	r5, [pc, #52]	; (800c1b4 <__libc_init_array+0x38>)
 800c180:	4c0d      	ldr	r4, [pc, #52]	; (800c1b8 <__libc_init_array+0x3c>)
 800c182:	1b64      	subs	r4, r4, r5
 800c184:	10a4      	asrs	r4, r4, #2
 800c186:	2600      	movs	r6, #0
 800c188:	42a6      	cmp	r6, r4
 800c18a:	d109      	bne.n	800c1a0 <__libc_init_array+0x24>
 800c18c:	4d0b      	ldr	r5, [pc, #44]	; (800c1bc <__libc_init_array+0x40>)
 800c18e:	4c0c      	ldr	r4, [pc, #48]	; (800c1c0 <__libc_init_array+0x44>)
 800c190:	f004 fd14 	bl	8010bbc <_init>
 800c194:	1b64      	subs	r4, r4, r5
 800c196:	10a4      	asrs	r4, r4, #2
 800c198:	2600      	movs	r6, #0
 800c19a:	42a6      	cmp	r6, r4
 800c19c:	d105      	bne.n	800c1aa <__libc_init_array+0x2e>
 800c19e:	bd70      	pop	{r4, r5, r6, pc}
 800c1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1a4:	4798      	blx	r3
 800c1a6:	3601      	adds	r6, #1
 800c1a8:	e7ee      	b.n	800c188 <__libc_init_array+0xc>
 800c1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ae:	4798      	blx	r3
 800c1b0:	3601      	adds	r6, #1
 800c1b2:	e7f2      	b.n	800c19a <__libc_init_array+0x1e>
 800c1b4:	08012234 	.word	0x08012234
 800c1b8:	08012234 	.word	0x08012234
 800c1bc:	08012234 	.word	0x08012234
 800c1c0:	08012238 	.word	0x08012238

0800c1c4 <memcpy>:
 800c1c4:	440a      	add	r2, r1
 800c1c6:	4291      	cmp	r1, r2
 800c1c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1cc:	d100      	bne.n	800c1d0 <memcpy+0xc>
 800c1ce:	4770      	bx	lr
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1da:	4291      	cmp	r1, r2
 800c1dc:	d1f9      	bne.n	800c1d2 <memcpy+0xe>
 800c1de:	bd10      	pop	{r4, pc}

0800c1e0 <memset>:
 800c1e0:	4402      	add	r2, r0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d100      	bne.n	800c1ea <memset+0xa>
 800c1e8:	4770      	bx	lr
 800c1ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ee:	e7f9      	b.n	800c1e4 <memset+0x4>

0800c1f0 <__cvt>:
 800c1f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f4:	ec55 4b10 	vmov	r4, r5, d0
 800c1f8:	2d00      	cmp	r5, #0
 800c1fa:	460e      	mov	r6, r1
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	462b      	mov	r3, r5
 800c200:	bfbb      	ittet	lt
 800c202:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c206:	461d      	movlt	r5, r3
 800c208:	2300      	movge	r3, #0
 800c20a:	232d      	movlt	r3, #45	; 0x2d
 800c20c:	700b      	strb	r3, [r1, #0]
 800c20e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c210:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c214:	4691      	mov	r9, r2
 800c216:	f023 0820 	bic.w	r8, r3, #32
 800c21a:	bfbc      	itt	lt
 800c21c:	4622      	movlt	r2, r4
 800c21e:	4614      	movlt	r4, r2
 800c220:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c224:	d005      	beq.n	800c232 <__cvt+0x42>
 800c226:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c22a:	d100      	bne.n	800c22e <__cvt+0x3e>
 800c22c:	3601      	adds	r6, #1
 800c22e:	2102      	movs	r1, #2
 800c230:	e000      	b.n	800c234 <__cvt+0x44>
 800c232:	2103      	movs	r1, #3
 800c234:	ab03      	add	r3, sp, #12
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	ab02      	add	r3, sp, #8
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	ec45 4b10 	vmov	d0, r4, r5
 800c240:	4653      	mov	r3, sl
 800c242:	4632      	mov	r2, r6
 800c244:	f001 fdf0 	bl	800de28 <_dtoa_r>
 800c248:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c24c:	4607      	mov	r7, r0
 800c24e:	d102      	bne.n	800c256 <__cvt+0x66>
 800c250:	f019 0f01 	tst.w	r9, #1
 800c254:	d022      	beq.n	800c29c <__cvt+0xac>
 800c256:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c25a:	eb07 0906 	add.w	r9, r7, r6
 800c25e:	d110      	bne.n	800c282 <__cvt+0x92>
 800c260:	783b      	ldrb	r3, [r7, #0]
 800c262:	2b30      	cmp	r3, #48	; 0x30
 800c264:	d10a      	bne.n	800c27c <__cvt+0x8c>
 800c266:	2200      	movs	r2, #0
 800c268:	2300      	movs	r3, #0
 800c26a:	4620      	mov	r0, r4
 800c26c:	4629      	mov	r1, r5
 800c26e:	f7f4 fc33 	bl	8000ad8 <__aeabi_dcmpeq>
 800c272:	b918      	cbnz	r0, 800c27c <__cvt+0x8c>
 800c274:	f1c6 0601 	rsb	r6, r6, #1
 800c278:	f8ca 6000 	str.w	r6, [sl]
 800c27c:	f8da 3000 	ldr.w	r3, [sl]
 800c280:	4499      	add	r9, r3
 800c282:	2200      	movs	r2, #0
 800c284:	2300      	movs	r3, #0
 800c286:	4620      	mov	r0, r4
 800c288:	4629      	mov	r1, r5
 800c28a:	f7f4 fc25 	bl	8000ad8 <__aeabi_dcmpeq>
 800c28e:	b108      	cbz	r0, 800c294 <__cvt+0xa4>
 800c290:	f8cd 900c 	str.w	r9, [sp, #12]
 800c294:	2230      	movs	r2, #48	; 0x30
 800c296:	9b03      	ldr	r3, [sp, #12]
 800c298:	454b      	cmp	r3, r9
 800c29a:	d307      	bcc.n	800c2ac <__cvt+0xbc>
 800c29c:	9b03      	ldr	r3, [sp, #12]
 800c29e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2a0:	1bdb      	subs	r3, r3, r7
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	6013      	str	r3, [r2, #0]
 800c2a6:	b004      	add	sp, #16
 800c2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ac:	1c59      	adds	r1, r3, #1
 800c2ae:	9103      	str	r1, [sp, #12]
 800c2b0:	701a      	strb	r2, [r3, #0]
 800c2b2:	e7f0      	b.n	800c296 <__cvt+0xa6>

0800c2b4 <__exponent>:
 800c2b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2900      	cmp	r1, #0
 800c2ba:	bfb8      	it	lt
 800c2bc:	4249      	neglt	r1, r1
 800c2be:	f803 2b02 	strb.w	r2, [r3], #2
 800c2c2:	bfb4      	ite	lt
 800c2c4:	222d      	movlt	r2, #45	; 0x2d
 800c2c6:	222b      	movge	r2, #43	; 0x2b
 800c2c8:	2909      	cmp	r1, #9
 800c2ca:	7042      	strb	r2, [r0, #1]
 800c2cc:	dd2a      	ble.n	800c324 <__exponent+0x70>
 800c2ce:	f10d 0407 	add.w	r4, sp, #7
 800c2d2:	46a4      	mov	ip, r4
 800c2d4:	270a      	movs	r7, #10
 800c2d6:	46a6      	mov	lr, r4
 800c2d8:	460a      	mov	r2, r1
 800c2da:	fb91 f6f7 	sdiv	r6, r1, r7
 800c2de:	fb07 1516 	mls	r5, r7, r6, r1
 800c2e2:	3530      	adds	r5, #48	; 0x30
 800c2e4:	2a63      	cmp	r2, #99	; 0x63
 800c2e6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c2ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	dcf1      	bgt.n	800c2d6 <__exponent+0x22>
 800c2f2:	3130      	adds	r1, #48	; 0x30
 800c2f4:	f1ae 0502 	sub.w	r5, lr, #2
 800c2f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c2fc:	1c44      	adds	r4, r0, #1
 800c2fe:	4629      	mov	r1, r5
 800c300:	4561      	cmp	r1, ip
 800c302:	d30a      	bcc.n	800c31a <__exponent+0x66>
 800c304:	f10d 0209 	add.w	r2, sp, #9
 800c308:	eba2 020e 	sub.w	r2, r2, lr
 800c30c:	4565      	cmp	r5, ip
 800c30e:	bf88      	it	hi
 800c310:	2200      	movhi	r2, #0
 800c312:	4413      	add	r3, r2
 800c314:	1a18      	subs	r0, r3, r0
 800c316:	b003      	add	sp, #12
 800c318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c322:	e7ed      	b.n	800c300 <__exponent+0x4c>
 800c324:	2330      	movs	r3, #48	; 0x30
 800c326:	3130      	adds	r1, #48	; 0x30
 800c328:	7083      	strb	r3, [r0, #2]
 800c32a:	70c1      	strb	r1, [r0, #3]
 800c32c:	1d03      	adds	r3, r0, #4
 800c32e:	e7f1      	b.n	800c314 <__exponent+0x60>

0800c330 <_printf_float>:
 800c330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c334:	ed2d 8b02 	vpush	{d8}
 800c338:	b08d      	sub	sp, #52	; 0x34
 800c33a:	460c      	mov	r4, r1
 800c33c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c340:	4616      	mov	r6, r2
 800c342:	461f      	mov	r7, r3
 800c344:	4605      	mov	r5, r0
 800c346:	f002 fecd 	bl	800f0e4 <_localeconv_r>
 800c34a:	f8d0 a000 	ldr.w	sl, [r0]
 800c34e:	4650      	mov	r0, sl
 800c350:	f7f3 ff46 	bl	80001e0 <strlen>
 800c354:	2300      	movs	r3, #0
 800c356:	930a      	str	r3, [sp, #40]	; 0x28
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	9305      	str	r3, [sp, #20]
 800c35c:	f8d8 3000 	ldr.w	r3, [r8]
 800c360:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c364:	3307      	adds	r3, #7
 800c366:	f023 0307 	bic.w	r3, r3, #7
 800c36a:	f103 0208 	add.w	r2, r3, #8
 800c36e:	f8c8 2000 	str.w	r2, [r8]
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c37a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c37e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c382:	9307      	str	r3, [sp, #28]
 800c384:	f8cd 8018 	str.w	r8, [sp, #24]
 800c388:	ee08 0a10 	vmov	s16, r0
 800c38c:	4b9f      	ldr	r3, [pc, #636]	; (800c60c <_printf_float+0x2dc>)
 800c38e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c392:	f04f 32ff 	mov.w	r2, #4294967295
 800c396:	f7f4 fbd1 	bl	8000b3c <__aeabi_dcmpun>
 800c39a:	bb88      	cbnz	r0, 800c400 <_printf_float+0xd0>
 800c39c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3a0:	4b9a      	ldr	r3, [pc, #616]	; (800c60c <_printf_float+0x2dc>)
 800c3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a6:	f7f4 fbab 	bl	8000b00 <__aeabi_dcmple>
 800c3aa:	bb48      	cbnz	r0, 800c400 <_printf_float+0xd0>
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	4640      	mov	r0, r8
 800c3b2:	4649      	mov	r1, r9
 800c3b4:	f7f4 fb9a 	bl	8000aec <__aeabi_dcmplt>
 800c3b8:	b110      	cbz	r0, 800c3c0 <_printf_float+0x90>
 800c3ba:	232d      	movs	r3, #45	; 0x2d
 800c3bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3c0:	4b93      	ldr	r3, [pc, #588]	; (800c610 <_printf_float+0x2e0>)
 800c3c2:	4894      	ldr	r0, [pc, #592]	; (800c614 <_printf_float+0x2e4>)
 800c3c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c3c8:	bf94      	ite	ls
 800c3ca:	4698      	movls	r8, r3
 800c3cc:	4680      	movhi	r8, r0
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	6123      	str	r3, [r4, #16]
 800c3d2:	9b05      	ldr	r3, [sp, #20]
 800c3d4:	f023 0204 	bic.w	r2, r3, #4
 800c3d8:	6022      	str	r2, [r4, #0]
 800c3da:	f04f 0900 	mov.w	r9, #0
 800c3de:	9700      	str	r7, [sp, #0]
 800c3e0:	4633      	mov	r3, r6
 800c3e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f000 f9d8 	bl	800c79c <_printf_common>
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	f040 8090 	bne.w	800c512 <_printf_float+0x1e2>
 800c3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f6:	b00d      	add	sp, #52	; 0x34
 800c3f8:	ecbd 8b02 	vpop	{d8}
 800c3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c400:	4642      	mov	r2, r8
 800c402:	464b      	mov	r3, r9
 800c404:	4640      	mov	r0, r8
 800c406:	4649      	mov	r1, r9
 800c408:	f7f4 fb98 	bl	8000b3c <__aeabi_dcmpun>
 800c40c:	b140      	cbz	r0, 800c420 <_printf_float+0xf0>
 800c40e:	464b      	mov	r3, r9
 800c410:	2b00      	cmp	r3, #0
 800c412:	bfbc      	itt	lt
 800c414:	232d      	movlt	r3, #45	; 0x2d
 800c416:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c41a:	487f      	ldr	r0, [pc, #508]	; (800c618 <_printf_float+0x2e8>)
 800c41c:	4b7f      	ldr	r3, [pc, #508]	; (800c61c <_printf_float+0x2ec>)
 800c41e:	e7d1      	b.n	800c3c4 <_printf_float+0x94>
 800c420:	6863      	ldr	r3, [r4, #4]
 800c422:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c426:	9206      	str	r2, [sp, #24]
 800c428:	1c5a      	adds	r2, r3, #1
 800c42a:	d13f      	bne.n	800c4ac <_printf_float+0x17c>
 800c42c:	2306      	movs	r3, #6
 800c42e:	6063      	str	r3, [r4, #4]
 800c430:	9b05      	ldr	r3, [sp, #20]
 800c432:	6861      	ldr	r1, [r4, #4]
 800c434:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c438:	2300      	movs	r3, #0
 800c43a:	9303      	str	r3, [sp, #12]
 800c43c:	ab0a      	add	r3, sp, #40	; 0x28
 800c43e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c442:	ab09      	add	r3, sp, #36	; 0x24
 800c444:	ec49 8b10 	vmov	d0, r8, r9
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	6022      	str	r2, [r4, #0]
 800c44c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c450:	4628      	mov	r0, r5
 800c452:	f7ff fecd 	bl	800c1f0 <__cvt>
 800c456:	9b06      	ldr	r3, [sp, #24]
 800c458:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c45a:	2b47      	cmp	r3, #71	; 0x47
 800c45c:	4680      	mov	r8, r0
 800c45e:	d108      	bne.n	800c472 <_printf_float+0x142>
 800c460:	1cc8      	adds	r0, r1, #3
 800c462:	db02      	blt.n	800c46a <_printf_float+0x13a>
 800c464:	6863      	ldr	r3, [r4, #4]
 800c466:	4299      	cmp	r1, r3
 800c468:	dd41      	ble.n	800c4ee <_printf_float+0x1be>
 800c46a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c46e:	fa5f fb8b 	uxtb.w	fp, fp
 800c472:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c476:	d820      	bhi.n	800c4ba <_printf_float+0x18a>
 800c478:	3901      	subs	r1, #1
 800c47a:	465a      	mov	r2, fp
 800c47c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c480:	9109      	str	r1, [sp, #36]	; 0x24
 800c482:	f7ff ff17 	bl	800c2b4 <__exponent>
 800c486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c488:	1813      	adds	r3, r2, r0
 800c48a:	2a01      	cmp	r2, #1
 800c48c:	4681      	mov	r9, r0
 800c48e:	6123      	str	r3, [r4, #16]
 800c490:	dc02      	bgt.n	800c498 <_printf_float+0x168>
 800c492:	6822      	ldr	r2, [r4, #0]
 800c494:	07d2      	lsls	r2, r2, #31
 800c496:	d501      	bpl.n	800c49c <_printf_float+0x16c>
 800c498:	3301      	adds	r3, #1
 800c49a:	6123      	str	r3, [r4, #16]
 800c49c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d09c      	beq.n	800c3de <_printf_float+0xae>
 800c4a4:	232d      	movs	r3, #45	; 0x2d
 800c4a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4aa:	e798      	b.n	800c3de <_printf_float+0xae>
 800c4ac:	9a06      	ldr	r2, [sp, #24]
 800c4ae:	2a47      	cmp	r2, #71	; 0x47
 800c4b0:	d1be      	bne.n	800c430 <_printf_float+0x100>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1bc      	bne.n	800c430 <_printf_float+0x100>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e7b9      	b.n	800c42e <_printf_float+0xfe>
 800c4ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c4be:	d118      	bne.n	800c4f2 <_printf_float+0x1c2>
 800c4c0:	2900      	cmp	r1, #0
 800c4c2:	6863      	ldr	r3, [r4, #4]
 800c4c4:	dd0b      	ble.n	800c4de <_printf_float+0x1ae>
 800c4c6:	6121      	str	r1, [r4, #16]
 800c4c8:	b913      	cbnz	r3, 800c4d0 <_printf_float+0x1a0>
 800c4ca:	6822      	ldr	r2, [r4, #0]
 800c4cc:	07d0      	lsls	r0, r2, #31
 800c4ce:	d502      	bpl.n	800c4d6 <_printf_float+0x1a6>
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	440b      	add	r3, r1
 800c4d4:	6123      	str	r3, [r4, #16]
 800c4d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4d8:	f04f 0900 	mov.w	r9, #0
 800c4dc:	e7de      	b.n	800c49c <_printf_float+0x16c>
 800c4de:	b913      	cbnz	r3, 800c4e6 <_printf_float+0x1b6>
 800c4e0:	6822      	ldr	r2, [r4, #0]
 800c4e2:	07d2      	lsls	r2, r2, #31
 800c4e4:	d501      	bpl.n	800c4ea <_printf_float+0x1ba>
 800c4e6:	3302      	adds	r3, #2
 800c4e8:	e7f4      	b.n	800c4d4 <_printf_float+0x1a4>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e7f2      	b.n	800c4d4 <_printf_float+0x1a4>
 800c4ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f4:	4299      	cmp	r1, r3
 800c4f6:	db05      	blt.n	800c504 <_printf_float+0x1d4>
 800c4f8:	6823      	ldr	r3, [r4, #0]
 800c4fa:	6121      	str	r1, [r4, #16]
 800c4fc:	07d8      	lsls	r0, r3, #31
 800c4fe:	d5ea      	bpl.n	800c4d6 <_printf_float+0x1a6>
 800c500:	1c4b      	adds	r3, r1, #1
 800c502:	e7e7      	b.n	800c4d4 <_printf_float+0x1a4>
 800c504:	2900      	cmp	r1, #0
 800c506:	bfd4      	ite	le
 800c508:	f1c1 0202 	rsble	r2, r1, #2
 800c50c:	2201      	movgt	r2, #1
 800c50e:	4413      	add	r3, r2
 800c510:	e7e0      	b.n	800c4d4 <_printf_float+0x1a4>
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	055a      	lsls	r2, r3, #21
 800c516:	d407      	bmi.n	800c528 <_printf_float+0x1f8>
 800c518:	6923      	ldr	r3, [r4, #16]
 800c51a:	4642      	mov	r2, r8
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	47b8      	blx	r7
 800c522:	3001      	adds	r0, #1
 800c524:	d12c      	bne.n	800c580 <_printf_float+0x250>
 800c526:	e764      	b.n	800c3f2 <_printf_float+0xc2>
 800c528:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c52c:	f240 80e0 	bls.w	800c6f0 <_printf_float+0x3c0>
 800c530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c534:	2200      	movs	r2, #0
 800c536:	2300      	movs	r3, #0
 800c538:	f7f4 face 	bl	8000ad8 <__aeabi_dcmpeq>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d034      	beq.n	800c5aa <_printf_float+0x27a>
 800c540:	4a37      	ldr	r2, [pc, #220]	; (800c620 <_printf_float+0x2f0>)
 800c542:	2301      	movs	r3, #1
 800c544:	4631      	mov	r1, r6
 800c546:	4628      	mov	r0, r5
 800c548:	47b8      	blx	r7
 800c54a:	3001      	adds	r0, #1
 800c54c:	f43f af51 	beq.w	800c3f2 <_printf_float+0xc2>
 800c550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c554:	429a      	cmp	r2, r3
 800c556:	db02      	blt.n	800c55e <_printf_float+0x22e>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	07d8      	lsls	r0, r3, #31
 800c55c:	d510      	bpl.n	800c580 <_printf_float+0x250>
 800c55e:	ee18 3a10 	vmov	r3, s16
 800c562:	4652      	mov	r2, sl
 800c564:	4631      	mov	r1, r6
 800c566:	4628      	mov	r0, r5
 800c568:	47b8      	blx	r7
 800c56a:	3001      	adds	r0, #1
 800c56c:	f43f af41 	beq.w	800c3f2 <_printf_float+0xc2>
 800c570:	f04f 0800 	mov.w	r8, #0
 800c574:	f104 091a 	add.w	r9, r4, #26
 800c578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c57a:	3b01      	subs	r3, #1
 800c57c:	4543      	cmp	r3, r8
 800c57e:	dc09      	bgt.n	800c594 <_printf_float+0x264>
 800c580:	6823      	ldr	r3, [r4, #0]
 800c582:	079b      	lsls	r3, r3, #30
 800c584:	f100 8105 	bmi.w	800c792 <_printf_float+0x462>
 800c588:	68e0      	ldr	r0, [r4, #12]
 800c58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c58c:	4298      	cmp	r0, r3
 800c58e:	bfb8      	it	lt
 800c590:	4618      	movlt	r0, r3
 800c592:	e730      	b.n	800c3f6 <_printf_float+0xc6>
 800c594:	2301      	movs	r3, #1
 800c596:	464a      	mov	r2, r9
 800c598:	4631      	mov	r1, r6
 800c59a:	4628      	mov	r0, r5
 800c59c:	47b8      	blx	r7
 800c59e:	3001      	adds	r0, #1
 800c5a0:	f43f af27 	beq.w	800c3f2 <_printf_float+0xc2>
 800c5a4:	f108 0801 	add.w	r8, r8, #1
 800c5a8:	e7e6      	b.n	800c578 <_printf_float+0x248>
 800c5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dc39      	bgt.n	800c624 <_printf_float+0x2f4>
 800c5b0:	4a1b      	ldr	r2, [pc, #108]	; (800c620 <_printf_float+0x2f0>)
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	4631      	mov	r1, r6
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	47b8      	blx	r7
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	f43f af19 	beq.w	800c3f2 <_printf_float+0xc2>
 800c5c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	d102      	bne.n	800c5ce <_printf_float+0x29e>
 800c5c8:	6823      	ldr	r3, [r4, #0]
 800c5ca:	07d9      	lsls	r1, r3, #31
 800c5cc:	d5d8      	bpl.n	800c580 <_printf_float+0x250>
 800c5ce:	ee18 3a10 	vmov	r3, s16
 800c5d2:	4652      	mov	r2, sl
 800c5d4:	4631      	mov	r1, r6
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	47b8      	blx	r7
 800c5da:	3001      	adds	r0, #1
 800c5dc:	f43f af09 	beq.w	800c3f2 <_printf_float+0xc2>
 800c5e0:	f04f 0900 	mov.w	r9, #0
 800c5e4:	f104 0a1a 	add.w	sl, r4, #26
 800c5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ea:	425b      	negs	r3, r3
 800c5ec:	454b      	cmp	r3, r9
 800c5ee:	dc01      	bgt.n	800c5f4 <_printf_float+0x2c4>
 800c5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f2:	e792      	b.n	800c51a <_printf_float+0x1ea>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	4652      	mov	r2, sl
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	f43f aef7 	beq.w	800c3f2 <_printf_float+0xc2>
 800c604:	f109 0901 	add.w	r9, r9, #1
 800c608:	e7ee      	b.n	800c5e8 <_printf_float+0x2b8>
 800c60a:	bf00      	nop
 800c60c:	7fefffff 	.word	0x7fefffff
 800c610:	08011d88 	.word	0x08011d88
 800c614:	08011d8c 	.word	0x08011d8c
 800c618:	08011d94 	.word	0x08011d94
 800c61c:	08011d90 	.word	0x08011d90
 800c620:	08011d98 	.word	0x08011d98
 800c624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c626:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c628:	429a      	cmp	r2, r3
 800c62a:	bfa8      	it	ge
 800c62c:	461a      	movge	r2, r3
 800c62e:	2a00      	cmp	r2, #0
 800c630:	4691      	mov	r9, r2
 800c632:	dc37      	bgt.n	800c6a4 <_printf_float+0x374>
 800c634:	f04f 0b00 	mov.w	fp, #0
 800c638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c63c:	f104 021a 	add.w	r2, r4, #26
 800c640:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c642:	9305      	str	r3, [sp, #20]
 800c644:	eba3 0309 	sub.w	r3, r3, r9
 800c648:	455b      	cmp	r3, fp
 800c64a:	dc33      	bgt.n	800c6b4 <_printf_float+0x384>
 800c64c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c650:	429a      	cmp	r2, r3
 800c652:	db3b      	blt.n	800c6cc <_printf_float+0x39c>
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	07da      	lsls	r2, r3, #31
 800c658:	d438      	bmi.n	800c6cc <_printf_float+0x39c>
 800c65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c65c:	9a05      	ldr	r2, [sp, #20]
 800c65e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c660:	1a9a      	subs	r2, r3, r2
 800c662:	eba3 0901 	sub.w	r9, r3, r1
 800c666:	4591      	cmp	r9, r2
 800c668:	bfa8      	it	ge
 800c66a:	4691      	movge	r9, r2
 800c66c:	f1b9 0f00 	cmp.w	r9, #0
 800c670:	dc35      	bgt.n	800c6de <_printf_float+0x3ae>
 800c672:	f04f 0800 	mov.w	r8, #0
 800c676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c67a:	f104 0a1a 	add.w	sl, r4, #26
 800c67e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c682:	1a9b      	subs	r3, r3, r2
 800c684:	eba3 0309 	sub.w	r3, r3, r9
 800c688:	4543      	cmp	r3, r8
 800c68a:	f77f af79 	ble.w	800c580 <_printf_float+0x250>
 800c68e:	2301      	movs	r3, #1
 800c690:	4652      	mov	r2, sl
 800c692:	4631      	mov	r1, r6
 800c694:	4628      	mov	r0, r5
 800c696:	47b8      	blx	r7
 800c698:	3001      	adds	r0, #1
 800c69a:	f43f aeaa 	beq.w	800c3f2 <_printf_float+0xc2>
 800c69e:	f108 0801 	add.w	r8, r8, #1
 800c6a2:	e7ec      	b.n	800c67e <_printf_float+0x34e>
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	4642      	mov	r2, r8
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	47b8      	blx	r7
 800c6ae:	3001      	adds	r0, #1
 800c6b0:	d1c0      	bne.n	800c634 <_printf_float+0x304>
 800c6b2:	e69e      	b.n	800c3f2 <_printf_float+0xc2>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	9205      	str	r2, [sp, #20]
 800c6bc:	47b8      	blx	r7
 800c6be:	3001      	adds	r0, #1
 800c6c0:	f43f ae97 	beq.w	800c3f2 <_printf_float+0xc2>
 800c6c4:	9a05      	ldr	r2, [sp, #20]
 800c6c6:	f10b 0b01 	add.w	fp, fp, #1
 800c6ca:	e7b9      	b.n	800c640 <_printf_float+0x310>
 800c6cc:	ee18 3a10 	vmov	r3, s16
 800c6d0:	4652      	mov	r2, sl
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b8      	blx	r7
 800c6d8:	3001      	adds	r0, #1
 800c6da:	d1be      	bne.n	800c65a <_printf_float+0x32a>
 800c6dc:	e689      	b.n	800c3f2 <_printf_float+0xc2>
 800c6de:	9a05      	ldr	r2, [sp, #20]
 800c6e0:	464b      	mov	r3, r9
 800c6e2:	4442      	add	r2, r8
 800c6e4:	4631      	mov	r1, r6
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	47b8      	blx	r7
 800c6ea:	3001      	adds	r0, #1
 800c6ec:	d1c1      	bne.n	800c672 <_printf_float+0x342>
 800c6ee:	e680      	b.n	800c3f2 <_printf_float+0xc2>
 800c6f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6f2:	2a01      	cmp	r2, #1
 800c6f4:	dc01      	bgt.n	800c6fa <_printf_float+0x3ca>
 800c6f6:	07db      	lsls	r3, r3, #31
 800c6f8:	d538      	bpl.n	800c76c <_printf_float+0x43c>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	4642      	mov	r2, r8
 800c6fe:	4631      	mov	r1, r6
 800c700:	4628      	mov	r0, r5
 800c702:	47b8      	blx	r7
 800c704:	3001      	adds	r0, #1
 800c706:	f43f ae74 	beq.w	800c3f2 <_printf_float+0xc2>
 800c70a:	ee18 3a10 	vmov	r3, s16
 800c70e:	4652      	mov	r2, sl
 800c710:	4631      	mov	r1, r6
 800c712:	4628      	mov	r0, r5
 800c714:	47b8      	blx	r7
 800c716:	3001      	adds	r0, #1
 800c718:	f43f ae6b 	beq.w	800c3f2 <_printf_float+0xc2>
 800c71c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c720:	2200      	movs	r2, #0
 800c722:	2300      	movs	r3, #0
 800c724:	f7f4 f9d8 	bl	8000ad8 <__aeabi_dcmpeq>
 800c728:	b9d8      	cbnz	r0, 800c762 <_printf_float+0x432>
 800c72a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c72c:	f108 0201 	add.w	r2, r8, #1
 800c730:	3b01      	subs	r3, #1
 800c732:	4631      	mov	r1, r6
 800c734:	4628      	mov	r0, r5
 800c736:	47b8      	blx	r7
 800c738:	3001      	adds	r0, #1
 800c73a:	d10e      	bne.n	800c75a <_printf_float+0x42a>
 800c73c:	e659      	b.n	800c3f2 <_printf_float+0xc2>
 800c73e:	2301      	movs	r3, #1
 800c740:	4652      	mov	r2, sl
 800c742:	4631      	mov	r1, r6
 800c744:	4628      	mov	r0, r5
 800c746:	47b8      	blx	r7
 800c748:	3001      	adds	r0, #1
 800c74a:	f43f ae52 	beq.w	800c3f2 <_printf_float+0xc2>
 800c74e:	f108 0801 	add.w	r8, r8, #1
 800c752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c754:	3b01      	subs	r3, #1
 800c756:	4543      	cmp	r3, r8
 800c758:	dcf1      	bgt.n	800c73e <_printf_float+0x40e>
 800c75a:	464b      	mov	r3, r9
 800c75c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c760:	e6dc      	b.n	800c51c <_printf_float+0x1ec>
 800c762:	f04f 0800 	mov.w	r8, #0
 800c766:	f104 0a1a 	add.w	sl, r4, #26
 800c76a:	e7f2      	b.n	800c752 <_printf_float+0x422>
 800c76c:	2301      	movs	r3, #1
 800c76e:	4642      	mov	r2, r8
 800c770:	e7df      	b.n	800c732 <_printf_float+0x402>
 800c772:	2301      	movs	r3, #1
 800c774:	464a      	mov	r2, r9
 800c776:	4631      	mov	r1, r6
 800c778:	4628      	mov	r0, r5
 800c77a:	47b8      	blx	r7
 800c77c:	3001      	adds	r0, #1
 800c77e:	f43f ae38 	beq.w	800c3f2 <_printf_float+0xc2>
 800c782:	f108 0801 	add.w	r8, r8, #1
 800c786:	68e3      	ldr	r3, [r4, #12]
 800c788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c78a:	1a5b      	subs	r3, r3, r1
 800c78c:	4543      	cmp	r3, r8
 800c78e:	dcf0      	bgt.n	800c772 <_printf_float+0x442>
 800c790:	e6fa      	b.n	800c588 <_printf_float+0x258>
 800c792:	f04f 0800 	mov.w	r8, #0
 800c796:	f104 0919 	add.w	r9, r4, #25
 800c79a:	e7f4      	b.n	800c786 <_printf_float+0x456>

0800c79c <_printf_common>:
 800c79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a0:	4616      	mov	r6, r2
 800c7a2:	4699      	mov	r9, r3
 800c7a4:	688a      	ldr	r2, [r1, #8]
 800c7a6:	690b      	ldr	r3, [r1, #16]
 800c7a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	bfb8      	it	lt
 800c7b0:	4613      	movlt	r3, r2
 800c7b2:	6033      	str	r3, [r6, #0]
 800c7b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	b10a      	cbz	r2, 800c7c2 <_printf_common+0x26>
 800c7be:	3301      	adds	r3, #1
 800c7c0:	6033      	str	r3, [r6, #0]
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	0699      	lsls	r1, r3, #26
 800c7c6:	bf42      	ittt	mi
 800c7c8:	6833      	ldrmi	r3, [r6, #0]
 800c7ca:	3302      	addmi	r3, #2
 800c7cc:	6033      	strmi	r3, [r6, #0]
 800c7ce:	6825      	ldr	r5, [r4, #0]
 800c7d0:	f015 0506 	ands.w	r5, r5, #6
 800c7d4:	d106      	bne.n	800c7e4 <_printf_common+0x48>
 800c7d6:	f104 0a19 	add.w	sl, r4, #25
 800c7da:	68e3      	ldr	r3, [r4, #12]
 800c7dc:	6832      	ldr	r2, [r6, #0]
 800c7de:	1a9b      	subs	r3, r3, r2
 800c7e0:	42ab      	cmp	r3, r5
 800c7e2:	dc26      	bgt.n	800c832 <_printf_common+0x96>
 800c7e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7e8:	1e13      	subs	r3, r2, #0
 800c7ea:	6822      	ldr	r2, [r4, #0]
 800c7ec:	bf18      	it	ne
 800c7ee:	2301      	movne	r3, #1
 800c7f0:	0692      	lsls	r2, r2, #26
 800c7f2:	d42b      	bmi.n	800c84c <_printf_common+0xb0>
 800c7f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7f8:	4649      	mov	r1, r9
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	47c0      	blx	r8
 800c7fe:	3001      	adds	r0, #1
 800c800:	d01e      	beq.n	800c840 <_printf_common+0xa4>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	68e5      	ldr	r5, [r4, #12]
 800c806:	6832      	ldr	r2, [r6, #0]
 800c808:	f003 0306 	and.w	r3, r3, #6
 800c80c:	2b04      	cmp	r3, #4
 800c80e:	bf08      	it	eq
 800c810:	1aad      	subeq	r5, r5, r2
 800c812:	68a3      	ldr	r3, [r4, #8]
 800c814:	6922      	ldr	r2, [r4, #16]
 800c816:	bf0c      	ite	eq
 800c818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c81c:	2500      	movne	r5, #0
 800c81e:	4293      	cmp	r3, r2
 800c820:	bfc4      	itt	gt
 800c822:	1a9b      	subgt	r3, r3, r2
 800c824:	18ed      	addgt	r5, r5, r3
 800c826:	2600      	movs	r6, #0
 800c828:	341a      	adds	r4, #26
 800c82a:	42b5      	cmp	r5, r6
 800c82c:	d11a      	bne.n	800c864 <_printf_common+0xc8>
 800c82e:	2000      	movs	r0, #0
 800c830:	e008      	b.n	800c844 <_printf_common+0xa8>
 800c832:	2301      	movs	r3, #1
 800c834:	4652      	mov	r2, sl
 800c836:	4649      	mov	r1, r9
 800c838:	4638      	mov	r0, r7
 800c83a:	47c0      	blx	r8
 800c83c:	3001      	adds	r0, #1
 800c83e:	d103      	bne.n	800c848 <_printf_common+0xac>
 800c840:	f04f 30ff 	mov.w	r0, #4294967295
 800c844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c848:	3501      	adds	r5, #1
 800c84a:	e7c6      	b.n	800c7da <_printf_common+0x3e>
 800c84c:	18e1      	adds	r1, r4, r3
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	2030      	movs	r0, #48	; 0x30
 800c852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c856:	4422      	add	r2, r4
 800c858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c85c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c860:	3302      	adds	r3, #2
 800c862:	e7c7      	b.n	800c7f4 <_printf_common+0x58>
 800c864:	2301      	movs	r3, #1
 800c866:	4622      	mov	r2, r4
 800c868:	4649      	mov	r1, r9
 800c86a:	4638      	mov	r0, r7
 800c86c:	47c0      	blx	r8
 800c86e:	3001      	adds	r0, #1
 800c870:	d0e6      	beq.n	800c840 <_printf_common+0xa4>
 800c872:	3601      	adds	r6, #1
 800c874:	e7d9      	b.n	800c82a <_printf_common+0x8e>
	...

0800c878 <_printf_i>:
 800c878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c87c:	7e0f      	ldrb	r7, [r1, #24]
 800c87e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c880:	2f78      	cmp	r7, #120	; 0x78
 800c882:	4691      	mov	r9, r2
 800c884:	4680      	mov	r8, r0
 800c886:	460c      	mov	r4, r1
 800c888:	469a      	mov	sl, r3
 800c88a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c88e:	d807      	bhi.n	800c8a0 <_printf_i+0x28>
 800c890:	2f62      	cmp	r7, #98	; 0x62
 800c892:	d80a      	bhi.n	800c8aa <_printf_i+0x32>
 800c894:	2f00      	cmp	r7, #0
 800c896:	f000 80d8 	beq.w	800ca4a <_printf_i+0x1d2>
 800c89a:	2f58      	cmp	r7, #88	; 0x58
 800c89c:	f000 80a3 	beq.w	800c9e6 <_printf_i+0x16e>
 800c8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8a8:	e03a      	b.n	800c920 <_printf_i+0xa8>
 800c8aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8ae:	2b15      	cmp	r3, #21
 800c8b0:	d8f6      	bhi.n	800c8a0 <_printf_i+0x28>
 800c8b2:	a101      	add	r1, pc, #4	; (adr r1, 800c8b8 <_printf_i+0x40>)
 800c8b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8b8:	0800c911 	.word	0x0800c911
 800c8bc:	0800c925 	.word	0x0800c925
 800c8c0:	0800c8a1 	.word	0x0800c8a1
 800c8c4:	0800c8a1 	.word	0x0800c8a1
 800c8c8:	0800c8a1 	.word	0x0800c8a1
 800c8cc:	0800c8a1 	.word	0x0800c8a1
 800c8d0:	0800c925 	.word	0x0800c925
 800c8d4:	0800c8a1 	.word	0x0800c8a1
 800c8d8:	0800c8a1 	.word	0x0800c8a1
 800c8dc:	0800c8a1 	.word	0x0800c8a1
 800c8e0:	0800c8a1 	.word	0x0800c8a1
 800c8e4:	0800ca31 	.word	0x0800ca31
 800c8e8:	0800c955 	.word	0x0800c955
 800c8ec:	0800ca13 	.word	0x0800ca13
 800c8f0:	0800c8a1 	.word	0x0800c8a1
 800c8f4:	0800c8a1 	.word	0x0800c8a1
 800c8f8:	0800ca53 	.word	0x0800ca53
 800c8fc:	0800c8a1 	.word	0x0800c8a1
 800c900:	0800c955 	.word	0x0800c955
 800c904:	0800c8a1 	.word	0x0800c8a1
 800c908:	0800c8a1 	.word	0x0800c8a1
 800c90c:	0800ca1b 	.word	0x0800ca1b
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	1d1a      	adds	r2, r3, #4
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	602a      	str	r2, [r5, #0]
 800c918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c91c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c920:	2301      	movs	r3, #1
 800c922:	e0a3      	b.n	800ca6c <_printf_i+0x1f4>
 800c924:	6820      	ldr	r0, [r4, #0]
 800c926:	6829      	ldr	r1, [r5, #0]
 800c928:	0606      	lsls	r6, r0, #24
 800c92a:	f101 0304 	add.w	r3, r1, #4
 800c92e:	d50a      	bpl.n	800c946 <_printf_i+0xce>
 800c930:	680e      	ldr	r6, [r1, #0]
 800c932:	602b      	str	r3, [r5, #0]
 800c934:	2e00      	cmp	r6, #0
 800c936:	da03      	bge.n	800c940 <_printf_i+0xc8>
 800c938:	232d      	movs	r3, #45	; 0x2d
 800c93a:	4276      	negs	r6, r6
 800c93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c940:	485e      	ldr	r0, [pc, #376]	; (800cabc <_printf_i+0x244>)
 800c942:	230a      	movs	r3, #10
 800c944:	e019      	b.n	800c97a <_printf_i+0x102>
 800c946:	680e      	ldr	r6, [r1, #0]
 800c948:	602b      	str	r3, [r5, #0]
 800c94a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c94e:	bf18      	it	ne
 800c950:	b236      	sxthne	r6, r6
 800c952:	e7ef      	b.n	800c934 <_printf_i+0xbc>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	6820      	ldr	r0, [r4, #0]
 800c958:	1d19      	adds	r1, r3, #4
 800c95a:	6029      	str	r1, [r5, #0]
 800c95c:	0601      	lsls	r1, r0, #24
 800c95e:	d501      	bpl.n	800c964 <_printf_i+0xec>
 800c960:	681e      	ldr	r6, [r3, #0]
 800c962:	e002      	b.n	800c96a <_printf_i+0xf2>
 800c964:	0646      	lsls	r6, r0, #25
 800c966:	d5fb      	bpl.n	800c960 <_printf_i+0xe8>
 800c968:	881e      	ldrh	r6, [r3, #0]
 800c96a:	4854      	ldr	r0, [pc, #336]	; (800cabc <_printf_i+0x244>)
 800c96c:	2f6f      	cmp	r7, #111	; 0x6f
 800c96e:	bf0c      	ite	eq
 800c970:	2308      	moveq	r3, #8
 800c972:	230a      	movne	r3, #10
 800c974:	2100      	movs	r1, #0
 800c976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c97a:	6865      	ldr	r5, [r4, #4]
 800c97c:	60a5      	str	r5, [r4, #8]
 800c97e:	2d00      	cmp	r5, #0
 800c980:	bfa2      	ittt	ge
 800c982:	6821      	ldrge	r1, [r4, #0]
 800c984:	f021 0104 	bicge.w	r1, r1, #4
 800c988:	6021      	strge	r1, [r4, #0]
 800c98a:	b90e      	cbnz	r6, 800c990 <_printf_i+0x118>
 800c98c:	2d00      	cmp	r5, #0
 800c98e:	d04d      	beq.n	800ca2c <_printf_i+0x1b4>
 800c990:	4615      	mov	r5, r2
 800c992:	fbb6 f1f3 	udiv	r1, r6, r3
 800c996:	fb03 6711 	mls	r7, r3, r1, r6
 800c99a:	5dc7      	ldrb	r7, [r0, r7]
 800c99c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9a0:	4637      	mov	r7, r6
 800c9a2:	42bb      	cmp	r3, r7
 800c9a4:	460e      	mov	r6, r1
 800c9a6:	d9f4      	bls.n	800c992 <_printf_i+0x11a>
 800c9a8:	2b08      	cmp	r3, #8
 800c9aa:	d10b      	bne.n	800c9c4 <_printf_i+0x14c>
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	07de      	lsls	r6, r3, #31
 800c9b0:	d508      	bpl.n	800c9c4 <_printf_i+0x14c>
 800c9b2:	6923      	ldr	r3, [r4, #16]
 800c9b4:	6861      	ldr	r1, [r4, #4]
 800c9b6:	4299      	cmp	r1, r3
 800c9b8:	bfde      	ittt	le
 800c9ba:	2330      	movle	r3, #48	; 0x30
 800c9bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9c4:	1b52      	subs	r2, r2, r5
 800c9c6:	6122      	str	r2, [r4, #16]
 800c9c8:	f8cd a000 	str.w	sl, [sp]
 800c9cc:	464b      	mov	r3, r9
 800c9ce:	aa03      	add	r2, sp, #12
 800c9d0:	4621      	mov	r1, r4
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	f7ff fee2 	bl	800c79c <_printf_common>
 800c9d8:	3001      	adds	r0, #1
 800c9da:	d14c      	bne.n	800ca76 <_printf_i+0x1fe>
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	b004      	add	sp, #16
 800c9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e6:	4835      	ldr	r0, [pc, #212]	; (800cabc <_printf_i+0x244>)
 800c9e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c9ec:	6829      	ldr	r1, [r5, #0]
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9f4:	6029      	str	r1, [r5, #0]
 800c9f6:	061d      	lsls	r5, r3, #24
 800c9f8:	d514      	bpl.n	800ca24 <_printf_i+0x1ac>
 800c9fa:	07df      	lsls	r7, r3, #31
 800c9fc:	bf44      	itt	mi
 800c9fe:	f043 0320 	orrmi.w	r3, r3, #32
 800ca02:	6023      	strmi	r3, [r4, #0]
 800ca04:	b91e      	cbnz	r6, 800ca0e <_printf_i+0x196>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	f023 0320 	bic.w	r3, r3, #32
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	2310      	movs	r3, #16
 800ca10:	e7b0      	b.n	800c974 <_printf_i+0xfc>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	f043 0320 	orr.w	r3, r3, #32
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	2378      	movs	r3, #120	; 0x78
 800ca1c:	4828      	ldr	r0, [pc, #160]	; (800cac0 <_printf_i+0x248>)
 800ca1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca22:	e7e3      	b.n	800c9ec <_printf_i+0x174>
 800ca24:	0659      	lsls	r1, r3, #25
 800ca26:	bf48      	it	mi
 800ca28:	b2b6      	uxthmi	r6, r6
 800ca2a:	e7e6      	b.n	800c9fa <_printf_i+0x182>
 800ca2c:	4615      	mov	r5, r2
 800ca2e:	e7bb      	b.n	800c9a8 <_printf_i+0x130>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	6826      	ldr	r6, [r4, #0]
 800ca34:	6961      	ldr	r1, [r4, #20]
 800ca36:	1d18      	adds	r0, r3, #4
 800ca38:	6028      	str	r0, [r5, #0]
 800ca3a:	0635      	lsls	r5, r6, #24
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	d501      	bpl.n	800ca44 <_printf_i+0x1cc>
 800ca40:	6019      	str	r1, [r3, #0]
 800ca42:	e002      	b.n	800ca4a <_printf_i+0x1d2>
 800ca44:	0670      	lsls	r0, r6, #25
 800ca46:	d5fb      	bpl.n	800ca40 <_printf_i+0x1c8>
 800ca48:	8019      	strh	r1, [r3, #0]
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	6123      	str	r3, [r4, #16]
 800ca4e:	4615      	mov	r5, r2
 800ca50:	e7ba      	b.n	800c9c8 <_printf_i+0x150>
 800ca52:	682b      	ldr	r3, [r5, #0]
 800ca54:	1d1a      	adds	r2, r3, #4
 800ca56:	602a      	str	r2, [r5, #0]
 800ca58:	681d      	ldr	r5, [r3, #0]
 800ca5a:	6862      	ldr	r2, [r4, #4]
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f7f3 fbc6 	bl	80001f0 <memchr>
 800ca64:	b108      	cbz	r0, 800ca6a <_printf_i+0x1f2>
 800ca66:	1b40      	subs	r0, r0, r5
 800ca68:	6060      	str	r0, [r4, #4]
 800ca6a:	6863      	ldr	r3, [r4, #4]
 800ca6c:	6123      	str	r3, [r4, #16]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca74:	e7a8      	b.n	800c9c8 <_printf_i+0x150>
 800ca76:	6923      	ldr	r3, [r4, #16]
 800ca78:	462a      	mov	r2, r5
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	47d0      	blx	sl
 800ca80:	3001      	adds	r0, #1
 800ca82:	d0ab      	beq.n	800c9dc <_printf_i+0x164>
 800ca84:	6823      	ldr	r3, [r4, #0]
 800ca86:	079b      	lsls	r3, r3, #30
 800ca88:	d413      	bmi.n	800cab2 <_printf_i+0x23a>
 800ca8a:	68e0      	ldr	r0, [r4, #12]
 800ca8c:	9b03      	ldr	r3, [sp, #12]
 800ca8e:	4298      	cmp	r0, r3
 800ca90:	bfb8      	it	lt
 800ca92:	4618      	movlt	r0, r3
 800ca94:	e7a4      	b.n	800c9e0 <_printf_i+0x168>
 800ca96:	2301      	movs	r3, #1
 800ca98:	4632      	mov	r2, r6
 800ca9a:	4649      	mov	r1, r9
 800ca9c:	4640      	mov	r0, r8
 800ca9e:	47d0      	blx	sl
 800caa0:	3001      	adds	r0, #1
 800caa2:	d09b      	beq.n	800c9dc <_printf_i+0x164>
 800caa4:	3501      	adds	r5, #1
 800caa6:	68e3      	ldr	r3, [r4, #12]
 800caa8:	9903      	ldr	r1, [sp, #12]
 800caaa:	1a5b      	subs	r3, r3, r1
 800caac:	42ab      	cmp	r3, r5
 800caae:	dcf2      	bgt.n	800ca96 <_printf_i+0x21e>
 800cab0:	e7eb      	b.n	800ca8a <_printf_i+0x212>
 800cab2:	2500      	movs	r5, #0
 800cab4:	f104 0619 	add.w	r6, r4, #25
 800cab8:	e7f5      	b.n	800caa6 <_printf_i+0x22e>
 800caba:	bf00      	nop
 800cabc:	08011d9a 	.word	0x08011d9a
 800cac0:	08011dab 	.word	0x08011dab

0800cac4 <_scanf_float>:
 800cac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac8:	b087      	sub	sp, #28
 800caca:	4617      	mov	r7, r2
 800cacc:	9303      	str	r3, [sp, #12]
 800cace:	688b      	ldr	r3, [r1, #8]
 800cad0:	1e5a      	subs	r2, r3, #1
 800cad2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cad6:	bf83      	ittte	hi
 800cad8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cadc:	195b      	addhi	r3, r3, r5
 800cade:	9302      	strhi	r3, [sp, #8]
 800cae0:	2300      	movls	r3, #0
 800cae2:	bf86      	itte	hi
 800cae4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cae8:	608b      	strhi	r3, [r1, #8]
 800caea:	9302      	strls	r3, [sp, #8]
 800caec:	680b      	ldr	r3, [r1, #0]
 800caee:	468b      	mov	fp, r1
 800caf0:	2500      	movs	r5, #0
 800caf2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800caf6:	f84b 3b1c 	str.w	r3, [fp], #28
 800cafa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cafe:	4680      	mov	r8, r0
 800cb00:	460c      	mov	r4, r1
 800cb02:	465e      	mov	r6, fp
 800cb04:	46aa      	mov	sl, r5
 800cb06:	46a9      	mov	r9, r5
 800cb08:	9501      	str	r5, [sp, #4]
 800cb0a:	68a2      	ldr	r2, [r4, #8]
 800cb0c:	b152      	cbz	r2, 800cb24 <_scanf_float+0x60>
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	2b4e      	cmp	r3, #78	; 0x4e
 800cb14:	d864      	bhi.n	800cbe0 <_scanf_float+0x11c>
 800cb16:	2b40      	cmp	r3, #64	; 0x40
 800cb18:	d83c      	bhi.n	800cb94 <_scanf_float+0xd0>
 800cb1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cb1e:	b2c8      	uxtb	r0, r1
 800cb20:	280e      	cmp	r0, #14
 800cb22:	d93a      	bls.n	800cb9a <_scanf_float+0xd6>
 800cb24:	f1b9 0f00 	cmp.w	r9, #0
 800cb28:	d003      	beq.n	800cb32 <_scanf_float+0x6e>
 800cb2a:	6823      	ldr	r3, [r4, #0]
 800cb2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb36:	f1ba 0f01 	cmp.w	sl, #1
 800cb3a:	f200 8113 	bhi.w	800cd64 <_scanf_float+0x2a0>
 800cb3e:	455e      	cmp	r6, fp
 800cb40:	f200 8105 	bhi.w	800cd4e <_scanf_float+0x28a>
 800cb44:	2501      	movs	r5, #1
 800cb46:	4628      	mov	r0, r5
 800cb48:	b007      	add	sp, #28
 800cb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cb52:	2a0d      	cmp	r2, #13
 800cb54:	d8e6      	bhi.n	800cb24 <_scanf_float+0x60>
 800cb56:	a101      	add	r1, pc, #4	; (adr r1, 800cb5c <_scanf_float+0x98>)
 800cb58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb5c:	0800cc9b 	.word	0x0800cc9b
 800cb60:	0800cb25 	.word	0x0800cb25
 800cb64:	0800cb25 	.word	0x0800cb25
 800cb68:	0800cb25 	.word	0x0800cb25
 800cb6c:	0800ccfb 	.word	0x0800ccfb
 800cb70:	0800ccd3 	.word	0x0800ccd3
 800cb74:	0800cb25 	.word	0x0800cb25
 800cb78:	0800cb25 	.word	0x0800cb25
 800cb7c:	0800cca9 	.word	0x0800cca9
 800cb80:	0800cb25 	.word	0x0800cb25
 800cb84:	0800cb25 	.word	0x0800cb25
 800cb88:	0800cb25 	.word	0x0800cb25
 800cb8c:	0800cb25 	.word	0x0800cb25
 800cb90:	0800cc61 	.word	0x0800cc61
 800cb94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cb98:	e7db      	b.n	800cb52 <_scanf_float+0x8e>
 800cb9a:	290e      	cmp	r1, #14
 800cb9c:	d8c2      	bhi.n	800cb24 <_scanf_float+0x60>
 800cb9e:	a001      	add	r0, pc, #4	; (adr r0, 800cba4 <_scanf_float+0xe0>)
 800cba0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cba4:	0800cc53 	.word	0x0800cc53
 800cba8:	0800cb25 	.word	0x0800cb25
 800cbac:	0800cc53 	.word	0x0800cc53
 800cbb0:	0800cce7 	.word	0x0800cce7
 800cbb4:	0800cb25 	.word	0x0800cb25
 800cbb8:	0800cc01 	.word	0x0800cc01
 800cbbc:	0800cc3d 	.word	0x0800cc3d
 800cbc0:	0800cc3d 	.word	0x0800cc3d
 800cbc4:	0800cc3d 	.word	0x0800cc3d
 800cbc8:	0800cc3d 	.word	0x0800cc3d
 800cbcc:	0800cc3d 	.word	0x0800cc3d
 800cbd0:	0800cc3d 	.word	0x0800cc3d
 800cbd4:	0800cc3d 	.word	0x0800cc3d
 800cbd8:	0800cc3d 	.word	0x0800cc3d
 800cbdc:	0800cc3d 	.word	0x0800cc3d
 800cbe0:	2b6e      	cmp	r3, #110	; 0x6e
 800cbe2:	d809      	bhi.n	800cbf8 <_scanf_float+0x134>
 800cbe4:	2b60      	cmp	r3, #96	; 0x60
 800cbe6:	d8b2      	bhi.n	800cb4e <_scanf_float+0x8a>
 800cbe8:	2b54      	cmp	r3, #84	; 0x54
 800cbea:	d077      	beq.n	800ccdc <_scanf_float+0x218>
 800cbec:	2b59      	cmp	r3, #89	; 0x59
 800cbee:	d199      	bne.n	800cb24 <_scanf_float+0x60>
 800cbf0:	2d07      	cmp	r5, #7
 800cbf2:	d197      	bne.n	800cb24 <_scanf_float+0x60>
 800cbf4:	2508      	movs	r5, #8
 800cbf6:	e029      	b.n	800cc4c <_scanf_float+0x188>
 800cbf8:	2b74      	cmp	r3, #116	; 0x74
 800cbfa:	d06f      	beq.n	800ccdc <_scanf_float+0x218>
 800cbfc:	2b79      	cmp	r3, #121	; 0x79
 800cbfe:	e7f6      	b.n	800cbee <_scanf_float+0x12a>
 800cc00:	6821      	ldr	r1, [r4, #0]
 800cc02:	05c8      	lsls	r0, r1, #23
 800cc04:	d51a      	bpl.n	800cc3c <_scanf_float+0x178>
 800cc06:	9b02      	ldr	r3, [sp, #8]
 800cc08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cc0c:	6021      	str	r1, [r4, #0]
 800cc0e:	f109 0901 	add.w	r9, r9, #1
 800cc12:	b11b      	cbz	r3, 800cc1c <_scanf_float+0x158>
 800cc14:	3b01      	subs	r3, #1
 800cc16:	3201      	adds	r2, #1
 800cc18:	9302      	str	r3, [sp, #8]
 800cc1a:	60a2      	str	r2, [r4, #8]
 800cc1c:	68a3      	ldr	r3, [r4, #8]
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	60a3      	str	r3, [r4, #8]
 800cc22:	6923      	ldr	r3, [r4, #16]
 800cc24:	3301      	adds	r3, #1
 800cc26:	6123      	str	r3, [r4, #16]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	607b      	str	r3, [r7, #4]
 800cc30:	f340 8084 	ble.w	800cd3c <_scanf_float+0x278>
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	3301      	adds	r3, #1
 800cc38:	603b      	str	r3, [r7, #0]
 800cc3a:	e766      	b.n	800cb0a <_scanf_float+0x46>
 800cc3c:	eb1a 0f05 	cmn.w	sl, r5
 800cc40:	f47f af70 	bne.w	800cb24 <_scanf_float+0x60>
 800cc44:	6822      	ldr	r2, [r4, #0]
 800cc46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cc4a:	6022      	str	r2, [r4, #0]
 800cc4c:	f806 3b01 	strb.w	r3, [r6], #1
 800cc50:	e7e4      	b.n	800cc1c <_scanf_float+0x158>
 800cc52:	6822      	ldr	r2, [r4, #0]
 800cc54:	0610      	lsls	r0, r2, #24
 800cc56:	f57f af65 	bpl.w	800cb24 <_scanf_float+0x60>
 800cc5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc5e:	e7f4      	b.n	800cc4a <_scanf_float+0x186>
 800cc60:	f1ba 0f00 	cmp.w	sl, #0
 800cc64:	d10e      	bne.n	800cc84 <_scanf_float+0x1c0>
 800cc66:	f1b9 0f00 	cmp.w	r9, #0
 800cc6a:	d10e      	bne.n	800cc8a <_scanf_float+0x1c6>
 800cc6c:	6822      	ldr	r2, [r4, #0]
 800cc6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cc72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cc76:	d108      	bne.n	800cc8a <_scanf_float+0x1c6>
 800cc78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cc7c:	6022      	str	r2, [r4, #0]
 800cc7e:	f04f 0a01 	mov.w	sl, #1
 800cc82:	e7e3      	b.n	800cc4c <_scanf_float+0x188>
 800cc84:	f1ba 0f02 	cmp.w	sl, #2
 800cc88:	d055      	beq.n	800cd36 <_scanf_float+0x272>
 800cc8a:	2d01      	cmp	r5, #1
 800cc8c:	d002      	beq.n	800cc94 <_scanf_float+0x1d0>
 800cc8e:	2d04      	cmp	r5, #4
 800cc90:	f47f af48 	bne.w	800cb24 <_scanf_float+0x60>
 800cc94:	3501      	adds	r5, #1
 800cc96:	b2ed      	uxtb	r5, r5
 800cc98:	e7d8      	b.n	800cc4c <_scanf_float+0x188>
 800cc9a:	f1ba 0f01 	cmp.w	sl, #1
 800cc9e:	f47f af41 	bne.w	800cb24 <_scanf_float+0x60>
 800cca2:	f04f 0a02 	mov.w	sl, #2
 800cca6:	e7d1      	b.n	800cc4c <_scanf_float+0x188>
 800cca8:	b97d      	cbnz	r5, 800ccca <_scanf_float+0x206>
 800ccaa:	f1b9 0f00 	cmp.w	r9, #0
 800ccae:	f47f af3c 	bne.w	800cb2a <_scanf_float+0x66>
 800ccb2:	6822      	ldr	r2, [r4, #0]
 800ccb4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ccb8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ccbc:	f47f af39 	bne.w	800cb32 <_scanf_float+0x6e>
 800ccc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ccc4:	6022      	str	r2, [r4, #0]
 800ccc6:	2501      	movs	r5, #1
 800ccc8:	e7c0      	b.n	800cc4c <_scanf_float+0x188>
 800ccca:	2d03      	cmp	r5, #3
 800cccc:	d0e2      	beq.n	800cc94 <_scanf_float+0x1d0>
 800ccce:	2d05      	cmp	r5, #5
 800ccd0:	e7de      	b.n	800cc90 <_scanf_float+0x1cc>
 800ccd2:	2d02      	cmp	r5, #2
 800ccd4:	f47f af26 	bne.w	800cb24 <_scanf_float+0x60>
 800ccd8:	2503      	movs	r5, #3
 800ccda:	e7b7      	b.n	800cc4c <_scanf_float+0x188>
 800ccdc:	2d06      	cmp	r5, #6
 800ccde:	f47f af21 	bne.w	800cb24 <_scanf_float+0x60>
 800cce2:	2507      	movs	r5, #7
 800cce4:	e7b2      	b.n	800cc4c <_scanf_float+0x188>
 800cce6:	6822      	ldr	r2, [r4, #0]
 800cce8:	0591      	lsls	r1, r2, #22
 800ccea:	f57f af1b 	bpl.w	800cb24 <_scanf_float+0x60>
 800ccee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ccf2:	6022      	str	r2, [r4, #0]
 800ccf4:	f8cd 9004 	str.w	r9, [sp, #4]
 800ccf8:	e7a8      	b.n	800cc4c <_scanf_float+0x188>
 800ccfa:	6822      	ldr	r2, [r4, #0]
 800ccfc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cd00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cd04:	d006      	beq.n	800cd14 <_scanf_float+0x250>
 800cd06:	0550      	lsls	r0, r2, #21
 800cd08:	f57f af0c 	bpl.w	800cb24 <_scanf_float+0x60>
 800cd0c:	f1b9 0f00 	cmp.w	r9, #0
 800cd10:	f43f af0f 	beq.w	800cb32 <_scanf_float+0x6e>
 800cd14:	0591      	lsls	r1, r2, #22
 800cd16:	bf58      	it	pl
 800cd18:	9901      	ldrpl	r1, [sp, #4]
 800cd1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd1e:	bf58      	it	pl
 800cd20:	eba9 0101 	subpl.w	r1, r9, r1
 800cd24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cd28:	bf58      	it	pl
 800cd2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd2e:	6022      	str	r2, [r4, #0]
 800cd30:	f04f 0900 	mov.w	r9, #0
 800cd34:	e78a      	b.n	800cc4c <_scanf_float+0x188>
 800cd36:	f04f 0a03 	mov.w	sl, #3
 800cd3a:	e787      	b.n	800cc4c <_scanf_float+0x188>
 800cd3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd40:	4639      	mov	r1, r7
 800cd42:	4640      	mov	r0, r8
 800cd44:	4798      	blx	r3
 800cd46:	2800      	cmp	r0, #0
 800cd48:	f43f aedf 	beq.w	800cb0a <_scanf_float+0x46>
 800cd4c:	e6ea      	b.n	800cb24 <_scanf_float+0x60>
 800cd4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd56:	463a      	mov	r2, r7
 800cd58:	4640      	mov	r0, r8
 800cd5a:	4798      	blx	r3
 800cd5c:	6923      	ldr	r3, [r4, #16]
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	6123      	str	r3, [r4, #16]
 800cd62:	e6ec      	b.n	800cb3e <_scanf_float+0x7a>
 800cd64:	1e6b      	subs	r3, r5, #1
 800cd66:	2b06      	cmp	r3, #6
 800cd68:	d825      	bhi.n	800cdb6 <_scanf_float+0x2f2>
 800cd6a:	2d02      	cmp	r5, #2
 800cd6c:	d836      	bhi.n	800cddc <_scanf_float+0x318>
 800cd6e:	455e      	cmp	r6, fp
 800cd70:	f67f aee8 	bls.w	800cb44 <_scanf_float+0x80>
 800cd74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd7c:	463a      	mov	r2, r7
 800cd7e:	4640      	mov	r0, r8
 800cd80:	4798      	blx	r3
 800cd82:	6923      	ldr	r3, [r4, #16]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	6123      	str	r3, [r4, #16]
 800cd88:	e7f1      	b.n	800cd6e <_scanf_float+0x2aa>
 800cd8a:	9802      	ldr	r0, [sp, #8]
 800cd8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cd94:	9002      	str	r0, [sp, #8]
 800cd96:	463a      	mov	r2, r7
 800cd98:	4640      	mov	r0, r8
 800cd9a:	4798      	blx	r3
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	6123      	str	r3, [r4, #16]
 800cda2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cda6:	fa5f fa8a 	uxtb.w	sl, sl
 800cdaa:	f1ba 0f02 	cmp.w	sl, #2
 800cdae:	d1ec      	bne.n	800cd8a <_scanf_float+0x2c6>
 800cdb0:	3d03      	subs	r5, #3
 800cdb2:	b2ed      	uxtb	r5, r5
 800cdb4:	1b76      	subs	r6, r6, r5
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	05da      	lsls	r2, r3, #23
 800cdba:	d52f      	bpl.n	800ce1c <_scanf_float+0x358>
 800cdbc:	055b      	lsls	r3, r3, #21
 800cdbe:	d510      	bpl.n	800cde2 <_scanf_float+0x31e>
 800cdc0:	455e      	cmp	r6, fp
 800cdc2:	f67f aebf 	bls.w	800cb44 <_scanf_float+0x80>
 800cdc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdce:	463a      	mov	r2, r7
 800cdd0:	4640      	mov	r0, r8
 800cdd2:	4798      	blx	r3
 800cdd4:	6923      	ldr	r3, [r4, #16]
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	6123      	str	r3, [r4, #16]
 800cdda:	e7f1      	b.n	800cdc0 <_scanf_float+0x2fc>
 800cddc:	46aa      	mov	sl, r5
 800cdde:	9602      	str	r6, [sp, #8]
 800cde0:	e7df      	b.n	800cda2 <_scanf_float+0x2de>
 800cde2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	2965      	cmp	r1, #101	; 0x65
 800cdea:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdee:	f106 35ff 	add.w	r5, r6, #4294967295
 800cdf2:	6123      	str	r3, [r4, #16]
 800cdf4:	d00c      	beq.n	800ce10 <_scanf_float+0x34c>
 800cdf6:	2945      	cmp	r1, #69	; 0x45
 800cdf8:	d00a      	beq.n	800ce10 <_scanf_float+0x34c>
 800cdfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdfe:	463a      	mov	r2, r7
 800ce00:	4640      	mov	r0, r8
 800ce02:	4798      	blx	r3
 800ce04:	6923      	ldr	r3, [r4, #16]
 800ce06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	1eb5      	subs	r5, r6, #2
 800ce0e:	6123      	str	r3, [r4, #16]
 800ce10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce14:	463a      	mov	r2, r7
 800ce16:	4640      	mov	r0, r8
 800ce18:	4798      	blx	r3
 800ce1a:	462e      	mov	r6, r5
 800ce1c:	6825      	ldr	r5, [r4, #0]
 800ce1e:	f015 0510 	ands.w	r5, r5, #16
 800ce22:	d159      	bne.n	800ced8 <_scanf_float+0x414>
 800ce24:	7035      	strb	r5, [r6, #0]
 800ce26:	6823      	ldr	r3, [r4, #0]
 800ce28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ce2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce30:	d11b      	bne.n	800ce6a <_scanf_float+0x3a6>
 800ce32:	9b01      	ldr	r3, [sp, #4]
 800ce34:	454b      	cmp	r3, r9
 800ce36:	eba3 0209 	sub.w	r2, r3, r9
 800ce3a:	d123      	bne.n	800ce84 <_scanf_float+0x3c0>
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	4659      	mov	r1, fp
 800ce40:	4640      	mov	r0, r8
 800ce42:	f000 fe9f 	bl	800db84 <_strtod_r>
 800ce46:	6822      	ldr	r2, [r4, #0]
 800ce48:	9b03      	ldr	r3, [sp, #12]
 800ce4a:	f012 0f02 	tst.w	r2, #2
 800ce4e:	ec57 6b10 	vmov	r6, r7, d0
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	d021      	beq.n	800ce9a <_scanf_float+0x3d6>
 800ce56:	9903      	ldr	r1, [sp, #12]
 800ce58:	1d1a      	adds	r2, r3, #4
 800ce5a:	600a      	str	r2, [r1, #0]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	e9c3 6700 	strd	r6, r7, [r3]
 800ce62:	68e3      	ldr	r3, [r4, #12]
 800ce64:	3301      	adds	r3, #1
 800ce66:	60e3      	str	r3, [r4, #12]
 800ce68:	e66d      	b.n	800cb46 <_scanf_float+0x82>
 800ce6a:	9b04      	ldr	r3, [sp, #16]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d0e5      	beq.n	800ce3c <_scanf_float+0x378>
 800ce70:	9905      	ldr	r1, [sp, #20]
 800ce72:	230a      	movs	r3, #10
 800ce74:	462a      	mov	r2, r5
 800ce76:	3101      	adds	r1, #1
 800ce78:	4640      	mov	r0, r8
 800ce7a:	f000 ff0b 	bl	800dc94 <_strtol_r>
 800ce7e:	9b04      	ldr	r3, [sp, #16]
 800ce80:	9e05      	ldr	r6, [sp, #20]
 800ce82:	1ac2      	subs	r2, r0, r3
 800ce84:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ce88:	429e      	cmp	r6, r3
 800ce8a:	bf28      	it	cs
 800ce8c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ce90:	4912      	ldr	r1, [pc, #72]	; (800cedc <_scanf_float+0x418>)
 800ce92:	4630      	mov	r0, r6
 800ce94:	f000 f82c 	bl	800cef0 <siprintf>
 800ce98:	e7d0      	b.n	800ce3c <_scanf_float+0x378>
 800ce9a:	9903      	ldr	r1, [sp, #12]
 800ce9c:	f012 0f04 	tst.w	r2, #4
 800cea0:	f103 0204 	add.w	r2, r3, #4
 800cea4:	600a      	str	r2, [r1, #0]
 800cea6:	d1d9      	bne.n	800ce5c <_scanf_float+0x398>
 800cea8:	f8d3 8000 	ldr.w	r8, [r3]
 800ceac:	ee10 2a10 	vmov	r2, s0
 800ceb0:	ee10 0a10 	vmov	r0, s0
 800ceb4:	463b      	mov	r3, r7
 800ceb6:	4639      	mov	r1, r7
 800ceb8:	f7f3 fe40 	bl	8000b3c <__aeabi_dcmpun>
 800cebc:	b128      	cbz	r0, 800ceca <_scanf_float+0x406>
 800cebe:	4808      	ldr	r0, [pc, #32]	; (800cee0 <_scanf_float+0x41c>)
 800cec0:	f000 f810 	bl	800cee4 <nanf>
 800cec4:	ed88 0a00 	vstr	s0, [r8]
 800cec8:	e7cb      	b.n	800ce62 <_scanf_float+0x39e>
 800ceca:	4630      	mov	r0, r6
 800cecc:	4639      	mov	r1, r7
 800cece:	f7f3 fe93 	bl	8000bf8 <__aeabi_d2f>
 800ced2:	f8c8 0000 	str.w	r0, [r8]
 800ced6:	e7c4      	b.n	800ce62 <_scanf_float+0x39e>
 800ced8:	2500      	movs	r5, #0
 800ceda:	e634      	b.n	800cb46 <_scanf_float+0x82>
 800cedc:	08011dbc 	.word	0x08011dbc
 800cee0:	080121c8 	.word	0x080121c8

0800cee4 <nanf>:
 800cee4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ceec <nanf+0x8>
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	7fc00000 	.word	0x7fc00000

0800cef0 <siprintf>:
 800cef0:	b40e      	push	{r1, r2, r3}
 800cef2:	b500      	push	{lr}
 800cef4:	b09c      	sub	sp, #112	; 0x70
 800cef6:	ab1d      	add	r3, sp, #116	; 0x74
 800cef8:	9002      	str	r0, [sp, #8]
 800cefa:	9006      	str	r0, [sp, #24]
 800cefc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf00:	4809      	ldr	r0, [pc, #36]	; (800cf28 <siprintf+0x38>)
 800cf02:	9107      	str	r1, [sp, #28]
 800cf04:	9104      	str	r1, [sp, #16]
 800cf06:	4909      	ldr	r1, [pc, #36]	; (800cf2c <siprintf+0x3c>)
 800cf08:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf0c:	9105      	str	r1, [sp, #20]
 800cf0e:	6800      	ldr	r0, [r0, #0]
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	a902      	add	r1, sp, #8
 800cf14:	f002 ff18 	bl	800fd48 <_svfiprintf_r>
 800cf18:	9b02      	ldr	r3, [sp, #8]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	701a      	strb	r2, [r3, #0]
 800cf1e:	b01c      	add	sp, #112	; 0x70
 800cf20:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf24:	b003      	add	sp, #12
 800cf26:	4770      	bx	lr
 800cf28:	200002cc 	.word	0x200002cc
 800cf2c:	ffff0208 	.word	0xffff0208

0800cf30 <strcpy>:
 800cf30:	4603      	mov	r3, r0
 800cf32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf36:	f803 2b01 	strb.w	r2, [r3], #1
 800cf3a:	2a00      	cmp	r2, #0
 800cf3c:	d1f9      	bne.n	800cf32 <strcpy+0x2>
 800cf3e:	4770      	bx	lr

0800cf40 <sulp>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	4604      	mov	r4, r0
 800cf44:	460d      	mov	r5, r1
 800cf46:	ec45 4b10 	vmov	d0, r4, r5
 800cf4a:	4616      	mov	r6, r2
 800cf4c:	f002 fc5a 	bl	800f804 <__ulp>
 800cf50:	ec51 0b10 	vmov	r0, r1, d0
 800cf54:	b17e      	cbz	r6, 800cf76 <sulp+0x36>
 800cf56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cf5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	dd09      	ble.n	800cf76 <sulp+0x36>
 800cf62:	051b      	lsls	r3, r3, #20
 800cf64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cf68:	2400      	movs	r4, #0
 800cf6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	f7f3 fb49 	bl	8000608 <__aeabi_dmul>
 800cf76:	bd70      	pop	{r4, r5, r6, pc}

0800cf78 <_strtod_l>:
 800cf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf7c:	ed2d 8b02 	vpush	{d8}
 800cf80:	b09d      	sub	sp, #116	; 0x74
 800cf82:	461f      	mov	r7, r3
 800cf84:	2300      	movs	r3, #0
 800cf86:	9318      	str	r3, [sp, #96]	; 0x60
 800cf88:	4ba2      	ldr	r3, [pc, #648]	; (800d214 <_strtod_l+0x29c>)
 800cf8a:	9213      	str	r2, [sp, #76]	; 0x4c
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	9305      	str	r3, [sp, #20]
 800cf90:	4604      	mov	r4, r0
 800cf92:	4618      	mov	r0, r3
 800cf94:	4688      	mov	r8, r1
 800cf96:	f7f3 f923 	bl	80001e0 <strlen>
 800cf9a:	f04f 0a00 	mov.w	sl, #0
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	f04f 0b00 	mov.w	fp, #0
 800cfa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cfa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfaa:	781a      	ldrb	r2, [r3, #0]
 800cfac:	2a2b      	cmp	r2, #43	; 0x2b
 800cfae:	d04e      	beq.n	800d04e <_strtod_l+0xd6>
 800cfb0:	d83b      	bhi.n	800d02a <_strtod_l+0xb2>
 800cfb2:	2a0d      	cmp	r2, #13
 800cfb4:	d834      	bhi.n	800d020 <_strtod_l+0xa8>
 800cfb6:	2a08      	cmp	r2, #8
 800cfb8:	d834      	bhi.n	800d024 <_strtod_l+0xac>
 800cfba:	2a00      	cmp	r2, #0
 800cfbc:	d03e      	beq.n	800d03c <_strtod_l+0xc4>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	930a      	str	r3, [sp, #40]	; 0x28
 800cfc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cfc4:	7833      	ldrb	r3, [r6, #0]
 800cfc6:	2b30      	cmp	r3, #48	; 0x30
 800cfc8:	f040 80b0 	bne.w	800d12c <_strtod_l+0x1b4>
 800cfcc:	7873      	ldrb	r3, [r6, #1]
 800cfce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cfd2:	2b58      	cmp	r3, #88	; 0x58
 800cfd4:	d168      	bne.n	800d0a8 <_strtod_l+0x130>
 800cfd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfd8:	9301      	str	r3, [sp, #4]
 800cfda:	ab18      	add	r3, sp, #96	; 0x60
 800cfdc:	9702      	str	r7, [sp, #8]
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	4a8d      	ldr	r2, [pc, #564]	; (800d218 <_strtod_l+0x2a0>)
 800cfe2:	ab19      	add	r3, sp, #100	; 0x64
 800cfe4:	a917      	add	r1, sp, #92	; 0x5c
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f001 fd74 	bl	800ead4 <__gethex>
 800cfec:	f010 0707 	ands.w	r7, r0, #7
 800cff0:	4605      	mov	r5, r0
 800cff2:	d005      	beq.n	800d000 <_strtod_l+0x88>
 800cff4:	2f06      	cmp	r7, #6
 800cff6:	d12c      	bne.n	800d052 <_strtod_l+0xda>
 800cff8:	3601      	adds	r6, #1
 800cffa:	2300      	movs	r3, #0
 800cffc:	9617      	str	r6, [sp, #92]	; 0x5c
 800cffe:	930a      	str	r3, [sp, #40]	; 0x28
 800d000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d002:	2b00      	cmp	r3, #0
 800d004:	f040 8590 	bne.w	800db28 <_strtod_l+0xbb0>
 800d008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d00a:	b1eb      	cbz	r3, 800d048 <_strtod_l+0xd0>
 800d00c:	4652      	mov	r2, sl
 800d00e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d012:	ec43 2b10 	vmov	d0, r2, r3
 800d016:	b01d      	add	sp, #116	; 0x74
 800d018:	ecbd 8b02 	vpop	{d8}
 800d01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d020:	2a20      	cmp	r2, #32
 800d022:	d1cc      	bne.n	800cfbe <_strtod_l+0x46>
 800d024:	3301      	adds	r3, #1
 800d026:	9317      	str	r3, [sp, #92]	; 0x5c
 800d028:	e7be      	b.n	800cfa8 <_strtod_l+0x30>
 800d02a:	2a2d      	cmp	r2, #45	; 0x2d
 800d02c:	d1c7      	bne.n	800cfbe <_strtod_l+0x46>
 800d02e:	2201      	movs	r2, #1
 800d030:	920a      	str	r2, [sp, #40]	; 0x28
 800d032:	1c5a      	adds	r2, r3, #1
 800d034:	9217      	str	r2, [sp, #92]	; 0x5c
 800d036:	785b      	ldrb	r3, [r3, #1]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1c2      	bne.n	800cfc2 <_strtod_l+0x4a>
 800d03c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d03e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d042:	2b00      	cmp	r3, #0
 800d044:	f040 856e 	bne.w	800db24 <_strtod_l+0xbac>
 800d048:	4652      	mov	r2, sl
 800d04a:	465b      	mov	r3, fp
 800d04c:	e7e1      	b.n	800d012 <_strtod_l+0x9a>
 800d04e:	2200      	movs	r2, #0
 800d050:	e7ee      	b.n	800d030 <_strtod_l+0xb8>
 800d052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d054:	b13a      	cbz	r2, 800d066 <_strtod_l+0xee>
 800d056:	2135      	movs	r1, #53	; 0x35
 800d058:	a81a      	add	r0, sp, #104	; 0x68
 800d05a:	f002 fcde 	bl	800fa1a <__copybits>
 800d05e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d060:	4620      	mov	r0, r4
 800d062:	f002 f89d 	bl	800f1a0 <_Bfree>
 800d066:	3f01      	subs	r7, #1
 800d068:	2f04      	cmp	r7, #4
 800d06a:	d806      	bhi.n	800d07a <_strtod_l+0x102>
 800d06c:	e8df f007 	tbb	[pc, r7]
 800d070:	1714030a 	.word	0x1714030a
 800d074:	0a          	.byte	0x0a
 800d075:	00          	.byte	0x00
 800d076:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d07a:	0728      	lsls	r0, r5, #28
 800d07c:	d5c0      	bpl.n	800d000 <_strtod_l+0x88>
 800d07e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d082:	e7bd      	b.n	800d000 <_strtod_l+0x88>
 800d084:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d088:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d08a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d08e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d092:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d096:	e7f0      	b.n	800d07a <_strtod_l+0x102>
 800d098:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d21c <_strtod_l+0x2a4>
 800d09c:	e7ed      	b.n	800d07a <_strtod_l+0x102>
 800d09e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d0a2:	f04f 3aff 	mov.w	sl, #4294967295
 800d0a6:	e7e8      	b.n	800d07a <_strtod_l+0x102>
 800d0a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0aa:	1c5a      	adds	r2, r3, #1
 800d0ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800d0ae:	785b      	ldrb	r3, [r3, #1]
 800d0b0:	2b30      	cmp	r3, #48	; 0x30
 800d0b2:	d0f9      	beq.n	800d0a8 <_strtod_l+0x130>
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d0a3      	beq.n	800d000 <_strtod_l+0x88>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	f04f 0900 	mov.w	r9, #0
 800d0be:	9304      	str	r3, [sp, #16]
 800d0c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0c2:	9308      	str	r3, [sp, #32]
 800d0c4:	f8cd 901c 	str.w	r9, [sp, #28]
 800d0c8:	464f      	mov	r7, r9
 800d0ca:	220a      	movs	r2, #10
 800d0cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d0ce:	7806      	ldrb	r6, [r0, #0]
 800d0d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d0d4:	b2d9      	uxtb	r1, r3
 800d0d6:	2909      	cmp	r1, #9
 800d0d8:	d92a      	bls.n	800d130 <_strtod_l+0x1b8>
 800d0da:	9905      	ldr	r1, [sp, #20]
 800d0dc:	462a      	mov	r2, r5
 800d0de:	f002 ff4b 	bl	800ff78 <strncmp>
 800d0e2:	b398      	cbz	r0, 800d14c <_strtod_l+0x1d4>
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	4632      	mov	r2, r6
 800d0e8:	463d      	mov	r5, r7
 800d0ea:	9005      	str	r0, [sp, #20]
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2a65      	cmp	r2, #101	; 0x65
 800d0f0:	d001      	beq.n	800d0f6 <_strtod_l+0x17e>
 800d0f2:	2a45      	cmp	r2, #69	; 0x45
 800d0f4:	d118      	bne.n	800d128 <_strtod_l+0x1b0>
 800d0f6:	b91d      	cbnz	r5, 800d100 <_strtod_l+0x188>
 800d0f8:	9a04      	ldr	r2, [sp, #16]
 800d0fa:	4302      	orrs	r2, r0
 800d0fc:	d09e      	beq.n	800d03c <_strtod_l+0xc4>
 800d0fe:	2500      	movs	r5, #0
 800d100:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d104:	f108 0201 	add.w	r2, r8, #1
 800d108:	9217      	str	r2, [sp, #92]	; 0x5c
 800d10a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d10e:	2a2b      	cmp	r2, #43	; 0x2b
 800d110:	d075      	beq.n	800d1fe <_strtod_l+0x286>
 800d112:	2a2d      	cmp	r2, #45	; 0x2d
 800d114:	d07b      	beq.n	800d20e <_strtod_l+0x296>
 800d116:	f04f 0c00 	mov.w	ip, #0
 800d11a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d11e:	2909      	cmp	r1, #9
 800d120:	f240 8082 	bls.w	800d228 <_strtod_l+0x2b0>
 800d124:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d128:	2600      	movs	r6, #0
 800d12a:	e09d      	b.n	800d268 <_strtod_l+0x2f0>
 800d12c:	2300      	movs	r3, #0
 800d12e:	e7c4      	b.n	800d0ba <_strtod_l+0x142>
 800d130:	2f08      	cmp	r7, #8
 800d132:	bfd8      	it	le
 800d134:	9907      	ldrle	r1, [sp, #28]
 800d136:	f100 0001 	add.w	r0, r0, #1
 800d13a:	bfda      	itte	le
 800d13c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d140:	9307      	strle	r3, [sp, #28]
 800d142:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d146:	3701      	adds	r7, #1
 800d148:	9017      	str	r0, [sp, #92]	; 0x5c
 800d14a:	e7bf      	b.n	800d0cc <_strtod_l+0x154>
 800d14c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d14e:	195a      	adds	r2, r3, r5
 800d150:	9217      	str	r2, [sp, #92]	; 0x5c
 800d152:	5d5a      	ldrb	r2, [r3, r5]
 800d154:	2f00      	cmp	r7, #0
 800d156:	d037      	beq.n	800d1c8 <_strtod_l+0x250>
 800d158:	9005      	str	r0, [sp, #20]
 800d15a:	463d      	mov	r5, r7
 800d15c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d160:	2b09      	cmp	r3, #9
 800d162:	d912      	bls.n	800d18a <_strtod_l+0x212>
 800d164:	2301      	movs	r3, #1
 800d166:	e7c2      	b.n	800d0ee <_strtod_l+0x176>
 800d168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d16e:	785a      	ldrb	r2, [r3, #1]
 800d170:	3001      	adds	r0, #1
 800d172:	2a30      	cmp	r2, #48	; 0x30
 800d174:	d0f8      	beq.n	800d168 <_strtod_l+0x1f0>
 800d176:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d17a:	2b08      	cmp	r3, #8
 800d17c:	f200 84d9 	bhi.w	800db32 <_strtod_l+0xbba>
 800d180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d182:	9005      	str	r0, [sp, #20]
 800d184:	2000      	movs	r0, #0
 800d186:	9308      	str	r3, [sp, #32]
 800d188:	4605      	mov	r5, r0
 800d18a:	3a30      	subs	r2, #48	; 0x30
 800d18c:	f100 0301 	add.w	r3, r0, #1
 800d190:	d014      	beq.n	800d1bc <_strtod_l+0x244>
 800d192:	9905      	ldr	r1, [sp, #20]
 800d194:	4419      	add	r1, r3
 800d196:	9105      	str	r1, [sp, #20]
 800d198:	462b      	mov	r3, r5
 800d19a:	eb00 0e05 	add.w	lr, r0, r5
 800d19e:	210a      	movs	r1, #10
 800d1a0:	4573      	cmp	r3, lr
 800d1a2:	d113      	bne.n	800d1cc <_strtod_l+0x254>
 800d1a4:	182b      	adds	r3, r5, r0
 800d1a6:	2b08      	cmp	r3, #8
 800d1a8:	f105 0501 	add.w	r5, r5, #1
 800d1ac:	4405      	add	r5, r0
 800d1ae:	dc1c      	bgt.n	800d1ea <_strtod_l+0x272>
 800d1b0:	9907      	ldr	r1, [sp, #28]
 800d1b2:	230a      	movs	r3, #10
 800d1b4:	fb03 2301 	mla	r3, r3, r1, r2
 800d1b8:	9307      	str	r3, [sp, #28]
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d1be:	1c51      	adds	r1, r2, #1
 800d1c0:	9117      	str	r1, [sp, #92]	; 0x5c
 800d1c2:	7852      	ldrb	r2, [r2, #1]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	e7c9      	b.n	800d15c <_strtod_l+0x1e4>
 800d1c8:	4638      	mov	r0, r7
 800d1ca:	e7d2      	b.n	800d172 <_strtod_l+0x1fa>
 800d1cc:	2b08      	cmp	r3, #8
 800d1ce:	dc04      	bgt.n	800d1da <_strtod_l+0x262>
 800d1d0:	9e07      	ldr	r6, [sp, #28]
 800d1d2:	434e      	muls	r6, r1
 800d1d4:	9607      	str	r6, [sp, #28]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	e7e2      	b.n	800d1a0 <_strtod_l+0x228>
 800d1da:	f103 0c01 	add.w	ip, r3, #1
 800d1de:	f1bc 0f10 	cmp.w	ip, #16
 800d1e2:	bfd8      	it	le
 800d1e4:	fb01 f909 	mulle.w	r9, r1, r9
 800d1e8:	e7f5      	b.n	800d1d6 <_strtod_l+0x25e>
 800d1ea:	2d10      	cmp	r5, #16
 800d1ec:	bfdc      	itt	le
 800d1ee:	230a      	movle	r3, #10
 800d1f0:	fb03 2909 	mlale	r9, r3, r9, r2
 800d1f4:	e7e1      	b.n	800d1ba <_strtod_l+0x242>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	9305      	str	r3, [sp, #20]
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e77c      	b.n	800d0f8 <_strtod_l+0x180>
 800d1fe:	f04f 0c00 	mov.w	ip, #0
 800d202:	f108 0202 	add.w	r2, r8, #2
 800d206:	9217      	str	r2, [sp, #92]	; 0x5c
 800d208:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d20c:	e785      	b.n	800d11a <_strtod_l+0x1a2>
 800d20e:	f04f 0c01 	mov.w	ip, #1
 800d212:	e7f6      	b.n	800d202 <_strtod_l+0x28a>
 800d214:	08012010 	.word	0x08012010
 800d218:	08011dc4 	.word	0x08011dc4
 800d21c:	7ff00000 	.word	0x7ff00000
 800d220:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d222:	1c51      	adds	r1, r2, #1
 800d224:	9117      	str	r1, [sp, #92]	; 0x5c
 800d226:	7852      	ldrb	r2, [r2, #1]
 800d228:	2a30      	cmp	r2, #48	; 0x30
 800d22a:	d0f9      	beq.n	800d220 <_strtod_l+0x2a8>
 800d22c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d230:	2908      	cmp	r1, #8
 800d232:	f63f af79 	bhi.w	800d128 <_strtod_l+0x1b0>
 800d236:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d23a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d23c:	9206      	str	r2, [sp, #24]
 800d23e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d240:	1c51      	adds	r1, r2, #1
 800d242:	9117      	str	r1, [sp, #92]	; 0x5c
 800d244:	7852      	ldrb	r2, [r2, #1]
 800d246:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d24a:	2e09      	cmp	r6, #9
 800d24c:	d937      	bls.n	800d2be <_strtod_l+0x346>
 800d24e:	9e06      	ldr	r6, [sp, #24]
 800d250:	1b89      	subs	r1, r1, r6
 800d252:	2908      	cmp	r1, #8
 800d254:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d258:	dc02      	bgt.n	800d260 <_strtod_l+0x2e8>
 800d25a:	4576      	cmp	r6, lr
 800d25c:	bfa8      	it	ge
 800d25e:	4676      	movge	r6, lr
 800d260:	f1bc 0f00 	cmp.w	ip, #0
 800d264:	d000      	beq.n	800d268 <_strtod_l+0x2f0>
 800d266:	4276      	negs	r6, r6
 800d268:	2d00      	cmp	r5, #0
 800d26a:	d14d      	bne.n	800d308 <_strtod_l+0x390>
 800d26c:	9904      	ldr	r1, [sp, #16]
 800d26e:	4301      	orrs	r1, r0
 800d270:	f47f aec6 	bne.w	800d000 <_strtod_l+0x88>
 800d274:	2b00      	cmp	r3, #0
 800d276:	f47f aee1 	bne.w	800d03c <_strtod_l+0xc4>
 800d27a:	2a69      	cmp	r2, #105	; 0x69
 800d27c:	d027      	beq.n	800d2ce <_strtod_l+0x356>
 800d27e:	dc24      	bgt.n	800d2ca <_strtod_l+0x352>
 800d280:	2a49      	cmp	r2, #73	; 0x49
 800d282:	d024      	beq.n	800d2ce <_strtod_l+0x356>
 800d284:	2a4e      	cmp	r2, #78	; 0x4e
 800d286:	f47f aed9 	bne.w	800d03c <_strtod_l+0xc4>
 800d28a:	499f      	ldr	r1, [pc, #636]	; (800d508 <_strtod_l+0x590>)
 800d28c:	a817      	add	r0, sp, #92	; 0x5c
 800d28e:	f001 fe79 	bl	800ef84 <__match>
 800d292:	2800      	cmp	r0, #0
 800d294:	f43f aed2 	beq.w	800d03c <_strtod_l+0xc4>
 800d298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	2b28      	cmp	r3, #40	; 0x28
 800d29e:	d12d      	bne.n	800d2fc <_strtod_l+0x384>
 800d2a0:	499a      	ldr	r1, [pc, #616]	; (800d50c <_strtod_l+0x594>)
 800d2a2:	aa1a      	add	r2, sp, #104	; 0x68
 800d2a4:	a817      	add	r0, sp, #92	; 0x5c
 800d2a6:	f001 fe81 	bl	800efac <__hexnan>
 800d2aa:	2805      	cmp	r0, #5
 800d2ac:	d126      	bne.n	800d2fc <_strtod_l+0x384>
 800d2ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d2b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d2b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d2bc:	e6a0      	b.n	800d000 <_strtod_l+0x88>
 800d2be:	210a      	movs	r1, #10
 800d2c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d2c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d2c8:	e7b9      	b.n	800d23e <_strtod_l+0x2c6>
 800d2ca:	2a6e      	cmp	r2, #110	; 0x6e
 800d2cc:	e7db      	b.n	800d286 <_strtod_l+0x30e>
 800d2ce:	4990      	ldr	r1, [pc, #576]	; (800d510 <_strtod_l+0x598>)
 800d2d0:	a817      	add	r0, sp, #92	; 0x5c
 800d2d2:	f001 fe57 	bl	800ef84 <__match>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	f43f aeb0 	beq.w	800d03c <_strtod_l+0xc4>
 800d2dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2de:	498d      	ldr	r1, [pc, #564]	; (800d514 <_strtod_l+0x59c>)
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	a817      	add	r0, sp, #92	; 0x5c
 800d2e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d2e6:	f001 fe4d 	bl	800ef84 <__match>
 800d2ea:	b910      	cbnz	r0, 800d2f2 <_strtod_l+0x37a>
 800d2ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d2f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d524 <_strtod_l+0x5ac>
 800d2f6:	f04f 0a00 	mov.w	sl, #0
 800d2fa:	e681      	b.n	800d000 <_strtod_l+0x88>
 800d2fc:	4886      	ldr	r0, [pc, #536]	; (800d518 <_strtod_l+0x5a0>)
 800d2fe:	f002 fe23 	bl	800ff48 <nan>
 800d302:	ec5b ab10 	vmov	sl, fp, d0
 800d306:	e67b      	b.n	800d000 <_strtod_l+0x88>
 800d308:	9b05      	ldr	r3, [sp, #20]
 800d30a:	9807      	ldr	r0, [sp, #28]
 800d30c:	1af3      	subs	r3, r6, r3
 800d30e:	2f00      	cmp	r7, #0
 800d310:	bf08      	it	eq
 800d312:	462f      	moveq	r7, r5
 800d314:	2d10      	cmp	r5, #16
 800d316:	9306      	str	r3, [sp, #24]
 800d318:	46a8      	mov	r8, r5
 800d31a:	bfa8      	it	ge
 800d31c:	f04f 0810 	movge.w	r8, #16
 800d320:	f7f3 f8f8 	bl	8000514 <__aeabi_ui2d>
 800d324:	2d09      	cmp	r5, #9
 800d326:	4682      	mov	sl, r0
 800d328:	468b      	mov	fp, r1
 800d32a:	dd13      	ble.n	800d354 <_strtod_l+0x3dc>
 800d32c:	4b7b      	ldr	r3, [pc, #492]	; (800d51c <_strtod_l+0x5a4>)
 800d32e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d332:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d336:	f7f3 f967 	bl	8000608 <__aeabi_dmul>
 800d33a:	4682      	mov	sl, r0
 800d33c:	4648      	mov	r0, r9
 800d33e:	468b      	mov	fp, r1
 800d340:	f7f3 f8e8 	bl	8000514 <__aeabi_ui2d>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	4650      	mov	r0, sl
 800d34a:	4659      	mov	r1, fp
 800d34c:	f7f2 ffa6 	bl	800029c <__adddf3>
 800d350:	4682      	mov	sl, r0
 800d352:	468b      	mov	fp, r1
 800d354:	2d0f      	cmp	r5, #15
 800d356:	dc38      	bgt.n	800d3ca <_strtod_l+0x452>
 800d358:	9b06      	ldr	r3, [sp, #24]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f43f ae50 	beq.w	800d000 <_strtod_l+0x88>
 800d360:	dd24      	ble.n	800d3ac <_strtod_l+0x434>
 800d362:	2b16      	cmp	r3, #22
 800d364:	dc0b      	bgt.n	800d37e <_strtod_l+0x406>
 800d366:	496d      	ldr	r1, [pc, #436]	; (800d51c <_strtod_l+0x5a4>)
 800d368:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d36c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d370:	4652      	mov	r2, sl
 800d372:	465b      	mov	r3, fp
 800d374:	f7f3 f948 	bl	8000608 <__aeabi_dmul>
 800d378:	4682      	mov	sl, r0
 800d37a:	468b      	mov	fp, r1
 800d37c:	e640      	b.n	800d000 <_strtod_l+0x88>
 800d37e:	9a06      	ldr	r2, [sp, #24]
 800d380:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d384:	4293      	cmp	r3, r2
 800d386:	db20      	blt.n	800d3ca <_strtod_l+0x452>
 800d388:	4c64      	ldr	r4, [pc, #400]	; (800d51c <_strtod_l+0x5a4>)
 800d38a:	f1c5 050f 	rsb	r5, r5, #15
 800d38e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d392:	4652      	mov	r2, sl
 800d394:	465b      	mov	r3, fp
 800d396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d39a:	f7f3 f935 	bl	8000608 <__aeabi_dmul>
 800d39e:	9b06      	ldr	r3, [sp, #24]
 800d3a0:	1b5d      	subs	r5, r3, r5
 800d3a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d3a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d3aa:	e7e3      	b.n	800d374 <_strtod_l+0x3fc>
 800d3ac:	9b06      	ldr	r3, [sp, #24]
 800d3ae:	3316      	adds	r3, #22
 800d3b0:	db0b      	blt.n	800d3ca <_strtod_l+0x452>
 800d3b2:	9b05      	ldr	r3, [sp, #20]
 800d3b4:	1b9e      	subs	r6, r3, r6
 800d3b6:	4b59      	ldr	r3, [pc, #356]	; (800d51c <_strtod_l+0x5a4>)
 800d3b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d3bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d3c0:	4650      	mov	r0, sl
 800d3c2:	4659      	mov	r1, fp
 800d3c4:	f7f3 fa4a 	bl	800085c <__aeabi_ddiv>
 800d3c8:	e7d6      	b.n	800d378 <_strtod_l+0x400>
 800d3ca:	9b06      	ldr	r3, [sp, #24]
 800d3cc:	eba5 0808 	sub.w	r8, r5, r8
 800d3d0:	4498      	add	r8, r3
 800d3d2:	f1b8 0f00 	cmp.w	r8, #0
 800d3d6:	dd74      	ble.n	800d4c2 <_strtod_l+0x54a>
 800d3d8:	f018 030f 	ands.w	r3, r8, #15
 800d3dc:	d00a      	beq.n	800d3f4 <_strtod_l+0x47c>
 800d3de:	494f      	ldr	r1, [pc, #316]	; (800d51c <_strtod_l+0x5a4>)
 800d3e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3e4:	4652      	mov	r2, sl
 800d3e6:	465b      	mov	r3, fp
 800d3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3ec:	f7f3 f90c 	bl	8000608 <__aeabi_dmul>
 800d3f0:	4682      	mov	sl, r0
 800d3f2:	468b      	mov	fp, r1
 800d3f4:	f038 080f 	bics.w	r8, r8, #15
 800d3f8:	d04f      	beq.n	800d49a <_strtod_l+0x522>
 800d3fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d3fe:	dd22      	ble.n	800d446 <_strtod_l+0x4ce>
 800d400:	2500      	movs	r5, #0
 800d402:	462e      	mov	r6, r5
 800d404:	9507      	str	r5, [sp, #28]
 800d406:	9505      	str	r5, [sp, #20]
 800d408:	2322      	movs	r3, #34	; 0x22
 800d40a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d524 <_strtod_l+0x5ac>
 800d40e:	6023      	str	r3, [r4, #0]
 800d410:	f04f 0a00 	mov.w	sl, #0
 800d414:	9b07      	ldr	r3, [sp, #28]
 800d416:	2b00      	cmp	r3, #0
 800d418:	f43f adf2 	beq.w	800d000 <_strtod_l+0x88>
 800d41c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d41e:	4620      	mov	r0, r4
 800d420:	f001 febe 	bl	800f1a0 <_Bfree>
 800d424:	9905      	ldr	r1, [sp, #20]
 800d426:	4620      	mov	r0, r4
 800d428:	f001 feba 	bl	800f1a0 <_Bfree>
 800d42c:	4631      	mov	r1, r6
 800d42e:	4620      	mov	r0, r4
 800d430:	f001 feb6 	bl	800f1a0 <_Bfree>
 800d434:	9907      	ldr	r1, [sp, #28]
 800d436:	4620      	mov	r0, r4
 800d438:	f001 feb2 	bl	800f1a0 <_Bfree>
 800d43c:	4629      	mov	r1, r5
 800d43e:	4620      	mov	r0, r4
 800d440:	f001 feae 	bl	800f1a0 <_Bfree>
 800d444:	e5dc      	b.n	800d000 <_strtod_l+0x88>
 800d446:	4b36      	ldr	r3, [pc, #216]	; (800d520 <_strtod_l+0x5a8>)
 800d448:	9304      	str	r3, [sp, #16]
 800d44a:	2300      	movs	r3, #0
 800d44c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d450:	4650      	mov	r0, sl
 800d452:	4659      	mov	r1, fp
 800d454:	4699      	mov	r9, r3
 800d456:	f1b8 0f01 	cmp.w	r8, #1
 800d45a:	dc21      	bgt.n	800d4a0 <_strtod_l+0x528>
 800d45c:	b10b      	cbz	r3, 800d462 <_strtod_l+0x4ea>
 800d45e:	4682      	mov	sl, r0
 800d460:	468b      	mov	fp, r1
 800d462:	4b2f      	ldr	r3, [pc, #188]	; (800d520 <_strtod_l+0x5a8>)
 800d464:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d468:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d46c:	4652      	mov	r2, sl
 800d46e:	465b      	mov	r3, fp
 800d470:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d474:	f7f3 f8c8 	bl	8000608 <__aeabi_dmul>
 800d478:	4b2a      	ldr	r3, [pc, #168]	; (800d524 <_strtod_l+0x5ac>)
 800d47a:	460a      	mov	r2, r1
 800d47c:	400b      	ands	r3, r1
 800d47e:	492a      	ldr	r1, [pc, #168]	; (800d528 <_strtod_l+0x5b0>)
 800d480:	428b      	cmp	r3, r1
 800d482:	4682      	mov	sl, r0
 800d484:	d8bc      	bhi.n	800d400 <_strtod_l+0x488>
 800d486:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d48a:	428b      	cmp	r3, r1
 800d48c:	bf86      	itte	hi
 800d48e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d52c <_strtod_l+0x5b4>
 800d492:	f04f 3aff 	movhi.w	sl, #4294967295
 800d496:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d49a:	2300      	movs	r3, #0
 800d49c:	9304      	str	r3, [sp, #16]
 800d49e:	e084      	b.n	800d5aa <_strtod_l+0x632>
 800d4a0:	f018 0f01 	tst.w	r8, #1
 800d4a4:	d005      	beq.n	800d4b2 <_strtod_l+0x53a>
 800d4a6:	9b04      	ldr	r3, [sp, #16]
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	f7f3 f8ac 	bl	8000608 <__aeabi_dmul>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	9a04      	ldr	r2, [sp, #16]
 800d4b4:	3208      	adds	r2, #8
 800d4b6:	f109 0901 	add.w	r9, r9, #1
 800d4ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d4be:	9204      	str	r2, [sp, #16]
 800d4c0:	e7c9      	b.n	800d456 <_strtod_l+0x4de>
 800d4c2:	d0ea      	beq.n	800d49a <_strtod_l+0x522>
 800d4c4:	f1c8 0800 	rsb	r8, r8, #0
 800d4c8:	f018 020f 	ands.w	r2, r8, #15
 800d4cc:	d00a      	beq.n	800d4e4 <_strtod_l+0x56c>
 800d4ce:	4b13      	ldr	r3, [pc, #76]	; (800d51c <_strtod_l+0x5a4>)
 800d4d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4d4:	4650      	mov	r0, sl
 800d4d6:	4659      	mov	r1, fp
 800d4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4dc:	f7f3 f9be 	bl	800085c <__aeabi_ddiv>
 800d4e0:	4682      	mov	sl, r0
 800d4e2:	468b      	mov	fp, r1
 800d4e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d4e8:	d0d7      	beq.n	800d49a <_strtod_l+0x522>
 800d4ea:	f1b8 0f1f 	cmp.w	r8, #31
 800d4ee:	dd1f      	ble.n	800d530 <_strtod_l+0x5b8>
 800d4f0:	2500      	movs	r5, #0
 800d4f2:	462e      	mov	r6, r5
 800d4f4:	9507      	str	r5, [sp, #28]
 800d4f6:	9505      	str	r5, [sp, #20]
 800d4f8:	2322      	movs	r3, #34	; 0x22
 800d4fa:	f04f 0a00 	mov.w	sl, #0
 800d4fe:	f04f 0b00 	mov.w	fp, #0
 800d502:	6023      	str	r3, [r4, #0]
 800d504:	e786      	b.n	800d414 <_strtod_l+0x49c>
 800d506:	bf00      	nop
 800d508:	08011d95 	.word	0x08011d95
 800d50c:	08011dd8 	.word	0x08011dd8
 800d510:	08011d8d 	.word	0x08011d8d
 800d514:	08011f1c 	.word	0x08011f1c
 800d518:	080121c8 	.word	0x080121c8
 800d51c:	080120a8 	.word	0x080120a8
 800d520:	08012080 	.word	0x08012080
 800d524:	7ff00000 	.word	0x7ff00000
 800d528:	7ca00000 	.word	0x7ca00000
 800d52c:	7fefffff 	.word	0x7fefffff
 800d530:	f018 0310 	ands.w	r3, r8, #16
 800d534:	bf18      	it	ne
 800d536:	236a      	movne	r3, #106	; 0x6a
 800d538:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d8e8 <_strtod_l+0x970>
 800d53c:	9304      	str	r3, [sp, #16]
 800d53e:	4650      	mov	r0, sl
 800d540:	4659      	mov	r1, fp
 800d542:	2300      	movs	r3, #0
 800d544:	f018 0f01 	tst.w	r8, #1
 800d548:	d004      	beq.n	800d554 <_strtod_l+0x5dc>
 800d54a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d54e:	f7f3 f85b 	bl	8000608 <__aeabi_dmul>
 800d552:	2301      	movs	r3, #1
 800d554:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d558:	f109 0908 	add.w	r9, r9, #8
 800d55c:	d1f2      	bne.n	800d544 <_strtod_l+0x5cc>
 800d55e:	b10b      	cbz	r3, 800d564 <_strtod_l+0x5ec>
 800d560:	4682      	mov	sl, r0
 800d562:	468b      	mov	fp, r1
 800d564:	9b04      	ldr	r3, [sp, #16]
 800d566:	b1c3      	cbz	r3, 800d59a <_strtod_l+0x622>
 800d568:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d56c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d570:	2b00      	cmp	r3, #0
 800d572:	4659      	mov	r1, fp
 800d574:	dd11      	ble.n	800d59a <_strtod_l+0x622>
 800d576:	2b1f      	cmp	r3, #31
 800d578:	f340 8124 	ble.w	800d7c4 <_strtod_l+0x84c>
 800d57c:	2b34      	cmp	r3, #52	; 0x34
 800d57e:	bfde      	ittt	le
 800d580:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d584:	f04f 33ff 	movle.w	r3, #4294967295
 800d588:	fa03 f202 	lslle.w	r2, r3, r2
 800d58c:	f04f 0a00 	mov.w	sl, #0
 800d590:	bfcc      	ite	gt
 800d592:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d596:	ea02 0b01 	andle.w	fp, r2, r1
 800d59a:	2200      	movs	r2, #0
 800d59c:	2300      	movs	r3, #0
 800d59e:	4650      	mov	r0, sl
 800d5a0:	4659      	mov	r1, fp
 800d5a2:	f7f3 fa99 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d1a2      	bne.n	800d4f0 <_strtod_l+0x578>
 800d5aa:	9b07      	ldr	r3, [sp, #28]
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	9908      	ldr	r1, [sp, #32]
 800d5b0:	462b      	mov	r3, r5
 800d5b2:	463a      	mov	r2, r7
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f001 fe5b 	bl	800f270 <__s2b>
 800d5ba:	9007      	str	r0, [sp, #28]
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	f43f af1f 	beq.w	800d400 <_strtod_l+0x488>
 800d5c2:	9b05      	ldr	r3, [sp, #20]
 800d5c4:	1b9e      	subs	r6, r3, r6
 800d5c6:	9b06      	ldr	r3, [sp, #24]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	bfb4      	ite	lt
 800d5cc:	4633      	movlt	r3, r6
 800d5ce:	2300      	movge	r3, #0
 800d5d0:	930c      	str	r3, [sp, #48]	; 0x30
 800d5d2:	9b06      	ldr	r3, [sp, #24]
 800d5d4:	2500      	movs	r5, #0
 800d5d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d5da:	9312      	str	r3, [sp, #72]	; 0x48
 800d5dc:	462e      	mov	r6, r5
 800d5de:	9b07      	ldr	r3, [sp, #28]
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	6859      	ldr	r1, [r3, #4]
 800d5e4:	f001 fd9c 	bl	800f120 <_Balloc>
 800d5e8:	9005      	str	r0, [sp, #20]
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	f43f af0c 	beq.w	800d408 <_strtod_l+0x490>
 800d5f0:	9b07      	ldr	r3, [sp, #28]
 800d5f2:	691a      	ldr	r2, [r3, #16]
 800d5f4:	3202      	adds	r2, #2
 800d5f6:	f103 010c 	add.w	r1, r3, #12
 800d5fa:	0092      	lsls	r2, r2, #2
 800d5fc:	300c      	adds	r0, #12
 800d5fe:	f7fe fde1 	bl	800c1c4 <memcpy>
 800d602:	ec4b ab10 	vmov	d0, sl, fp
 800d606:	aa1a      	add	r2, sp, #104	; 0x68
 800d608:	a919      	add	r1, sp, #100	; 0x64
 800d60a:	4620      	mov	r0, r4
 800d60c:	f002 f976 	bl	800f8fc <__d2b>
 800d610:	ec4b ab18 	vmov	d8, sl, fp
 800d614:	9018      	str	r0, [sp, #96]	; 0x60
 800d616:	2800      	cmp	r0, #0
 800d618:	f43f aef6 	beq.w	800d408 <_strtod_l+0x490>
 800d61c:	2101      	movs	r1, #1
 800d61e:	4620      	mov	r0, r4
 800d620:	f001 fec0 	bl	800f3a4 <__i2b>
 800d624:	4606      	mov	r6, r0
 800d626:	2800      	cmp	r0, #0
 800d628:	f43f aeee 	beq.w	800d408 <_strtod_l+0x490>
 800d62c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d62e:	9904      	ldr	r1, [sp, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	bfab      	itete	ge
 800d634:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d636:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d638:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d63a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d63e:	bfac      	ite	ge
 800d640:	eb03 0902 	addge.w	r9, r3, r2
 800d644:	1ad7      	sublt	r7, r2, r3
 800d646:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d648:	eba3 0801 	sub.w	r8, r3, r1
 800d64c:	4490      	add	r8, r2
 800d64e:	4ba1      	ldr	r3, [pc, #644]	; (800d8d4 <_strtod_l+0x95c>)
 800d650:	f108 38ff 	add.w	r8, r8, #4294967295
 800d654:	4598      	cmp	r8, r3
 800d656:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d65a:	f280 80c7 	bge.w	800d7ec <_strtod_l+0x874>
 800d65e:	eba3 0308 	sub.w	r3, r3, r8
 800d662:	2b1f      	cmp	r3, #31
 800d664:	eba2 0203 	sub.w	r2, r2, r3
 800d668:	f04f 0101 	mov.w	r1, #1
 800d66c:	f300 80b1 	bgt.w	800d7d2 <_strtod_l+0x85a>
 800d670:	fa01 f303 	lsl.w	r3, r1, r3
 800d674:	930d      	str	r3, [sp, #52]	; 0x34
 800d676:	2300      	movs	r3, #0
 800d678:	9308      	str	r3, [sp, #32]
 800d67a:	eb09 0802 	add.w	r8, r9, r2
 800d67e:	9b04      	ldr	r3, [sp, #16]
 800d680:	45c1      	cmp	r9, r8
 800d682:	4417      	add	r7, r2
 800d684:	441f      	add	r7, r3
 800d686:	464b      	mov	r3, r9
 800d688:	bfa8      	it	ge
 800d68a:	4643      	movge	r3, r8
 800d68c:	42bb      	cmp	r3, r7
 800d68e:	bfa8      	it	ge
 800d690:	463b      	movge	r3, r7
 800d692:	2b00      	cmp	r3, #0
 800d694:	bfc2      	ittt	gt
 800d696:	eba8 0803 	subgt.w	r8, r8, r3
 800d69a:	1aff      	subgt	r7, r7, r3
 800d69c:	eba9 0903 	subgt.w	r9, r9, r3
 800d6a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	dd17      	ble.n	800d6d6 <_strtod_l+0x75e>
 800d6a6:	4631      	mov	r1, r6
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f001 ff3a 	bl	800f524 <__pow5mult>
 800d6b0:	4606      	mov	r6, r0
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	f43f aea8 	beq.w	800d408 <_strtod_l+0x490>
 800d6b8:	4601      	mov	r1, r0
 800d6ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f001 fe87 	bl	800f3d0 <__multiply>
 800d6c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	f43f ae9f 	beq.w	800d408 <_strtod_l+0x490>
 800d6ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f001 fd67 	bl	800f1a0 <_Bfree>
 800d6d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6d4:	9318      	str	r3, [sp, #96]	; 0x60
 800d6d6:	f1b8 0f00 	cmp.w	r8, #0
 800d6da:	f300 808c 	bgt.w	800d7f6 <_strtod_l+0x87e>
 800d6de:	9b06      	ldr	r3, [sp, #24]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	dd08      	ble.n	800d6f6 <_strtod_l+0x77e>
 800d6e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d6e6:	9905      	ldr	r1, [sp, #20]
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f001 ff1b 	bl	800f524 <__pow5mult>
 800d6ee:	9005      	str	r0, [sp, #20]
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	f43f ae89 	beq.w	800d408 <_strtod_l+0x490>
 800d6f6:	2f00      	cmp	r7, #0
 800d6f8:	dd08      	ble.n	800d70c <_strtod_l+0x794>
 800d6fa:	9905      	ldr	r1, [sp, #20]
 800d6fc:	463a      	mov	r2, r7
 800d6fe:	4620      	mov	r0, r4
 800d700:	f001 ff6a 	bl	800f5d8 <__lshift>
 800d704:	9005      	str	r0, [sp, #20]
 800d706:	2800      	cmp	r0, #0
 800d708:	f43f ae7e 	beq.w	800d408 <_strtod_l+0x490>
 800d70c:	f1b9 0f00 	cmp.w	r9, #0
 800d710:	dd08      	ble.n	800d724 <_strtod_l+0x7ac>
 800d712:	4631      	mov	r1, r6
 800d714:	464a      	mov	r2, r9
 800d716:	4620      	mov	r0, r4
 800d718:	f001 ff5e 	bl	800f5d8 <__lshift>
 800d71c:	4606      	mov	r6, r0
 800d71e:	2800      	cmp	r0, #0
 800d720:	f43f ae72 	beq.w	800d408 <_strtod_l+0x490>
 800d724:	9a05      	ldr	r2, [sp, #20]
 800d726:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d728:	4620      	mov	r0, r4
 800d72a:	f001 ffe1 	bl	800f6f0 <__mdiff>
 800d72e:	4605      	mov	r5, r0
 800d730:	2800      	cmp	r0, #0
 800d732:	f43f ae69 	beq.w	800d408 <_strtod_l+0x490>
 800d736:	68c3      	ldr	r3, [r0, #12]
 800d738:	930b      	str	r3, [sp, #44]	; 0x2c
 800d73a:	2300      	movs	r3, #0
 800d73c:	60c3      	str	r3, [r0, #12]
 800d73e:	4631      	mov	r1, r6
 800d740:	f001 ffba 	bl	800f6b8 <__mcmp>
 800d744:	2800      	cmp	r0, #0
 800d746:	da60      	bge.n	800d80a <_strtod_l+0x892>
 800d748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d74a:	ea53 030a 	orrs.w	r3, r3, sl
 800d74e:	f040 8082 	bne.w	800d856 <_strtod_l+0x8de>
 800d752:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d756:	2b00      	cmp	r3, #0
 800d758:	d17d      	bne.n	800d856 <_strtod_l+0x8de>
 800d75a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d75e:	0d1b      	lsrs	r3, r3, #20
 800d760:	051b      	lsls	r3, r3, #20
 800d762:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d766:	d976      	bls.n	800d856 <_strtod_l+0x8de>
 800d768:	696b      	ldr	r3, [r5, #20]
 800d76a:	b913      	cbnz	r3, 800d772 <_strtod_l+0x7fa>
 800d76c:	692b      	ldr	r3, [r5, #16]
 800d76e:	2b01      	cmp	r3, #1
 800d770:	dd71      	ble.n	800d856 <_strtod_l+0x8de>
 800d772:	4629      	mov	r1, r5
 800d774:	2201      	movs	r2, #1
 800d776:	4620      	mov	r0, r4
 800d778:	f001 ff2e 	bl	800f5d8 <__lshift>
 800d77c:	4631      	mov	r1, r6
 800d77e:	4605      	mov	r5, r0
 800d780:	f001 ff9a 	bl	800f6b8 <__mcmp>
 800d784:	2800      	cmp	r0, #0
 800d786:	dd66      	ble.n	800d856 <_strtod_l+0x8de>
 800d788:	9904      	ldr	r1, [sp, #16]
 800d78a:	4a53      	ldr	r2, [pc, #332]	; (800d8d8 <_strtod_l+0x960>)
 800d78c:	465b      	mov	r3, fp
 800d78e:	2900      	cmp	r1, #0
 800d790:	f000 8081 	beq.w	800d896 <_strtod_l+0x91e>
 800d794:	ea02 010b 	and.w	r1, r2, fp
 800d798:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d79c:	dc7b      	bgt.n	800d896 <_strtod_l+0x91e>
 800d79e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d7a2:	f77f aea9 	ble.w	800d4f8 <_strtod_l+0x580>
 800d7a6:	4b4d      	ldr	r3, [pc, #308]	; (800d8dc <_strtod_l+0x964>)
 800d7a8:	4650      	mov	r0, sl
 800d7aa:	4659      	mov	r1, fp
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f7f2 ff2b 	bl	8000608 <__aeabi_dmul>
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	4303      	orrs	r3, r0
 800d7b6:	bf08      	it	eq
 800d7b8:	2322      	moveq	r3, #34	; 0x22
 800d7ba:	4682      	mov	sl, r0
 800d7bc:	468b      	mov	fp, r1
 800d7be:	bf08      	it	eq
 800d7c0:	6023      	streq	r3, [r4, #0]
 800d7c2:	e62b      	b.n	800d41c <_strtod_l+0x4a4>
 800d7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7cc:	ea03 0a0a 	and.w	sl, r3, sl
 800d7d0:	e6e3      	b.n	800d59a <_strtod_l+0x622>
 800d7d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d7d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d7da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d7de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d7e2:	fa01 f308 	lsl.w	r3, r1, r8
 800d7e6:	9308      	str	r3, [sp, #32]
 800d7e8:	910d      	str	r1, [sp, #52]	; 0x34
 800d7ea:	e746      	b.n	800d67a <_strtod_l+0x702>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	9308      	str	r3, [sp, #32]
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	930d      	str	r3, [sp, #52]	; 0x34
 800d7f4:	e741      	b.n	800d67a <_strtod_l+0x702>
 800d7f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7f8:	4642      	mov	r2, r8
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f001 feec 	bl	800f5d8 <__lshift>
 800d800:	9018      	str	r0, [sp, #96]	; 0x60
 800d802:	2800      	cmp	r0, #0
 800d804:	f47f af6b 	bne.w	800d6de <_strtod_l+0x766>
 800d808:	e5fe      	b.n	800d408 <_strtod_l+0x490>
 800d80a:	465f      	mov	r7, fp
 800d80c:	d16e      	bne.n	800d8ec <_strtod_l+0x974>
 800d80e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d810:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d814:	b342      	cbz	r2, 800d868 <_strtod_l+0x8f0>
 800d816:	4a32      	ldr	r2, [pc, #200]	; (800d8e0 <_strtod_l+0x968>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d128      	bne.n	800d86e <_strtod_l+0x8f6>
 800d81c:	9b04      	ldr	r3, [sp, #16]
 800d81e:	4651      	mov	r1, sl
 800d820:	b1eb      	cbz	r3, 800d85e <_strtod_l+0x8e6>
 800d822:	4b2d      	ldr	r3, [pc, #180]	; (800d8d8 <_strtod_l+0x960>)
 800d824:	403b      	ands	r3, r7
 800d826:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d82a:	f04f 32ff 	mov.w	r2, #4294967295
 800d82e:	d819      	bhi.n	800d864 <_strtod_l+0x8ec>
 800d830:	0d1b      	lsrs	r3, r3, #20
 800d832:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d836:	fa02 f303 	lsl.w	r3, r2, r3
 800d83a:	4299      	cmp	r1, r3
 800d83c:	d117      	bne.n	800d86e <_strtod_l+0x8f6>
 800d83e:	4b29      	ldr	r3, [pc, #164]	; (800d8e4 <_strtod_l+0x96c>)
 800d840:	429f      	cmp	r7, r3
 800d842:	d102      	bne.n	800d84a <_strtod_l+0x8d2>
 800d844:	3101      	adds	r1, #1
 800d846:	f43f addf 	beq.w	800d408 <_strtod_l+0x490>
 800d84a:	4b23      	ldr	r3, [pc, #140]	; (800d8d8 <_strtod_l+0x960>)
 800d84c:	403b      	ands	r3, r7
 800d84e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d852:	f04f 0a00 	mov.w	sl, #0
 800d856:	9b04      	ldr	r3, [sp, #16]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1a4      	bne.n	800d7a6 <_strtod_l+0x82e>
 800d85c:	e5de      	b.n	800d41c <_strtod_l+0x4a4>
 800d85e:	f04f 33ff 	mov.w	r3, #4294967295
 800d862:	e7ea      	b.n	800d83a <_strtod_l+0x8c2>
 800d864:	4613      	mov	r3, r2
 800d866:	e7e8      	b.n	800d83a <_strtod_l+0x8c2>
 800d868:	ea53 030a 	orrs.w	r3, r3, sl
 800d86c:	d08c      	beq.n	800d788 <_strtod_l+0x810>
 800d86e:	9b08      	ldr	r3, [sp, #32]
 800d870:	b1db      	cbz	r3, 800d8aa <_strtod_l+0x932>
 800d872:	423b      	tst	r3, r7
 800d874:	d0ef      	beq.n	800d856 <_strtod_l+0x8de>
 800d876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d878:	9a04      	ldr	r2, [sp, #16]
 800d87a:	4650      	mov	r0, sl
 800d87c:	4659      	mov	r1, fp
 800d87e:	b1c3      	cbz	r3, 800d8b2 <_strtod_l+0x93a>
 800d880:	f7ff fb5e 	bl	800cf40 <sulp>
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	ec51 0b18 	vmov	r0, r1, d8
 800d88c:	f7f2 fd06 	bl	800029c <__adddf3>
 800d890:	4682      	mov	sl, r0
 800d892:	468b      	mov	fp, r1
 800d894:	e7df      	b.n	800d856 <_strtod_l+0x8de>
 800d896:	4013      	ands	r3, r2
 800d898:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d89c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d8a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d8a4:	f04f 3aff 	mov.w	sl, #4294967295
 800d8a8:	e7d5      	b.n	800d856 <_strtod_l+0x8de>
 800d8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8ac:	ea13 0f0a 	tst.w	r3, sl
 800d8b0:	e7e0      	b.n	800d874 <_strtod_l+0x8fc>
 800d8b2:	f7ff fb45 	bl	800cf40 <sulp>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	ec51 0b18 	vmov	r0, r1, d8
 800d8be:	f7f2 fceb 	bl	8000298 <__aeabi_dsub>
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	4682      	mov	sl, r0
 800d8c8:	468b      	mov	fp, r1
 800d8ca:	f7f3 f905 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d0c1      	beq.n	800d856 <_strtod_l+0x8de>
 800d8d2:	e611      	b.n	800d4f8 <_strtod_l+0x580>
 800d8d4:	fffffc02 	.word	0xfffffc02
 800d8d8:	7ff00000 	.word	0x7ff00000
 800d8dc:	39500000 	.word	0x39500000
 800d8e0:	000fffff 	.word	0x000fffff
 800d8e4:	7fefffff 	.word	0x7fefffff
 800d8e8:	08011df0 	.word	0x08011df0
 800d8ec:	4631      	mov	r1, r6
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	f002 f860 	bl	800f9b4 <__ratio>
 800d8f4:	ec59 8b10 	vmov	r8, r9, d0
 800d8f8:	ee10 0a10 	vmov	r0, s0
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d902:	4649      	mov	r1, r9
 800d904:	f7f3 f8fc 	bl	8000b00 <__aeabi_dcmple>
 800d908:	2800      	cmp	r0, #0
 800d90a:	d07a      	beq.n	800da02 <_strtod_l+0xa8a>
 800d90c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d04a      	beq.n	800d9a8 <_strtod_l+0xa30>
 800d912:	4b95      	ldr	r3, [pc, #596]	; (800db68 <_strtod_l+0xbf0>)
 800d914:	2200      	movs	r2, #0
 800d916:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d91a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800db68 <_strtod_l+0xbf0>
 800d91e:	f04f 0800 	mov.w	r8, #0
 800d922:	4b92      	ldr	r3, [pc, #584]	; (800db6c <_strtod_l+0xbf4>)
 800d924:	403b      	ands	r3, r7
 800d926:	930d      	str	r3, [sp, #52]	; 0x34
 800d928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d92a:	4b91      	ldr	r3, [pc, #580]	; (800db70 <_strtod_l+0xbf8>)
 800d92c:	429a      	cmp	r2, r3
 800d92e:	f040 80b0 	bne.w	800da92 <_strtod_l+0xb1a>
 800d932:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d936:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d93a:	ec4b ab10 	vmov	d0, sl, fp
 800d93e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d942:	f001 ff5f 	bl	800f804 <__ulp>
 800d946:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d94a:	ec53 2b10 	vmov	r2, r3, d0
 800d94e:	f7f2 fe5b 	bl	8000608 <__aeabi_dmul>
 800d952:	4652      	mov	r2, sl
 800d954:	465b      	mov	r3, fp
 800d956:	f7f2 fca1 	bl	800029c <__adddf3>
 800d95a:	460b      	mov	r3, r1
 800d95c:	4983      	ldr	r1, [pc, #524]	; (800db6c <_strtod_l+0xbf4>)
 800d95e:	4a85      	ldr	r2, [pc, #532]	; (800db74 <_strtod_l+0xbfc>)
 800d960:	4019      	ands	r1, r3
 800d962:	4291      	cmp	r1, r2
 800d964:	4682      	mov	sl, r0
 800d966:	d960      	bls.n	800da2a <_strtod_l+0xab2>
 800d968:	ee18 3a90 	vmov	r3, s17
 800d96c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d970:	4293      	cmp	r3, r2
 800d972:	d104      	bne.n	800d97e <_strtod_l+0xa06>
 800d974:	ee18 3a10 	vmov	r3, s16
 800d978:	3301      	adds	r3, #1
 800d97a:	f43f ad45 	beq.w	800d408 <_strtod_l+0x490>
 800d97e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800db80 <_strtod_l+0xc08>
 800d982:	f04f 3aff 	mov.w	sl, #4294967295
 800d986:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d988:	4620      	mov	r0, r4
 800d98a:	f001 fc09 	bl	800f1a0 <_Bfree>
 800d98e:	9905      	ldr	r1, [sp, #20]
 800d990:	4620      	mov	r0, r4
 800d992:	f001 fc05 	bl	800f1a0 <_Bfree>
 800d996:	4631      	mov	r1, r6
 800d998:	4620      	mov	r0, r4
 800d99a:	f001 fc01 	bl	800f1a0 <_Bfree>
 800d99e:	4629      	mov	r1, r5
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f001 fbfd 	bl	800f1a0 <_Bfree>
 800d9a6:	e61a      	b.n	800d5de <_strtod_l+0x666>
 800d9a8:	f1ba 0f00 	cmp.w	sl, #0
 800d9ac:	d11b      	bne.n	800d9e6 <_strtod_l+0xa6e>
 800d9ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9b2:	b9f3      	cbnz	r3, 800d9f2 <_strtod_l+0xa7a>
 800d9b4:	4b6c      	ldr	r3, [pc, #432]	; (800db68 <_strtod_l+0xbf0>)
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	4640      	mov	r0, r8
 800d9ba:	4649      	mov	r1, r9
 800d9bc:	f7f3 f896 	bl	8000aec <__aeabi_dcmplt>
 800d9c0:	b9d0      	cbnz	r0, 800d9f8 <_strtod_l+0xa80>
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	4b6c      	ldr	r3, [pc, #432]	; (800db78 <_strtod_l+0xc00>)
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f7f2 fe1d 	bl	8000608 <__aeabi_dmul>
 800d9ce:	4680      	mov	r8, r0
 800d9d0:	4689      	mov	r9, r1
 800d9d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d9d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d9da:	9315      	str	r3, [sp, #84]	; 0x54
 800d9dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d9e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9e4:	e79d      	b.n	800d922 <_strtod_l+0x9aa>
 800d9e6:	f1ba 0f01 	cmp.w	sl, #1
 800d9ea:	d102      	bne.n	800d9f2 <_strtod_l+0xa7a>
 800d9ec:	2f00      	cmp	r7, #0
 800d9ee:	f43f ad83 	beq.w	800d4f8 <_strtod_l+0x580>
 800d9f2:	4b62      	ldr	r3, [pc, #392]	; (800db7c <_strtod_l+0xc04>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	e78e      	b.n	800d916 <_strtod_l+0x99e>
 800d9f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800db78 <_strtod_l+0xc00>
 800d9fc:	f04f 0800 	mov.w	r8, #0
 800da00:	e7e7      	b.n	800d9d2 <_strtod_l+0xa5a>
 800da02:	4b5d      	ldr	r3, [pc, #372]	; (800db78 <_strtod_l+0xc00>)
 800da04:	4640      	mov	r0, r8
 800da06:	4649      	mov	r1, r9
 800da08:	2200      	movs	r2, #0
 800da0a:	f7f2 fdfd 	bl	8000608 <__aeabi_dmul>
 800da0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da10:	4680      	mov	r8, r0
 800da12:	4689      	mov	r9, r1
 800da14:	b933      	cbnz	r3, 800da24 <_strtod_l+0xaac>
 800da16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da1a:	900e      	str	r0, [sp, #56]	; 0x38
 800da1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800da1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800da22:	e7dd      	b.n	800d9e0 <_strtod_l+0xa68>
 800da24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800da28:	e7f9      	b.n	800da1e <_strtod_l+0xaa6>
 800da2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800da2e:	9b04      	ldr	r3, [sp, #16]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1a8      	bne.n	800d986 <_strtod_l+0xa0e>
 800da34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da3a:	0d1b      	lsrs	r3, r3, #20
 800da3c:	051b      	lsls	r3, r3, #20
 800da3e:	429a      	cmp	r2, r3
 800da40:	d1a1      	bne.n	800d986 <_strtod_l+0xa0e>
 800da42:	4640      	mov	r0, r8
 800da44:	4649      	mov	r1, r9
 800da46:	f7f3 f93f 	bl	8000cc8 <__aeabi_d2lz>
 800da4a:	f7f2 fdaf 	bl	80005ac <__aeabi_l2d>
 800da4e:	4602      	mov	r2, r0
 800da50:	460b      	mov	r3, r1
 800da52:	4640      	mov	r0, r8
 800da54:	4649      	mov	r1, r9
 800da56:	f7f2 fc1f 	bl	8000298 <__aeabi_dsub>
 800da5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da60:	ea43 030a 	orr.w	r3, r3, sl
 800da64:	4313      	orrs	r3, r2
 800da66:	4680      	mov	r8, r0
 800da68:	4689      	mov	r9, r1
 800da6a:	d055      	beq.n	800db18 <_strtod_l+0xba0>
 800da6c:	a336      	add	r3, pc, #216	; (adr r3, 800db48 <_strtod_l+0xbd0>)
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	f7f3 f83b 	bl	8000aec <__aeabi_dcmplt>
 800da76:	2800      	cmp	r0, #0
 800da78:	f47f acd0 	bne.w	800d41c <_strtod_l+0x4a4>
 800da7c:	a334      	add	r3, pc, #208	; (adr r3, 800db50 <_strtod_l+0xbd8>)
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	4640      	mov	r0, r8
 800da84:	4649      	mov	r1, r9
 800da86:	f7f3 f84f 	bl	8000b28 <__aeabi_dcmpgt>
 800da8a:	2800      	cmp	r0, #0
 800da8c:	f43f af7b 	beq.w	800d986 <_strtod_l+0xa0e>
 800da90:	e4c4      	b.n	800d41c <_strtod_l+0x4a4>
 800da92:	9b04      	ldr	r3, [sp, #16]
 800da94:	b333      	cbz	r3, 800dae4 <_strtod_l+0xb6c>
 800da96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800da9c:	d822      	bhi.n	800dae4 <_strtod_l+0xb6c>
 800da9e:	a32e      	add	r3, pc, #184	; (adr r3, 800db58 <_strtod_l+0xbe0>)
 800daa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa4:	4640      	mov	r0, r8
 800daa6:	4649      	mov	r1, r9
 800daa8:	f7f3 f82a 	bl	8000b00 <__aeabi_dcmple>
 800daac:	b1a0      	cbz	r0, 800dad8 <_strtod_l+0xb60>
 800daae:	4649      	mov	r1, r9
 800dab0:	4640      	mov	r0, r8
 800dab2:	f7f3 f881 	bl	8000bb8 <__aeabi_d2uiz>
 800dab6:	2801      	cmp	r0, #1
 800dab8:	bf38      	it	cc
 800daba:	2001      	movcc	r0, #1
 800dabc:	f7f2 fd2a 	bl	8000514 <__aeabi_ui2d>
 800dac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dac2:	4680      	mov	r8, r0
 800dac4:	4689      	mov	r9, r1
 800dac6:	bb23      	cbnz	r3, 800db12 <_strtod_l+0xb9a>
 800dac8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dacc:	9010      	str	r0, [sp, #64]	; 0x40
 800dace:	9311      	str	r3, [sp, #68]	; 0x44
 800dad0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dad4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dadc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dae0:	1a9b      	subs	r3, r3, r2
 800dae2:	9309      	str	r3, [sp, #36]	; 0x24
 800dae4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dae8:	eeb0 0a48 	vmov.f32	s0, s16
 800daec:	eef0 0a68 	vmov.f32	s1, s17
 800daf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800daf4:	f001 fe86 	bl	800f804 <__ulp>
 800daf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dafc:	ec53 2b10 	vmov	r2, r3, d0
 800db00:	f7f2 fd82 	bl	8000608 <__aeabi_dmul>
 800db04:	ec53 2b18 	vmov	r2, r3, d8
 800db08:	f7f2 fbc8 	bl	800029c <__adddf3>
 800db0c:	4682      	mov	sl, r0
 800db0e:	468b      	mov	fp, r1
 800db10:	e78d      	b.n	800da2e <_strtod_l+0xab6>
 800db12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800db16:	e7db      	b.n	800dad0 <_strtod_l+0xb58>
 800db18:	a311      	add	r3, pc, #68	; (adr r3, 800db60 <_strtod_l+0xbe8>)
 800db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1e:	f7f2 ffe5 	bl	8000aec <__aeabi_dcmplt>
 800db22:	e7b2      	b.n	800da8a <_strtod_l+0xb12>
 800db24:	2300      	movs	r3, #0
 800db26:	930a      	str	r3, [sp, #40]	; 0x28
 800db28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800db2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db2c:	6013      	str	r3, [r2, #0]
 800db2e:	f7ff ba6b 	b.w	800d008 <_strtod_l+0x90>
 800db32:	2a65      	cmp	r2, #101	; 0x65
 800db34:	f43f ab5f 	beq.w	800d1f6 <_strtod_l+0x27e>
 800db38:	2a45      	cmp	r2, #69	; 0x45
 800db3a:	f43f ab5c 	beq.w	800d1f6 <_strtod_l+0x27e>
 800db3e:	2301      	movs	r3, #1
 800db40:	f7ff bb94 	b.w	800d26c <_strtod_l+0x2f4>
 800db44:	f3af 8000 	nop.w
 800db48:	94a03595 	.word	0x94a03595
 800db4c:	3fdfffff 	.word	0x3fdfffff
 800db50:	35afe535 	.word	0x35afe535
 800db54:	3fe00000 	.word	0x3fe00000
 800db58:	ffc00000 	.word	0xffc00000
 800db5c:	41dfffff 	.word	0x41dfffff
 800db60:	94a03595 	.word	0x94a03595
 800db64:	3fcfffff 	.word	0x3fcfffff
 800db68:	3ff00000 	.word	0x3ff00000
 800db6c:	7ff00000 	.word	0x7ff00000
 800db70:	7fe00000 	.word	0x7fe00000
 800db74:	7c9fffff 	.word	0x7c9fffff
 800db78:	3fe00000 	.word	0x3fe00000
 800db7c:	bff00000 	.word	0xbff00000
 800db80:	7fefffff 	.word	0x7fefffff

0800db84 <_strtod_r>:
 800db84:	4b01      	ldr	r3, [pc, #4]	; (800db8c <_strtod_r+0x8>)
 800db86:	f7ff b9f7 	b.w	800cf78 <_strtod_l>
 800db8a:	bf00      	nop
 800db8c:	20000334 	.word	0x20000334

0800db90 <_strtol_l.constprop.0>:
 800db90:	2b01      	cmp	r3, #1
 800db92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db96:	d001      	beq.n	800db9c <_strtol_l.constprop.0+0xc>
 800db98:	2b24      	cmp	r3, #36	; 0x24
 800db9a:	d906      	bls.n	800dbaa <_strtol_l.constprop.0+0x1a>
 800db9c:	f7fe fae8 	bl	800c170 <__errno>
 800dba0:	2316      	movs	r3, #22
 800dba2:	6003      	str	r3, [r0, #0]
 800dba4:	2000      	movs	r0, #0
 800dba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dc90 <_strtol_l.constprop.0+0x100>
 800dbae:	460d      	mov	r5, r1
 800dbb0:	462e      	mov	r6, r5
 800dbb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dbba:	f017 0708 	ands.w	r7, r7, #8
 800dbbe:	d1f7      	bne.n	800dbb0 <_strtol_l.constprop.0+0x20>
 800dbc0:	2c2d      	cmp	r4, #45	; 0x2d
 800dbc2:	d132      	bne.n	800dc2a <_strtol_l.constprop.0+0x9a>
 800dbc4:	782c      	ldrb	r4, [r5, #0]
 800dbc6:	2701      	movs	r7, #1
 800dbc8:	1cb5      	adds	r5, r6, #2
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d05b      	beq.n	800dc86 <_strtol_l.constprop.0+0xf6>
 800dbce:	2b10      	cmp	r3, #16
 800dbd0:	d109      	bne.n	800dbe6 <_strtol_l.constprop.0+0x56>
 800dbd2:	2c30      	cmp	r4, #48	; 0x30
 800dbd4:	d107      	bne.n	800dbe6 <_strtol_l.constprop.0+0x56>
 800dbd6:	782c      	ldrb	r4, [r5, #0]
 800dbd8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dbdc:	2c58      	cmp	r4, #88	; 0x58
 800dbde:	d14d      	bne.n	800dc7c <_strtol_l.constprop.0+0xec>
 800dbe0:	786c      	ldrb	r4, [r5, #1]
 800dbe2:	2310      	movs	r3, #16
 800dbe4:	3502      	adds	r5, #2
 800dbe6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dbea:	f108 38ff 	add.w	r8, r8, #4294967295
 800dbee:	f04f 0c00 	mov.w	ip, #0
 800dbf2:	fbb8 f9f3 	udiv	r9, r8, r3
 800dbf6:	4666      	mov	r6, ip
 800dbf8:	fb03 8a19 	mls	sl, r3, r9, r8
 800dbfc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dc00:	f1be 0f09 	cmp.w	lr, #9
 800dc04:	d816      	bhi.n	800dc34 <_strtol_l.constprop.0+0xa4>
 800dc06:	4674      	mov	r4, lr
 800dc08:	42a3      	cmp	r3, r4
 800dc0a:	dd24      	ble.n	800dc56 <_strtol_l.constprop.0+0xc6>
 800dc0c:	f1bc 0f00 	cmp.w	ip, #0
 800dc10:	db1e      	blt.n	800dc50 <_strtol_l.constprop.0+0xc0>
 800dc12:	45b1      	cmp	r9, r6
 800dc14:	d31c      	bcc.n	800dc50 <_strtol_l.constprop.0+0xc0>
 800dc16:	d101      	bne.n	800dc1c <_strtol_l.constprop.0+0x8c>
 800dc18:	45a2      	cmp	sl, r4
 800dc1a:	db19      	blt.n	800dc50 <_strtol_l.constprop.0+0xc0>
 800dc1c:	fb06 4603 	mla	r6, r6, r3, r4
 800dc20:	f04f 0c01 	mov.w	ip, #1
 800dc24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc28:	e7e8      	b.n	800dbfc <_strtol_l.constprop.0+0x6c>
 800dc2a:	2c2b      	cmp	r4, #43	; 0x2b
 800dc2c:	bf04      	itt	eq
 800dc2e:	782c      	ldrbeq	r4, [r5, #0]
 800dc30:	1cb5      	addeq	r5, r6, #2
 800dc32:	e7ca      	b.n	800dbca <_strtol_l.constprop.0+0x3a>
 800dc34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dc38:	f1be 0f19 	cmp.w	lr, #25
 800dc3c:	d801      	bhi.n	800dc42 <_strtol_l.constprop.0+0xb2>
 800dc3e:	3c37      	subs	r4, #55	; 0x37
 800dc40:	e7e2      	b.n	800dc08 <_strtol_l.constprop.0+0x78>
 800dc42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dc46:	f1be 0f19 	cmp.w	lr, #25
 800dc4a:	d804      	bhi.n	800dc56 <_strtol_l.constprop.0+0xc6>
 800dc4c:	3c57      	subs	r4, #87	; 0x57
 800dc4e:	e7db      	b.n	800dc08 <_strtol_l.constprop.0+0x78>
 800dc50:	f04f 3cff 	mov.w	ip, #4294967295
 800dc54:	e7e6      	b.n	800dc24 <_strtol_l.constprop.0+0x94>
 800dc56:	f1bc 0f00 	cmp.w	ip, #0
 800dc5a:	da05      	bge.n	800dc68 <_strtol_l.constprop.0+0xd8>
 800dc5c:	2322      	movs	r3, #34	; 0x22
 800dc5e:	6003      	str	r3, [r0, #0]
 800dc60:	4646      	mov	r6, r8
 800dc62:	b942      	cbnz	r2, 800dc76 <_strtol_l.constprop.0+0xe6>
 800dc64:	4630      	mov	r0, r6
 800dc66:	e79e      	b.n	800dba6 <_strtol_l.constprop.0+0x16>
 800dc68:	b107      	cbz	r7, 800dc6c <_strtol_l.constprop.0+0xdc>
 800dc6a:	4276      	negs	r6, r6
 800dc6c:	2a00      	cmp	r2, #0
 800dc6e:	d0f9      	beq.n	800dc64 <_strtol_l.constprop.0+0xd4>
 800dc70:	f1bc 0f00 	cmp.w	ip, #0
 800dc74:	d000      	beq.n	800dc78 <_strtol_l.constprop.0+0xe8>
 800dc76:	1e69      	subs	r1, r5, #1
 800dc78:	6011      	str	r1, [r2, #0]
 800dc7a:	e7f3      	b.n	800dc64 <_strtol_l.constprop.0+0xd4>
 800dc7c:	2430      	movs	r4, #48	; 0x30
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1b1      	bne.n	800dbe6 <_strtol_l.constprop.0+0x56>
 800dc82:	2308      	movs	r3, #8
 800dc84:	e7af      	b.n	800dbe6 <_strtol_l.constprop.0+0x56>
 800dc86:	2c30      	cmp	r4, #48	; 0x30
 800dc88:	d0a5      	beq.n	800dbd6 <_strtol_l.constprop.0+0x46>
 800dc8a:	230a      	movs	r3, #10
 800dc8c:	e7ab      	b.n	800dbe6 <_strtol_l.constprop.0+0x56>
 800dc8e:	bf00      	nop
 800dc90:	08011e19 	.word	0x08011e19

0800dc94 <_strtol_r>:
 800dc94:	f7ff bf7c 	b.w	800db90 <_strtol_l.constprop.0>

0800dc98 <_vsniprintf_r>:
 800dc98:	b530      	push	{r4, r5, lr}
 800dc9a:	4614      	mov	r4, r2
 800dc9c:	2c00      	cmp	r4, #0
 800dc9e:	b09b      	sub	sp, #108	; 0x6c
 800dca0:	4605      	mov	r5, r0
 800dca2:	461a      	mov	r2, r3
 800dca4:	da05      	bge.n	800dcb2 <_vsniprintf_r+0x1a>
 800dca6:	238b      	movs	r3, #139	; 0x8b
 800dca8:	6003      	str	r3, [r0, #0]
 800dcaa:	f04f 30ff 	mov.w	r0, #4294967295
 800dcae:	b01b      	add	sp, #108	; 0x6c
 800dcb0:	bd30      	pop	{r4, r5, pc}
 800dcb2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dcb6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dcba:	bf14      	ite	ne
 800dcbc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dcc0:	4623      	moveq	r3, r4
 800dcc2:	9302      	str	r3, [sp, #8]
 800dcc4:	9305      	str	r3, [sp, #20]
 800dcc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcca:	9100      	str	r1, [sp, #0]
 800dccc:	9104      	str	r1, [sp, #16]
 800dcce:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dcd2:	4669      	mov	r1, sp
 800dcd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dcd6:	f002 f837 	bl	800fd48 <_svfiprintf_r>
 800dcda:	1c43      	adds	r3, r0, #1
 800dcdc:	bfbc      	itt	lt
 800dcde:	238b      	movlt	r3, #139	; 0x8b
 800dce0:	602b      	strlt	r3, [r5, #0]
 800dce2:	2c00      	cmp	r4, #0
 800dce4:	d0e3      	beq.n	800dcae <_vsniprintf_r+0x16>
 800dce6:	9b00      	ldr	r3, [sp, #0]
 800dce8:	2200      	movs	r2, #0
 800dcea:	701a      	strb	r2, [r3, #0]
 800dcec:	e7df      	b.n	800dcae <_vsniprintf_r+0x16>
	...

0800dcf0 <vsniprintf>:
 800dcf0:	b507      	push	{r0, r1, r2, lr}
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	460a      	mov	r2, r1
 800dcf8:	4601      	mov	r1, r0
 800dcfa:	4803      	ldr	r0, [pc, #12]	; (800dd08 <vsniprintf+0x18>)
 800dcfc:	6800      	ldr	r0, [r0, #0]
 800dcfe:	f7ff ffcb 	bl	800dc98 <_vsniprintf_r>
 800dd02:	b003      	add	sp, #12
 800dd04:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd08:	200002cc 	.word	0x200002cc

0800dd0c <quorem>:
 800dd0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd10:	6903      	ldr	r3, [r0, #16]
 800dd12:	690c      	ldr	r4, [r1, #16]
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	4607      	mov	r7, r0
 800dd18:	f2c0 8081 	blt.w	800de1e <quorem+0x112>
 800dd1c:	3c01      	subs	r4, #1
 800dd1e:	f101 0814 	add.w	r8, r1, #20
 800dd22:	f100 0514 	add.w	r5, r0, #20
 800dd26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd2a:	9301      	str	r3, [sp, #4]
 800dd2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd34:	3301      	adds	r3, #1
 800dd36:	429a      	cmp	r2, r3
 800dd38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dd3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd40:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd44:	d331      	bcc.n	800ddaa <quorem+0x9e>
 800dd46:	f04f 0e00 	mov.w	lr, #0
 800dd4a:	4640      	mov	r0, r8
 800dd4c:	46ac      	mov	ip, r5
 800dd4e:	46f2      	mov	sl, lr
 800dd50:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd54:	b293      	uxth	r3, r2
 800dd56:	fb06 e303 	mla	r3, r6, r3, lr
 800dd5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	ebaa 0303 	sub.w	r3, sl, r3
 800dd64:	f8dc a000 	ldr.w	sl, [ip]
 800dd68:	0c12      	lsrs	r2, r2, #16
 800dd6a:	fa13 f38a 	uxtah	r3, r3, sl
 800dd6e:	fb06 e202 	mla	r2, r6, r2, lr
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	9b00      	ldr	r3, [sp, #0]
 800dd76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd7a:	b292      	uxth	r2, r2
 800dd7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dd80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd84:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd88:	4581      	cmp	r9, r0
 800dd8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd8e:	f84c 3b04 	str.w	r3, [ip], #4
 800dd92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd96:	d2db      	bcs.n	800dd50 <quorem+0x44>
 800dd98:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd9c:	b92b      	cbnz	r3, 800ddaa <quorem+0x9e>
 800dd9e:	9b01      	ldr	r3, [sp, #4]
 800dda0:	3b04      	subs	r3, #4
 800dda2:	429d      	cmp	r5, r3
 800dda4:	461a      	mov	r2, r3
 800dda6:	d32e      	bcc.n	800de06 <quorem+0xfa>
 800dda8:	613c      	str	r4, [r7, #16]
 800ddaa:	4638      	mov	r0, r7
 800ddac:	f001 fc84 	bl	800f6b8 <__mcmp>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	db24      	blt.n	800ddfe <quorem+0xf2>
 800ddb4:	3601      	adds	r6, #1
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	f04f 0c00 	mov.w	ip, #0
 800ddbc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ddc0:	f8d0 e000 	ldr.w	lr, [r0]
 800ddc4:	b293      	uxth	r3, r2
 800ddc6:	ebac 0303 	sub.w	r3, ip, r3
 800ddca:	0c12      	lsrs	r2, r2, #16
 800ddcc:	fa13 f38e 	uxtah	r3, r3, lr
 800ddd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ddd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddde:	45c1      	cmp	r9, r8
 800dde0:	f840 3b04 	str.w	r3, [r0], #4
 800dde4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dde8:	d2e8      	bcs.n	800ddbc <quorem+0xb0>
 800ddea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddf2:	b922      	cbnz	r2, 800ddfe <quorem+0xf2>
 800ddf4:	3b04      	subs	r3, #4
 800ddf6:	429d      	cmp	r5, r3
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	d30a      	bcc.n	800de12 <quorem+0x106>
 800ddfc:	613c      	str	r4, [r7, #16]
 800ddfe:	4630      	mov	r0, r6
 800de00:	b003      	add	sp, #12
 800de02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de06:	6812      	ldr	r2, [r2, #0]
 800de08:	3b04      	subs	r3, #4
 800de0a:	2a00      	cmp	r2, #0
 800de0c:	d1cc      	bne.n	800dda8 <quorem+0x9c>
 800de0e:	3c01      	subs	r4, #1
 800de10:	e7c7      	b.n	800dda2 <quorem+0x96>
 800de12:	6812      	ldr	r2, [r2, #0]
 800de14:	3b04      	subs	r3, #4
 800de16:	2a00      	cmp	r2, #0
 800de18:	d1f0      	bne.n	800ddfc <quorem+0xf0>
 800de1a:	3c01      	subs	r4, #1
 800de1c:	e7eb      	b.n	800ddf6 <quorem+0xea>
 800de1e:	2000      	movs	r0, #0
 800de20:	e7ee      	b.n	800de00 <quorem+0xf4>
 800de22:	0000      	movs	r0, r0
 800de24:	0000      	movs	r0, r0
	...

0800de28 <_dtoa_r>:
 800de28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de2c:	ed2d 8b04 	vpush	{d8-d9}
 800de30:	ec57 6b10 	vmov	r6, r7, d0
 800de34:	b093      	sub	sp, #76	; 0x4c
 800de36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de3c:	9106      	str	r1, [sp, #24]
 800de3e:	ee10 aa10 	vmov	sl, s0
 800de42:	4604      	mov	r4, r0
 800de44:	9209      	str	r2, [sp, #36]	; 0x24
 800de46:	930c      	str	r3, [sp, #48]	; 0x30
 800de48:	46bb      	mov	fp, r7
 800de4a:	b975      	cbnz	r5, 800de6a <_dtoa_r+0x42>
 800de4c:	2010      	movs	r0, #16
 800de4e:	f001 f94d 	bl	800f0ec <malloc>
 800de52:	4602      	mov	r2, r0
 800de54:	6260      	str	r0, [r4, #36]	; 0x24
 800de56:	b920      	cbnz	r0, 800de62 <_dtoa_r+0x3a>
 800de58:	4ba7      	ldr	r3, [pc, #668]	; (800e0f8 <_dtoa_r+0x2d0>)
 800de5a:	21ea      	movs	r1, #234	; 0xea
 800de5c:	48a7      	ldr	r0, [pc, #668]	; (800e0fc <_dtoa_r+0x2d4>)
 800de5e:	f002 f8ad 	bl	800ffbc <__assert_func>
 800de62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de66:	6005      	str	r5, [r0, #0]
 800de68:	60c5      	str	r5, [r0, #12]
 800de6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de6c:	6819      	ldr	r1, [r3, #0]
 800de6e:	b151      	cbz	r1, 800de86 <_dtoa_r+0x5e>
 800de70:	685a      	ldr	r2, [r3, #4]
 800de72:	604a      	str	r2, [r1, #4]
 800de74:	2301      	movs	r3, #1
 800de76:	4093      	lsls	r3, r2
 800de78:	608b      	str	r3, [r1, #8]
 800de7a:	4620      	mov	r0, r4
 800de7c:	f001 f990 	bl	800f1a0 <_Bfree>
 800de80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de82:	2200      	movs	r2, #0
 800de84:	601a      	str	r2, [r3, #0]
 800de86:	1e3b      	subs	r3, r7, #0
 800de88:	bfaa      	itet	ge
 800de8a:	2300      	movge	r3, #0
 800de8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800de90:	f8c8 3000 	strge.w	r3, [r8]
 800de94:	4b9a      	ldr	r3, [pc, #616]	; (800e100 <_dtoa_r+0x2d8>)
 800de96:	bfbc      	itt	lt
 800de98:	2201      	movlt	r2, #1
 800de9a:	f8c8 2000 	strlt.w	r2, [r8]
 800de9e:	ea33 030b 	bics.w	r3, r3, fp
 800dea2:	d11b      	bne.n	800dedc <_dtoa_r+0xb4>
 800dea4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dea6:	f242 730f 	movw	r3, #9999	; 0x270f
 800deaa:	6013      	str	r3, [r2, #0]
 800deac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800deb0:	4333      	orrs	r3, r6
 800deb2:	f000 8592 	beq.w	800e9da <_dtoa_r+0xbb2>
 800deb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800deb8:	b963      	cbnz	r3, 800ded4 <_dtoa_r+0xac>
 800deba:	4b92      	ldr	r3, [pc, #584]	; (800e104 <_dtoa_r+0x2dc>)
 800debc:	e022      	b.n	800df04 <_dtoa_r+0xdc>
 800debe:	4b92      	ldr	r3, [pc, #584]	; (800e108 <_dtoa_r+0x2e0>)
 800dec0:	9301      	str	r3, [sp, #4]
 800dec2:	3308      	adds	r3, #8
 800dec4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dec6:	6013      	str	r3, [r2, #0]
 800dec8:	9801      	ldr	r0, [sp, #4]
 800deca:	b013      	add	sp, #76	; 0x4c
 800decc:	ecbd 8b04 	vpop	{d8-d9}
 800ded0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded4:	4b8b      	ldr	r3, [pc, #556]	; (800e104 <_dtoa_r+0x2dc>)
 800ded6:	9301      	str	r3, [sp, #4]
 800ded8:	3303      	adds	r3, #3
 800deda:	e7f3      	b.n	800dec4 <_dtoa_r+0x9c>
 800dedc:	2200      	movs	r2, #0
 800dede:	2300      	movs	r3, #0
 800dee0:	4650      	mov	r0, sl
 800dee2:	4659      	mov	r1, fp
 800dee4:	f7f2 fdf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800dee8:	ec4b ab19 	vmov	d9, sl, fp
 800deec:	4680      	mov	r8, r0
 800deee:	b158      	cbz	r0, 800df08 <_dtoa_r+0xe0>
 800def0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800def2:	2301      	movs	r3, #1
 800def4:	6013      	str	r3, [r2, #0]
 800def6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800def8:	2b00      	cmp	r3, #0
 800defa:	f000 856b 	beq.w	800e9d4 <_dtoa_r+0xbac>
 800defe:	4883      	ldr	r0, [pc, #524]	; (800e10c <_dtoa_r+0x2e4>)
 800df00:	6018      	str	r0, [r3, #0]
 800df02:	1e43      	subs	r3, r0, #1
 800df04:	9301      	str	r3, [sp, #4]
 800df06:	e7df      	b.n	800dec8 <_dtoa_r+0xa0>
 800df08:	ec4b ab10 	vmov	d0, sl, fp
 800df0c:	aa10      	add	r2, sp, #64	; 0x40
 800df0e:	a911      	add	r1, sp, #68	; 0x44
 800df10:	4620      	mov	r0, r4
 800df12:	f001 fcf3 	bl	800f8fc <__d2b>
 800df16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800df1a:	ee08 0a10 	vmov	s16, r0
 800df1e:	2d00      	cmp	r5, #0
 800df20:	f000 8084 	beq.w	800e02c <_dtoa_r+0x204>
 800df24:	ee19 3a90 	vmov	r3, s19
 800df28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800df30:	4656      	mov	r6, sl
 800df32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800df36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800df3e:	4b74      	ldr	r3, [pc, #464]	; (800e110 <_dtoa_r+0x2e8>)
 800df40:	2200      	movs	r2, #0
 800df42:	4630      	mov	r0, r6
 800df44:	4639      	mov	r1, r7
 800df46:	f7f2 f9a7 	bl	8000298 <__aeabi_dsub>
 800df4a:	a365      	add	r3, pc, #404	; (adr r3, 800e0e0 <_dtoa_r+0x2b8>)
 800df4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df50:	f7f2 fb5a 	bl	8000608 <__aeabi_dmul>
 800df54:	a364      	add	r3, pc, #400	; (adr r3, 800e0e8 <_dtoa_r+0x2c0>)
 800df56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5a:	f7f2 f99f 	bl	800029c <__adddf3>
 800df5e:	4606      	mov	r6, r0
 800df60:	4628      	mov	r0, r5
 800df62:	460f      	mov	r7, r1
 800df64:	f7f2 fae6 	bl	8000534 <__aeabi_i2d>
 800df68:	a361      	add	r3, pc, #388	; (adr r3, 800e0f0 <_dtoa_r+0x2c8>)
 800df6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6e:	f7f2 fb4b 	bl	8000608 <__aeabi_dmul>
 800df72:	4602      	mov	r2, r0
 800df74:	460b      	mov	r3, r1
 800df76:	4630      	mov	r0, r6
 800df78:	4639      	mov	r1, r7
 800df7a:	f7f2 f98f 	bl	800029c <__adddf3>
 800df7e:	4606      	mov	r6, r0
 800df80:	460f      	mov	r7, r1
 800df82:	f7f2 fdf1 	bl	8000b68 <__aeabi_d2iz>
 800df86:	2200      	movs	r2, #0
 800df88:	9000      	str	r0, [sp, #0]
 800df8a:	2300      	movs	r3, #0
 800df8c:	4630      	mov	r0, r6
 800df8e:	4639      	mov	r1, r7
 800df90:	f7f2 fdac 	bl	8000aec <__aeabi_dcmplt>
 800df94:	b150      	cbz	r0, 800dfac <_dtoa_r+0x184>
 800df96:	9800      	ldr	r0, [sp, #0]
 800df98:	f7f2 facc 	bl	8000534 <__aeabi_i2d>
 800df9c:	4632      	mov	r2, r6
 800df9e:	463b      	mov	r3, r7
 800dfa0:	f7f2 fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800dfa4:	b910      	cbnz	r0, 800dfac <_dtoa_r+0x184>
 800dfa6:	9b00      	ldr	r3, [sp, #0]
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	9b00      	ldr	r3, [sp, #0]
 800dfae:	2b16      	cmp	r3, #22
 800dfb0:	d85a      	bhi.n	800e068 <_dtoa_r+0x240>
 800dfb2:	9a00      	ldr	r2, [sp, #0]
 800dfb4:	4b57      	ldr	r3, [pc, #348]	; (800e114 <_dtoa_r+0x2ec>)
 800dfb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbe:	ec51 0b19 	vmov	r0, r1, d9
 800dfc2:	f7f2 fd93 	bl	8000aec <__aeabi_dcmplt>
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d050      	beq.n	800e06c <_dtoa_r+0x244>
 800dfca:	9b00      	ldr	r3, [sp, #0]
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfd6:	1b5d      	subs	r5, r3, r5
 800dfd8:	1e6b      	subs	r3, r5, #1
 800dfda:	9305      	str	r3, [sp, #20]
 800dfdc:	bf45      	ittet	mi
 800dfde:	f1c5 0301 	rsbmi	r3, r5, #1
 800dfe2:	9304      	strmi	r3, [sp, #16]
 800dfe4:	2300      	movpl	r3, #0
 800dfe6:	2300      	movmi	r3, #0
 800dfe8:	bf4c      	ite	mi
 800dfea:	9305      	strmi	r3, [sp, #20]
 800dfec:	9304      	strpl	r3, [sp, #16]
 800dfee:	9b00      	ldr	r3, [sp, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	db3d      	blt.n	800e070 <_dtoa_r+0x248>
 800dff4:	9b05      	ldr	r3, [sp, #20]
 800dff6:	9a00      	ldr	r2, [sp, #0]
 800dff8:	920a      	str	r2, [sp, #40]	; 0x28
 800dffa:	4413      	add	r3, r2
 800dffc:	9305      	str	r3, [sp, #20]
 800dffe:	2300      	movs	r3, #0
 800e000:	9307      	str	r3, [sp, #28]
 800e002:	9b06      	ldr	r3, [sp, #24]
 800e004:	2b09      	cmp	r3, #9
 800e006:	f200 8089 	bhi.w	800e11c <_dtoa_r+0x2f4>
 800e00a:	2b05      	cmp	r3, #5
 800e00c:	bfc4      	itt	gt
 800e00e:	3b04      	subgt	r3, #4
 800e010:	9306      	strgt	r3, [sp, #24]
 800e012:	9b06      	ldr	r3, [sp, #24]
 800e014:	f1a3 0302 	sub.w	r3, r3, #2
 800e018:	bfcc      	ite	gt
 800e01a:	2500      	movgt	r5, #0
 800e01c:	2501      	movle	r5, #1
 800e01e:	2b03      	cmp	r3, #3
 800e020:	f200 8087 	bhi.w	800e132 <_dtoa_r+0x30a>
 800e024:	e8df f003 	tbb	[pc, r3]
 800e028:	59383a2d 	.word	0x59383a2d
 800e02c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e030:	441d      	add	r5, r3
 800e032:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e036:	2b20      	cmp	r3, #32
 800e038:	bfc1      	itttt	gt
 800e03a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e03e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e042:	fa0b f303 	lslgt.w	r3, fp, r3
 800e046:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e04a:	bfda      	itte	le
 800e04c:	f1c3 0320 	rsble	r3, r3, #32
 800e050:	fa06 f003 	lslle.w	r0, r6, r3
 800e054:	4318      	orrgt	r0, r3
 800e056:	f7f2 fa5d 	bl	8000514 <__aeabi_ui2d>
 800e05a:	2301      	movs	r3, #1
 800e05c:	4606      	mov	r6, r0
 800e05e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e062:	3d01      	subs	r5, #1
 800e064:	930e      	str	r3, [sp, #56]	; 0x38
 800e066:	e76a      	b.n	800df3e <_dtoa_r+0x116>
 800e068:	2301      	movs	r3, #1
 800e06a:	e7b2      	b.n	800dfd2 <_dtoa_r+0x1aa>
 800e06c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e06e:	e7b1      	b.n	800dfd4 <_dtoa_r+0x1ac>
 800e070:	9b04      	ldr	r3, [sp, #16]
 800e072:	9a00      	ldr	r2, [sp, #0]
 800e074:	1a9b      	subs	r3, r3, r2
 800e076:	9304      	str	r3, [sp, #16]
 800e078:	4253      	negs	r3, r2
 800e07a:	9307      	str	r3, [sp, #28]
 800e07c:	2300      	movs	r3, #0
 800e07e:	930a      	str	r3, [sp, #40]	; 0x28
 800e080:	e7bf      	b.n	800e002 <_dtoa_r+0x1da>
 800e082:	2300      	movs	r3, #0
 800e084:	9308      	str	r3, [sp, #32]
 800e086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e088:	2b00      	cmp	r3, #0
 800e08a:	dc55      	bgt.n	800e138 <_dtoa_r+0x310>
 800e08c:	2301      	movs	r3, #1
 800e08e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e092:	461a      	mov	r2, r3
 800e094:	9209      	str	r2, [sp, #36]	; 0x24
 800e096:	e00c      	b.n	800e0b2 <_dtoa_r+0x28a>
 800e098:	2301      	movs	r3, #1
 800e09a:	e7f3      	b.n	800e084 <_dtoa_r+0x25c>
 800e09c:	2300      	movs	r3, #0
 800e09e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0a0:	9308      	str	r3, [sp, #32]
 800e0a2:	9b00      	ldr	r3, [sp, #0]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	9302      	str	r3, [sp, #8]
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	9303      	str	r3, [sp, #12]
 800e0ae:	bfb8      	it	lt
 800e0b0:	2301      	movlt	r3, #1
 800e0b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	6042      	str	r2, [r0, #4]
 800e0b8:	2204      	movs	r2, #4
 800e0ba:	f102 0614 	add.w	r6, r2, #20
 800e0be:	429e      	cmp	r6, r3
 800e0c0:	6841      	ldr	r1, [r0, #4]
 800e0c2:	d93d      	bls.n	800e140 <_dtoa_r+0x318>
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f001 f82b 	bl	800f120 <_Balloc>
 800e0ca:	9001      	str	r0, [sp, #4]
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d13b      	bne.n	800e148 <_dtoa_r+0x320>
 800e0d0:	4b11      	ldr	r3, [pc, #68]	; (800e118 <_dtoa_r+0x2f0>)
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e0d8:	e6c0      	b.n	800de5c <_dtoa_r+0x34>
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e7df      	b.n	800e09e <_dtoa_r+0x276>
 800e0de:	bf00      	nop
 800e0e0:	636f4361 	.word	0x636f4361
 800e0e4:	3fd287a7 	.word	0x3fd287a7
 800e0e8:	8b60c8b3 	.word	0x8b60c8b3
 800e0ec:	3fc68a28 	.word	0x3fc68a28
 800e0f0:	509f79fb 	.word	0x509f79fb
 800e0f4:	3fd34413 	.word	0x3fd34413
 800e0f8:	08011f26 	.word	0x08011f26
 800e0fc:	08011f3d 	.word	0x08011f3d
 800e100:	7ff00000 	.word	0x7ff00000
 800e104:	08011f22 	.word	0x08011f22
 800e108:	08011f19 	.word	0x08011f19
 800e10c:	08011d99 	.word	0x08011d99
 800e110:	3ff80000 	.word	0x3ff80000
 800e114:	080120a8 	.word	0x080120a8
 800e118:	08011f98 	.word	0x08011f98
 800e11c:	2501      	movs	r5, #1
 800e11e:	2300      	movs	r3, #0
 800e120:	9306      	str	r3, [sp, #24]
 800e122:	9508      	str	r5, [sp, #32]
 800e124:	f04f 33ff 	mov.w	r3, #4294967295
 800e128:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e12c:	2200      	movs	r2, #0
 800e12e:	2312      	movs	r3, #18
 800e130:	e7b0      	b.n	800e094 <_dtoa_r+0x26c>
 800e132:	2301      	movs	r3, #1
 800e134:	9308      	str	r3, [sp, #32]
 800e136:	e7f5      	b.n	800e124 <_dtoa_r+0x2fc>
 800e138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e13a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e13e:	e7b8      	b.n	800e0b2 <_dtoa_r+0x28a>
 800e140:	3101      	adds	r1, #1
 800e142:	6041      	str	r1, [r0, #4]
 800e144:	0052      	lsls	r2, r2, #1
 800e146:	e7b8      	b.n	800e0ba <_dtoa_r+0x292>
 800e148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e14a:	9a01      	ldr	r2, [sp, #4]
 800e14c:	601a      	str	r2, [r3, #0]
 800e14e:	9b03      	ldr	r3, [sp, #12]
 800e150:	2b0e      	cmp	r3, #14
 800e152:	f200 809d 	bhi.w	800e290 <_dtoa_r+0x468>
 800e156:	2d00      	cmp	r5, #0
 800e158:	f000 809a 	beq.w	800e290 <_dtoa_r+0x468>
 800e15c:	9b00      	ldr	r3, [sp, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	dd32      	ble.n	800e1c8 <_dtoa_r+0x3a0>
 800e162:	4ab7      	ldr	r2, [pc, #732]	; (800e440 <_dtoa_r+0x618>)
 800e164:	f003 030f 	and.w	r3, r3, #15
 800e168:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e16c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e170:	9b00      	ldr	r3, [sp, #0]
 800e172:	05d8      	lsls	r0, r3, #23
 800e174:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e178:	d516      	bpl.n	800e1a8 <_dtoa_r+0x380>
 800e17a:	4bb2      	ldr	r3, [pc, #712]	; (800e444 <_dtoa_r+0x61c>)
 800e17c:	ec51 0b19 	vmov	r0, r1, d9
 800e180:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e184:	f7f2 fb6a 	bl	800085c <__aeabi_ddiv>
 800e188:	f007 070f 	and.w	r7, r7, #15
 800e18c:	4682      	mov	sl, r0
 800e18e:	468b      	mov	fp, r1
 800e190:	2503      	movs	r5, #3
 800e192:	4eac      	ldr	r6, [pc, #688]	; (800e444 <_dtoa_r+0x61c>)
 800e194:	b957      	cbnz	r7, 800e1ac <_dtoa_r+0x384>
 800e196:	4642      	mov	r2, r8
 800e198:	464b      	mov	r3, r9
 800e19a:	4650      	mov	r0, sl
 800e19c:	4659      	mov	r1, fp
 800e19e:	f7f2 fb5d 	bl	800085c <__aeabi_ddiv>
 800e1a2:	4682      	mov	sl, r0
 800e1a4:	468b      	mov	fp, r1
 800e1a6:	e028      	b.n	800e1fa <_dtoa_r+0x3d2>
 800e1a8:	2502      	movs	r5, #2
 800e1aa:	e7f2      	b.n	800e192 <_dtoa_r+0x36a>
 800e1ac:	07f9      	lsls	r1, r7, #31
 800e1ae:	d508      	bpl.n	800e1c2 <_dtoa_r+0x39a>
 800e1b0:	4640      	mov	r0, r8
 800e1b2:	4649      	mov	r1, r9
 800e1b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e1b8:	f7f2 fa26 	bl	8000608 <__aeabi_dmul>
 800e1bc:	3501      	adds	r5, #1
 800e1be:	4680      	mov	r8, r0
 800e1c0:	4689      	mov	r9, r1
 800e1c2:	107f      	asrs	r7, r7, #1
 800e1c4:	3608      	adds	r6, #8
 800e1c6:	e7e5      	b.n	800e194 <_dtoa_r+0x36c>
 800e1c8:	f000 809b 	beq.w	800e302 <_dtoa_r+0x4da>
 800e1cc:	9b00      	ldr	r3, [sp, #0]
 800e1ce:	4f9d      	ldr	r7, [pc, #628]	; (800e444 <_dtoa_r+0x61c>)
 800e1d0:	425e      	negs	r6, r3
 800e1d2:	4b9b      	ldr	r3, [pc, #620]	; (800e440 <_dtoa_r+0x618>)
 800e1d4:	f006 020f 	and.w	r2, r6, #15
 800e1d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e0:	ec51 0b19 	vmov	r0, r1, d9
 800e1e4:	f7f2 fa10 	bl	8000608 <__aeabi_dmul>
 800e1e8:	1136      	asrs	r6, r6, #4
 800e1ea:	4682      	mov	sl, r0
 800e1ec:	468b      	mov	fp, r1
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	2502      	movs	r5, #2
 800e1f2:	2e00      	cmp	r6, #0
 800e1f4:	d17a      	bne.n	800e2ec <_dtoa_r+0x4c4>
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1d3      	bne.n	800e1a2 <_dtoa_r+0x37a>
 800e1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f000 8082 	beq.w	800e306 <_dtoa_r+0x4de>
 800e202:	4b91      	ldr	r3, [pc, #580]	; (800e448 <_dtoa_r+0x620>)
 800e204:	2200      	movs	r2, #0
 800e206:	4650      	mov	r0, sl
 800e208:	4659      	mov	r1, fp
 800e20a:	f7f2 fc6f 	bl	8000aec <__aeabi_dcmplt>
 800e20e:	2800      	cmp	r0, #0
 800e210:	d079      	beq.n	800e306 <_dtoa_r+0x4de>
 800e212:	9b03      	ldr	r3, [sp, #12]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d076      	beq.n	800e306 <_dtoa_r+0x4de>
 800e218:	9b02      	ldr	r3, [sp, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	dd36      	ble.n	800e28c <_dtoa_r+0x464>
 800e21e:	9b00      	ldr	r3, [sp, #0]
 800e220:	4650      	mov	r0, sl
 800e222:	4659      	mov	r1, fp
 800e224:	1e5f      	subs	r7, r3, #1
 800e226:	2200      	movs	r2, #0
 800e228:	4b88      	ldr	r3, [pc, #544]	; (800e44c <_dtoa_r+0x624>)
 800e22a:	f7f2 f9ed 	bl	8000608 <__aeabi_dmul>
 800e22e:	9e02      	ldr	r6, [sp, #8]
 800e230:	4682      	mov	sl, r0
 800e232:	468b      	mov	fp, r1
 800e234:	3501      	adds	r5, #1
 800e236:	4628      	mov	r0, r5
 800e238:	f7f2 f97c 	bl	8000534 <__aeabi_i2d>
 800e23c:	4652      	mov	r2, sl
 800e23e:	465b      	mov	r3, fp
 800e240:	f7f2 f9e2 	bl	8000608 <__aeabi_dmul>
 800e244:	4b82      	ldr	r3, [pc, #520]	; (800e450 <_dtoa_r+0x628>)
 800e246:	2200      	movs	r2, #0
 800e248:	f7f2 f828 	bl	800029c <__adddf3>
 800e24c:	46d0      	mov	r8, sl
 800e24e:	46d9      	mov	r9, fp
 800e250:	4682      	mov	sl, r0
 800e252:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e256:	2e00      	cmp	r6, #0
 800e258:	d158      	bne.n	800e30c <_dtoa_r+0x4e4>
 800e25a:	4b7e      	ldr	r3, [pc, #504]	; (800e454 <_dtoa_r+0x62c>)
 800e25c:	2200      	movs	r2, #0
 800e25e:	4640      	mov	r0, r8
 800e260:	4649      	mov	r1, r9
 800e262:	f7f2 f819 	bl	8000298 <__aeabi_dsub>
 800e266:	4652      	mov	r2, sl
 800e268:	465b      	mov	r3, fp
 800e26a:	4680      	mov	r8, r0
 800e26c:	4689      	mov	r9, r1
 800e26e:	f7f2 fc5b 	bl	8000b28 <__aeabi_dcmpgt>
 800e272:	2800      	cmp	r0, #0
 800e274:	f040 8295 	bne.w	800e7a2 <_dtoa_r+0x97a>
 800e278:	4652      	mov	r2, sl
 800e27a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e27e:	4640      	mov	r0, r8
 800e280:	4649      	mov	r1, r9
 800e282:	f7f2 fc33 	bl	8000aec <__aeabi_dcmplt>
 800e286:	2800      	cmp	r0, #0
 800e288:	f040 8289 	bne.w	800e79e <_dtoa_r+0x976>
 800e28c:	ec5b ab19 	vmov	sl, fp, d9
 800e290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e292:	2b00      	cmp	r3, #0
 800e294:	f2c0 8148 	blt.w	800e528 <_dtoa_r+0x700>
 800e298:	9a00      	ldr	r2, [sp, #0]
 800e29a:	2a0e      	cmp	r2, #14
 800e29c:	f300 8144 	bgt.w	800e528 <_dtoa_r+0x700>
 800e2a0:	4b67      	ldr	r3, [pc, #412]	; (800e440 <_dtoa_r+0x618>)
 800e2a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f280 80d5 	bge.w	800e45c <_dtoa_r+0x634>
 800e2b2:	9b03      	ldr	r3, [sp, #12]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f300 80d1 	bgt.w	800e45c <_dtoa_r+0x634>
 800e2ba:	f040 826f 	bne.w	800e79c <_dtoa_r+0x974>
 800e2be:	4b65      	ldr	r3, [pc, #404]	; (800e454 <_dtoa_r+0x62c>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	4640      	mov	r0, r8
 800e2c4:	4649      	mov	r1, r9
 800e2c6:	f7f2 f99f 	bl	8000608 <__aeabi_dmul>
 800e2ca:	4652      	mov	r2, sl
 800e2cc:	465b      	mov	r3, fp
 800e2ce:	f7f2 fc21 	bl	8000b14 <__aeabi_dcmpge>
 800e2d2:	9e03      	ldr	r6, [sp, #12]
 800e2d4:	4637      	mov	r7, r6
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	f040 8245 	bne.w	800e766 <_dtoa_r+0x93e>
 800e2dc:	9d01      	ldr	r5, [sp, #4]
 800e2de:	2331      	movs	r3, #49	; 0x31
 800e2e0:	f805 3b01 	strb.w	r3, [r5], #1
 800e2e4:	9b00      	ldr	r3, [sp, #0]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	e240      	b.n	800e76e <_dtoa_r+0x946>
 800e2ec:	07f2      	lsls	r2, r6, #31
 800e2ee:	d505      	bpl.n	800e2fc <_dtoa_r+0x4d4>
 800e2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2f4:	f7f2 f988 	bl	8000608 <__aeabi_dmul>
 800e2f8:	3501      	adds	r5, #1
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	1076      	asrs	r6, r6, #1
 800e2fe:	3708      	adds	r7, #8
 800e300:	e777      	b.n	800e1f2 <_dtoa_r+0x3ca>
 800e302:	2502      	movs	r5, #2
 800e304:	e779      	b.n	800e1fa <_dtoa_r+0x3d2>
 800e306:	9f00      	ldr	r7, [sp, #0]
 800e308:	9e03      	ldr	r6, [sp, #12]
 800e30a:	e794      	b.n	800e236 <_dtoa_r+0x40e>
 800e30c:	9901      	ldr	r1, [sp, #4]
 800e30e:	4b4c      	ldr	r3, [pc, #304]	; (800e440 <_dtoa_r+0x618>)
 800e310:	4431      	add	r1, r6
 800e312:	910d      	str	r1, [sp, #52]	; 0x34
 800e314:	9908      	ldr	r1, [sp, #32]
 800e316:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e31a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e31e:	2900      	cmp	r1, #0
 800e320:	d043      	beq.n	800e3aa <_dtoa_r+0x582>
 800e322:	494d      	ldr	r1, [pc, #308]	; (800e458 <_dtoa_r+0x630>)
 800e324:	2000      	movs	r0, #0
 800e326:	f7f2 fa99 	bl	800085c <__aeabi_ddiv>
 800e32a:	4652      	mov	r2, sl
 800e32c:	465b      	mov	r3, fp
 800e32e:	f7f1 ffb3 	bl	8000298 <__aeabi_dsub>
 800e332:	9d01      	ldr	r5, [sp, #4]
 800e334:	4682      	mov	sl, r0
 800e336:	468b      	mov	fp, r1
 800e338:	4649      	mov	r1, r9
 800e33a:	4640      	mov	r0, r8
 800e33c:	f7f2 fc14 	bl	8000b68 <__aeabi_d2iz>
 800e340:	4606      	mov	r6, r0
 800e342:	f7f2 f8f7 	bl	8000534 <__aeabi_i2d>
 800e346:	4602      	mov	r2, r0
 800e348:	460b      	mov	r3, r1
 800e34a:	4640      	mov	r0, r8
 800e34c:	4649      	mov	r1, r9
 800e34e:	f7f1 ffa3 	bl	8000298 <__aeabi_dsub>
 800e352:	3630      	adds	r6, #48	; 0x30
 800e354:	f805 6b01 	strb.w	r6, [r5], #1
 800e358:	4652      	mov	r2, sl
 800e35a:	465b      	mov	r3, fp
 800e35c:	4680      	mov	r8, r0
 800e35e:	4689      	mov	r9, r1
 800e360:	f7f2 fbc4 	bl	8000aec <__aeabi_dcmplt>
 800e364:	2800      	cmp	r0, #0
 800e366:	d163      	bne.n	800e430 <_dtoa_r+0x608>
 800e368:	4642      	mov	r2, r8
 800e36a:	464b      	mov	r3, r9
 800e36c:	4936      	ldr	r1, [pc, #216]	; (800e448 <_dtoa_r+0x620>)
 800e36e:	2000      	movs	r0, #0
 800e370:	f7f1 ff92 	bl	8000298 <__aeabi_dsub>
 800e374:	4652      	mov	r2, sl
 800e376:	465b      	mov	r3, fp
 800e378:	f7f2 fbb8 	bl	8000aec <__aeabi_dcmplt>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	f040 80b5 	bne.w	800e4ec <_dtoa_r+0x6c4>
 800e382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e384:	429d      	cmp	r5, r3
 800e386:	d081      	beq.n	800e28c <_dtoa_r+0x464>
 800e388:	4b30      	ldr	r3, [pc, #192]	; (800e44c <_dtoa_r+0x624>)
 800e38a:	2200      	movs	r2, #0
 800e38c:	4650      	mov	r0, sl
 800e38e:	4659      	mov	r1, fp
 800e390:	f7f2 f93a 	bl	8000608 <__aeabi_dmul>
 800e394:	4b2d      	ldr	r3, [pc, #180]	; (800e44c <_dtoa_r+0x624>)
 800e396:	4682      	mov	sl, r0
 800e398:	468b      	mov	fp, r1
 800e39a:	4640      	mov	r0, r8
 800e39c:	4649      	mov	r1, r9
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f7f2 f932 	bl	8000608 <__aeabi_dmul>
 800e3a4:	4680      	mov	r8, r0
 800e3a6:	4689      	mov	r9, r1
 800e3a8:	e7c6      	b.n	800e338 <_dtoa_r+0x510>
 800e3aa:	4650      	mov	r0, sl
 800e3ac:	4659      	mov	r1, fp
 800e3ae:	f7f2 f92b 	bl	8000608 <__aeabi_dmul>
 800e3b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3b4:	9d01      	ldr	r5, [sp, #4]
 800e3b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3b8:	4682      	mov	sl, r0
 800e3ba:	468b      	mov	fp, r1
 800e3bc:	4649      	mov	r1, r9
 800e3be:	4640      	mov	r0, r8
 800e3c0:	f7f2 fbd2 	bl	8000b68 <__aeabi_d2iz>
 800e3c4:	4606      	mov	r6, r0
 800e3c6:	f7f2 f8b5 	bl	8000534 <__aeabi_i2d>
 800e3ca:	3630      	adds	r6, #48	; 0x30
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	4640      	mov	r0, r8
 800e3d2:	4649      	mov	r1, r9
 800e3d4:	f7f1 ff60 	bl	8000298 <__aeabi_dsub>
 800e3d8:	f805 6b01 	strb.w	r6, [r5], #1
 800e3dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3de:	429d      	cmp	r5, r3
 800e3e0:	4680      	mov	r8, r0
 800e3e2:	4689      	mov	r9, r1
 800e3e4:	f04f 0200 	mov.w	r2, #0
 800e3e8:	d124      	bne.n	800e434 <_dtoa_r+0x60c>
 800e3ea:	4b1b      	ldr	r3, [pc, #108]	; (800e458 <_dtoa_r+0x630>)
 800e3ec:	4650      	mov	r0, sl
 800e3ee:	4659      	mov	r1, fp
 800e3f0:	f7f1 ff54 	bl	800029c <__adddf3>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	4640      	mov	r0, r8
 800e3fa:	4649      	mov	r1, r9
 800e3fc:	f7f2 fb94 	bl	8000b28 <__aeabi_dcmpgt>
 800e400:	2800      	cmp	r0, #0
 800e402:	d173      	bne.n	800e4ec <_dtoa_r+0x6c4>
 800e404:	4652      	mov	r2, sl
 800e406:	465b      	mov	r3, fp
 800e408:	4913      	ldr	r1, [pc, #76]	; (800e458 <_dtoa_r+0x630>)
 800e40a:	2000      	movs	r0, #0
 800e40c:	f7f1 ff44 	bl	8000298 <__aeabi_dsub>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	4640      	mov	r0, r8
 800e416:	4649      	mov	r1, r9
 800e418:	f7f2 fb68 	bl	8000aec <__aeabi_dcmplt>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	f43f af35 	beq.w	800e28c <_dtoa_r+0x464>
 800e422:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e424:	1e6b      	subs	r3, r5, #1
 800e426:	930f      	str	r3, [sp, #60]	; 0x3c
 800e428:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e42c:	2b30      	cmp	r3, #48	; 0x30
 800e42e:	d0f8      	beq.n	800e422 <_dtoa_r+0x5fa>
 800e430:	9700      	str	r7, [sp, #0]
 800e432:	e049      	b.n	800e4c8 <_dtoa_r+0x6a0>
 800e434:	4b05      	ldr	r3, [pc, #20]	; (800e44c <_dtoa_r+0x624>)
 800e436:	f7f2 f8e7 	bl	8000608 <__aeabi_dmul>
 800e43a:	4680      	mov	r8, r0
 800e43c:	4689      	mov	r9, r1
 800e43e:	e7bd      	b.n	800e3bc <_dtoa_r+0x594>
 800e440:	080120a8 	.word	0x080120a8
 800e444:	08012080 	.word	0x08012080
 800e448:	3ff00000 	.word	0x3ff00000
 800e44c:	40240000 	.word	0x40240000
 800e450:	401c0000 	.word	0x401c0000
 800e454:	40140000 	.word	0x40140000
 800e458:	3fe00000 	.word	0x3fe00000
 800e45c:	9d01      	ldr	r5, [sp, #4]
 800e45e:	4656      	mov	r6, sl
 800e460:	465f      	mov	r7, fp
 800e462:	4642      	mov	r2, r8
 800e464:	464b      	mov	r3, r9
 800e466:	4630      	mov	r0, r6
 800e468:	4639      	mov	r1, r7
 800e46a:	f7f2 f9f7 	bl	800085c <__aeabi_ddiv>
 800e46e:	f7f2 fb7b 	bl	8000b68 <__aeabi_d2iz>
 800e472:	4682      	mov	sl, r0
 800e474:	f7f2 f85e 	bl	8000534 <__aeabi_i2d>
 800e478:	4642      	mov	r2, r8
 800e47a:	464b      	mov	r3, r9
 800e47c:	f7f2 f8c4 	bl	8000608 <__aeabi_dmul>
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	4630      	mov	r0, r6
 800e486:	4639      	mov	r1, r7
 800e488:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e48c:	f7f1 ff04 	bl	8000298 <__aeabi_dsub>
 800e490:	f805 6b01 	strb.w	r6, [r5], #1
 800e494:	9e01      	ldr	r6, [sp, #4]
 800e496:	9f03      	ldr	r7, [sp, #12]
 800e498:	1bae      	subs	r6, r5, r6
 800e49a:	42b7      	cmp	r7, r6
 800e49c:	4602      	mov	r2, r0
 800e49e:	460b      	mov	r3, r1
 800e4a0:	d135      	bne.n	800e50e <_dtoa_r+0x6e6>
 800e4a2:	f7f1 fefb 	bl	800029c <__adddf3>
 800e4a6:	4642      	mov	r2, r8
 800e4a8:	464b      	mov	r3, r9
 800e4aa:	4606      	mov	r6, r0
 800e4ac:	460f      	mov	r7, r1
 800e4ae:	f7f2 fb3b 	bl	8000b28 <__aeabi_dcmpgt>
 800e4b2:	b9d0      	cbnz	r0, 800e4ea <_dtoa_r+0x6c2>
 800e4b4:	4642      	mov	r2, r8
 800e4b6:	464b      	mov	r3, r9
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	f7f2 fb0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800e4c0:	b110      	cbz	r0, 800e4c8 <_dtoa_r+0x6a0>
 800e4c2:	f01a 0f01 	tst.w	sl, #1
 800e4c6:	d110      	bne.n	800e4ea <_dtoa_r+0x6c2>
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	ee18 1a10 	vmov	r1, s16
 800e4ce:	f000 fe67 	bl	800f1a0 <_Bfree>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	9800      	ldr	r0, [sp, #0]
 800e4d6:	702b      	strb	r3, [r5, #0]
 800e4d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4da:	3001      	adds	r0, #1
 800e4dc:	6018      	str	r0, [r3, #0]
 800e4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f43f acf1 	beq.w	800dec8 <_dtoa_r+0xa0>
 800e4e6:	601d      	str	r5, [r3, #0]
 800e4e8:	e4ee      	b.n	800dec8 <_dtoa_r+0xa0>
 800e4ea:	9f00      	ldr	r7, [sp, #0]
 800e4ec:	462b      	mov	r3, r5
 800e4ee:	461d      	mov	r5, r3
 800e4f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4f4:	2a39      	cmp	r2, #57	; 0x39
 800e4f6:	d106      	bne.n	800e506 <_dtoa_r+0x6de>
 800e4f8:	9a01      	ldr	r2, [sp, #4]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d1f7      	bne.n	800e4ee <_dtoa_r+0x6c6>
 800e4fe:	9901      	ldr	r1, [sp, #4]
 800e500:	2230      	movs	r2, #48	; 0x30
 800e502:	3701      	adds	r7, #1
 800e504:	700a      	strb	r2, [r1, #0]
 800e506:	781a      	ldrb	r2, [r3, #0]
 800e508:	3201      	adds	r2, #1
 800e50a:	701a      	strb	r2, [r3, #0]
 800e50c:	e790      	b.n	800e430 <_dtoa_r+0x608>
 800e50e:	4ba6      	ldr	r3, [pc, #664]	; (800e7a8 <_dtoa_r+0x980>)
 800e510:	2200      	movs	r2, #0
 800e512:	f7f2 f879 	bl	8000608 <__aeabi_dmul>
 800e516:	2200      	movs	r2, #0
 800e518:	2300      	movs	r3, #0
 800e51a:	4606      	mov	r6, r0
 800e51c:	460f      	mov	r7, r1
 800e51e:	f7f2 fadb 	bl	8000ad8 <__aeabi_dcmpeq>
 800e522:	2800      	cmp	r0, #0
 800e524:	d09d      	beq.n	800e462 <_dtoa_r+0x63a>
 800e526:	e7cf      	b.n	800e4c8 <_dtoa_r+0x6a0>
 800e528:	9a08      	ldr	r2, [sp, #32]
 800e52a:	2a00      	cmp	r2, #0
 800e52c:	f000 80d7 	beq.w	800e6de <_dtoa_r+0x8b6>
 800e530:	9a06      	ldr	r2, [sp, #24]
 800e532:	2a01      	cmp	r2, #1
 800e534:	f300 80ba 	bgt.w	800e6ac <_dtoa_r+0x884>
 800e538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e53a:	2a00      	cmp	r2, #0
 800e53c:	f000 80b2 	beq.w	800e6a4 <_dtoa_r+0x87c>
 800e540:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e544:	9e07      	ldr	r6, [sp, #28]
 800e546:	9d04      	ldr	r5, [sp, #16]
 800e548:	9a04      	ldr	r2, [sp, #16]
 800e54a:	441a      	add	r2, r3
 800e54c:	9204      	str	r2, [sp, #16]
 800e54e:	9a05      	ldr	r2, [sp, #20]
 800e550:	2101      	movs	r1, #1
 800e552:	441a      	add	r2, r3
 800e554:	4620      	mov	r0, r4
 800e556:	9205      	str	r2, [sp, #20]
 800e558:	f000 ff24 	bl	800f3a4 <__i2b>
 800e55c:	4607      	mov	r7, r0
 800e55e:	2d00      	cmp	r5, #0
 800e560:	dd0c      	ble.n	800e57c <_dtoa_r+0x754>
 800e562:	9b05      	ldr	r3, [sp, #20]
 800e564:	2b00      	cmp	r3, #0
 800e566:	dd09      	ble.n	800e57c <_dtoa_r+0x754>
 800e568:	42ab      	cmp	r3, r5
 800e56a:	9a04      	ldr	r2, [sp, #16]
 800e56c:	bfa8      	it	ge
 800e56e:	462b      	movge	r3, r5
 800e570:	1ad2      	subs	r2, r2, r3
 800e572:	9204      	str	r2, [sp, #16]
 800e574:	9a05      	ldr	r2, [sp, #20]
 800e576:	1aed      	subs	r5, r5, r3
 800e578:	1ad3      	subs	r3, r2, r3
 800e57a:	9305      	str	r3, [sp, #20]
 800e57c:	9b07      	ldr	r3, [sp, #28]
 800e57e:	b31b      	cbz	r3, 800e5c8 <_dtoa_r+0x7a0>
 800e580:	9b08      	ldr	r3, [sp, #32]
 800e582:	2b00      	cmp	r3, #0
 800e584:	f000 80af 	beq.w	800e6e6 <_dtoa_r+0x8be>
 800e588:	2e00      	cmp	r6, #0
 800e58a:	dd13      	ble.n	800e5b4 <_dtoa_r+0x78c>
 800e58c:	4639      	mov	r1, r7
 800e58e:	4632      	mov	r2, r6
 800e590:	4620      	mov	r0, r4
 800e592:	f000 ffc7 	bl	800f524 <__pow5mult>
 800e596:	ee18 2a10 	vmov	r2, s16
 800e59a:	4601      	mov	r1, r0
 800e59c:	4607      	mov	r7, r0
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f000 ff16 	bl	800f3d0 <__multiply>
 800e5a4:	ee18 1a10 	vmov	r1, s16
 800e5a8:	4680      	mov	r8, r0
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 fdf8 	bl	800f1a0 <_Bfree>
 800e5b0:	ee08 8a10 	vmov	s16, r8
 800e5b4:	9b07      	ldr	r3, [sp, #28]
 800e5b6:	1b9a      	subs	r2, r3, r6
 800e5b8:	d006      	beq.n	800e5c8 <_dtoa_r+0x7a0>
 800e5ba:	ee18 1a10 	vmov	r1, s16
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f000 ffb0 	bl	800f524 <__pow5mult>
 800e5c4:	ee08 0a10 	vmov	s16, r0
 800e5c8:	2101      	movs	r1, #1
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	f000 feea 	bl	800f3a4 <__i2b>
 800e5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	4606      	mov	r6, r0
 800e5d6:	f340 8088 	ble.w	800e6ea <_dtoa_r+0x8c2>
 800e5da:	461a      	mov	r2, r3
 800e5dc:	4601      	mov	r1, r0
 800e5de:	4620      	mov	r0, r4
 800e5e0:	f000 ffa0 	bl	800f524 <__pow5mult>
 800e5e4:	9b06      	ldr	r3, [sp, #24]
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	4606      	mov	r6, r0
 800e5ea:	f340 8081 	ble.w	800e6f0 <_dtoa_r+0x8c8>
 800e5ee:	f04f 0800 	mov.w	r8, #0
 800e5f2:	6933      	ldr	r3, [r6, #16]
 800e5f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e5f8:	6918      	ldr	r0, [r3, #16]
 800e5fa:	f000 fe83 	bl	800f304 <__hi0bits>
 800e5fe:	f1c0 0020 	rsb	r0, r0, #32
 800e602:	9b05      	ldr	r3, [sp, #20]
 800e604:	4418      	add	r0, r3
 800e606:	f010 001f 	ands.w	r0, r0, #31
 800e60a:	f000 8092 	beq.w	800e732 <_dtoa_r+0x90a>
 800e60e:	f1c0 0320 	rsb	r3, r0, #32
 800e612:	2b04      	cmp	r3, #4
 800e614:	f340 808a 	ble.w	800e72c <_dtoa_r+0x904>
 800e618:	f1c0 001c 	rsb	r0, r0, #28
 800e61c:	9b04      	ldr	r3, [sp, #16]
 800e61e:	4403      	add	r3, r0
 800e620:	9304      	str	r3, [sp, #16]
 800e622:	9b05      	ldr	r3, [sp, #20]
 800e624:	4403      	add	r3, r0
 800e626:	4405      	add	r5, r0
 800e628:	9305      	str	r3, [sp, #20]
 800e62a:	9b04      	ldr	r3, [sp, #16]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	dd07      	ble.n	800e640 <_dtoa_r+0x818>
 800e630:	ee18 1a10 	vmov	r1, s16
 800e634:	461a      	mov	r2, r3
 800e636:	4620      	mov	r0, r4
 800e638:	f000 ffce 	bl	800f5d8 <__lshift>
 800e63c:	ee08 0a10 	vmov	s16, r0
 800e640:	9b05      	ldr	r3, [sp, #20]
 800e642:	2b00      	cmp	r3, #0
 800e644:	dd05      	ble.n	800e652 <_dtoa_r+0x82a>
 800e646:	4631      	mov	r1, r6
 800e648:	461a      	mov	r2, r3
 800e64a:	4620      	mov	r0, r4
 800e64c:	f000 ffc4 	bl	800f5d8 <__lshift>
 800e650:	4606      	mov	r6, r0
 800e652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e654:	2b00      	cmp	r3, #0
 800e656:	d06e      	beq.n	800e736 <_dtoa_r+0x90e>
 800e658:	ee18 0a10 	vmov	r0, s16
 800e65c:	4631      	mov	r1, r6
 800e65e:	f001 f82b 	bl	800f6b8 <__mcmp>
 800e662:	2800      	cmp	r0, #0
 800e664:	da67      	bge.n	800e736 <_dtoa_r+0x90e>
 800e666:	9b00      	ldr	r3, [sp, #0]
 800e668:	3b01      	subs	r3, #1
 800e66a:	ee18 1a10 	vmov	r1, s16
 800e66e:	9300      	str	r3, [sp, #0]
 800e670:	220a      	movs	r2, #10
 800e672:	2300      	movs	r3, #0
 800e674:	4620      	mov	r0, r4
 800e676:	f000 fdb5 	bl	800f1e4 <__multadd>
 800e67a:	9b08      	ldr	r3, [sp, #32]
 800e67c:	ee08 0a10 	vmov	s16, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	f000 81b1 	beq.w	800e9e8 <_dtoa_r+0xbc0>
 800e686:	2300      	movs	r3, #0
 800e688:	4639      	mov	r1, r7
 800e68a:	220a      	movs	r2, #10
 800e68c:	4620      	mov	r0, r4
 800e68e:	f000 fda9 	bl	800f1e4 <__multadd>
 800e692:	9b02      	ldr	r3, [sp, #8]
 800e694:	2b00      	cmp	r3, #0
 800e696:	4607      	mov	r7, r0
 800e698:	f300 808e 	bgt.w	800e7b8 <_dtoa_r+0x990>
 800e69c:	9b06      	ldr	r3, [sp, #24]
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	dc51      	bgt.n	800e746 <_dtoa_r+0x91e>
 800e6a2:	e089      	b.n	800e7b8 <_dtoa_r+0x990>
 800e6a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e6aa:	e74b      	b.n	800e544 <_dtoa_r+0x71c>
 800e6ac:	9b03      	ldr	r3, [sp, #12]
 800e6ae:	1e5e      	subs	r6, r3, #1
 800e6b0:	9b07      	ldr	r3, [sp, #28]
 800e6b2:	42b3      	cmp	r3, r6
 800e6b4:	bfbf      	itttt	lt
 800e6b6:	9b07      	ldrlt	r3, [sp, #28]
 800e6b8:	9607      	strlt	r6, [sp, #28]
 800e6ba:	1af2      	sublt	r2, r6, r3
 800e6bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e6be:	bfb6      	itet	lt
 800e6c0:	189b      	addlt	r3, r3, r2
 800e6c2:	1b9e      	subge	r6, r3, r6
 800e6c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e6c6:	9b03      	ldr	r3, [sp, #12]
 800e6c8:	bfb8      	it	lt
 800e6ca:	2600      	movlt	r6, #0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bfb7      	itett	lt
 800e6d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e6d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e6d8:	1a9d      	sublt	r5, r3, r2
 800e6da:	2300      	movlt	r3, #0
 800e6dc:	e734      	b.n	800e548 <_dtoa_r+0x720>
 800e6de:	9e07      	ldr	r6, [sp, #28]
 800e6e0:	9d04      	ldr	r5, [sp, #16]
 800e6e2:	9f08      	ldr	r7, [sp, #32]
 800e6e4:	e73b      	b.n	800e55e <_dtoa_r+0x736>
 800e6e6:	9a07      	ldr	r2, [sp, #28]
 800e6e8:	e767      	b.n	800e5ba <_dtoa_r+0x792>
 800e6ea:	9b06      	ldr	r3, [sp, #24]
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	dc18      	bgt.n	800e722 <_dtoa_r+0x8fa>
 800e6f0:	f1ba 0f00 	cmp.w	sl, #0
 800e6f4:	d115      	bne.n	800e722 <_dtoa_r+0x8fa>
 800e6f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e6fa:	b993      	cbnz	r3, 800e722 <_dtoa_r+0x8fa>
 800e6fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e700:	0d1b      	lsrs	r3, r3, #20
 800e702:	051b      	lsls	r3, r3, #20
 800e704:	b183      	cbz	r3, 800e728 <_dtoa_r+0x900>
 800e706:	9b04      	ldr	r3, [sp, #16]
 800e708:	3301      	adds	r3, #1
 800e70a:	9304      	str	r3, [sp, #16]
 800e70c:	9b05      	ldr	r3, [sp, #20]
 800e70e:	3301      	adds	r3, #1
 800e710:	9305      	str	r3, [sp, #20]
 800e712:	f04f 0801 	mov.w	r8, #1
 800e716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f47f af6a 	bne.w	800e5f2 <_dtoa_r+0x7ca>
 800e71e:	2001      	movs	r0, #1
 800e720:	e76f      	b.n	800e602 <_dtoa_r+0x7da>
 800e722:	f04f 0800 	mov.w	r8, #0
 800e726:	e7f6      	b.n	800e716 <_dtoa_r+0x8ee>
 800e728:	4698      	mov	r8, r3
 800e72a:	e7f4      	b.n	800e716 <_dtoa_r+0x8ee>
 800e72c:	f43f af7d 	beq.w	800e62a <_dtoa_r+0x802>
 800e730:	4618      	mov	r0, r3
 800e732:	301c      	adds	r0, #28
 800e734:	e772      	b.n	800e61c <_dtoa_r+0x7f4>
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	dc37      	bgt.n	800e7ac <_dtoa_r+0x984>
 800e73c:	9b06      	ldr	r3, [sp, #24]
 800e73e:	2b02      	cmp	r3, #2
 800e740:	dd34      	ble.n	800e7ac <_dtoa_r+0x984>
 800e742:	9b03      	ldr	r3, [sp, #12]
 800e744:	9302      	str	r3, [sp, #8]
 800e746:	9b02      	ldr	r3, [sp, #8]
 800e748:	b96b      	cbnz	r3, 800e766 <_dtoa_r+0x93e>
 800e74a:	4631      	mov	r1, r6
 800e74c:	2205      	movs	r2, #5
 800e74e:	4620      	mov	r0, r4
 800e750:	f000 fd48 	bl	800f1e4 <__multadd>
 800e754:	4601      	mov	r1, r0
 800e756:	4606      	mov	r6, r0
 800e758:	ee18 0a10 	vmov	r0, s16
 800e75c:	f000 ffac 	bl	800f6b8 <__mcmp>
 800e760:	2800      	cmp	r0, #0
 800e762:	f73f adbb 	bgt.w	800e2dc <_dtoa_r+0x4b4>
 800e766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e768:	9d01      	ldr	r5, [sp, #4]
 800e76a:	43db      	mvns	r3, r3
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	f04f 0800 	mov.w	r8, #0
 800e772:	4631      	mov	r1, r6
 800e774:	4620      	mov	r0, r4
 800e776:	f000 fd13 	bl	800f1a0 <_Bfree>
 800e77a:	2f00      	cmp	r7, #0
 800e77c:	f43f aea4 	beq.w	800e4c8 <_dtoa_r+0x6a0>
 800e780:	f1b8 0f00 	cmp.w	r8, #0
 800e784:	d005      	beq.n	800e792 <_dtoa_r+0x96a>
 800e786:	45b8      	cmp	r8, r7
 800e788:	d003      	beq.n	800e792 <_dtoa_r+0x96a>
 800e78a:	4641      	mov	r1, r8
 800e78c:	4620      	mov	r0, r4
 800e78e:	f000 fd07 	bl	800f1a0 <_Bfree>
 800e792:	4639      	mov	r1, r7
 800e794:	4620      	mov	r0, r4
 800e796:	f000 fd03 	bl	800f1a0 <_Bfree>
 800e79a:	e695      	b.n	800e4c8 <_dtoa_r+0x6a0>
 800e79c:	2600      	movs	r6, #0
 800e79e:	4637      	mov	r7, r6
 800e7a0:	e7e1      	b.n	800e766 <_dtoa_r+0x93e>
 800e7a2:	9700      	str	r7, [sp, #0]
 800e7a4:	4637      	mov	r7, r6
 800e7a6:	e599      	b.n	800e2dc <_dtoa_r+0x4b4>
 800e7a8:	40240000 	.word	0x40240000
 800e7ac:	9b08      	ldr	r3, [sp, #32]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	f000 80ca 	beq.w	800e948 <_dtoa_r+0xb20>
 800e7b4:	9b03      	ldr	r3, [sp, #12]
 800e7b6:	9302      	str	r3, [sp, #8]
 800e7b8:	2d00      	cmp	r5, #0
 800e7ba:	dd05      	ble.n	800e7c8 <_dtoa_r+0x9a0>
 800e7bc:	4639      	mov	r1, r7
 800e7be:	462a      	mov	r2, r5
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	f000 ff09 	bl	800f5d8 <__lshift>
 800e7c6:	4607      	mov	r7, r0
 800e7c8:	f1b8 0f00 	cmp.w	r8, #0
 800e7cc:	d05b      	beq.n	800e886 <_dtoa_r+0xa5e>
 800e7ce:	6879      	ldr	r1, [r7, #4]
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f000 fca5 	bl	800f120 <_Balloc>
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	b928      	cbnz	r0, 800e7e6 <_dtoa_r+0x9be>
 800e7da:	4b87      	ldr	r3, [pc, #540]	; (800e9f8 <_dtoa_r+0xbd0>)
 800e7dc:	4602      	mov	r2, r0
 800e7de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e7e2:	f7ff bb3b 	b.w	800de5c <_dtoa_r+0x34>
 800e7e6:	693a      	ldr	r2, [r7, #16]
 800e7e8:	3202      	adds	r2, #2
 800e7ea:	0092      	lsls	r2, r2, #2
 800e7ec:	f107 010c 	add.w	r1, r7, #12
 800e7f0:	300c      	adds	r0, #12
 800e7f2:	f7fd fce7 	bl	800c1c4 <memcpy>
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f000 feec 	bl	800f5d8 <__lshift>
 800e800:	9b01      	ldr	r3, [sp, #4]
 800e802:	f103 0901 	add.w	r9, r3, #1
 800e806:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e80a:	4413      	add	r3, r2
 800e80c:	9305      	str	r3, [sp, #20]
 800e80e:	f00a 0301 	and.w	r3, sl, #1
 800e812:	46b8      	mov	r8, r7
 800e814:	9304      	str	r3, [sp, #16]
 800e816:	4607      	mov	r7, r0
 800e818:	4631      	mov	r1, r6
 800e81a:	ee18 0a10 	vmov	r0, s16
 800e81e:	f7ff fa75 	bl	800dd0c <quorem>
 800e822:	4641      	mov	r1, r8
 800e824:	9002      	str	r0, [sp, #8]
 800e826:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e82a:	ee18 0a10 	vmov	r0, s16
 800e82e:	f000 ff43 	bl	800f6b8 <__mcmp>
 800e832:	463a      	mov	r2, r7
 800e834:	9003      	str	r0, [sp, #12]
 800e836:	4631      	mov	r1, r6
 800e838:	4620      	mov	r0, r4
 800e83a:	f000 ff59 	bl	800f6f0 <__mdiff>
 800e83e:	68c2      	ldr	r2, [r0, #12]
 800e840:	f109 3bff 	add.w	fp, r9, #4294967295
 800e844:	4605      	mov	r5, r0
 800e846:	bb02      	cbnz	r2, 800e88a <_dtoa_r+0xa62>
 800e848:	4601      	mov	r1, r0
 800e84a:	ee18 0a10 	vmov	r0, s16
 800e84e:	f000 ff33 	bl	800f6b8 <__mcmp>
 800e852:	4602      	mov	r2, r0
 800e854:	4629      	mov	r1, r5
 800e856:	4620      	mov	r0, r4
 800e858:	9207      	str	r2, [sp, #28]
 800e85a:	f000 fca1 	bl	800f1a0 <_Bfree>
 800e85e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e862:	ea43 0102 	orr.w	r1, r3, r2
 800e866:	9b04      	ldr	r3, [sp, #16]
 800e868:	430b      	orrs	r3, r1
 800e86a:	464d      	mov	r5, r9
 800e86c:	d10f      	bne.n	800e88e <_dtoa_r+0xa66>
 800e86e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e872:	d02a      	beq.n	800e8ca <_dtoa_r+0xaa2>
 800e874:	9b03      	ldr	r3, [sp, #12]
 800e876:	2b00      	cmp	r3, #0
 800e878:	dd02      	ble.n	800e880 <_dtoa_r+0xa58>
 800e87a:	9b02      	ldr	r3, [sp, #8]
 800e87c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e880:	f88b a000 	strb.w	sl, [fp]
 800e884:	e775      	b.n	800e772 <_dtoa_r+0x94a>
 800e886:	4638      	mov	r0, r7
 800e888:	e7ba      	b.n	800e800 <_dtoa_r+0x9d8>
 800e88a:	2201      	movs	r2, #1
 800e88c:	e7e2      	b.n	800e854 <_dtoa_r+0xa2c>
 800e88e:	9b03      	ldr	r3, [sp, #12]
 800e890:	2b00      	cmp	r3, #0
 800e892:	db04      	blt.n	800e89e <_dtoa_r+0xa76>
 800e894:	9906      	ldr	r1, [sp, #24]
 800e896:	430b      	orrs	r3, r1
 800e898:	9904      	ldr	r1, [sp, #16]
 800e89a:	430b      	orrs	r3, r1
 800e89c:	d122      	bne.n	800e8e4 <_dtoa_r+0xabc>
 800e89e:	2a00      	cmp	r2, #0
 800e8a0:	ddee      	ble.n	800e880 <_dtoa_r+0xa58>
 800e8a2:	ee18 1a10 	vmov	r1, s16
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f000 fe95 	bl	800f5d8 <__lshift>
 800e8ae:	4631      	mov	r1, r6
 800e8b0:	ee08 0a10 	vmov	s16, r0
 800e8b4:	f000 ff00 	bl	800f6b8 <__mcmp>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	dc03      	bgt.n	800e8c4 <_dtoa_r+0xa9c>
 800e8bc:	d1e0      	bne.n	800e880 <_dtoa_r+0xa58>
 800e8be:	f01a 0f01 	tst.w	sl, #1
 800e8c2:	d0dd      	beq.n	800e880 <_dtoa_r+0xa58>
 800e8c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e8c8:	d1d7      	bne.n	800e87a <_dtoa_r+0xa52>
 800e8ca:	2339      	movs	r3, #57	; 0x39
 800e8cc:	f88b 3000 	strb.w	r3, [fp]
 800e8d0:	462b      	mov	r3, r5
 800e8d2:	461d      	mov	r5, r3
 800e8d4:	3b01      	subs	r3, #1
 800e8d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e8da:	2a39      	cmp	r2, #57	; 0x39
 800e8dc:	d071      	beq.n	800e9c2 <_dtoa_r+0xb9a>
 800e8de:	3201      	adds	r2, #1
 800e8e0:	701a      	strb	r2, [r3, #0]
 800e8e2:	e746      	b.n	800e772 <_dtoa_r+0x94a>
 800e8e4:	2a00      	cmp	r2, #0
 800e8e6:	dd07      	ble.n	800e8f8 <_dtoa_r+0xad0>
 800e8e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e8ec:	d0ed      	beq.n	800e8ca <_dtoa_r+0xaa2>
 800e8ee:	f10a 0301 	add.w	r3, sl, #1
 800e8f2:	f88b 3000 	strb.w	r3, [fp]
 800e8f6:	e73c      	b.n	800e772 <_dtoa_r+0x94a>
 800e8f8:	9b05      	ldr	r3, [sp, #20]
 800e8fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e8fe:	4599      	cmp	r9, r3
 800e900:	d047      	beq.n	800e992 <_dtoa_r+0xb6a>
 800e902:	ee18 1a10 	vmov	r1, s16
 800e906:	2300      	movs	r3, #0
 800e908:	220a      	movs	r2, #10
 800e90a:	4620      	mov	r0, r4
 800e90c:	f000 fc6a 	bl	800f1e4 <__multadd>
 800e910:	45b8      	cmp	r8, r7
 800e912:	ee08 0a10 	vmov	s16, r0
 800e916:	f04f 0300 	mov.w	r3, #0
 800e91a:	f04f 020a 	mov.w	r2, #10
 800e91e:	4641      	mov	r1, r8
 800e920:	4620      	mov	r0, r4
 800e922:	d106      	bne.n	800e932 <_dtoa_r+0xb0a>
 800e924:	f000 fc5e 	bl	800f1e4 <__multadd>
 800e928:	4680      	mov	r8, r0
 800e92a:	4607      	mov	r7, r0
 800e92c:	f109 0901 	add.w	r9, r9, #1
 800e930:	e772      	b.n	800e818 <_dtoa_r+0x9f0>
 800e932:	f000 fc57 	bl	800f1e4 <__multadd>
 800e936:	4639      	mov	r1, r7
 800e938:	4680      	mov	r8, r0
 800e93a:	2300      	movs	r3, #0
 800e93c:	220a      	movs	r2, #10
 800e93e:	4620      	mov	r0, r4
 800e940:	f000 fc50 	bl	800f1e4 <__multadd>
 800e944:	4607      	mov	r7, r0
 800e946:	e7f1      	b.n	800e92c <_dtoa_r+0xb04>
 800e948:	9b03      	ldr	r3, [sp, #12]
 800e94a:	9302      	str	r3, [sp, #8]
 800e94c:	9d01      	ldr	r5, [sp, #4]
 800e94e:	ee18 0a10 	vmov	r0, s16
 800e952:	4631      	mov	r1, r6
 800e954:	f7ff f9da 	bl	800dd0c <quorem>
 800e958:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e95c:	9b01      	ldr	r3, [sp, #4]
 800e95e:	f805 ab01 	strb.w	sl, [r5], #1
 800e962:	1aea      	subs	r2, r5, r3
 800e964:	9b02      	ldr	r3, [sp, #8]
 800e966:	4293      	cmp	r3, r2
 800e968:	dd09      	ble.n	800e97e <_dtoa_r+0xb56>
 800e96a:	ee18 1a10 	vmov	r1, s16
 800e96e:	2300      	movs	r3, #0
 800e970:	220a      	movs	r2, #10
 800e972:	4620      	mov	r0, r4
 800e974:	f000 fc36 	bl	800f1e4 <__multadd>
 800e978:	ee08 0a10 	vmov	s16, r0
 800e97c:	e7e7      	b.n	800e94e <_dtoa_r+0xb26>
 800e97e:	9b02      	ldr	r3, [sp, #8]
 800e980:	2b00      	cmp	r3, #0
 800e982:	bfc8      	it	gt
 800e984:	461d      	movgt	r5, r3
 800e986:	9b01      	ldr	r3, [sp, #4]
 800e988:	bfd8      	it	le
 800e98a:	2501      	movle	r5, #1
 800e98c:	441d      	add	r5, r3
 800e98e:	f04f 0800 	mov.w	r8, #0
 800e992:	ee18 1a10 	vmov	r1, s16
 800e996:	2201      	movs	r2, #1
 800e998:	4620      	mov	r0, r4
 800e99a:	f000 fe1d 	bl	800f5d8 <__lshift>
 800e99e:	4631      	mov	r1, r6
 800e9a0:	ee08 0a10 	vmov	s16, r0
 800e9a4:	f000 fe88 	bl	800f6b8 <__mcmp>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	dc91      	bgt.n	800e8d0 <_dtoa_r+0xaa8>
 800e9ac:	d102      	bne.n	800e9b4 <_dtoa_r+0xb8c>
 800e9ae:	f01a 0f01 	tst.w	sl, #1
 800e9b2:	d18d      	bne.n	800e8d0 <_dtoa_r+0xaa8>
 800e9b4:	462b      	mov	r3, r5
 800e9b6:	461d      	mov	r5, r3
 800e9b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9bc:	2a30      	cmp	r2, #48	; 0x30
 800e9be:	d0fa      	beq.n	800e9b6 <_dtoa_r+0xb8e>
 800e9c0:	e6d7      	b.n	800e772 <_dtoa_r+0x94a>
 800e9c2:	9a01      	ldr	r2, [sp, #4]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d184      	bne.n	800e8d2 <_dtoa_r+0xaaa>
 800e9c8:	9b00      	ldr	r3, [sp, #0]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	9300      	str	r3, [sp, #0]
 800e9ce:	2331      	movs	r3, #49	; 0x31
 800e9d0:	7013      	strb	r3, [r2, #0]
 800e9d2:	e6ce      	b.n	800e772 <_dtoa_r+0x94a>
 800e9d4:	4b09      	ldr	r3, [pc, #36]	; (800e9fc <_dtoa_r+0xbd4>)
 800e9d6:	f7ff ba95 	b.w	800df04 <_dtoa_r+0xdc>
 800e9da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f47f aa6e 	bne.w	800debe <_dtoa_r+0x96>
 800e9e2:	4b07      	ldr	r3, [pc, #28]	; (800ea00 <_dtoa_r+0xbd8>)
 800e9e4:	f7ff ba8e 	b.w	800df04 <_dtoa_r+0xdc>
 800e9e8:	9b02      	ldr	r3, [sp, #8]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	dcae      	bgt.n	800e94c <_dtoa_r+0xb24>
 800e9ee:	9b06      	ldr	r3, [sp, #24]
 800e9f0:	2b02      	cmp	r3, #2
 800e9f2:	f73f aea8 	bgt.w	800e746 <_dtoa_r+0x91e>
 800e9f6:	e7a9      	b.n	800e94c <_dtoa_r+0xb24>
 800e9f8:	08011f98 	.word	0x08011f98
 800e9fc:	08011d98 	.word	0x08011d98
 800ea00:	08011f19 	.word	0x08011f19

0800ea04 <rshift>:
 800ea04:	6903      	ldr	r3, [r0, #16]
 800ea06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ea12:	f100 0414 	add.w	r4, r0, #20
 800ea16:	dd45      	ble.n	800eaa4 <rshift+0xa0>
 800ea18:	f011 011f 	ands.w	r1, r1, #31
 800ea1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ea20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea24:	d10c      	bne.n	800ea40 <rshift+0x3c>
 800ea26:	f100 0710 	add.w	r7, r0, #16
 800ea2a:	4629      	mov	r1, r5
 800ea2c:	42b1      	cmp	r1, r6
 800ea2e:	d334      	bcc.n	800ea9a <rshift+0x96>
 800ea30:	1a9b      	subs	r3, r3, r2
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	1eea      	subs	r2, r5, #3
 800ea36:	4296      	cmp	r6, r2
 800ea38:	bf38      	it	cc
 800ea3a:	2300      	movcc	r3, #0
 800ea3c:	4423      	add	r3, r4
 800ea3e:	e015      	b.n	800ea6c <rshift+0x68>
 800ea40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea44:	f1c1 0820 	rsb	r8, r1, #32
 800ea48:	40cf      	lsrs	r7, r1
 800ea4a:	f105 0e04 	add.w	lr, r5, #4
 800ea4e:	46a1      	mov	r9, r4
 800ea50:	4576      	cmp	r6, lr
 800ea52:	46f4      	mov	ip, lr
 800ea54:	d815      	bhi.n	800ea82 <rshift+0x7e>
 800ea56:	1a9a      	subs	r2, r3, r2
 800ea58:	0092      	lsls	r2, r2, #2
 800ea5a:	3a04      	subs	r2, #4
 800ea5c:	3501      	adds	r5, #1
 800ea5e:	42ae      	cmp	r6, r5
 800ea60:	bf38      	it	cc
 800ea62:	2200      	movcc	r2, #0
 800ea64:	18a3      	adds	r3, r4, r2
 800ea66:	50a7      	str	r7, [r4, r2]
 800ea68:	b107      	cbz	r7, 800ea6c <rshift+0x68>
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	1b1a      	subs	r2, r3, r4
 800ea6e:	42a3      	cmp	r3, r4
 800ea70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea74:	bf08      	it	eq
 800ea76:	2300      	moveq	r3, #0
 800ea78:	6102      	str	r2, [r0, #16]
 800ea7a:	bf08      	it	eq
 800ea7c:	6143      	streq	r3, [r0, #20]
 800ea7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea82:	f8dc c000 	ldr.w	ip, [ip]
 800ea86:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea8a:	ea4c 0707 	orr.w	r7, ip, r7
 800ea8e:	f849 7b04 	str.w	r7, [r9], #4
 800ea92:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea96:	40cf      	lsrs	r7, r1
 800ea98:	e7da      	b.n	800ea50 <rshift+0x4c>
 800ea9a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea9e:	f847 cf04 	str.w	ip, [r7, #4]!
 800eaa2:	e7c3      	b.n	800ea2c <rshift+0x28>
 800eaa4:	4623      	mov	r3, r4
 800eaa6:	e7e1      	b.n	800ea6c <rshift+0x68>

0800eaa8 <__hexdig_fun>:
 800eaa8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eaac:	2b09      	cmp	r3, #9
 800eaae:	d802      	bhi.n	800eab6 <__hexdig_fun+0xe>
 800eab0:	3820      	subs	r0, #32
 800eab2:	b2c0      	uxtb	r0, r0
 800eab4:	4770      	bx	lr
 800eab6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eaba:	2b05      	cmp	r3, #5
 800eabc:	d801      	bhi.n	800eac2 <__hexdig_fun+0x1a>
 800eabe:	3847      	subs	r0, #71	; 0x47
 800eac0:	e7f7      	b.n	800eab2 <__hexdig_fun+0xa>
 800eac2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eac6:	2b05      	cmp	r3, #5
 800eac8:	d801      	bhi.n	800eace <__hexdig_fun+0x26>
 800eaca:	3827      	subs	r0, #39	; 0x27
 800eacc:	e7f1      	b.n	800eab2 <__hexdig_fun+0xa>
 800eace:	2000      	movs	r0, #0
 800ead0:	4770      	bx	lr
	...

0800ead4 <__gethex>:
 800ead4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead8:	ed2d 8b02 	vpush	{d8}
 800eadc:	b089      	sub	sp, #36	; 0x24
 800eade:	ee08 0a10 	vmov	s16, r0
 800eae2:	9304      	str	r3, [sp, #16]
 800eae4:	4bb4      	ldr	r3, [pc, #720]	; (800edb8 <__gethex+0x2e4>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	9301      	str	r3, [sp, #4]
 800eaea:	4618      	mov	r0, r3
 800eaec:	468b      	mov	fp, r1
 800eaee:	4690      	mov	r8, r2
 800eaf0:	f7f1 fb76 	bl	80001e0 <strlen>
 800eaf4:	9b01      	ldr	r3, [sp, #4]
 800eaf6:	f8db 2000 	ldr.w	r2, [fp]
 800eafa:	4403      	add	r3, r0
 800eafc:	4682      	mov	sl, r0
 800eafe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eb02:	9305      	str	r3, [sp, #20]
 800eb04:	1c93      	adds	r3, r2, #2
 800eb06:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eb0a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eb0e:	32fe      	adds	r2, #254	; 0xfe
 800eb10:	18d1      	adds	r1, r2, r3
 800eb12:	461f      	mov	r7, r3
 800eb14:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb18:	9100      	str	r1, [sp, #0]
 800eb1a:	2830      	cmp	r0, #48	; 0x30
 800eb1c:	d0f8      	beq.n	800eb10 <__gethex+0x3c>
 800eb1e:	f7ff ffc3 	bl	800eaa8 <__hexdig_fun>
 800eb22:	4604      	mov	r4, r0
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d13a      	bne.n	800eb9e <__gethex+0xca>
 800eb28:	9901      	ldr	r1, [sp, #4]
 800eb2a:	4652      	mov	r2, sl
 800eb2c:	4638      	mov	r0, r7
 800eb2e:	f001 fa23 	bl	800ff78 <strncmp>
 800eb32:	4605      	mov	r5, r0
 800eb34:	2800      	cmp	r0, #0
 800eb36:	d168      	bne.n	800ec0a <__gethex+0x136>
 800eb38:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eb3c:	eb07 060a 	add.w	r6, r7, sl
 800eb40:	f7ff ffb2 	bl	800eaa8 <__hexdig_fun>
 800eb44:	2800      	cmp	r0, #0
 800eb46:	d062      	beq.n	800ec0e <__gethex+0x13a>
 800eb48:	4633      	mov	r3, r6
 800eb4a:	7818      	ldrb	r0, [r3, #0]
 800eb4c:	2830      	cmp	r0, #48	; 0x30
 800eb4e:	461f      	mov	r7, r3
 800eb50:	f103 0301 	add.w	r3, r3, #1
 800eb54:	d0f9      	beq.n	800eb4a <__gethex+0x76>
 800eb56:	f7ff ffa7 	bl	800eaa8 <__hexdig_fun>
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	fab0 f480 	clz	r4, r0
 800eb60:	0964      	lsrs	r4, r4, #5
 800eb62:	4635      	mov	r5, r6
 800eb64:	9300      	str	r3, [sp, #0]
 800eb66:	463a      	mov	r2, r7
 800eb68:	4616      	mov	r6, r2
 800eb6a:	3201      	adds	r2, #1
 800eb6c:	7830      	ldrb	r0, [r6, #0]
 800eb6e:	f7ff ff9b 	bl	800eaa8 <__hexdig_fun>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d1f8      	bne.n	800eb68 <__gethex+0x94>
 800eb76:	9901      	ldr	r1, [sp, #4]
 800eb78:	4652      	mov	r2, sl
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	f001 f9fc 	bl	800ff78 <strncmp>
 800eb80:	b980      	cbnz	r0, 800eba4 <__gethex+0xd0>
 800eb82:	b94d      	cbnz	r5, 800eb98 <__gethex+0xc4>
 800eb84:	eb06 050a 	add.w	r5, r6, sl
 800eb88:	462a      	mov	r2, r5
 800eb8a:	4616      	mov	r6, r2
 800eb8c:	3201      	adds	r2, #1
 800eb8e:	7830      	ldrb	r0, [r6, #0]
 800eb90:	f7ff ff8a 	bl	800eaa8 <__hexdig_fun>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d1f8      	bne.n	800eb8a <__gethex+0xb6>
 800eb98:	1bad      	subs	r5, r5, r6
 800eb9a:	00ad      	lsls	r5, r5, #2
 800eb9c:	e004      	b.n	800eba8 <__gethex+0xd4>
 800eb9e:	2400      	movs	r4, #0
 800eba0:	4625      	mov	r5, r4
 800eba2:	e7e0      	b.n	800eb66 <__gethex+0x92>
 800eba4:	2d00      	cmp	r5, #0
 800eba6:	d1f7      	bne.n	800eb98 <__gethex+0xc4>
 800eba8:	7833      	ldrb	r3, [r6, #0]
 800ebaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ebae:	2b50      	cmp	r3, #80	; 0x50
 800ebb0:	d13b      	bne.n	800ec2a <__gethex+0x156>
 800ebb2:	7873      	ldrb	r3, [r6, #1]
 800ebb4:	2b2b      	cmp	r3, #43	; 0x2b
 800ebb6:	d02c      	beq.n	800ec12 <__gethex+0x13e>
 800ebb8:	2b2d      	cmp	r3, #45	; 0x2d
 800ebba:	d02e      	beq.n	800ec1a <__gethex+0x146>
 800ebbc:	1c71      	adds	r1, r6, #1
 800ebbe:	f04f 0900 	mov.w	r9, #0
 800ebc2:	7808      	ldrb	r0, [r1, #0]
 800ebc4:	f7ff ff70 	bl	800eaa8 <__hexdig_fun>
 800ebc8:	1e43      	subs	r3, r0, #1
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	2b18      	cmp	r3, #24
 800ebce:	d82c      	bhi.n	800ec2a <__gethex+0x156>
 800ebd0:	f1a0 0210 	sub.w	r2, r0, #16
 800ebd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ebd8:	f7ff ff66 	bl	800eaa8 <__hexdig_fun>
 800ebdc:	1e43      	subs	r3, r0, #1
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	2b18      	cmp	r3, #24
 800ebe2:	d91d      	bls.n	800ec20 <__gethex+0x14c>
 800ebe4:	f1b9 0f00 	cmp.w	r9, #0
 800ebe8:	d000      	beq.n	800ebec <__gethex+0x118>
 800ebea:	4252      	negs	r2, r2
 800ebec:	4415      	add	r5, r2
 800ebee:	f8cb 1000 	str.w	r1, [fp]
 800ebf2:	b1e4      	cbz	r4, 800ec2e <__gethex+0x15a>
 800ebf4:	9b00      	ldr	r3, [sp, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	bf14      	ite	ne
 800ebfa:	2700      	movne	r7, #0
 800ebfc:	2706      	moveq	r7, #6
 800ebfe:	4638      	mov	r0, r7
 800ec00:	b009      	add	sp, #36	; 0x24
 800ec02:	ecbd 8b02 	vpop	{d8}
 800ec06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec0a:	463e      	mov	r6, r7
 800ec0c:	4625      	mov	r5, r4
 800ec0e:	2401      	movs	r4, #1
 800ec10:	e7ca      	b.n	800eba8 <__gethex+0xd4>
 800ec12:	f04f 0900 	mov.w	r9, #0
 800ec16:	1cb1      	adds	r1, r6, #2
 800ec18:	e7d3      	b.n	800ebc2 <__gethex+0xee>
 800ec1a:	f04f 0901 	mov.w	r9, #1
 800ec1e:	e7fa      	b.n	800ec16 <__gethex+0x142>
 800ec20:	230a      	movs	r3, #10
 800ec22:	fb03 0202 	mla	r2, r3, r2, r0
 800ec26:	3a10      	subs	r2, #16
 800ec28:	e7d4      	b.n	800ebd4 <__gethex+0x100>
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	e7df      	b.n	800ebee <__gethex+0x11a>
 800ec2e:	1bf3      	subs	r3, r6, r7
 800ec30:	3b01      	subs	r3, #1
 800ec32:	4621      	mov	r1, r4
 800ec34:	2b07      	cmp	r3, #7
 800ec36:	dc0b      	bgt.n	800ec50 <__gethex+0x17c>
 800ec38:	ee18 0a10 	vmov	r0, s16
 800ec3c:	f000 fa70 	bl	800f120 <_Balloc>
 800ec40:	4604      	mov	r4, r0
 800ec42:	b940      	cbnz	r0, 800ec56 <__gethex+0x182>
 800ec44:	4b5d      	ldr	r3, [pc, #372]	; (800edbc <__gethex+0x2e8>)
 800ec46:	4602      	mov	r2, r0
 800ec48:	21de      	movs	r1, #222	; 0xde
 800ec4a:	485d      	ldr	r0, [pc, #372]	; (800edc0 <__gethex+0x2ec>)
 800ec4c:	f001 f9b6 	bl	800ffbc <__assert_func>
 800ec50:	3101      	adds	r1, #1
 800ec52:	105b      	asrs	r3, r3, #1
 800ec54:	e7ee      	b.n	800ec34 <__gethex+0x160>
 800ec56:	f100 0914 	add.w	r9, r0, #20
 800ec5a:	f04f 0b00 	mov.w	fp, #0
 800ec5e:	f1ca 0301 	rsb	r3, sl, #1
 800ec62:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec66:	f8cd b000 	str.w	fp, [sp]
 800ec6a:	9306      	str	r3, [sp, #24]
 800ec6c:	42b7      	cmp	r7, r6
 800ec6e:	d340      	bcc.n	800ecf2 <__gethex+0x21e>
 800ec70:	9802      	ldr	r0, [sp, #8]
 800ec72:	9b00      	ldr	r3, [sp, #0]
 800ec74:	f840 3b04 	str.w	r3, [r0], #4
 800ec78:	eba0 0009 	sub.w	r0, r0, r9
 800ec7c:	1080      	asrs	r0, r0, #2
 800ec7e:	0146      	lsls	r6, r0, #5
 800ec80:	6120      	str	r0, [r4, #16]
 800ec82:	4618      	mov	r0, r3
 800ec84:	f000 fb3e 	bl	800f304 <__hi0bits>
 800ec88:	1a30      	subs	r0, r6, r0
 800ec8a:	f8d8 6000 	ldr.w	r6, [r8]
 800ec8e:	42b0      	cmp	r0, r6
 800ec90:	dd63      	ble.n	800ed5a <__gethex+0x286>
 800ec92:	1b87      	subs	r7, r0, r6
 800ec94:	4639      	mov	r1, r7
 800ec96:	4620      	mov	r0, r4
 800ec98:	f000 fee2 	bl	800fa60 <__any_on>
 800ec9c:	4682      	mov	sl, r0
 800ec9e:	b1a8      	cbz	r0, 800eccc <__gethex+0x1f8>
 800eca0:	1e7b      	subs	r3, r7, #1
 800eca2:	1159      	asrs	r1, r3, #5
 800eca4:	f003 021f 	and.w	r2, r3, #31
 800eca8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ecac:	f04f 0a01 	mov.w	sl, #1
 800ecb0:	fa0a f202 	lsl.w	r2, sl, r2
 800ecb4:	420a      	tst	r2, r1
 800ecb6:	d009      	beq.n	800eccc <__gethex+0x1f8>
 800ecb8:	4553      	cmp	r3, sl
 800ecba:	dd05      	ble.n	800ecc8 <__gethex+0x1f4>
 800ecbc:	1eb9      	subs	r1, r7, #2
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f000 fece 	bl	800fa60 <__any_on>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d145      	bne.n	800ed54 <__gethex+0x280>
 800ecc8:	f04f 0a02 	mov.w	sl, #2
 800eccc:	4639      	mov	r1, r7
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f7ff fe98 	bl	800ea04 <rshift>
 800ecd4:	443d      	add	r5, r7
 800ecd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ecda:	42ab      	cmp	r3, r5
 800ecdc:	da4c      	bge.n	800ed78 <__gethex+0x2a4>
 800ecde:	ee18 0a10 	vmov	r0, s16
 800ece2:	4621      	mov	r1, r4
 800ece4:	f000 fa5c 	bl	800f1a0 <_Bfree>
 800ece8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ecea:	2300      	movs	r3, #0
 800ecec:	6013      	str	r3, [r2, #0]
 800ecee:	27a3      	movs	r7, #163	; 0xa3
 800ecf0:	e785      	b.n	800ebfe <__gethex+0x12a>
 800ecf2:	1e73      	subs	r3, r6, #1
 800ecf4:	9a05      	ldr	r2, [sp, #20]
 800ecf6:	9303      	str	r3, [sp, #12]
 800ecf8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d019      	beq.n	800ed34 <__gethex+0x260>
 800ed00:	f1bb 0f20 	cmp.w	fp, #32
 800ed04:	d107      	bne.n	800ed16 <__gethex+0x242>
 800ed06:	9b02      	ldr	r3, [sp, #8]
 800ed08:	9a00      	ldr	r2, [sp, #0]
 800ed0a:	f843 2b04 	str.w	r2, [r3], #4
 800ed0e:	9302      	str	r3, [sp, #8]
 800ed10:	2300      	movs	r3, #0
 800ed12:	9300      	str	r3, [sp, #0]
 800ed14:	469b      	mov	fp, r3
 800ed16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ed1a:	f7ff fec5 	bl	800eaa8 <__hexdig_fun>
 800ed1e:	9b00      	ldr	r3, [sp, #0]
 800ed20:	f000 000f 	and.w	r0, r0, #15
 800ed24:	fa00 f00b 	lsl.w	r0, r0, fp
 800ed28:	4303      	orrs	r3, r0
 800ed2a:	9300      	str	r3, [sp, #0]
 800ed2c:	f10b 0b04 	add.w	fp, fp, #4
 800ed30:	9b03      	ldr	r3, [sp, #12]
 800ed32:	e00d      	b.n	800ed50 <__gethex+0x27c>
 800ed34:	9b03      	ldr	r3, [sp, #12]
 800ed36:	9a06      	ldr	r2, [sp, #24]
 800ed38:	4413      	add	r3, r2
 800ed3a:	42bb      	cmp	r3, r7
 800ed3c:	d3e0      	bcc.n	800ed00 <__gethex+0x22c>
 800ed3e:	4618      	mov	r0, r3
 800ed40:	9901      	ldr	r1, [sp, #4]
 800ed42:	9307      	str	r3, [sp, #28]
 800ed44:	4652      	mov	r2, sl
 800ed46:	f001 f917 	bl	800ff78 <strncmp>
 800ed4a:	9b07      	ldr	r3, [sp, #28]
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d1d7      	bne.n	800ed00 <__gethex+0x22c>
 800ed50:	461e      	mov	r6, r3
 800ed52:	e78b      	b.n	800ec6c <__gethex+0x198>
 800ed54:	f04f 0a03 	mov.w	sl, #3
 800ed58:	e7b8      	b.n	800eccc <__gethex+0x1f8>
 800ed5a:	da0a      	bge.n	800ed72 <__gethex+0x29e>
 800ed5c:	1a37      	subs	r7, r6, r0
 800ed5e:	4621      	mov	r1, r4
 800ed60:	ee18 0a10 	vmov	r0, s16
 800ed64:	463a      	mov	r2, r7
 800ed66:	f000 fc37 	bl	800f5d8 <__lshift>
 800ed6a:	1bed      	subs	r5, r5, r7
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	f100 0914 	add.w	r9, r0, #20
 800ed72:	f04f 0a00 	mov.w	sl, #0
 800ed76:	e7ae      	b.n	800ecd6 <__gethex+0x202>
 800ed78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ed7c:	42a8      	cmp	r0, r5
 800ed7e:	dd72      	ble.n	800ee66 <__gethex+0x392>
 800ed80:	1b45      	subs	r5, r0, r5
 800ed82:	42ae      	cmp	r6, r5
 800ed84:	dc36      	bgt.n	800edf4 <__gethex+0x320>
 800ed86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d02a      	beq.n	800ede4 <__gethex+0x310>
 800ed8e:	2b03      	cmp	r3, #3
 800ed90:	d02c      	beq.n	800edec <__gethex+0x318>
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d11c      	bne.n	800edd0 <__gethex+0x2fc>
 800ed96:	42ae      	cmp	r6, r5
 800ed98:	d11a      	bne.n	800edd0 <__gethex+0x2fc>
 800ed9a:	2e01      	cmp	r6, #1
 800ed9c:	d112      	bne.n	800edc4 <__gethex+0x2f0>
 800ed9e:	9a04      	ldr	r2, [sp, #16]
 800eda0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eda4:	6013      	str	r3, [r2, #0]
 800eda6:	2301      	movs	r3, #1
 800eda8:	6123      	str	r3, [r4, #16]
 800edaa:	f8c9 3000 	str.w	r3, [r9]
 800edae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800edb0:	2762      	movs	r7, #98	; 0x62
 800edb2:	601c      	str	r4, [r3, #0]
 800edb4:	e723      	b.n	800ebfe <__gethex+0x12a>
 800edb6:	bf00      	nop
 800edb8:	08012010 	.word	0x08012010
 800edbc:	08011f98 	.word	0x08011f98
 800edc0:	08011fa9 	.word	0x08011fa9
 800edc4:	1e71      	subs	r1, r6, #1
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 fe4a 	bl	800fa60 <__any_on>
 800edcc:	2800      	cmp	r0, #0
 800edce:	d1e6      	bne.n	800ed9e <__gethex+0x2ca>
 800edd0:	ee18 0a10 	vmov	r0, s16
 800edd4:	4621      	mov	r1, r4
 800edd6:	f000 f9e3 	bl	800f1a0 <_Bfree>
 800edda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eddc:	2300      	movs	r3, #0
 800edde:	6013      	str	r3, [r2, #0]
 800ede0:	2750      	movs	r7, #80	; 0x50
 800ede2:	e70c      	b.n	800ebfe <__gethex+0x12a>
 800ede4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1f2      	bne.n	800edd0 <__gethex+0x2fc>
 800edea:	e7d8      	b.n	800ed9e <__gethex+0x2ca>
 800edec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d1d5      	bne.n	800ed9e <__gethex+0x2ca>
 800edf2:	e7ed      	b.n	800edd0 <__gethex+0x2fc>
 800edf4:	1e6f      	subs	r7, r5, #1
 800edf6:	f1ba 0f00 	cmp.w	sl, #0
 800edfa:	d131      	bne.n	800ee60 <__gethex+0x38c>
 800edfc:	b127      	cbz	r7, 800ee08 <__gethex+0x334>
 800edfe:	4639      	mov	r1, r7
 800ee00:	4620      	mov	r0, r4
 800ee02:	f000 fe2d 	bl	800fa60 <__any_on>
 800ee06:	4682      	mov	sl, r0
 800ee08:	117b      	asrs	r3, r7, #5
 800ee0a:	2101      	movs	r1, #1
 800ee0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ee10:	f007 071f 	and.w	r7, r7, #31
 800ee14:	fa01 f707 	lsl.w	r7, r1, r7
 800ee18:	421f      	tst	r7, r3
 800ee1a:	4629      	mov	r1, r5
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	bf18      	it	ne
 800ee20:	f04a 0a02 	orrne.w	sl, sl, #2
 800ee24:	1b76      	subs	r6, r6, r5
 800ee26:	f7ff fded 	bl	800ea04 <rshift>
 800ee2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ee2e:	2702      	movs	r7, #2
 800ee30:	f1ba 0f00 	cmp.w	sl, #0
 800ee34:	d048      	beq.n	800eec8 <__gethex+0x3f4>
 800ee36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee3a:	2b02      	cmp	r3, #2
 800ee3c:	d015      	beq.n	800ee6a <__gethex+0x396>
 800ee3e:	2b03      	cmp	r3, #3
 800ee40:	d017      	beq.n	800ee72 <__gethex+0x39e>
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d109      	bne.n	800ee5a <__gethex+0x386>
 800ee46:	f01a 0f02 	tst.w	sl, #2
 800ee4a:	d006      	beq.n	800ee5a <__gethex+0x386>
 800ee4c:	f8d9 0000 	ldr.w	r0, [r9]
 800ee50:	ea4a 0a00 	orr.w	sl, sl, r0
 800ee54:	f01a 0f01 	tst.w	sl, #1
 800ee58:	d10e      	bne.n	800ee78 <__gethex+0x3a4>
 800ee5a:	f047 0710 	orr.w	r7, r7, #16
 800ee5e:	e033      	b.n	800eec8 <__gethex+0x3f4>
 800ee60:	f04f 0a01 	mov.w	sl, #1
 800ee64:	e7d0      	b.n	800ee08 <__gethex+0x334>
 800ee66:	2701      	movs	r7, #1
 800ee68:	e7e2      	b.n	800ee30 <__gethex+0x35c>
 800ee6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee6c:	f1c3 0301 	rsb	r3, r3, #1
 800ee70:	9315      	str	r3, [sp, #84]	; 0x54
 800ee72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d0f0      	beq.n	800ee5a <__gethex+0x386>
 800ee78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ee7c:	f104 0314 	add.w	r3, r4, #20
 800ee80:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ee84:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ee88:	f04f 0c00 	mov.w	ip, #0
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee92:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee96:	d01c      	beq.n	800eed2 <__gethex+0x3fe>
 800ee98:	3201      	adds	r2, #1
 800ee9a:	6002      	str	r2, [r0, #0]
 800ee9c:	2f02      	cmp	r7, #2
 800ee9e:	f104 0314 	add.w	r3, r4, #20
 800eea2:	d13f      	bne.n	800ef24 <__gethex+0x450>
 800eea4:	f8d8 2000 	ldr.w	r2, [r8]
 800eea8:	3a01      	subs	r2, #1
 800eeaa:	42b2      	cmp	r2, r6
 800eeac:	d10a      	bne.n	800eec4 <__gethex+0x3f0>
 800eeae:	1171      	asrs	r1, r6, #5
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eeb6:	f006 061f 	and.w	r6, r6, #31
 800eeba:	fa02 f606 	lsl.w	r6, r2, r6
 800eebe:	421e      	tst	r6, r3
 800eec0:	bf18      	it	ne
 800eec2:	4617      	movne	r7, r2
 800eec4:	f047 0720 	orr.w	r7, r7, #32
 800eec8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eeca:	601c      	str	r4, [r3, #0]
 800eecc:	9b04      	ldr	r3, [sp, #16]
 800eece:	601d      	str	r5, [r3, #0]
 800eed0:	e695      	b.n	800ebfe <__gethex+0x12a>
 800eed2:	4299      	cmp	r1, r3
 800eed4:	f843 cc04 	str.w	ip, [r3, #-4]
 800eed8:	d8d8      	bhi.n	800ee8c <__gethex+0x3b8>
 800eeda:	68a3      	ldr	r3, [r4, #8]
 800eedc:	459b      	cmp	fp, r3
 800eede:	db19      	blt.n	800ef14 <__gethex+0x440>
 800eee0:	6861      	ldr	r1, [r4, #4]
 800eee2:	ee18 0a10 	vmov	r0, s16
 800eee6:	3101      	adds	r1, #1
 800eee8:	f000 f91a 	bl	800f120 <_Balloc>
 800eeec:	4681      	mov	r9, r0
 800eeee:	b918      	cbnz	r0, 800eef8 <__gethex+0x424>
 800eef0:	4b1a      	ldr	r3, [pc, #104]	; (800ef5c <__gethex+0x488>)
 800eef2:	4602      	mov	r2, r0
 800eef4:	2184      	movs	r1, #132	; 0x84
 800eef6:	e6a8      	b.n	800ec4a <__gethex+0x176>
 800eef8:	6922      	ldr	r2, [r4, #16]
 800eefa:	3202      	adds	r2, #2
 800eefc:	f104 010c 	add.w	r1, r4, #12
 800ef00:	0092      	lsls	r2, r2, #2
 800ef02:	300c      	adds	r0, #12
 800ef04:	f7fd f95e 	bl	800c1c4 <memcpy>
 800ef08:	4621      	mov	r1, r4
 800ef0a:	ee18 0a10 	vmov	r0, s16
 800ef0e:	f000 f947 	bl	800f1a0 <_Bfree>
 800ef12:	464c      	mov	r4, r9
 800ef14:	6923      	ldr	r3, [r4, #16]
 800ef16:	1c5a      	adds	r2, r3, #1
 800ef18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef1c:	6122      	str	r2, [r4, #16]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	615a      	str	r2, [r3, #20]
 800ef22:	e7bb      	b.n	800ee9c <__gethex+0x3c8>
 800ef24:	6922      	ldr	r2, [r4, #16]
 800ef26:	455a      	cmp	r2, fp
 800ef28:	dd0b      	ble.n	800ef42 <__gethex+0x46e>
 800ef2a:	2101      	movs	r1, #1
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f7ff fd69 	bl	800ea04 <rshift>
 800ef32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef36:	3501      	adds	r5, #1
 800ef38:	42ab      	cmp	r3, r5
 800ef3a:	f6ff aed0 	blt.w	800ecde <__gethex+0x20a>
 800ef3e:	2701      	movs	r7, #1
 800ef40:	e7c0      	b.n	800eec4 <__gethex+0x3f0>
 800ef42:	f016 061f 	ands.w	r6, r6, #31
 800ef46:	d0fa      	beq.n	800ef3e <__gethex+0x46a>
 800ef48:	4453      	add	r3, sl
 800ef4a:	f1c6 0620 	rsb	r6, r6, #32
 800ef4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ef52:	f000 f9d7 	bl	800f304 <__hi0bits>
 800ef56:	42b0      	cmp	r0, r6
 800ef58:	dbe7      	blt.n	800ef2a <__gethex+0x456>
 800ef5a:	e7f0      	b.n	800ef3e <__gethex+0x46a>
 800ef5c:	08011f98 	.word	0x08011f98

0800ef60 <L_shift>:
 800ef60:	f1c2 0208 	rsb	r2, r2, #8
 800ef64:	0092      	lsls	r2, r2, #2
 800ef66:	b570      	push	{r4, r5, r6, lr}
 800ef68:	f1c2 0620 	rsb	r6, r2, #32
 800ef6c:	6843      	ldr	r3, [r0, #4]
 800ef6e:	6804      	ldr	r4, [r0, #0]
 800ef70:	fa03 f506 	lsl.w	r5, r3, r6
 800ef74:	432c      	orrs	r4, r5
 800ef76:	40d3      	lsrs	r3, r2
 800ef78:	6004      	str	r4, [r0, #0]
 800ef7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ef7e:	4288      	cmp	r0, r1
 800ef80:	d3f4      	bcc.n	800ef6c <L_shift+0xc>
 800ef82:	bd70      	pop	{r4, r5, r6, pc}

0800ef84 <__match>:
 800ef84:	b530      	push	{r4, r5, lr}
 800ef86:	6803      	ldr	r3, [r0, #0]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef8e:	b914      	cbnz	r4, 800ef96 <__match+0x12>
 800ef90:	6003      	str	r3, [r0, #0]
 800ef92:	2001      	movs	r0, #1
 800ef94:	bd30      	pop	{r4, r5, pc}
 800ef96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ef9e:	2d19      	cmp	r5, #25
 800efa0:	bf98      	it	ls
 800efa2:	3220      	addls	r2, #32
 800efa4:	42a2      	cmp	r2, r4
 800efa6:	d0f0      	beq.n	800ef8a <__match+0x6>
 800efa8:	2000      	movs	r0, #0
 800efaa:	e7f3      	b.n	800ef94 <__match+0x10>

0800efac <__hexnan>:
 800efac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb0:	680b      	ldr	r3, [r1, #0]
 800efb2:	115e      	asrs	r6, r3, #5
 800efb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800efb8:	f013 031f 	ands.w	r3, r3, #31
 800efbc:	b087      	sub	sp, #28
 800efbe:	bf18      	it	ne
 800efc0:	3604      	addne	r6, #4
 800efc2:	2500      	movs	r5, #0
 800efc4:	1f37      	subs	r7, r6, #4
 800efc6:	4690      	mov	r8, r2
 800efc8:	6802      	ldr	r2, [r0, #0]
 800efca:	9301      	str	r3, [sp, #4]
 800efcc:	4682      	mov	sl, r0
 800efce:	f846 5c04 	str.w	r5, [r6, #-4]
 800efd2:	46b9      	mov	r9, r7
 800efd4:	463c      	mov	r4, r7
 800efd6:	9502      	str	r5, [sp, #8]
 800efd8:	46ab      	mov	fp, r5
 800efda:	7851      	ldrb	r1, [r2, #1]
 800efdc:	1c53      	adds	r3, r2, #1
 800efde:	9303      	str	r3, [sp, #12]
 800efe0:	b341      	cbz	r1, 800f034 <__hexnan+0x88>
 800efe2:	4608      	mov	r0, r1
 800efe4:	9205      	str	r2, [sp, #20]
 800efe6:	9104      	str	r1, [sp, #16]
 800efe8:	f7ff fd5e 	bl	800eaa8 <__hexdig_fun>
 800efec:	2800      	cmp	r0, #0
 800efee:	d14f      	bne.n	800f090 <__hexnan+0xe4>
 800eff0:	9904      	ldr	r1, [sp, #16]
 800eff2:	9a05      	ldr	r2, [sp, #20]
 800eff4:	2920      	cmp	r1, #32
 800eff6:	d818      	bhi.n	800f02a <__hexnan+0x7e>
 800eff8:	9b02      	ldr	r3, [sp, #8]
 800effa:	459b      	cmp	fp, r3
 800effc:	dd13      	ble.n	800f026 <__hexnan+0x7a>
 800effe:	454c      	cmp	r4, r9
 800f000:	d206      	bcs.n	800f010 <__hexnan+0x64>
 800f002:	2d07      	cmp	r5, #7
 800f004:	dc04      	bgt.n	800f010 <__hexnan+0x64>
 800f006:	462a      	mov	r2, r5
 800f008:	4649      	mov	r1, r9
 800f00a:	4620      	mov	r0, r4
 800f00c:	f7ff ffa8 	bl	800ef60 <L_shift>
 800f010:	4544      	cmp	r4, r8
 800f012:	d950      	bls.n	800f0b6 <__hexnan+0x10a>
 800f014:	2300      	movs	r3, #0
 800f016:	f1a4 0904 	sub.w	r9, r4, #4
 800f01a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f01e:	f8cd b008 	str.w	fp, [sp, #8]
 800f022:	464c      	mov	r4, r9
 800f024:	461d      	mov	r5, r3
 800f026:	9a03      	ldr	r2, [sp, #12]
 800f028:	e7d7      	b.n	800efda <__hexnan+0x2e>
 800f02a:	2929      	cmp	r1, #41	; 0x29
 800f02c:	d156      	bne.n	800f0dc <__hexnan+0x130>
 800f02e:	3202      	adds	r2, #2
 800f030:	f8ca 2000 	str.w	r2, [sl]
 800f034:	f1bb 0f00 	cmp.w	fp, #0
 800f038:	d050      	beq.n	800f0dc <__hexnan+0x130>
 800f03a:	454c      	cmp	r4, r9
 800f03c:	d206      	bcs.n	800f04c <__hexnan+0xa0>
 800f03e:	2d07      	cmp	r5, #7
 800f040:	dc04      	bgt.n	800f04c <__hexnan+0xa0>
 800f042:	462a      	mov	r2, r5
 800f044:	4649      	mov	r1, r9
 800f046:	4620      	mov	r0, r4
 800f048:	f7ff ff8a 	bl	800ef60 <L_shift>
 800f04c:	4544      	cmp	r4, r8
 800f04e:	d934      	bls.n	800f0ba <__hexnan+0x10e>
 800f050:	f1a8 0204 	sub.w	r2, r8, #4
 800f054:	4623      	mov	r3, r4
 800f056:	f853 1b04 	ldr.w	r1, [r3], #4
 800f05a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f05e:	429f      	cmp	r7, r3
 800f060:	d2f9      	bcs.n	800f056 <__hexnan+0xaa>
 800f062:	1b3b      	subs	r3, r7, r4
 800f064:	f023 0303 	bic.w	r3, r3, #3
 800f068:	3304      	adds	r3, #4
 800f06a:	3401      	adds	r4, #1
 800f06c:	3e03      	subs	r6, #3
 800f06e:	42b4      	cmp	r4, r6
 800f070:	bf88      	it	hi
 800f072:	2304      	movhi	r3, #4
 800f074:	4443      	add	r3, r8
 800f076:	2200      	movs	r2, #0
 800f078:	f843 2b04 	str.w	r2, [r3], #4
 800f07c:	429f      	cmp	r7, r3
 800f07e:	d2fb      	bcs.n	800f078 <__hexnan+0xcc>
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	b91b      	cbnz	r3, 800f08c <__hexnan+0xe0>
 800f084:	4547      	cmp	r7, r8
 800f086:	d127      	bne.n	800f0d8 <__hexnan+0x12c>
 800f088:	2301      	movs	r3, #1
 800f08a:	603b      	str	r3, [r7, #0]
 800f08c:	2005      	movs	r0, #5
 800f08e:	e026      	b.n	800f0de <__hexnan+0x132>
 800f090:	3501      	adds	r5, #1
 800f092:	2d08      	cmp	r5, #8
 800f094:	f10b 0b01 	add.w	fp, fp, #1
 800f098:	dd06      	ble.n	800f0a8 <__hexnan+0xfc>
 800f09a:	4544      	cmp	r4, r8
 800f09c:	d9c3      	bls.n	800f026 <__hexnan+0x7a>
 800f09e:	2300      	movs	r3, #0
 800f0a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f0a4:	2501      	movs	r5, #1
 800f0a6:	3c04      	subs	r4, #4
 800f0a8:	6822      	ldr	r2, [r4, #0]
 800f0aa:	f000 000f 	and.w	r0, r0, #15
 800f0ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f0b2:	6022      	str	r2, [r4, #0]
 800f0b4:	e7b7      	b.n	800f026 <__hexnan+0x7a>
 800f0b6:	2508      	movs	r5, #8
 800f0b8:	e7b5      	b.n	800f026 <__hexnan+0x7a>
 800f0ba:	9b01      	ldr	r3, [sp, #4]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d0df      	beq.n	800f080 <__hexnan+0xd4>
 800f0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c4:	f1c3 0320 	rsb	r3, r3, #32
 800f0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f0cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f0d0:	401a      	ands	r2, r3
 800f0d2:	f846 2c04 	str.w	r2, [r6, #-4]
 800f0d6:	e7d3      	b.n	800f080 <__hexnan+0xd4>
 800f0d8:	3f04      	subs	r7, #4
 800f0da:	e7d1      	b.n	800f080 <__hexnan+0xd4>
 800f0dc:	2004      	movs	r0, #4
 800f0de:	b007      	add	sp, #28
 800f0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0e4 <_localeconv_r>:
 800f0e4:	4800      	ldr	r0, [pc, #0]	; (800f0e8 <_localeconv_r+0x4>)
 800f0e6:	4770      	bx	lr
 800f0e8:	20000424 	.word	0x20000424

0800f0ec <malloc>:
 800f0ec:	4b02      	ldr	r3, [pc, #8]	; (800f0f8 <malloc+0xc>)
 800f0ee:	4601      	mov	r1, r0
 800f0f0:	6818      	ldr	r0, [r3, #0]
 800f0f2:	f000 bd59 	b.w	800fba8 <_malloc_r>
 800f0f6:	bf00      	nop
 800f0f8:	200002cc 	.word	0x200002cc

0800f0fc <__ascii_mbtowc>:
 800f0fc:	b082      	sub	sp, #8
 800f0fe:	b901      	cbnz	r1, 800f102 <__ascii_mbtowc+0x6>
 800f100:	a901      	add	r1, sp, #4
 800f102:	b142      	cbz	r2, 800f116 <__ascii_mbtowc+0x1a>
 800f104:	b14b      	cbz	r3, 800f11a <__ascii_mbtowc+0x1e>
 800f106:	7813      	ldrb	r3, [r2, #0]
 800f108:	600b      	str	r3, [r1, #0]
 800f10a:	7812      	ldrb	r2, [r2, #0]
 800f10c:	1e10      	subs	r0, r2, #0
 800f10e:	bf18      	it	ne
 800f110:	2001      	movne	r0, #1
 800f112:	b002      	add	sp, #8
 800f114:	4770      	bx	lr
 800f116:	4610      	mov	r0, r2
 800f118:	e7fb      	b.n	800f112 <__ascii_mbtowc+0x16>
 800f11a:	f06f 0001 	mvn.w	r0, #1
 800f11e:	e7f8      	b.n	800f112 <__ascii_mbtowc+0x16>

0800f120 <_Balloc>:
 800f120:	b570      	push	{r4, r5, r6, lr}
 800f122:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f124:	4604      	mov	r4, r0
 800f126:	460d      	mov	r5, r1
 800f128:	b976      	cbnz	r6, 800f148 <_Balloc+0x28>
 800f12a:	2010      	movs	r0, #16
 800f12c:	f7ff ffde 	bl	800f0ec <malloc>
 800f130:	4602      	mov	r2, r0
 800f132:	6260      	str	r0, [r4, #36]	; 0x24
 800f134:	b920      	cbnz	r0, 800f140 <_Balloc+0x20>
 800f136:	4b18      	ldr	r3, [pc, #96]	; (800f198 <_Balloc+0x78>)
 800f138:	4818      	ldr	r0, [pc, #96]	; (800f19c <_Balloc+0x7c>)
 800f13a:	2166      	movs	r1, #102	; 0x66
 800f13c:	f000 ff3e 	bl	800ffbc <__assert_func>
 800f140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f144:	6006      	str	r6, [r0, #0]
 800f146:	60c6      	str	r6, [r0, #12]
 800f148:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f14a:	68f3      	ldr	r3, [r6, #12]
 800f14c:	b183      	cbz	r3, 800f170 <_Balloc+0x50>
 800f14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f156:	b9b8      	cbnz	r0, 800f188 <_Balloc+0x68>
 800f158:	2101      	movs	r1, #1
 800f15a:	fa01 f605 	lsl.w	r6, r1, r5
 800f15e:	1d72      	adds	r2, r6, #5
 800f160:	0092      	lsls	r2, r2, #2
 800f162:	4620      	mov	r0, r4
 800f164:	f000 fc9d 	bl	800faa2 <_calloc_r>
 800f168:	b160      	cbz	r0, 800f184 <_Balloc+0x64>
 800f16a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f16e:	e00e      	b.n	800f18e <_Balloc+0x6e>
 800f170:	2221      	movs	r2, #33	; 0x21
 800f172:	2104      	movs	r1, #4
 800f174:	4620      	mov	r0, r4
 800f176:	f000 fc94 	bl	800faa2 <_calloc_r>
 800f17a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f17c:	60f0      	str	r0, [r6, #12]
 800f17e:	68db      	ldr	r3, [r3, #12]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d1e4      	bne.n	800f14e <_Balloc+0x2e>
 800f184:	2000      	movs	r0, #0
 800f186:	bd70      	pop	{r4, r5, r6, pc}
 800f188:	6802      	ldr	r2, [r0, #0]
 800f18a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f18e:	2300      	movs	r3, #0
 800f190:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f194:	e7f7      	b.n	800f186 <_Balloc+0x66>
 800f196:	bf00      	nop
 800f198:	08011f26 	.word	0x08011f26
 800f19c:	08012024 	.word	0x08012024

0800f1a0 <_Bfree>:
 800f1a0:	b570      	push	{r4, r5, r6, lr}
 800f1a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f1a4:	4605      	mov	r5, r0
 800f1a6:	460c      	mov	r4, r1
 800f1a8:	b976      	cbnz	r6, 800f1c8 <_Bfree+0x28>
 800f1aa:	2010      	movs	r0, #16
 800f1ac:	f7ff ff9e 	bl	800f0ec <malloc>
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	6268      	str	r0, [r5, #36]	; 0x24
 800f1b4:	b920      	cbnz	r0, 800f1c0 <_Bfree+0x20>
 800f1b6:	4b09      	ldr	r3, [pc, #36]	; (800f1dc <_Bfree+0x3c>)
 800f1b8:	4809      	ldr	r0, [pc, #36]	; (800f1e0 <_Bfree+0x40>)
 800f1ba:	218a      	movs	r1, #138	; 0x8a
 800f1bc:	f000 fefe 	bl	800ffbc <__assert_func>
 800f1c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1c4:	6006      	str	r6, [r0, #0]
 800f1c6:	60c6      	str	r6, [r0, #12]
 800f1c8:	b13c      	cbz	r4, 800f1da <_Bfree+0x3a>
 800f1ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f1cc:	6862      	ldr	r2, [r4, #4]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f1d4:	6021      	str	r1, [r4, #0]
 800f1d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f1da:	bd70      	pop	{r4, r5, r6, pc}
 800f1dc:	08011f26 	.word	0x08011f26
 800f1e0:	08012024 	.word	0x08012024

0800f1e4 <__multadd>:
 800f1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e8:	690d      	ldr	r5, [r1, #16]
 800f1ea:	4607      	mov	r7, r0
 800f1ec:	460c      	mov	r4, r1
 800f1ee:	461e      	mov	r6, r3
 800f1f0:	f101 0c14 	add.w	ip, r1, #20
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	f8dc 3000 	ldr.w	r3, [ip]
 800f1fa:	b299      	uxth	r1, r3
 800f1fc:	fb02 6101 	mla	r1, r2, r1, r6
 800f200:	0c1e      	lsrs	r6, r3, #16
 800f202:	0c0b      	lsrs	r3, r1, #16
 800f204:	fb02 3306 	mla	r3, r2, r6, r3
 800f208:	b289      	uxth	r1, r1
 800f20a:	3001      	adds	r0, #1
 800f20c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f210:	4285      	cmp	r5, r0
 800f212:	f84c 1b04 	str.w	r1, [ip], #4
 800f216:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f21a:	dcec      	bgt.n	800f1f6 <__multadd+0x12>
 800f21c:	b30e      	cbz	r6, 800f262 <__multadd+0x7e>
 800f21e:	68a3      	ldr	r3, [r4, #8]
 800f220:	42ab      	cmp	r3, r5
 800f222:	dc19      	bgt.n	800f258 <__multadd+0x74>
 800f224:	6861      	ldr	r1, [r4, #4]
 800f226:	4638      	mov	r0, r7
 800f228:	3101      	adds	r1, #1
 800f22a:	f7ff ff79 	bl	800f120 <_Balloc>
 800f22e:	4680      	mov	r8, r0
 800f230:	b928      	cbnz	r0, 800f23e <__multadd+0x5a>
 800f232:	4602      	mov	r2, r0
 800f234:	4b0c      	ldr	r3, [pc, #48]	; (800f268 <__multadd+0x84>)
 800f236:	480d      	ldr	r0, [pc, #52]	; (800f26c <__multadd+0x88>)
 800f238:	21b5      	movs	r1, #181	; 0xb5
 800f23a:	f000 febf 	bl	800ffbc <__assert_func>
 800f23e:	6922      	ldr	r2, [r4, #16]
 800f240:	3202      	adds	r2, #2
 800f242:	f104 010c 	add.w	r1, r4, #12
 800f246:	0092      	lsls	r2, r2, #2
 800f248:	300c      	adds	r0, #12
 800f24a:	f7fc ffbb 	bl	800c1c4 <memcpy>
 800f24e:	4621      	mov	r1, r4
 800f250:	4638      	mov	r0, r7
 800f252:	f7ff ffa5 	bl	800f1a0 <_Bfree>
 800f256:	4644      	mov	r4, r8
 800f258:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f25c:	3501      	adds	r5, #1
 800f25e:	615e      	str	r6, [r3, #20]
 800f260:	6125      	str	r5, [r4, #16]
 800f262:	4620      	mov	r0, r4
 800f264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f268:	08011f98 	.word	0x08011f98
 800f26c:	08012024 	.word	0x08012024

0800f270 <__s2b>:
 800f270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f274:	460c      	mov	r4, r1
 800f276:	4615      	mov	r5, r2
 800f278:	461f      	mov	r7, r3
 800f27a:	2209      	movs	r2, #9
 800f27c:	3308      	adds	r3, #8
 800f27e:	4606      	mov	r6, r0
 800f280:	fb93 f3f2 	sdiv	r3, r3, r2
 800f284:	2100      	movs	r1, #0
 800f286:	2201      	movs	r2, #1
 800f288:	429a      	cmp	r2, r3
 800f28a:	db09      	blt.n	800f2a0 <__s2b+0x30>
 800f28c:	4630      	mov	r0, r6
 800f28e:	f7ff ff47 	bl	800f120 <_Balloc>
 800f292:	b940      	cbnz	r0, 800f2a6 <__s2b+0x36>
 800f294:	4602      	mov	r2, r0
 800f296:	4b19      	ldr	r3, [pc, #100]	; (800f2fc <__s2b+0x8c>)
 800f298:	4819      	ldr	r0, [pc, #100]	; (800f300 <__s2b+0x90>)
 800f29a:	21ce      	movs	r1, #206	; 0xce
 800f29c:	f000 fe8e 	bl	800ffbc <__assert_func>
 800f2a0:	0052      	lsls	r2, r2, #1
 800f2a2:	3101      	adds	r1, #1
 800f2a4:	e7f0      	b.n	800f288 <__s2b+0x18>
 800f2a6:	9b08      	ldr	r3, [sp, #32]
 800f2a8:	6143      	str	r3, [r0, #20]
 800f2aa:	2d09      	cmp	r5, #9
 800f2ac:	f04f 0301 	mov.w	r3, #1
 800f2b0:	6103      	str	r3, [r0, #16]
 800f2b2:	dd16      	ble.n	800f2e2 <__s2b+0x72>
 800f2b4:	f104 0909 	add.w	r9, r4, #9
 800f2b8:	46c8      	mov	r8, r9
 800f2ba:	442c      	add	r4, r5
 800f2bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f2c0:	4601      	mov	r1, r0
 800f2c2:	3b30      	subs	r3, #48	; 0x30
 800f2c4:	220a      	movs	r2, #10
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f7ff ff8c 	bl	800f1e4 <__multadd>
 800f2cc:	45a0      	cmp	r8, r4
 800f2ce:	d1f5      	bne.n	800f2bc <__s2b+0x4c>
 800f2d0:	f1a5 0408 	sub.w	r4, r5, #8
 800f2d4:	444c      	add	r4, r9
 800f2d6:	1b2d      	subs	r5, r5, r4
 800f2d8:	1963      	adds	r3, r4, r5
 800f2da:	42bb      	cmp	r3, r7
 800f2dc:	db04      	blt.n	800f2e8 <__s2b+0x78>
 800f2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2e2:	340a      	adds	r4, #10
 800f2e4:	2509      	movs	r5, #9
 800f2e6:	e7f6      	b.n	800f2d6 <__s2b+0x66>
 800f2e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f2ec:	4601      	mov	r1, r0
 800f2ee:	3b30      	subs	r3, #48	; 0x30
 800f2f0:	220a      	movs	r2, #10
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	f7ff ff76 	bl	800f1e4 <__multadd>
 800f2f8:	e7ee      	b.n	800f2d8 <__s2b+0x68>
 800f2fa:	bf00      	nop
 800f2fc:	08011f98 	.word	0x08011f98
 800f300:	08012024 	.word	0x08012024

0800f304 <__hi0bits>:
 800f304:	0c03      	lsrs	r3, r0, #16
 800f306:	041b      	lsls	r3, r3, #16
 800f308:	b9d3      	cbnz	r3, 800f340 <__hi0bits+0x3c>
 800f30a:	0400      	lsls	r0, r0, #16
 800f30c:	2310      	movs	r3, #16
 800f30e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f312:	bf04      	itt	eq
 800f314:	0200      	lsleq	r0, r0, #8
 800f316:	3308      	addeq	r3, #8
 800f318:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f31c:	bf04      	itt	eq
 800f31e:	0100      	lsleq	r0, r0, #4
 800f320:	3304      	addeq	r3, #4
 800f322:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f326:	bf04      	itt	eq
 800f328:	0080      	lsleq	r0, r0, #2
 800f32a:	3302      	addeq	r3, #2
 800f32c:	2800      	cmp	r0, #0
 800f32e:	db05      	blt.n	800f33c <__hi0bits+0x38>
 800f330:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f334:	f103 0301 	add.w	r3, r3, #1
 800f338:	bf08      	it	eq
 800f33a:	2320      	moveq	r3, #32
 800f33c:	4618      	mov	r0, r3
 800f33e:	4770      	bx	lr
 800f340:	2300      	movs	r3, #0
 800f342:	e7e4      	b.n	800f30e <__hi0bits+0xa>

0800f344 <__lo0bits>:
 800f344:	6803      	ldr	r3, [r0, #0]
 800f346:	f013 0207 	ands.w	r2, r3, #7
 800f34a:	4601      	mov	r1, r0
 800f34c:	d00b      	beq.n	800f366 <__lo0bits+0x22>
 800f34e:	07da      	lsls	r2, r3, #31
 800f350:	d423      	bmi.n	800f39a <__lo0bits+0x56>
 800f352:	0798      	lsls	r0, r3, #30
 800f354:	bf49      	itett	mi
 800f356:	085b      	lsrmi	r3, r3, #1
 800f358:	089b      	lsrpl	r3, r3, #2
 800f35a:	2001      	movmi	r0, #1
 800f35c:	600b      	strmi	r3, [r1, #0]
 800f35e:	bf5c      	itt	pl
 800f360:	600b      	strpl	r3, [r1, #0]
 800f362:	2002      	movpl	r0, #2
 800f364:	4770      	bx	lr
 800f366:	b298      	uxth	r0, r3
 800f368:	b9a8      	cbnz	r0, 800f396 <__lo0bits+0x52>
 800f36a:	0c1b      	lsrs	r3, r3, #16
 800f36c:	2010      	movs	r0, #16
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	b90a      	cbnz	r2, 800f376 <__lo0bits+0x32>
 800f372:	3008      	adds	r0, #8
 800f374:	0a1b      	lsrs	r3, r3, #8
 800f376:	071a      	lsls	r2, r3, #28
 800f378:	bf04      	itt	eq
 800f37a:	091b      	lsreq	r3, r3, #4
 800f37c:	3004      	addeq	r0, #4
 800f37e:	079a      	lsls	r2, r3, #30
 800f380:	bf04      	itt	eq
 800f382:	089b      	lsreq	r3, r3, #2
 800f384:	3002      	addeq	r0, #2
 800f386:	07da      	lsls	r2, r3, #31
 800f388:	d403      	bmi.n	800f392 <__lo0bits+0x4e>
 800f38a:	085b      	lsrs	r3, r3, #1
 800f38c:	f100 0001 	add.w	r0, r0, #1
 800f390:	d005      	beq.n	800f39e <__lo0bits+0x5a>
 800f392:	600b      	str	r3, [r1, #0]
 800f394:	4770      	bx	lr
 800f396:	4610      	mov	r0, r2
 800f398:	e7e9      	b.n	800f36e <__lo0bits+0x2a>
 800f39a:	2000      	movs	r0, #0
 800f39c:	4770      	bx	lr
 800f39e:	2020      	movs	r0, #32
 800f3a0:	4770      	bx	lr
	...

0800f3a4 <__i2b>:
 800f3a4:	b510      	push	{r4, lr}
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	2101      	movs	r1, #1
 800f3aa:	f7ff feb9 	bl	800f120 <_Balloc>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	b928      	cbnz	r0, 800f3be <__i2b+0x1a>
 800f3b2:	4b05      	ldr	r3, [pc, #20]	; (800f3c8 <__i2b+0x24>)
 800f3b4:	4805      	ldr	r0, [pc, #20]	; (800f3cc <__i2b+0x28>)
 800f3b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f3ba:	f000 fdff 	bl	800ffbc <__assert_func>
 800f3be:	2301      	movs	r3, #1
 800f3c0:	6144      	str	r4, [r0, #20]
 800f3c2:	6103      	str	r3, [r0, #16]
 800f3c4:	bd10      	pop	{r4, pc}
 800f3c6:	bf00      	nop
 800f3c8:	08011f98 	.word	0x08011f98
 800f3cc:	08012024 	.word	0x08012024

0800f3d0 <__multiply>:
 800f3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d4:	4691      	mov	r9, r2
 800f3d6:	690a      	ldr	r2, [r1, #16]
 800f3d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	bfb8      	it	lt
 800f3e0:	460b      	movlt	r3, r1
 800f3e2:	460c      	mov	r4, r1
 800f3e4:	bfbc      	itt	lt
 800f3e6:	464c      	movlt	r4, r9
 800f3e8:	4699      	movlt	r9, r3
 800f3ea:	6927      	ldr	r7, [r4, #16]
 800f3ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f3f0:	68a3      	ldr	r3, [r4, #8]
 800f3f2:	6861      	ldr	r1, [r4, #4]
 800f3f4:	eb07 060a 	add.w	r6, r7, sl
 800f3f8:	42b3      	cmp	r3, r6
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	bfb8      	it	lt
 800f3fe:	3101      	addlt	r1, #1
 800f400:	f7ff fe8e 	bl	800f120 <_Balloc>
 800f404:	b930      	cbnz	r0, 800f414 <__multiply+0x44>
 800f406:	4602      	mov	r2, r0
 800f408:	4b44      	ldr	r3, [pc, #272]	; (800f51c <__multiply+0x14c>)
 800f40a:	4845      	ldr	r0, [pc, #276]	; (800f520 <__multiply+0x150>)
 800f40c:	f240 115d 	movw	r1, #349	; 0x15d
 800f410:	f000 fdd4 	bl	800ffbc <__assert_func>
 800f414:	f100 0514 	add.w	r5, r0, #20
 800f418:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f41c:	462b      	mov	r3, r5
 800f41e:	2200      	movs	r2, #0
 800f420:	4543      	cmp	r3, r8
 800f422:	d321      	bcc.n	800f468 <__multiply+0x98>
 800f424:	f104 0314 	add.w	r3, r4, #20
 800f428:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f42c:	f109 0314 	add.w	r3, r9, #20
 800f430:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f434:	9202      	str	r2, [sp, #8]
 800f436:	1b3a      	subs	r2, r7, r4
 800f438:	3a15      	subs	r2, #21
 800f43a:	f022 0203 	bic.w	r2, r2, #3
 800f43e:	3204      	adds	r2, #4
 800f440:	f104 0115 	add.w	r1, r4, #21
 800f444:	428f      	cmp	r7, r1
 800f446:	bf38      	it	cc
 800f448:	2204      	movcc	r2, #4
 800f44a:	9201      	str	r2, [sp, #4]
 800f44c:	9a02      	ldr	r2, [sp, #8]
 800f44e:	9303      	str	r3, [sp, #12]
 800f450:	429a      	cmp	r2, r3
 800f452:	d80c      	bhi.n	800f46e <__multiply+0x9e>
 800f454:	2e00      	cmp	r6, #0
 800f456:	dd03      	ble.n	800f460 <__multiply+0x90>
 800f458:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d05a      	beq.n	800f516 <__multiply+0x146>
 800f460:	6106      	str	r6, [r0, #16]
 800f462:	b005      	add	sp, #20
 800f464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f468:	f843 2b04 	str.w	r2, [r3], #4
 800f46c:	e7d8      	b.n	800f420 <__multiply+0x50>
 800f46e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f472:	f1ba 0f00 	cmp.w	sl, #0
 800f476:	d024      	beq.n	800f4c2 <__multiply+0xf2>
 800f478:	f104 0e14 	add.w	lr, r4, #20
 800f47c:	46a9      	mov	r9, r5
 800f47e:	f04f 0c00 	mov.w	ip, #0
 800f482:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f486:	f8d9 1000 	ldr.w	r1, [r9]
 800f48a:	fa1f fb82 	uxth.w	fp, r2
 800f48e:	b289      	uxth	r1, r1
 800f490:	fb0a 110b 	mla	r1, sl, fp, r1
 800f494:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f498:	f8d9 2000 	ldr.w	r2, [r9]
 800f49c:	4461      	add	r1, ip
 800f49e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f4a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f4a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f4aa:	b289      	uxth	r1, r1
 800f4ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f4b0:	4577      	cmp	r7, lr
 800f4b2:	f849 1b04 	str.w	r1, [r9], #4
 800f4b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f4ba:	d8e2      	bhi.n	800f482 <__multiply+0xb2>
 800f4bc:	9a01      	ldr	r2, [sp, #4]
 800f4be:	f845 c002 	str.w	ip, [r5, r2]
 800f4c2:	9a03      	ldr	r2, [sp, #12]
 800f4c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	f1b9 0f00 	cmp.w	r9, #0
 800f4ce:	d020      	beq.n	800f512 <__multiply+0x142>
 800f4d0:	6829      	ldr	r1, [r5, #0]
 800f4d2:	f104 0c14 	add.w	ip, r4, #20
 800f4d6:	46ae      	mov	lr, r5
 800f4d8:	f04f 0a00 	mov.w	sl, #0
 800f4dc:	f8bc b000 	ldrh.w	fp, [ip]
 800f4e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f4e4:	fb09 220b 	mla	r2, r9, fp, r2
 800f4e8:	4492      	add	sl, r2
 800f4ea:	b289      	uxth	r1, r1
 800f4ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f4f0:	f84e 1b04 	str.w	r1, [lr], #4
 800f4f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f4f8:	f8be 1000 	ldrh.w	r1, [lr]
 800f4fc:	0c12      	lsrs	r2, r2, #16
 800f4fe:	fb09 1102 	mla	r1, r9, r2, r1
 800f502:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f506:	4567      	cmp	r7, ip
 800f508:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f50c:	d8e6      	bhi.n	800f4dc <__multiply+0x10c>
 800f50e:	9a01      	ldr	r2, [sp, #4]
 800f510:	50a9      	str	r1, [r5, r2]
 800f512:	3504      	adds	r5, #4
 800f514:	e79a      	b.n	800f44c <__multiply+0x7c>
 800f516:	3e01      	subs	r6, #1
 800f518:	e79c      	b.n	800f454 <__multiply+0x84>
 800f51a:	bf00      	nop
 800f51c:	08011f98 	.word	0x08011f98
 800f520:	08012024 	.word	0x08012024

0800f524 <__pow5mult>:
 800f524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f528:	4615      	mov	r5, r2
 800f52a:	f012 0203 	ands.w	r2, r2, #3
 800f52e:	4606      	mov	r6, r0
 800f530:	460f      	mov	r7, r1
 800f532:	d007      	beq.n	800f544 <__pow5mult+0x20>
 800f534:	4c25      	ldr	r4, [pc, #148]	; (800f5cc <__pow5mult+0xa8>)
 800f536:	3a01      	subs	r2, #1
 800f538:	2300      	movs	r3, #0
 800f53a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f53e:	f7ff fe51 	bl	800f1e4 <__multadd>
 800f542:	4607      	mov	r7, r0
 800f544:	10ad      	asrs	r5, r5, #2
 800f546:	d03d      	beq.n	800f5c4 <__pow5mult+0xa0>
 800f548:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f54a:	b97c      	cbnz	r4, 800f56c <__pow5mult+0x48>
 800f54c:	2010      	movs	r0, #16
 800f54e:	f7ff fdcd 	bl	800f0ec <malloc>
 800f552:	4602      	mov	r2, r0
 800f554:	6270      	str	r0, [r6, #36]	; 0x24
 800f556:	b928      	cbnz	r0, 800f564 <__pow5mult+0x40>
 800f558:	4b1d      	ldr	r3, [pc, #116]	; (800f5d0 <__pow5mult+0xac>)
 800f55a:	481e      	ldr	r0, [pc, #120]	; (800f5d4 <__pow5mult+0xb0>)
 800f55c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f560:	f000 fd2c 	bl	800ffbc <__assert_func>
 800f564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f568:	6004      	str	r4, [r0, #0]
 800f56a:	60c4      	str	r4, [r0, #12]
 800f56c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f570:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f574:	b94c      	cbnz	r4, 800f58a <__pow5mult+0x66>
 800f576:	f240 2171 	movw	r1, #625	; 0x271
 800f57a:	4630      	mov	r0, r6
 800f57c:	f7ff ff12 	bl	800f3a4 <__i2b>
 800f580:	2300      	movs	r3, #0
 800f582:	f8c8 0008 	str.w	r0, [r8, #8]
 800f586:	4604      	mov	r4, r0
 800f588:	6003      	str	r3, [r0, #0]
 800f58a:	f04f 0900 	mov.w	r9, #0
 800f58e:	07eb      	lsls	r3, r5, #31
 800f590:	d50a      	bpl.n	800f5a8 <__pow5mult+0x84>
 800f592:	4639      	mov	r1, r7
 800f594:	4622      	mov	r2, r4
 800f596:	4630      	mov	r0, r6
 800f598:	f7ff ff1a 	bl	800f3d0 <__multiply>
 800f59c:	4639      	mov	r1, r7
 800f59e:	4680      	mov	r8, r0
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f7ff fdfd 	bl	800f1a0 <_Bfree>
 800f5a6:	4647      	mov	r7, r8
 800f5a8:	106d      	asrs	r5, r5, #1
 800f5aa:	d00b      	beq.n	800f5c4 <__pow5mult+0xa0>
 800f5ac:	6820      	ldr	r0, [r4, #0]
 800f5ae:	b938      	cbnz	r0, 800f5c0 <__pow5mult+0x9c>
 800f5b0:	4622      	mov	r2, r4
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	4630      	mov	r0, r6
 800f5b6:	f7ff ff0b 	bl	800f3d0 <__multiply>
 800f5ba:	6020      	str	r0, [r4, #0]
 800f5bc:	f8c0 9000 	str.w	r9, [r0]
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	e7e4      	b.n	800f58e <__pow5mult+0x6a>
 800f5c4:	4638      	mov	r0, r7
 800f5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ca:	bf00      	nop
 800f5cc:	08012170 	.word	0x08012170
 800f5d0:	08011f26 	.word	0x08011f26
 800f5d4:	08012024 	.word	0x08012024

0800f5d8 <__lshift>:
 800f5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5dc:	460c      	mov	r4, r1
 800f5de:	6849      	ldr	r1, [r1, #4]
 800f5e0:	6923      	ldr	r3, [r4, #16]
 800f5e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f5e6:	68a3      	ldr	r3, [r4, #8]
 800f5e8:	4607      	mov	r7, r0
 800f5ea:	4691      	mov	r9, r2
 800f5ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f5f0:	f108 0601 	add.w	r6, r8, #1
 800f5f4:	42b3      	cmp	r3, r6
 800f5f6:	db0b      	blt.n	800f610 <__lshift+0x38>
 800f5f8:	4638      	mov	r0, r7
 800f5fa:	f7ff fd91 	bl	800f120 <_Balloc>
 800f5fe:	4605      	mov	r5, r0
 800f600:	b948      	cbnz	r0, 800f616 <__lshift+0x3e>
 800f602:	4602      	mov	r2, r0
 800f604:	4b2a      	ldr	r3, [pc, #168]	; (800f6b0 <__lshift+0xd8>)
 800f606:	482b      	ldr	r0, [pc, #172]	; (800f6b4 <__lshift+0xdc>)
 800f608:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f60c:	f000 fcd6 	bl	800ffbc <__assert_func>
 800f610:	3101      	adds	r1, #1
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	e7ee      	b.n	800f5f4 <__lshift+0x1c>
 800f616:	2300      	movs	r3, #0
 800f618:	f100 0114 	add.w	r1, r0, #20
 800f61c:	f100 0210 	add.w	r2, r0, #16
 800f620:	4618      	mov	r0, r3
 800f622:	4553      	cmp	r3, sl
 800f624:	db37      	blt.n	800f696 <__lshift+0xbe>
 800f626:	6920      	ldr	r0, [r4, #16]
 800f628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f62c:	f104 0314 	add.w	r3, r4, #20
 800f630:	f019 091f 	ands.w	r9, r9, #31
 800f634:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f638:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f63c:	d02f      	beq.n	800f69e <__lshift+0xc6>
 800f63e:	f1c9 0e20 	rsb	lr, r9, #32
 800f642:	468a      	mov	sl, r1
 800f644:	f04f 0c00 	mov.w	ip, #0
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	fa02 f209 	lsl.w	r2, r2, r9
 800f64e:	ea42 020c 	orr.w	r2, r2, ip
 800f652:	f84a 2b04 	str.w	r2, [sl], #4
 800f656:	f853 2b04 	ldr.w	r2, [r3], #4
 800f65a:	4298      	cmp	r0, r3
 800f65c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f660:	d8f2      	bhi.n	800f648 <__lshift+0x70>
 800f662:	1b03      	subs	r3, r0, r4
 800f664:	3b15      	subs	r3, #21
 800f666:	f023 0303 	bic.w	r3, r3, #3
 800f66a:	3304      	adds	r3, #4
 800f66c:	f104 0215 	add.w	r2, r4, #21
 800f670:	4290      	cmp	r0, r2
 800f672:	bf38      	it	cc
 800f674:	2304      	movcc	r3, #4
 800f676:	f841 c003 	str.w	ip, [r1, r3]
 800f67a:	f1bc 0f00 	cmp.w	ip, #0
 800f67e:	d001      	beq.n	800f684 <__lshift+0xac>
 800f680:	f108 0602 	add.w	r6, r8, #2
 800f684:	3e01      	subs	r6, #1
 800f686:	4638      	mov	r0, r7
 800f688:	612e      	str	r6, [r5, #16]
 800f68a:	4621      	mov	r1, r4
 800f68c:	f7ff fd88 	bl	800f1a0 <_Bfree>
 800f690:	4628      	mov	r0, r5
 800f692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f696:	f842 0f04 	str.w	r0, [r2, #4]!
 800f69a:	3301      	adds	r3, #1
 800f69c:	e7c1      	b.n	800f622 <__lshift+0x4a>
 800f69e:	3904      	subs	r1, #4
 800f6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f6a8:	4298      	cmp	r0, r3
 800f6aa:	d8f9      	bhi.n	800f6a0 <__lshift+0xc8>
 800f6ac:	e7ea      	b.n	800f684 <__lshift+0xac>
 800f6ae:	bf00      	nop
 800f6b0:	08011f98 	.word	0x08011f98
 800f6b4:	08012024 	.word	0x08012024

0800f6b8 <__mcmp>:
 800f6b8:	b530      	push	{r4, r5, lr}
 800f6ba:	6902      	ldr	r2, [r0, #16]
 800f6bc:	690c      	ldr	r4, [r1, #16]
 800f6be:	1b12      	subs	r2, r2, r4
 800f6c0:	d10e      	bne.n	800f6e0 <__mcmp+0x28>
 800f6c2:	f100 0314 	add.w	r3, r0, #20
 800f6c6:	3114      	adds	r1, #20
 800f6c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f6cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f6d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f6d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f6d8:	42a5      	cmp	r5, r4
 800f6da:	d003      	beq.n	800f6e4 <__mcmp+0x2c>
 800f6dc:	d305      	bcc.n	800f6ea <__mcmp+0x32>
 800f6de:	2201      	movs	r2, #1
 800f6e0:	4610      	mov	r0, r2
 800f6e2:	bd30      	pop	{r4, r5, pc}
 800f6e4:	4283      	cmp	r3, r0
 800f6e6:	d3f3      	bcc.n	800f6d0 <__mcmp+0x18>
 800f6e8:	e7fa      	b.n	800f6e0 <__mcmp+0x28>
 800f6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ee:	e7f7      	b.n	800f6e0 <__mcmp+0x28>

0800f6f0 <__mdiff>:
 800f6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f4:	460c      	mov	r4, r1
 800f6f6:	4606      	mov	r6, r0
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	4690      	mov	r8, r2
 800f6fe:	f7ff ffdb 	bl	800f6b8 <__mcmp>
 800f702:	1e05      	subs	r5, r0, #0
 800f704:	d110      	bne.n	800f728 <__mdiff+0x38>
 800f706:	4629      	mov	r1, r5
 800f708:	4630      	mov	r0, r6
 800f70a:	f7ff fd09 	bl	800f120 <_Balloc>
 800f70e:	b930      	cbnz	r0, 800f71e <__mdiff+0x2e>
 800f710:	4b3a      	ldr	r3, [pc, #232]	; (800f7fc <__mdiff+0x10c>)
 800f712:	4602      	mov	r2, r0
 800f714:	f240 2132 	movw	r1, #562	; 0x232
 800f718:	4839      	ldr	r0, [pc, #228]	; (800f800 <__mdiff+0x110>)
 800f71a:	f000 fc4f 	bl	800ffbc <__assert_func>
 800f71e:	2301      	movs	r3, #1
 800f720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f728:	bfa4      	itt	ge
 800f72a:	4643      	movge	r3, r8
 800f72c:	46a0      	movge	r8, r4
 800f72e:	4630      	mov	r0, r6
 800f730:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f734:	bfa6      	itte	ge
 800f736:	461c      	movge	r4, r3
 800f738:	2500      	movge	r5, #0
 800f73a:	2501      	movlt	r5, #1
 800f73c:	f7ff fcf0 	bl	800f120 <_Balloc>
 800f740:	b920      	cbnz	r0, 800f74c <__mdiff+0x5c>
 800f742:	4b2e      	ldr	r3, [pc, #184]	; (800f7fc <__mdiff+0x10c>)
 800f744:	4602      	mov	r2, r0
 800f746:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f74a:	e7e5      	b.n	800f718 <__mdiff+0x28>
 800f74c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f750:	6926      	ldr	r6, [r4, #16]
 800f752:	60c5      	str	r5, [r0, #12]
 800f754:	f104 0914 	add.w	r9, r4, #20
 800f758:	f108 0514 	add.w	r5, r8, #20
 800f75c:	f100 0e14 	add.w	lr, r0, #20
 800f760:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f764:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f768:	f108 0210 	add.w	r2, r8, #16
 800f76c:	46f2      	mov	sl, lr
 800f76e:	2100      	movs	r1, #0
 800f770:	f859 3b04 	ldr.w	r3, [r9], #4
 800f774:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f778:	fa1f f883 	uxth.w	r8, r3
 800f77c:	fa11 f18b 	uxtah	r1, r1, fp
 800f780:	0c1b      	lsrs	r3, r3, #16
 800f782:	eba1 0808 	sub.w	r8, r1, r8
 800f786:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f78a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f78e:	fa1f f888 	uxth.w	r8, r8
 800f792:	1419      	asrs	r1, r3, #16
 800f794:	454e      	cmp	r6, r9
 800f796:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f79a:	f84a 3b04 	str.w	r3, [sl], #4
 800f79e:	d8e7      	bhi.n	800f770 <__mdiff+0x80>
 800f7a0:	1b33      	subs	r3, r6, r4
 800f7a2:	3b15      	subs	r3, #21
 800f7a4:	f023 0303 	bic.w	r3, r3, #3
 800f7a8:	3304      	adds	r3, #4
 800f7aa:	3415      	adds	r4, #21
 800f7ac:	42a6      	cmp	r6, r4
 800f7ae:	bf38      	it	cc
 800f7b0:	2304      	movcc	r3, #4
 800f7b2:	441d      	add	r5, r3
 800f7b4:	4473      	add	r3, lr
 800f7b6:	469e      	mov	lr, r3
 800f7b8:	462e      	mov	r6, r5
 800f7ba:	4566      	cmp	r6, ip
 800f7bc:	d30e      	bcc.n	800f7dc <__mdiff+0xec>
 800f7be:	f10c 0203 	add.w	r2, ip, #3
 800f7c2:	1b52      	subs	r2, r2, r5
 800f7c4:	f022 0203 	bic.w	r2, r2, #3
 800f7c8:	3d03      	subs	r5, #3
 800f7ca:	45ac      	cmp	ip, r5
 800f7cc:	bf38      	it	cc
 800f7ce:	2200      	movcc	r2, #0
 800f7d0:	441a      	add	r2, r3
 800f7d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f7d6:	b17b      	cbz	r3, 800f7f8 <__mdiff+0x108>
 800f7d8:	6107      	str	r7, [r0, #16]
 800f7da:	e7a3      	b.n	800f724 <__mdiff+0x34>
 800f7dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800f7e0:	fa11 f288 	uxtah	r2, r1, r8
 800f7e4:	1414      	asrs	r4, r2, #16
 800f7e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f7ea:	b292      	uxth	r2, r2
 800f7ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f7f0:	f84e 2b04 	str.w	r2, [lr], #4
 800f7f4:	1421      	asrs	r1, r4, #16
 800f7f6:	e7e0      	b.n	800f7ba <__mdiff+0xca>
 800f7f8:	3f01      	subs	r7, #1
 800f7fa:	e7ea      	b.n	800f7d2 <__mdiff+0xe2>
 800f7fc:	08011f98 	.word	0x08011f98
 800f800:	08012024 	.word	0x08012024

0800f804 <__ulp>:
 800f804:	b082      	sub	sp, #8
 800f806:	ed8d 0b00 	vstr	d0, [sp]
 800f80a:	9b01      	ldr	r3, [sp, #4]
 800f80c:	4912      	ldr	r1, [pc, #72]	; (800f858 <__ulp+0x54>)
 800f80e:	4019      	ands	r1, r3
 800f810:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f814:	2900      	cmp	r1, #0
 800f816:	dd05      	ble.n	800f824 <__ulp+0x20>
 800f818:	2200      	movs	r2, #0
 800f81a:	460b      	mov	r3, r1
 800f81c:	ec43 2b10 	vmov	d0, r2, r3
 800f820:	b002      	add	sp, #8
 800f822:	4770      	bx	lr
 800f824:	4249      	negs	r1, r1
 800f826:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f82a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f82e:	f04f 0200 	mov.w	r2, #0
 800f832:	f04f 0300 	mov.w	r3, #0
 800f836:	da04      	bge.n	800f842 <__ulp+0x3e>
 800f838:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f83c:	fa41 f300 	asr.w	r3, r1, r0
 800f840:	e7ec      	b.n	800f81c <__ulp+0x18>
 800f842:	f1a0 0114 	sub.w	r1, r0, #20
 800f846:	291e      	cmp	r1, #30
 800f848:	bfda      	itte	le
 800f84a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f84e:	fa20 f101 	lsrle.w	r1, r0, r1
 800f852:	2101      	movgt	r1, #1
 800f854:	460a      	mov	r2, r1
 800f856:	e7e1      	b.n	800f81c <__ulp+0x18>
 800f858:	7ff00000 	.word	0x7ff00000

0800f85c <__b2d>:
 800f85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f85e:	6905      	ldr	r5, [r0, #16]
 800f860:	f100 0714 	add.w	r7, r0, #20
 800f864:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f868:	1f2e      	subs	r6, r5, #4
 800f86a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f86e:	4620      	mov	r0, r4
 800f870:	f7ff fd48 	bl	800f304 <__hi0bits>
 800f874:	f1c0 0320 	rsb	r3, r0, #32
 800f878:	280a      	cmp	r0, #10
 800f87a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f8f8 <__b2d+0x9c>
 800f87e:	600b      	str	r3, [r1, #0]
 800f880:	dc14      	bgt.n	800f8ac <__b2d+0x50>
 800f882:	f1c0 0e0b 	rsb	lr, r0, #11
 800f886:	fa24 f10e 	lsr.w	r1, r4, lr
 800f88a:	42b7      	cmp	r7, r6
 800f88c:	ea41 030c 	orr.w	r3, r1, ip
 800f890:	bf34      	ite	cc
 800f892:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f896:	2100      	movcs	r1, #0
 800f898:	3015      	adds	r0, #21
 800f89a:	fa04 f000 	lsl.w	r0, r4, r0
 800f89e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f8a2:	ea40 0201 	orr.w	r2, r0, r1
 800f8a6:	ec43 2b10 	vmov	d0, r2, r3
 800f8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8ac:	42b7      	cmp	r7, r6
 800f8ae:	bf3a      	itte	cc
 800f8b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f8b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800f8b8:	2100      	movcs	r1, #0
 800f8ba:	380b      	subs	r0, #11
 800f8bc:	d017      	beq.n	800f8ee <__b2d+0x92>
 800f8be:	f1c0 0c20 	rsb	ip, r0, #32
 800f8c2:	fa04 f500 	lsl.w	r5, r4, r0
 800f8c6:	42be      	cmp	r6, r7
 800f8c8:	fa21 f40c 	lsr.w	r4, r1, ip
 800f8cc:	ea45 0504 	orr.w	r5, r5, r4
 800f8d0:	bf8c      	ite	hi
 800f8d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f8d6:	2400      	movls	r4, #0
 800f8d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f8dc:	fa01 f000 	lsl.w	r0, r1, r0
 800f8e0:	fa24 f40c 	lsr.w	r4, r4, ip
 800f8e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f8e8:	ea40 0204 	orr.w	r2, r0, r4
 800f8ec:	e7db      	b.n	800f8a6 <__b2d+0x4a>
 800f8ee:	ea44 030c 	orr.w	r3, r4, ip
 800f8f2:	460a      	mov	r2, r1
 800f8f4:	e7d7      	b.n	800f8a6 <__b2d+0x4a>
 800f8f6:	bf00      	nop
 800f8f8:	3ff00000 	.word	0x3ff00000

0800f8fc <__d2b>:
 800f8fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f900:	4689      	mov	r9, r1
 800f902:	2101      	movs	r1, #1
 800f904:	ec57 6b10 	vmov	r6, r7, d0
 800f908:	4690      	mov	r8, r2
 800f90a:	f7ff fc09 	bl	800f120 <_Balloc>
 800f90e:	4604      	mov	r4, r0
 800f910:	b930      	cbnz	r0, 800f920 <__d2b+0x24>
 800f912:	4602      	mov	r2, r0
 800f914:	4b25      	ldr	r3, [pc, #148]	; (800f9ac <__d2b+0xb0>)
 800f916:	4826      	ldr	r0, [pc, #152]	; (800f9b0 <__d2b+0xb4>)
 800f918:	f240 310a 	movw	r1, #778	; 0x30a
 800f91c:	f000 fb4e 	bl	800ffbc <__assert_func>
 800f920:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f924:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f928:	bb35      	cbnz	r5, 800f978 <__d2b+0x7c>
 800f92a:	2e00      	cmp	r6, #0
 800f92c:	9301      	str	r3, [sp, #4]
 800f92e:	d028      	beq.n	800f982 <__d2b+0x86>
 800f930:	4668      	mov	r0, sp
 800f932:	9600      	str	r6, [sp, #0]
 800f934:	f7ff fd06 	bl	800f344 <__lo0bits>
 800f938:	9900      	ldr	r1, [sp, #0]
 800f93a:	b300      	cbz	r0, 800f97e <__d2b+0x82>
 800f93c:	9a01      	ldr	r2, [sp, #4]
 800f93e:	f1c0 0320 	rsb	r3, r0, #32
 800f942:	fa02 f303 	lsl.w	r3, r2, r3
 800f946:	430b      	orrs	r3, r1
 800f948:	40c2      	lsrs	r2, r0
 800f94a:	6163      	str	r3, [r4, #20]
 800f94c:	9201      	str	r2, [sp, #4]
 800f94e:	9b01      	ldr	r3, [sp, #4]
 800f950:	61a3      	str	r3, [r4, #24]
 800f952:	2b00      	cmp	r3, #0
 800f954:	bf14      	ite	ne
 800f956:	2202      	movne	r2, #2
 800f958:	2201      	moveq	r2, #1
 800f95a:	6122      	str	r2, [r4, #16]
 800f95c:	b1d5      	cbz	r5, 800f994 <__d2b+0x98>
 800f95e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f962:	4405      	add	r5, r0
 800f964:	f8c9 5000 	str.w	r5, [r9]
 800f968:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f96c:	f8c8 0000 	str.w	r0, [r8]
 800f970:	4620      	mov	r0, r4
 800f972:	b003      	add	sp, #12
 800f974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f97c:	e7d5      	b.n	800f92a <__d2b+0x2e>
 800f97e:	6161      	str	r1, [r4, #20]
 800f980:	e7e5      	b.n	800f94e <__d2b+0x52>
 800f982:	a801      	add	r0, sp, #4
 800f984:	f7ff fcde 	bl	800f344 <__lo0bits>
 800f988:	9b01      	ldr	r3, [sp, #4]
 800f98a:	6163      	str	r3, [r4, #20]
 800f98c:	2201      	movs	r2, #1
 800f98e:	6122      	str	r2, [r4, #16]
 800f990:	3020      	adds	r0, #32
 800f992:	e7e3      	b.n	800f95c <__d2b+0x60>
 800f994:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f998:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f99c:	f8c9 0000 	str.w	r0, [r9]
 800f9a0:	6918      	ldr	r0, [r3, #16]
 800f9a2:	f7ff fcaf 	bl	800f304 <__hi0bits>
 800f9a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f9aa:	e7df      	b.n	800f96c <__d2b+0x70>
 800f9ac:	08011f98 	.word	0x08011f98
 800f9b0:	08012024 	.word	0x08012024

0800f9b4 <__ratio>:
 800f9b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b8:	4688      	mov	r8, r1
 800f9ba:	4669      	mov	r1, sp
 800f9bc:	4681      	mov	r9, r0
 800f9be:	f7ff ff4d 	bl	800f85c <__b2d>
 800f9c2:	a901      	add	r1, sp, #4
 800f9c4:	4640      	mov	r0, r8
 800f9c6:	ec55 4b10 	vmov	r4, r5, d0
 800f9ca:	f7ff ff47 	bl	800f85c <__b2d>
 800f9ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f9d6:	eba3 0c02 	sub.w	ip, r3, r2
 800f9da:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f9de:	1a9b      	subs	r3, r3, r2
 800f9e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f9e4:	ec51 0b10 	vmov	r0, r1, d0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	bfd6      	itet	le
 800f9ec:	460a      	movle	r2, r1
 800f9ee:	462a      	movgt	r2, r5
 800f9f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f9f4:	468b      	mov	fp, r1
 800f9f6:	462f      	mov	r7, r5
 800f9f8:	bfd4      	ite	le
 800f9fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f9fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fa02:	4620      	mov	r0, r4
 800fa04:	ee10 2a10 	vmov	r2, s0
 800fa08:	465b      	mov	r3, fp
 800fa0a:	4639      	mov	r1, r7
 800fa0c:	f7f0 ff26 	bl	800085c <__aeabi_ddiv>
 800fa10:	ec41 0b10 	vmov	d0, r0, r1
 800fa14:	b003      	add	sp, #12
 800fa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa1a <__copybits>:
 800fa1a:	3901      	subs	r1, #1
 800fa1c:	b570      	push	{r4, r5, r6, lr}
 800fa1e:	1149      	asrs	r1, r1, #5
 800fa20:	6914      	ldr	r4, [r2, #16]
 800fa22:	3101      	adds	r1, #1
 800fa24:	f102 0314 	add.w	r3, r2, #20
 800fa28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fa30:	1f05      	subs	r5, r0, #4
 800fa32:	42a3      	cmp	r3, r4
 800fa34:	d30c      	bcc.n	800fa50 <__copybits+0x36>
 800fa36:	1aa3      	subs	r3, r4, r2
 800fa38:	3b11      	subs	r3, #17
 800fa3a:	f023 0303 	bic.w	r3, r3, #3
 800fa3e:	3211      	adds	r2, #17
 800fa40:	42a2      	cmp	r2, r4
 800fa42:	bf88      	it	hi
 800fa44:	2300      	movhi	r3, #0
 800fa46:	4418      	add	r0, r3
 800fa48:	2300      	movs	r3, #0
 800fa4a:	4288      	cmp	r0, r1
 800fa4c:	d305      	bcc.n	800fa5a <__copybits+0x40>
 800fa4e:	bd70      	pop	{r4, r5, r6, pc}
 800fa50:	f853 6b04 	ldr.w	r6, [r3], #4
 800fa54:	f845 6f04 	str.w	r6, [r5, #4]!
 800fa58:	e7eb      	b.n	800fa32 <__copybits+0x18>
 800fa5a:	f840 3b04 	str.w	r3, [r0], #4
 800fa5e:	e7f4      	b.n	800fa4a <__copybits+0x30>

0800fa60 <__any_on>:
 800fa60:	f100 0214 	add.w	r2, r0, #20
 800fa64:	6900      	ldr	r0, [r0, #16]
 800fa66:	114b      	asrs	r3, r1, #5
 800fa68:	4298      	cmp	r0, r3
 800fa6a:	b510      	push	{r4, lr}
 800fa6c:	db11      	blt.n	800fa92 <__any_on+0x32>
 800fa6e:	dd0a      	ble.n	800fa86 <__any_on+0x26>
 800fa70:	f011 011f 	ands.w	r1, r1, #31
 800fa74:	d007      	beq.n	800fa86 <__any_on+0x26>
 800fa76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fa7a:	fa24 f001 	lsr.w	r0, r4, r1
 800fa7e:	fa00 f101 	lsl.w	r1, r0, r1
 800fa82:	428c      	cmp	r4, r1
 800fa84:	d10b      	bne.n	800fa9e <__any_on+0x3e>
 800fa86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d803      	bhi.n	800fa96 <__any_on+0x36>
 800fa8e:	2000      	movs	r0, #0
 800fa90:	bd10      	pop	{r4, pc}
 800fa92:	4603      	mov	r3, r0
 800fa94:	e7f7      	b.n	800fa86 <__any_on+0x26>
 800fa96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa9a:	2900      	cmp	r1, #0
 800fa9c:	d0f5      	beq.n	800fa8a <__any_on+0x2a>
 800fa9e:	2001      	movs	r0, #1
 800faa0:	e7f6      	b.n	800fa90 <__any_on+0x30>

0800faa2 <_calloc_r>:
 800faa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800faa4:	fba1 2402 	umull	r2, r4, r1, r2
 800faa8:	b94c      	cbnz	r4, 800fabe <_calloc_r+0x1c>
 800faaa:	4611      	mov	r1, r2
 800faac:	9201      	str	r2, [sp, #4]
 800faae:	f000 f87b 	bl	800fba8 <_malloc_r>
 800fab2:	9a01      	ldr	r2, [sp, #4]
 800fab4:	4605      	mov	r5, r0
 800fab6:	b930      	cbnz	r0, 800fac6 <_calloc_r+0x24>
 800fab8:	4628      	mov	r0, r5
 800faba:	b003      	add	sp, #12
 800fabc:	bd30      	pop	{r4, r5, pc}
 800fabe:	220c      	movs	r2, #12
 800fac0:	6002      	str	r2, [r0, #0]
 800fac2:	2500      	movs	r5, #0
 800fac4:	e7f8      	b.n	800fab8 <_calloc_r+0x16>
 800fac6:	4621      	mov	r1, r4
 800fac8:	f7fc fb8a 	bl	800c1e0 <memset>
 800facc:	e7f4      	b.n	800fab8 <_calloc_r+0x16>
	...

0800fad0 <_free_r>:
 800fad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fad2:	2900      	cmp	r1, #0
 800fad4:	d044      	beq.n	800fb60 <_free_r+0x90>
 800fad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fada:	9001      	str	r0, [sp, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	f1a1 0404 	sub.w	r4, r1, #4
 800fae2:	bfb8      	it	lt
 800fae4:	18e4      	addlt	r4, r4, r3
 800fae6:	f000 fab3 	bl	8010050 <__malloc_lock>
 800faea:	4a1e      	ldr	r2, [pc, #120]	; (800fb64 <_free_r+0x94>)
 800faec:	9801      	ldr	r0, [sp, #4]
 800faee:	6813      	ldr	r3, [r2, #0]
 800faf0:	b933      	cbnz	r3, 800fb00 <_free_r+0x30>
 800faf2:	6063      	str	r3, [r4, #4]
 800faf4:	6014      	str	r4, [r2, #0]
 800faf6:	b003      	add	sp, #12
 800faf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fafc:	f000 baae 	b.w	801005c <__malloc_unlock>
 800fb00:	42a3      	cmp	r3, r4
 800fb02:	d908      	bls.n	800fb16 <_free_r+0x46>
 800fb04:	6825      	ldr	r5, [r4, #0]
 800fb06:	1961      	adds	r1, r4, r5
 800fb08:	428b      	cmp	r3, r1
 800fb0a:	bf01      	itttt	eq
 800fb0c:	6819      	ldreq	r1, [r3, #0]
 800fb0e:	685b      	ldreq	r3, [r3, #4]
 800fb10:	1949      	addeq	r1, r1, r5
 800fb12:	6021      	streq	r1, [r4, #0]
 800fb14:	e7ed      	b.n	800faf2 <_free_r+0x22>
 800fb16:	461a      	mov	r2, r3
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	b10b      	cbz	r3, 800fb20 <_free_r+0x50>
 800fb1c:	42a3      	cmp	r3, r4
 800fb1e:	d9fa      	bls.n	800fb16 <_free_r+0x46>
 800fb20:	6811      	ldr	r1, [r2, #0]
 800fb22:	1855      	adds	r5, r2, r1
 800fb24:	42a5      	cmp	r5, r4
 800fb26:	d10b      	bne.n	800fb40 <_free_r+0x70>
 800fb28:	6824      	ldr	r4, [r4, #0]
 800fb2a:	4421      	add	r1, r4
 800fb2c:	1854      	adds	r4, r2, r1
 800fb2e:	42a3      	cmp	r3, r4
 800fb30:	6011      	str	r1, [r2, #0]
 800fb32:	d1e0      	bne.n	800faf6 <_free_r+0x26>
 800fb34:	681c      	ldr	r4, [r3, #0]
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	6053      	str	r3, [r2, #4]
 800fb3a:	4421      	add	r1, r4
 800fb3c:	6011      	str	r1, [r2, #0]
 800fb3e:	e7da      	b.n	800faf6 <_free_r+0x26>
 800fb40:	d902      	bls.n	800fb48 <_free_r+0x78>
 800fb42:	230c      	movs	r3, #12
 800fb44:	6003      	str	r3, [r0, #0]
 800fb46:	e7d6      	b.n	800faf6 <_free_r+0x26>
 800fb48:	6825      	ldr	r5, [r4, #0]
 800fb4a:	1961      	adds	r1, r4, r5
 800fb4c:	428b      	cmp	r3, r1
 800fb4e:	bf04      	itt	eq
 800fb50:	6819      	ldreq	r1, [r3, #0]
 800fb52:	685b      	ldreq	r3, [r3, #4]
 800fb54:	6063      	str	r3, [r4, #4]
 800fb56:	bf04      	itt	eq
 800fb58:	1949      	addeq	r1, r1, r5
 800fb5a:	6021      	streq	r1, [r4, #0]
 800fb5c:	6054      	str	r4, [r2, #4]
 800fb5e:	e7ca      	b.n	800faf6 <_free_r+0x26>
 800fb60:	b003      	add	sp, #12
 800fb62:	bd30      	pop	{r4, r5, pc}
 800fb64:	20001270 	.word	0x20001270

0800fb68 <sbrk_aligned>:
 800fb68:	b570      	push	{r4, r5, r6, lr}
 800fb6a:	4e0e      	ldr	r6, [pc, #56]	; (800fba4 <sbrk_aligned+0x3c>)
 800fb6c:	460c      	mov	r4, r1
 800fb6e:	6831      	ldr	r1, [r6, #0]
 800fb70:	4605      	mov	r5, r0
 800fb72:	b911      	cbnz	r1, 800fb7a <sbrk_aligned+0x12>
 800fb74:	f000 f9f0 	bl	800ff58 <_sbrk_r>
 800fb78:	6030      	str	r0, [r6, #0]
 800fb7a:	4621      	mov	r1, r4
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	f000 f9eb 	bl	800ff58 <_sbrk_r>
 800fb82:	1c43      	adds	r3, r0, #1
 800fb84:	d00a      	beq.n	800fb9c <sbrk_aligned+0x34>
 800fb86:	1cc4      	adds	r4, r0, #3
 800fb88:	f024 0403 	bic.w	r4, r4, #3
 800fb8c:	42a0      	cmp	r0, r4
 800fb8e:	d007      	beq.n	800fba0 <sbrk_aligned+0x38>
 800fb90:	1a21      	subs	r1, r4, r0
 800fb92:	4628      	mov	r0, r5
 800fb94:	f000 f9e0 	bl	800ff58 <_sbrk_r>
 800fb98:	3001      	adds	r0, #1
 800fb9a:	d101      	bne.n	800fba0 <sbrk_aligned+0x38>
 800fb9c:	f04f 34ff 	mov.w	r4, #4294967295
 800fba0:	4620      	mov	r0, r4
 800fba2:	bd70      	pop	{r4, r5, r6, pc}
 800fba4:	20001274 	.word	0x20001274

0800fba8 <_malloc_r>:
 800fba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbac:	1ccd      	adds	r5, r1, #3
 800fbae:	f025 0503 	bic.w	r5, r5, #3
 800fbb2:	3508      	adds	r5, #8
 800fbb4:	2d0c      	cmp	r5, #12
 800fbb6:	bf38      	it	cc
 800fbb8:	250c      	movcc	r5, #12
 800fbba:	2d00      	cmp	r5, #0
 800fbbc:	4607      	mov	r7, r0
 800fbbe:	db01      	blt.n	800fbc4 <_malloc_r+0x1c>
 800fbc0:	42a9      	cmp	r1, r5
 800fbc2:	d905      	bls.n	800fbd0 <_malloc_r+0x28>
 800fbc4:	230c      	movs	r3, #12
 800fbc6:	603b      	str	r3, [r7, #0]
 800fbc8:	2600      	movs	r6, #0
 800fbca:	4630      	mov	r0, r6
 800fbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd0:	4e2e      	ldr	r6, [pc, #184]	; (800fc8c <_malloc_r+0xe4>)
 800fbd2:	f000 fa3d 	bl	8010050 <__malloc_lock>
 800fbd6:	6833      	ldr	r3, [r6, #0]
 800fbd8:	461c      	mov	r4, r3
 800fbda:	bb34      	cbnz	r4, 800fc2a <_malloc_r+0x82>
 800fbdc:	4629      	mov	r1, r5
 800fbde:	4638      	mov	r0, r7
 800fbe0:	f7ff ffc2 	bl	800fb68 <sbrk_aligned>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	d14d      	bne.n	800fc86 <_malloc_r+0xde>
 800fbea:	6834      	ldr	r4, [r6, #0]
 800fbec:	4626      	mov	r6, r4
 800fbee:	2e00      	cmp	r6, #0
 800fbf0:	d140      	bne.n	800fc74 <_malloc_r+0xcc>
 800fbf2:	6823      	ldr	r3, [r4, #0]
 800fbf4:	4631      	mov	r1, r6
 800fbf6:	4638      	mov	r0, r7
 800fbf8:	eb04 0803 	add.w	r8, r4, r3
 800fbfc:	f000 f9ac 	bl	800ff58 <_sbrk_r>
 800fc00:	4580      	cmp	r8, r0
 800fc02:	d13a      	bne.n	800fc7a <_malloc_r+0xd2>
 800fc04:	6821      	ldr	r1, [r4, #0]
 800fc06:	3503      	adds	r5, #3
 800fc08:	1a6d      	subs	r5, r5, r1
 800fc0a:	f025 0503 	bic.w	r5, r5, #3
 800fc0e:	3508      	adds	r5, #8
 800fc10:	2d0c      	cmp	r5, #12
 800fc12:	bf38      	it	cc
 800fc14:	250c      	movcc	r5, #12
 800fc16:	4629      	mov	r1, r5
 800fc18:	4638      	mov	r0, r7
 800fc1a:	f7ff ffa5 	bl	800fb68 <sbrk_aligned>
 800fc1e:	3001      	adds	r0, #1
 800fc20:	d02b      	beq.n	800fc7a <_malloc_r+0xd2>
 800fc22:	6823      	ldr	r3, [r4, #0]
 800fc24:	442b      	add	r3, r5
 800fc26:	6023      	str	r3, [r4, #0]
 800fc28:	e00e      	b.n	800fc48 <_malloc_r+0xa0>
 800fc2a:	6822      	ldr	r2, [r4, #0]
 800fc2c:	1b52      	subs	r2, r2, r5
 800fc2e:	d41e      	bmi.n	800fc6e <_malloc_r+0xc6>
 800fc30:	2a0b      	cmp	r2, #11
 800fc32:	d916      	bls.n	800fc62 <_malloc_r+0xba>
 800fc34:	1961      	adds	r1, r4, r5
 800fc36:	42a3      	cmp	r3, r4
 800fc38:	6025      	str	r5, [r4, #0]
 800fc3a:	bf18      	it	ne
 800fc3c:	6059      	strne	r1, [r3, #4]
 800fc3e:	6863      	ldr	r3, [r4, #4]
 800fc40:	bf08      	it	eq
 800fc42:	6031      	streq	r1, [r6, #0]
 800fc44:	5162      	str	r2, [r4, r5]
 800fc46:	604b      	str	r3, [r1, #4]
 800fc48:	4638      	mov	r0, r7
 800fc4a:	f104 060b 	add.w	r6, r4, #11
 800fc4e:	f000 fa05 	bl	801005c <__malloc_unlock>
 800fc52:	f026 0607 	bic.w	r6, r6, #7
 800fc56:	1d23      	adds	r3, r4, #4
 800fc58:	1af2      	subs	r2, r6, r3
 800fc5a:	d0b6      	beq.n	800fbca <_malloc_r+0x22>
 800fc5c:	1b9b      	subs	r3, r3, r6
 800fc5e:	50a3      	str	r3, [r4, r2]
 800fc60:	e7b3      	b.n	800fbca <_malloc_r+0x22>
 800fc62:	6862      	ldr	r2, [r4, #4]
 800fc64:	42a3      	cmp	r3, r4
 800fc66:	bf0c      	ite	eq
 800fc68:	6032      	streq	r2, [r6, #0]
 800fc6a:	605a      	strne	r2, [r3, #4]
 800fc6c:	e7ec      	b.n	800fc48 <_malloc_r+0xa0>
 800fc6e:	4623      	mov	r3, r4
 800fc70:	6864      	ldr	r4, [r4, #4]
 800fc72:	e7b2      	b.n	800fbda <_malloc_r+0x32>
 800fc74:	4634      	mov	r4, r6
 800fc76:	6876      	ldr	r6, [r6, #4]
 800fc78:	e7b9      	b.n	800fbee <_malloc_r+0x46>
 800fc7a:	230c      	movs	r3, #12
 800fc7c:	603b      	str	r3, [r7, #0]
 800fc7e:	4638      	mov	r0, r7
 800fc80:	f000 f9ec 	bl	801005c <__malloc_unlock>
 800fc84:	e7a1      	b.n	800fbca <_malloc_r+0x22>
 800fc86:	6025      	str	r5, [r4, #0]
 800fc88:	e7de      	b.n	800fc48 <_malloc_r+0xa0>
 800fc8a:	bf00      	nop
 800fc8c:	20001270 	.word	0x20001270

0800fc90 <__ssputs_r>:
 800fc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc94:	688e      	ldr	r6, [r1, #8]
 800fc96:	429e      	cmp	r6, r3
 800fc98:	4682      	mov	sl, r0
 800fc9a:	460c      	mov	r4, r1
 800fc9c:	4690      	mov	r8, r2
 800fc9e:	461f      	mov	r7, r3
 800fca0:	d838      	bhi.n	800fd14 <__ssputs_r+0x84>
 800fca2:	898a      	ldrh	r2, [r1, #12]
 800fca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fca8:	d032      	beq.n	800fd10 <__ssputs_r+0x80>
 800fcaa:	6825      	ldr	r5, [r4, #0]
 800fcac:	6909      	ldr	r1, [r1, #16]
 800fcae:	eba5 0901 	sub.w	r9, r5, r1
 800fcb2:	6965      	ldr	r5, [r4, #20]
 800fcb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fcb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	444b      	add	r3, r9
 800fcc0:	106d      	asrs	r5, r5, #1
 800fcc2:	429d      	cmp	r5, r3
 800fcc4:	bf38      	it	cc
 800fcc6:	461d      	movcc	r5, r3
 800fcc8:	0553      	lsls	r3, r2, #21
 800fcca:	d531      	bpl.n	800fd30 <__ssputs_r+0xa0>
 800fccc:	4629      	mov	r1, r5
 800fcce:	f7ff ff6b 	bl	800fba8 <_malloc_r>
 800fcd2:	4606      	mov	r6, r0
 800fcd4:	b950      	cbnz	r0, 800fcec <__ssputs_r+0x5c>
 800fcd6:	230c      	movs	r3, #12
 800fcd8:	f8ca 3000 	str.w	r3, [sl]
 800fcdc:	89a3      	ldrh	r3, [r4, #12]
 800fcde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fce2:	81a3      	strh	r3, [r4, #12]
 800fce4:	f04f 30ff 	mov.w	r0, #4294967295
 800fce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcec:	6921      	ldr	r1, [r4, #16]
 800fcee:	464a      	mov	r2, r9
 800fcf0:	f7fc fa68 	bl	800c1c4 <memcpy>
 800fcf4:	89a3      	ldrh	r3, [r4, #12]
 800fcf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fcfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcfe:	81a3      	strh	r3, [r4, #12]
 800fd00:	6126      	str	r6, [r4, #16]
 800fd02:	6165      	str	r5, [r4, #20]
 800fd04:	444e      	add	r6, r9
 800fd06:	eba5 0509 	sub.w	r5, r5, r9
 800fd0a:	6026      	str	r6, [r4, #0]
 800fd0c:	60a5      	str	r5, [r4, #8]
 800fd0e:	463e      	mov	r6, r7
 800fd10:	42be      	cmp	r6, r7
 800fd12:	d900      	bls.n	800fd16 <__ssputs_r+0x86>
 800fd14:	463e      	mov	r6, r7
 800fd16:	6820      	ldr	r0, [r4, #0]
 800fd18:	4632      	mov	r2, r6
 800fd1a:	4641      	mov	r1, r8
 800fd1c:	f000 f97e 	bl	801001c <memmove>
 800fd20:	68a3      	ldr	r3, [r4, #8]
 800fd22:	1b9b      	subs	r3, r3, r6
 800fd24:	60a3      	str	r3, [r4, #8]
 800fd26:	6823      	ldr	r3, [r4, #0]
 800fd28:	4433      	add	r3, r6
 800fd2a:	6023      	str	r3, [r4, #0]
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	e7db      	b.n	800fce8 <__ssputs_r+0x58>
 800fd30:	462a      	mov	r2, r5
 800fd32:	f000 f999 	bl	8010068 <_realloc_r>
 800fd36:	4606      	mov	r6, r0
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	d1e1      	bne.n	800fd00 <__ssputs_r+0x70>
 800fd3c:	6921      	ldr	r1, [r4, #16]
 800fd3e:	4650      	mov	r0, sl
 800fd40:	f7ff fec6 	bl	800fad0 <_free_r>
 800fd44:	e7c7      	b.n	800fcd6 <__ssputs_r+0x46>
	...

0800fd48 <_svfiprintf_r>:
 800fd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4c:	4698      	mov	r8, r3
 800fd4e:	898b      	ldrh	r3, [r1, #12]
 800fd50:	061b      	lsls	r3, r3, #24
 800fd52:	b09d      	sub	sp, #116	; 0x74
 800fd54:	4607      	mov	r7, r0
 800fd56:	460d      	mov	r5, r1
 800fd58:	4614      	mov	r4, r2
 800fd5a:	d50e      	bpl.n	800fd7a <_svfiprintf_r+0x32>
 800fd5c:	690b      	ldr	r3, [r1, #16]
 800fd5e:	b963      	cbnz	r3, 800fd7a <_svfiprintf_r+0x32>
 800fd60:	2140      	movs	r1, #64	; 0x40
 800fd62:	f7ff ff21 	bl	800fba8 <_malloc_r>
 800fd66:	6028      	str	r0, [r5, #0]
 800fd68:	6128      	str	r0, [r5, #16]
 800fd6a:	b920      	cbnz	r0, 800fd76 <_svfiprintf_r+0x2e>
 800fd6c:	230c      	movs	r3, #12
 800fd6e:	603b      	str	r3, [r7, #0]
 800fd70:	f04f 30ff 	mov.w	r0, #4294967295
 800fd74:	e0d1      	b.n	800ff1a <_svfiprintf_r+0x1d2>
 800fd76:	2340      	movs	r3, #64	; 0x40
 800fd78:	616b      	str	r3, [r5, #20]
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd7e:	2320      	movs	r3, #32
 800fd80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd84:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd88:	2330      	movs	r3, #48	; 0x30
 800fd8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ff34 <_svfiprintf_r+0x1ec>
 800fd8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd92:	f04f 0901 	mov.w	r9, #1
 800fd96:	4623      	mov	r3, r4
 800fd98:	469a      	mov	sl, r3
 800fd9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd9e:	b10a      	cbz	r2, 800fda4 <_svfiprintf_r+0x5c>
 800fda0:	2a25      	cmp	r2, #37	; 0x25
 800fda2:	d1f9      	bne.n	800fd98 <_svfiprintf_r+0x50>
 800fda4:	ebba 0b04 	subs.w	fp, sl, r4
 800fda8:	d00b      	beq.n	800fdc2 <_svfiprintf_r+0x7a>
 800fdaa:	465b      	mov	r3, fp
 800fdac:	4622      	mov	r2, r4
 800fdae:	4629      	mov	r1, r5
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	f7ff ff6d 	bl	800fc90 <__ssputs_r>
 800fdb6:	3001      	adds	r0, #1
 800fdb8:	f000 80aa 	beq.w	800ff10 <_svfiprintf_r+0x1c8>
 800fdbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdbe:	445a      	add	r2, fp
 800fdc0:	9209      	str	r2, [sp, #36]	; 0x24
 800fdc2:	f89a 3000 	ldrb.w	r3, [sl]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	f000 80a2 	beq.w	800ff10 <_svfiprintf_r+0x1c8>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdd6:	f10a 0a01 	add.w	sl, sl, #1
 800fdda:	9304      	str	r3, [sp, #16]
 800fddc:	9307      	str	r3, [sp, #28]
 800fdde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fde2:	931a      	str	r3, [sp, #104]	; 0x68
 800fde4:	4654      	mov	r4, sl
 800fde6:	2205      	movs	r2, #5
 800fde8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdec:	4851      	ldr	r0, [pc, #324]	; (800ff34 <_svfiprintf_r+0x1ec>)
 800fdee:	f7f0 f9ff 	bl	80001f0 <memchr>
 800fdf2:	9a04      	ldr	r2, [sp, #16]
 800fdf4:	b9d8      	cbnz	r0, 800fe2e <_svfiprintf_r+0xe6>
 800fdf6:	06d0      	lsls	r0, r2, #27
 800fdf8:	bf44      	itt	mi
 800fdfa:	2320      	movmi	r3, #32
 800fdfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe00:	0711      	lsls	r1, r2, #28
 800fe02:	bf44      	itt	mi
 800fe04:	232b      	movmi	r3, #43	; 0x2b
 800fe06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe0a:	f89a 3000 	ldrb.w	r3, [sl]
 800fe0e:	2b2a      	cmp	r3, #42	; 0x2a
 800fe10:	d015      	beq.n	800fe3e <_svfiprintf_r+0xf6>
 800fe12:	9a07      	ldr	r2, [sp, #28]
 800fe14:	4654      	mov	r4, sl
 800fe16:	2000      	movs	r0, #0
 800fe18:	f04f 0c0a 	mov.w	ip, #10
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe22:	3b30      	subs	r3, #48	; 0x30
 800fe24:	2b09      	cmp	r3, #9
 800fe26:	d94e      	bls.n	800fec6 <_svfiprintf_r+0x17e>
 800fe28:	b1b0      	cbz	r0, 800fe58 <_svfiprintf_r+0x110>
 800fe2a:	9207      	str	r2, [sp, #28]
 800fe2c:	e014      	b.n	800fe58 <_svfiprintf_r+0x110>
 800fe2e:	eba0 0308 	sub.w	r3, r0, r8
 800fe32:	fa09 f303 	lsl.w	r3, r9, r3
 800fe36:	4313      	orrs	r3, r2
 800fe38:	9304      	str	r3, [sp, #16]
 800fe3a:	46a2      	mov	sl, r4
 800fe3c:	e7d2      	b.n	800fde4 <_svfiprintf_r+0x9c>
 800fe3e:	9b03      	ldr	r3, [sp, #12]
 800fe40:	1d19      	adds	r1, r3, #4
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	9103      	str	r1, [sp, #12]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	bfbb      	ittet	lt
 800fe4a:	425b      	neglt	r3, r3
 800fe4c:	f042 0202 	orrlt.w	r2, r2, #2
 800fe50:	9307      	strge	r3, [sp, #28]
 800fe52:	9307      	strlt	r3, [sp, #28]
 800fe54:	bfb8      	it	lt
 800fe56:	9204      	strlt	r2, [sp, #16]
 800fe58:	7823      	ldrb	r3, [r4, #0]
 800fe5a:	2b2e      	cmp	r3, #46	; 0x2e
 800fe5c:	d10c      	bne.n	800fe78 <_svfiprintf_r+0x130>
 800fe5e:	7863      	ldrb	r3, [r4, #1]
 800fe60:	2b2a      	cmp	r3, #42	; 0x2a
 800fe62:	d135      	bne.n	800fed0 <_svfiprintf_r+0x188>
 800fe64:	9b03      	ldr	r3, [sp, #12]
 800fe66:	1d1a      	adds	r2, r3, #4
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	9203      	str	r2, [sp, #12]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	bfb8      	it	lt
 800fe70:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe74:	3402      	adds	r4, #2
 800fe76:	9305      	str	r3, [sp, #20]
 800fe78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ff44 <_svfiprintf_r+0x1fc>
 800fe7c:	7821      	ldrb	r1, [r4, #0]
 800fe7e:	2203      	movs	r2, #3
 800fe80:	4650      	mov	r0, sl
 800fe82:	f7f0 f9b5 	bl	80001f0 <memchr>
 800fe86:	b140      	cbz	r0, 800fe9a <_svfiprintf_r+0x152>
 800fe88:	2340      	movs	r3, #64	; 0x40
 800fe8a:	eba0 000a 	sub.w	r0, r0, sl
 800fe8e:	fa03 f000 	lsl.w	r0, r3, r0
 800fe92:	9b04      	ldr	r3, [sp, #16]
 800fe94:	4303      	orrs	r3, r0
 800fe96:	3401      	adds	r4, #1
 800fe98:	9304      	str	r3, [sp, #16]
 800fe9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe9e:	4826      	ldr	r0, [pc, #152]	; (800ff38 <_svfiprintf_r+0x1f0>)
 800fea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fea4:	2206      	movs	r2, #6
 800fea6:	f7f0 f9a3 	bl	80001f0 <memchr>
 800feaa:	2800      	cmp	r0, #0
 800feac:	d038      	beq.n	800ff20 <_svfiprintf_r+0x1d8>
 800feae:	4b23      	ldr	r3, [pc, #140]	; (800ff3c <_svfiprintf_r+0x1f4>)
 800feb0:	bb1b      	cbnz	r3, 800fefa <_svfiprintf_r+0x1b2>
 800feb2:	9b03      	ldr	r3, [sp, #12]
 800feb4:	3307      	adds	r3, #7
 800feb6:	f023 0307 	bic.w	r3, r3, #7
 800feba:	3308      	adds	r3, #8
 800febc:	9303      	str	r3, [sp, #12]
 800febe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fec0:	4433      	add	r3, r6
 800fec2:	9309      	str	r3, [sp, #36]	; 0x24
 800fec4:	e767      	b.n	800fd96 <_svfiprintf_r+0x4e>
 800fec6:	fb0c 3202 	mla	r2, ip, r2, r3
 800feca:	460c      	mov	r4, r1
 800fecc:	2001      	movs	r0, #1
 800fece:	e7a5      	b.n	800fe1c <_svfiprintf_r+0xd4>
 800fed0:	2300      	movs	r3, #0
 800fed2:	3401      	adds	r4, #1
 800fed4:	9305      	str	r3, [sp, #20]
 800fed6:	4619      	mov	r1, r3
 800fed8:	f04f 0c0a 	mov.w	ip, #10
 800fedc:	4620      	mov	r0, r4
 800fede:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fee2:	3a30      	subs	r2, #48	; 0x30
 800fee4:	2a09      	cmp	r2, #9
 800fee6:	d903      	bls.n	800fef0 <_svfiprintf_r+0x1a8>
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d0c5      	beq.n	800fe78 <_svfiprintf_r+0x130>
 800feec:	9105      	str	r1, [sp, #20]
 800feee:	e7c3      	b.n	800fe78 <_svfiprintf_r+0x130>
 800fef0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fef4:	4604      	mov	r4, r0
 800fef6:	2301      	movs	r3, #1
 800fef8:	e7f0      	b.n	800fedc <_svfiprintf_r+0x194>
 800fefa:	ab03      	add	r3, sp, #12
 800fefc:	9300      	str	r3, [sp, #0]
 800fefe:	462a      	mov	r2, r5
 800ff00:	4b0f      	ldr	r3, [pc, #60]	; (800ff40 <_svfiprintf_r+0x1f8>)
 800ff02:	a904      	add	r1, sp, #16
 800ff04:	4638      	mov	r0, r7
 800ff06:	f7fc fa13 	bl	800c330 <_printf_float>
 800ff0a:	1c42      	adds	r2, r0, #1
 800ff0c:	4606      	mov	r6, r0
 800ff0e:	d1d6      	bne.n	800febe <_svfiprintf_r+0x176>
 800ff10:	89ab      	ldrh	r3, [r5, #12]
 800ff12:	065b      	lsls	r3, r3, #25
 800ff14:	f53f af2c 	bmi.w	800fd70 <_svfiprintf_r+0x28>
 800ff18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff1a:	b01d      	add	sp, #116	; 0x74
 800ff1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff20:	ab03      	add	r3, sp, #12
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	462a      	mov	r2, r5
 800ff26:	4b06      	ldr	r3, [pc, #24]	; (800ff40 <_svfiprintf_r+0x1f8>)
 800ff28:	a904      	add	r1, sp, #16
 800ff2a:	4638      	mov	r0, r7
 800ff2c:	f7fc fca4 	bl	800c878 <_printf_i>
 800ff30:	e7eb      	b.n	800ff0a <_svfiprintf_r+0x1c2>
 800ff32:	bf00      	nop
 800ff34:	0801217c 	.word	0x0801217c
 800ff38:	08012186 	.word	0x08012186
 800ff3c:	0800c331 	.word	0x0800c331
 800ff40:	0800fc91 	.word	0x0800fc91
 800ff44:	08012182 	.word	0x08012182

0800ff48 <nan>:
 800ff48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ff50 <nan+0x8>
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	00000000 	.word	0x00000000
 800ff54:	7ff80000 	.word	0x7ff80000

0800ff58 <_sbrk_r>:
 800ff58:	b538      	push	{r3, r4, r5, lr}
 800ff5a:	4d06      	ldr	r5, [pc, #24]	; (800ff74 <_sbrk_r+0x1c>)
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	4604      	mov	r4, r0
 800ff60:	4608      	mov	r0, r1
 800ff62:	602b      	str	r3, [r5, #0]
 800ff64:	f7f2 fec8 	bl	8002cf8 <_sbrk>
 800ff68:	1c43      	adds	r3, r0, #1
 800ff6a:	d102      	bne.n	800ff72 <_sbrk_r+0x1a>
 800ff6c:	682b      	ldr	r3, [r5, #0]
 800ff6e:	b103      	cbz	r3, 800ff72 <_sbrk_r+0x1a>
 800ff70:	6023      	str	r3, [r4, #0]
 800ff72:	bd38      	pop	{r3, r4, r5, pc}
 800ff74:	20001278 	.word	0x20001278

0800ff78 <strncmp>:
 800ff78:	b510      	push	{r4, lr}
 800ff7a:	b17a      	cbz	r2, 800ff9c <strncmp+0x24>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	3901      	subs	r1, #1
 800ff80:	1884      	adds	r4, r0, r2
 800ff82:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ff86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ff8a:	4290      	cmp	r0, r2
 800ff8c:	d101      	bne.n	800ff92 <strncmp+0x1a>
 800ff8e:	42a3      	cmp	r3, r4
 800ff90:	d101      	bne.n	800ff96 <strncmp+0x1e>
 800ff92:	1a80      	subs	r0, r0, r2
 800ff94:	bd10      	pop	{r4, pc}
 800ff96:	2800      	cmp	r0, #0
 800ff98:	d1f3      	bne.n	800ff82 <strncmp+0xa>
 800ff9a:	e7fa      	b.n	800ff92 <strncmp+0x1a>
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	e7f9      	b.n	800ff94 <strncmp+0x1c>

0800ffa0 <__ascii_wctomb>:
 800ffa0:	b149      	cbz	r1, 800ffb6 <__ascii_wctomb+0x16>
 800ffa2:	2aff      	cmp	r2, #255	; 0xff
 800ffa4:	bf85      	ittet	hi
 800ffa6:	238a      	movhi	r3, #138	; 0x8a
 800ffa8:	6003      	strhi	r3, [r0, #0]
 800ffaa:	700a      	strbls	r2, [r1, #0]
 800ffac:	f04f 30ff 	movhi.w	r0, #4294967295
 800ffb0:	bf98      	it	ls
 800ffb2:	2001      	movls	r0, #1
 800ffb4:	4770      	bx	lr
 800ffb6:	4608      	mov	r0, r1
 800ffb8:	4770      	bx	lr
	...

0800ffbc <__assert_func>:
 800ffbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffbe:	4614      	mov	r4, r2
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	4b09      	ldr	r3, [pc, #36]	; (800ffe8 <__assert_func+0x2c>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	68d8      	ldr	r0, [r3, #12]
 800ffca:	b14c      	cbz	r4, 800ffe0 <__assert_func+0x24>
 800ffcc:	4b07      	ldr	r3, [pc, #28]	; (800ffec <__assert_func+0x30>)
 800ffce:	9100      	str	r1, [sp, #0]
 800ffd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ffd4:	4906      	ldr	r1, [pc, #24]	; (800fff0 <__assert_func+0x34>)
 800ffd6:	462b      	mov	r3, r5
 800ffd8:	f000 f80e 	bl	800fff8 <fiprintf>
 800ffdc:	f000 fa8c 	bl	80104f8 <abort>
 800ffe0:	4b04      	ldr	r3, [pc, #16]	; (800fff4 <__assert_func+0x38>)
 800ffe2:	461c      	mov	r4, r3
 800ffe4:	e7f3      	b.n	800ffce <__assert_func+0x12>
 800ffe6:	bf00      	nop
 800ffe8:	200002cc 	.word	0x200002cc
 800ffec:	0801218d 	.word	0x0801218d
 800fff0:	0801219a 	.word	0x0801219a
 800fff4:	080121c8 	.word	0x080121c8

0800fff8 <fiprintf>:
 800fff8:	b40e      	push	{r1, r2, r3}
 800fffa:	b503      	push	{r0, r1, lr}
 800fffc:	4601      	mov	r1, r0
 800fffe:	ab03      	add	r3, sp, #12
 8010000:	4805      	ldr	r0, [pc, #20]	; (8010018 <fiprintf+0x20>)
 8010002:	f853 2b04 	ldr.w	r2, [r3], #4
 8010006:	6800      	ldr	r0, [r0, #0]
 8010008:	9301      	str	r3, [sp, #4]
 801000a:	f000 f885 	bl	8010118 <_vfiprintf_r>
 801000e:	b002      	add	sp, #8
 8010010:	f85d eb04 	ldr.w	lr, [sp], #4
 8010014:	b003      	add	sp, #12
 8010016:	4770      	bx	lr
 8010018:	200002cc 	.word	0x200002cc

0801001c <memmove>:
 801001c:	4288      	cmp	r0, r1
 801001e:	b510      	push	{r4, lr}
 8010020:	eb01 0402 	add.w	r4, r1, r2
 8010024:	d902      	bls.n	801002c <memmove+0x10>
 8010026:	4284      	cmp	r4, r0
 8010028:	4623      	mov	r3, r4
 801002a:	d807      	bhi.n	801003c <memmove+0x20>
 801002c:	1e43      	subs	r3, r0, #1
 801002e:	42a1      	cmp	r1, r4
 8010030:	d008      	beq.n	8010044 <memmove+0x28>
 8010032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010036:	f803 2f01 	strb.w	r2, [r3, #1]!
 801003a:	e7f8      	b.n	801002e <memmove+0x12>
 801003c:	4402      	add	r2, r0
 801003e:	4601      	mov	r1, r0
 8010040:	428a      	cmp	r2, r1
 8010042:	d100      	bne.n	8010046 <memmove+0x2a>
 8010044:	bd10      	pop	{r4, pc}
 8010046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801004a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801004e:	e7f7      	b.n	8010040 <memmove+0x24>

08010050 <__malloc_lock>:
 8010050:	4801      	ldr	r0, [pc, #4]	; (8010058 <__malloc_lock+0x8>)
 8010052:	f000 bc11 	b.w	8010878 <__retarget_lock_acquire_recursive>
 8010056:	bf00      	nop
 8010058:	2000127c 	.word	0x2000127c

0801005c <__malloc_unlock>:
 801005c:	4801      	ldr	r0, [pc, #4]	; (8010064 <__malloc_unlock+0x8>)
 801005e:	f000 bc0c 	b.w	801087a <__retarget_lock_release_recursive>
 8010062:	bf00      	nop
 8010064:	2000127c 	.word	0x2000127c

08010068 <_realloc_r>:
 8010068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006c:	4680      	mov	r8, r0
 801006e:	4614      	mov	r4, r2
 8010070:	460e      	mov	r6, r1
 8010072:	b921      	cbnz	r1, 801007e <_realloc_r+0x16>
 8010074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010078:	4611      	mov	r1, r2
 801007a:	f7ff bd95 	b.w	800fba8 <_malloc_r>
 801007e:	b92a      	cbnz	r2, 801008c <_realloc_r+0x24>
 8010080:	f7ff fd26 	bl	800fad0 <_free_r>
 8010084:	4625      	mov	r5, r4
 8010086:	4628      	mov	r0, r5
 8010088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801008c:	f000 fc5c 	bl	8010948 <_malloc_usable_size_r>
 8010090:	4284      	cmp	r4, r0
 8010092:	4607      	mov	r7, r0
 8010094:	d802      	bhi.n	801009c <_realloc_r+0x34>
 8010096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801009a:	d812      	bhi.n	80100c2 <_realloc_r+0x5a>
 801009c:	4621      	mov	r1, r4
 801009e:	4640      	mov	r0, r8
 80100a0:	f7ff fd82 	bl	800fba8 <_malloc_r>
 80100a4:	4605      	mov	r5, r0
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d0ed      	beq.n	8010086 <_realloc_r+0x1e>
 80100aa:	42bc      	cmp	r4, r7
 80100ac:	4622      	mov	r2, r4
 80100ae:	4631      	mov	r1, r6
 80100b0:	bf28      	it	cs
 80100b2:	463a      	movcs	r2, r7
 80100b4:	f7fc f886 	bl	800c1c4 <memcpy>
 80100b8:	4631      	mov	r1, r6
 80100ba:	4640      	mov	r0, r8
 80100bc:	f7ff fd08 	bl	800fad0 <_free_r>
 80100c0:	e7e1      	b.n	8010086 <_realloc_r+0x1e>
 80100c2:	4635      	mov	r5, r6
 80100c4:	e7df      	b.n	8010086 <_realloc_r+0x1e>

080100c6 <__sfputc_r>:
 80100c6:	6893      	ldr	r3, [r2, #8]
 80100c8:	3b01      	subs	r3, #1
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	b410      	push	{r4}
 80100ce:	6093      	str	r3, [r2, #8]
 80100d0:	da08      	bge.n	80100e4 <__sfputc_r+0x1e>
 80100d2:	6994      	ldr	r4, [r2, #24]
 80100d4:	42a3      	cmp	r3, r4
 80100d6:	db01      	blt.n	80100dc <__sfputc_r+0x16>
 80100d8:	290a      	cmp	r1, #10
 80100da:	d103      	bne.n	80100e4 <__sfputc_r+0x1e>
 80100dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100e0:	f000 b94a 	b.w	8010378 <__swbuf_r>
 80100e4:	6813      	ldr	r3, [r2, #0]
 80100e6:	1c58      	adds	r0, r3, #1
 80100e8:	6010      	str	r0, [r2, #0]
 80100ea:	7019      	strb	r1, [r3, #0]
 80100ec:	4608      	mov	r0, r1
 80100ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <__sfputs_r>:
 80100f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100f6:	4606      	mov	r6, r0
 80100f8:	460f      	mov	r7, r1
 80100fa:	4614      	mov	r4, r2
 80100fc:	18d5      	adds	r5, r2, r3
 80100fe:	42ac      	cmp	r4, r5
 8010100:	d101      	bne.n	8010106 <__sfputs_r+0x12>
 8010102:	2000      	movs	r0, #0
 8010104:	e007      	b.n	8010116 <__sfputs_r+0x22>
 8010106:	f814 1b01 	ldrb.w	r1, [r4], #1
 801010a:	463a      	mov	r2, r7
 801010c:	4630      	mov	r0, r6
 801010e:	f7ff ffda 	bl	80100c6 <__sfputc_r>
 8010112:	1c43      	adds	r3, r0, #1
 8010114:	d1f3      	bne.n	80100fe <__sfputs_r+0xa>
 8010116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010118 <_vfiprintf_r>:
 8010118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011c:	460d      	mov	r5, r1
 801011e:	b09d      	sub	sp, #116	; 0x74
 8010120:	4614      	mov	r4, r2
 8010122:	4698      	mov	r8, r3
 8010124:	4606      	mov	r6, r0
 8010126:	b118      	cbz	r0, 8010130 <_vfiprintf_r+0x18>
 8010128:	6983      	ldr	r3, [r0, #24]
 801012a:	b90b      	cbnz	r3, 8010130 <_vfiprintf_r+0x18>
 801012c:	f000 fb06 	bl	801073c <__sinit>
 8010130:	4b89      	ldr	r3, [pc, #548]	; (8010358 <_vfiprintf_r+0x240>)
 8010132:	429d      	cmp	r5, r3
 8010134:	d11b      	bne.n	801016e <_vfiprintf_r+0x56>
 8010136:	6875      	ldr	r5, [r6, #4]
 8010138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801013a:	07d9      	lsls	r1, r3, #31
 801013c:	d405      	bmi.n	801014a <_vfiprintf_r+0x32>
 801013e:	89ab      	ldrh	r3, [r5, #12]
 8010140:	059a      	lsls	r2, r3, #22
 8010142:	d402      	bmi.n	801014a <_vfiprintf_r+0x32>
 8010144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010146:	f000 fb97 	bl	8010878 <__retarget_lock_acquire_recursive>
 801014a:	89ab      	ldrh	r3, [r5, #12]
 801014c:	071b      	lsls	r3, r3, #28
 801014e:	d501      	bpl.n	8010154 <_vfiprintf_r+0x3c>
 8010150:	692b      	ldr	r3, [r5, #16]
 8010152:	b9eb      	cbnz	r3, 8010190 <_vfiprintf_r+0x78>
 8010154:	4629      	mov	r1, r5
 8010156:	4630      	mov	r0, r6
 8010158:	f000 f960 	bl	801041c <__swsetup_r>
 801015c:	b1c0      	cbz	r0, 8010190 <_vfiprintf_r+0x78>
 801015e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010160:	07dc      	lsls	r4, r3, #31
 8010162:	d50e      	bpl.n	8010182 <_vfiprintf_r+0x6a>
 8010164:	f04f 30ff 	mov.w	r0, #4294967295
 8010168:	b01d      	add	sp, #116	; 0x74
 801016a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801016e:	4b7b      	ldr	r3, [pc, #492]	; (801035c <_vfiprintf_r+0x244>)
 8010170:	429d      	cmp	r5, r3
 8010172:	d101      	bne.n	8010178 <_vfiprintf_r+0x60>
 8010174:	68b5      	ldr	r5, [r6, #8]
 8010176:	e7df      	b.n	8010138 <_vfiprintf_r+0x20>
 8010178:	4b79      	ldr	r3, [pc, #484]	; (8010360 <_vfiprintf_r+0x248>)
 801017a:	429d      	cmp	r5, r3
 801017c:	bf08      	it	eq
 801017e:	68f5      	ldreq	r5, [r6, #12]
 8010180:	e7da      	b.n	8010138 <_vfiprintf_r+0x20>
 8010182:	89ab      	ldrh	r3, [r5, #12]
 8010184:	0598      	lsls	r0, r3, #22
 8010186:	d4ed      	bmi.n	8010164 <_vfiprintf_r+0x4c>
 8010188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801018a:	f000 fb76 	bl	801087a <__retarget_lock_release_recursive>
 801018e:	e7e9      	b.n	8010164 <_vfiprintf_r+0x4c>
 8010190:	2300      	movs	r3, #0
 8010192:	9309      	str	r3, [sp, #36]	; 0x24
 8010194:	2320      	movs	r3, #32
 8010196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801019a:	f8cd 800c 	str.w	r8, [sp, #12]
 801019e:	2330      	movs	r3, #48	; 0x30
 80101a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010364 <_vfiprintf_r+0x24c>
 80101a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101a8:	f04f 0901 	mov.w	r9, #1
 80101ac:	4623      	mov	r3, r4
 80101ae:	469a      	mov	sl, r3
 80101b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101b4:	b10a      	cbz	r2, 80101ba <_vfiprintf_r+0xa2>
 80101b6:	2a25      	cmp	r2, #37	; 0x25
 80101b8:	d1f9      	bne.n	80101ae <_vfiprintf_r+0x96>
 80101ba:	ebba 0b04 	subs.w	fp, sl, r4
 80101be:	d00b      	beq.n	80101d8 <_vfiprintf_r+0xc0>
 80101c0:	465b      	mov	r3, fp
 80101c2:	4622      	mov	r2, r4
 80101c4:	4629      	mov	r1, r5
 80101c6:	4630      	mov	r0, r6
 80101c8:	f7ff ff94 	bl	80100f4 <__sfputs_r>
 80101cc:	3001      	adds	r0, #1
 80101ce:	f000 80aa 	beq.w	8010326 <_vfiprintf_r+0x20e>
 80101d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101d4:	445a      	add	r2, fp
 80101d6:	9209      	str	r2, [sp, #36]	; 0x24
 80101d8:	f89a 3000 	ldrb.w	r3, [sl]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f000 80a2 	beq.w	8010326 <_vfiprintf_r+0x20e>
 80101e2:	2300      	movs	r3, #0
 80101e4:	f04f 32ff 	mov.w	r2, #4294967295
 80101e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101ec:	f10a 0a01 	add.w	sl, sl, #1
 80101f0:	9304      	str	r3, [sp, #16]
 80101f2:	9307      	str	r3, [sp, #28]
 80101f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101f8:	931a      	str	r3, [sp, #104]	; 0x68
 80101fa:	4654      	mov	r4, sl
 80101fc:	2205      	movs	r2, #5
 80101fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010202:	4858      	ldr	r0, [pc, #352]	; (8010364 <_vfiprintf_r+0x24c>)
 8010204:	f7ef fff4 	bl	80001f0 <memchr>
 8010208:	9a04      	ldr	r2, [sp, #16]
 801020a:	b9d8      	cbnz	r0, 8010244 <_vfiprintf_r+0x12c>
 801020c:	06d1      	lsls	r1, r2, #27
 801020e:	bf44      	itt	mi
 8010210:	2320      	movmi	r3, #32
 8010212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010216:	0713      	lsls	r3, r2, #28
 8010218:	bf44      	itt	mi
 801021a:	232b      	movmi	r3, #43	; 0x2b
 801021c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010220:	f89a 3000 	ldrb.w	r3, [sl]
 8010224:	2b2a      	cmp	r3, #42	; 0x2a
 8010226:	d015      	beq.n	8010254 <_vfiprintf_r+0x13c>
 8010228:	9a07      	ldr	r2, [sp, #28]
 801022a:	4654      	mov	r4, sl
 801022c:	2000      	movs	r0, #0
 801022e:	f04f 0c0a 	mov.w	ip, #10
 8010232:	4621      	mov	r1, r4
 8010234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010238:	3b30      	subs	r3, #48	; 0x30
 801023a:	2b09      	cmp	r3, #9
 801023c:	d94e      	bls.n	80102dc <_vfiprintf_r+0x1c4>
 801023e:	b1b0      	cbz	r0, 801026e <_vfiprintf_r+0x156>
 8010240:	9207      	str	r2, [sp, #28]
 8010242:	e014      	b.n	801026e <_vfiprintf_r+0x156>
 8010244:	eba0 0308 	sub.w	r3, r0, r8
 8010248:	fa09 f303 	lsl.w	r3, r9, r3
 801024c:	4313      	orrs	r3, r2
 801024e:	9304      	str	r3, [sp, #16]
 8010250:	46a2      	mov	sl, r4
 8010252:	e7d2      	b.n	80101fa <_vfiprintf_r+0xe2>
 8010254:	9b03      	ldr	r3, [sp, #12]
 8010256:	1d19      	adds	r1, r3, #4
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	9103      	str	r1, [sp, #12]
 801025c:	2b00      	cmp	r3, #0
 801025e:	bfbb      	ittet	lt
 8010260:	425b      	neglt	r3, r3
 8010262:	f042 0202 	orrlt.w	r2, r2, #2
 8010266:	9307      	strge	r3, [sp, #28]
 8010268:	9307      	strlt	r3, [sp, #28]
 801026a:	bfb8      	it	lt
 801026c:	9204      	strlt	r2, [sp, #16]
 801026e:	7823      	ldrb	r3, [r4, #0]
 8010270:	2b2e      	cmp	r3, #46	; 0x2e
 8010272:	d10c      	bne.n	801028e <_vfiprintf_r+0x176>
 8010274:	7863      	ldrb	r3, [r4, #1]
 8010276:	2b2a      	cmp	r3, #42	; 0x2a
 8010278:	d135      	bne.n	80102e6 <_vfiprintf_r+0x1ce>
 801027a:	9b03      	ldr	r3, [sp, #12]
 801027c:	1d1a      	adds	r2, r3, #4
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	9203      	str	r2, [sp, #12]
 8010282:	2b00      	cmp	r3, #0
 8010284:	bfb8      	it	lt
 8010286:	f04f 33ff 	movlt.w	r3, #4294967295
 801028a:	3402      	adds	r4, #2
 801028c:	9305      	str	r3, [sp, #20]
 801028e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010374 <_vfiprintf_r+0x25c>
 8010292:	7821      	ldrb	r1, [r4, #0]
 8010294:	2203      	movs	r2, #3
 8010296:	4650      	mov	r0, sl
 8010298:	f7ef ffaa 	bl	80001f0 <memchr>
 801029c:	b140      	cbz	r0, 80102b0 <_vfiprintf_r+0x198>
 801029e:	2340      	movs	r3, #64	; 0x40
 80102a0:	eba0 000a 	sub.w	r0, r0, sl
 80102a4:	fa03 f000 	lsl.w	r0, r3, r0
 80102a8:	9b04      	ldr	r3, [sp, #16]
 80102aa:	4303      	orrs	r3, r0
 80102ac:	3401      	adds	r4, #1
 80102ae:	9304      	str	r3, [sp, #16]
 80102b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102b4:	482c      	ldr	r0, [pc, #176]	; (8010368 <_vfiprintf_r+0x250>)
 80102b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102ba:	2206      	movs	r2, #6
 80102bc:	f7ef ff98 	bl	80001f0 <memchr>
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d03f      	beq.n	8010344 <_vfiprintf_r+0x22c>
 80102c4:	4b29      	ldr	r3, [pc, #164]	; (801036c <_vfiprintf_r+0x254>)
 80102c6:	bb1b      	cbnz	r3, 8010310 <_vfiprintf_r+0x1f8>
 80102c8:	9b03      	ldr	r3, [sp, #12]
 80102ca:	3307      	adds	r3, #7
 80102cc:	f023 0307 	bic.w	r3, r3, #7
 80102d0:	3308      	adds	r3, #8
 80102d2:	9303      	str	r3, [sp, #12]
 80102d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102d6:	443b      	add	r3, r7
 80102d8:	9309      	str	r3, [sp, #36]	; 0x24
 80102da:	e767      	b.n	80101ac <_vfiprintf_r+0x94>
 80102dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80102e0:	460c      	mov	r4, r1
 80102e2:	2001      	movs	r0, #1
 80102e4:	e7a5      	b.n	8010232 <_vfiprintf_r+0x11a>
 80102e6:	2300      	movs	r3, #0
 80102e8:	3401      	adds	r4, #1
 80102ea:	9305      	str	r3, [sp, #20]
 80102ec:	4619      	mov	r1, r3
 80102ee:	f04f 0c0a 	mov.w	ip, #10
 80102f2:	4620      	mov	r0, r4
 80102f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102f8:	3a30      	subs	r2, #48	; 0x30
 80102fa:	2a09      	cmp	r2, #9
 80102fc:	d903      	bls.n	8010306 <_vfiprintf_r+0x1ee>
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d0c5      	beq.n	801028e <_vfiprintf_r+0x176>
 8010302:	9105      	str	r1, [sp, #20]
 8010304:	e7c3      	b.n	801028e <_vfiprintf_r+0x176>
 8010306:	fb0c 2101 	mla	r1, ip, r1, r2
 801030a:	4604      	mov	r4, r0
 801030c:	2301      	movs	r3, #1
 801030e:	e7f0      	b.n	80102f2 <_vfiprintf_r+0x1da>
 8010310:	ab03      	add	r3, sp, #12
 8010312:	9300      	str	r3, [sp, #0]
 8010314:	462a      	mov	r2, r5
 8010316:	4b16      	ldr	r3, [pc, #88]	; (8010370 <_vfiprintf_r+0x258>)
 8010318:	a904      	add	r1, sp, #16
 801031a:	4630      	mov	r0, r6
 801031c:	f7fc f808 	bl	800c330 <_printf_float>
 8010320:	4607      	mov	r7, r0
 8010322:	1c78      	adds	r0, r7, #1
 8010324:	d1d6      	bne.n	80102d4 <_vfiprintf_r+0x1bc>
 8010326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010328:	07d9      	lsls	r1, r3, #31
 801032a:	d405      	bmi.n	8010338 <_vfiprintf_r+0x220>
 801032c:	89ab      	ldrh	r3, [r5, #12]
 801032e:	059a      	lsls	r2, r3, #22
 8010330:	d402      	bmi.n	8010338 <_vfiprintf_r+0x220>
 8010332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010334:	f000 faa1 	bl	801087a <__retarget_lock_release_recursive>
 8010338:	89ab      	ldrh	r3, [r5, #12]
 801033a:	065b      	lsls	r3, r3, #25
 801033c:	f53f af12 	bmi.w	8010164 <_vfiprintf_r+0x4c>
 8010340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010342:	e711      	b.n	8010168 <_vfiprintf_r+0x50>
 8010344:	ab03      	add	r3, sp, #12
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	462a      	mov	r2, r5
 801034a:	4b09      	ldr	r3, [pc, #36]	; (8010370 <_vfiprintf_r+0x258>)
 801034c:	a904      	add	r1, sp, #16
 801034e:	4630      	mov	r0, r6
 8010350:	f7fc fa92 	bl	800c878 <_printf_i>
 8010354:	e7e4      	b.n	8010320 <_vfiprintf_r+0x208>
 8010356:	bf00      	nop
 8010358:	080121ec 	.word	0x080121ec
 801035c:	0801220c 	.word	0x0801220c
 8010360:	080121cc 	.word	0x080121cc
 8010364:	0801217c 	.word	0x0801217c
 8010368:	08012186 	.word	0x08012186
 801036c:	0800c331 	.word	0x0800c331
 8010370:	080100f5 	.word	0x080100f5
 8010374:	08012182 	.word	0x08012182

08010378 <__swbuf_r>:
 8010378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801037a:	460e      	mov	r6, r1
 801037c:	4614      	mov	r4, r2
 801037e:	4605      	mov	r5, r0
 8010380:	b118      	cbz	r0, 801038a <__swbuf_r+0x12>
 8010382:	6983      	ldr	r3, [r0, #24]
 8010384:	b90b      	cbnz	r3, 801038a <__swbuf_r+0x12>
 8010386:	f000 f9d9 	bl	801073c <__sinit>
 801038a:	4b21      	ldr	r3, [pc, #132]	; (8010410 <__swbuf_r+0x98>)
 801038c:	429c      	cmp	r4, r3
 801038e:	d12b      	bne.n	80103e8 <__swbuf_r+0x70>
 8010390:	686c      	ldr	r4, [r5, #4]
 8010392:	69a3      	ldr	r3, [r4, #24]
 8010394:	60a3      	str	r3, [r4, #8]
 8010396:	89a3      	ldrh	r3, [r4, #12]
 8010398:	071a      	lsls	r2, r3, #28
 801039a:	d52f      	bpl.n	80103fc <__swbuf_r+0x84>
 801039c:	6923      	ldr	r3, [r4, #16]
 801039e:	b36b      	cbz	r3, 80103fc <__swbuf_r+0x84>
 80103a0:	6923      	ldr	r3, [r4, #16]
 80103a2:	6820      	ldr	r0, [r4, #0]
 80103a4:	1ac0      	subs	r0, r0, r3
 80103a6:	6963      	ldr	r3, [r4, #20]
 80103a8:	b2f6      	uxtb	r6, r6
 80103aa:	4283      	cmp	r3, r0
 80103ac:	4637      	mov	r7, r6
 80103ae:	dc04      	bgt.n	80103ba <__swbuf_r+0x42>
 80103b0:	4621      	mov	r1, r4
 80103b2:	4628      	mov	r0, r5
 80103b4:	f000 f92e 	bl	8010614 <_fflush_r>
 80103b8:	bb30      	cbnz	r0, 8010408 <__swbuf_r+0x90>
 80103ba:	68a3      	ldr	r3, [r4, #8]
 80103bc:	3b01      	subs	r3, #1
 80103be:	60a3      	str	r3, [r4, #8]
 80103c0:	6823      	ldr	r3, [r4, #0]
 80103c2:	1c5a      	adds	r2, r3, #1
 80103c4:	6022      	str	r2, [r4, #0]
 80103c6:	701e      	strb	r6, [r3, #0]
 80103c8:	6963      	ldr	r3, [r4, #20]
 80103ca:	3001      	adds	r0, #1
 80103cc:	4283      	cmp	r3, r0
 80103ce:	d004      	beq.n	80103da <__swbuf_r+0x62>
 80103d0:	89a3      	ldrh	r3, [r4, #12]
 80103d2:	07db      	lsls	r3, r3, #31
 80103d4:	d506      	bpl.n	80103e4 <__swbuf_r+0x6c>
 80103d6:	2e0a      	cmp	r6, #10
 80103d8:	d104      	bne.n	80103e4 <__swbuf_r+0x6c>
 80103da:	4621      	mov	r1, r4
 80103dc:	4628      	mov	r0, r5
 80103de:	f000 f919 	bl	8010614 <_fflush_r>
 80103e2:	b988      	cbnz	r0, 8010408 <__swbuf_r+0x90>
 80103e4:	4638      	mov	r0, r7
 80103e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103e8:	4b0a      	ldr	r3, [pc, #40]	; (8010414 <__swbuf_r+0x9c>)
 80103ea:	429c      	cmp	r4, r3
 80103ec:	d101      	bne.n	80103f2 <__swbuf_r+0x7a>
 80103ee:	68ac      	ldr	r4, [r5, #8]
 80103f0:	e7cf      	b.n	8010392 <__swbuf_r+0x1a>
 80103f2:	4b09      	ldr	r3, [pc, #36]	; (8010418 <__swbuf_r+0xa0>)
 80103f4:	429c      	cmp	r4, r3
 80103f6:	bf08      	it	eq
 80103f8:	68ec      	ldreq	r4, [r5, #12]
 80103fa:	e7ca      	b.n	8010392 <__swbuf_r+0x1a>
 80103fc:	4621      	mov	r1, r4
 80103fe:	4628      	mov	r0, r5
 8010400:	f000 f80c 	bl	801041c <__swsetup_r>
 8010404:	2800      	cmp	r0, #0
 8010406:	d0cb      	beq.n	80103a0 <__swbuf_r+0x28>
 8010408:	f04f 37ff 	mov.w	r7, #4294967295
 801040c:	e7ea      	b.n	80103e4 <__swbuf_r+0x6c>
 801040e:	bf00      	nop
 8010410:	080121ec 	.word	0x080121ec
 8010414:	0801220c 	.word	0x0801220c
 8010418:	080121cc 	.word	0x080121cc

0801041c <__swsetup_r>:
 801041c:	4b32      	ldr	r3, [pc, #200]	; (80104e8 <__swsetup_r+0xcc>)
 801041e:	b570      	push	{r4, r5, r6, lr}
 8010420:	681d      	ldr	r5, [r3, #0]
 8010422:	4606      	mov	r6, r0
 8010424:	460c      	mov	r4, r1
 8010426:	b125      	cbz	r5, 8010432 <__swsetup_r+0x16>
 8010428:	69ab      	ldr	r3, [r5, #24]
 801042a:	b913      	cbnz	r3, 8010432 <__swsetup_r+0x16>
 801042c:	4628      	mov	r0, r5
 801042e:	f000 f985 	bl	801073c <__sinit>
 8010432:	4b2e      	ldr	r3, [pc, #184]	; (80104ec <__swsetup_r+0xd0>)
 8010434:	429c      	cmp	r4, r3
 8010436:	d10f      	bne.n	8010458 <__swsetup_r+0x3c>
 8010438:	686c      	ldr	r4, [r5, #4]
 801043a:	89a3      	ldrh	r3, [r4, #12]
 801043c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010440:	0719      	lsls	r1, r3, #28
 8010442:	d42c      	bmi.n	801049e <__swsetup_r+0x82>
 8010444:	06dd      	lsls	r5, r3, #27
 8010446:	d411      	bmi.n	801046c <__swsetup_r+0x50>
 8010448:	2309      	movs	r3, #9
 801044a:	6033      	str	r3, [r6, #0]
 801044c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010450:	81a3      	strh	r3, [r4, #12]
 8010452:	f04f 30ff 	mov.w	r0, #4294967295
 8010456:	e03e      	b.n	80104d6 <__swsetup_r+0xba>
 8010458:	4b25      	ldr	r3, [pc, #148]	; (80104f0 <__swsetup_r+0xd4>)
 801045a:	429c      	cmp	r4, r3
 801045c:	d101      	bne.n	8010462 <__swsetup_r+0x46>
 801045e:	68ac      	ldr	r4, [r5, #8]
 8010460:	e7eb      	b.n	801043a <__swsetup_r+0x1e>
 8010462:	4b24      	ldr	r3, [pc, #144]	; (80104f4 <__swsetup_r+0xd8>)
 8010464:	429c      	cmp	r4, r3
 8010466:	bf08      	it	eq
 8010468:	68ec      	ldreq	r4, [r5, #12]
 801046a:	e7e6      	b.n	801043a <__swsetup_r+0x1e>
 801046c:	0758      	lsls	r0, r3, #29
 801046e:	d512      	bpl.n	8010496 <__swsetup_r+0x7a>
 8010470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010472:	b141      	cbz	r1, 8010486 <__swsetup_r+0x6a>
 8010474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010478:	4299      	cmp	r1, r3
 801047a:	d002      	beq.n	8010482 <__swsetup_r+0x66>
 801047c:	4630      	mov	r0, r6
 801047e:	f7ff fb27 	bl	800fad0 <_free_r>
 8010482:	2300      	movs	r3, #0
 8010484:	6363      	str	r3, [r4, #52]	; 0x34
 8010486:	89a3      	ldrh	r3, [r4, #12]
 8010488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801048c:	81a3      	strh	r3, [r4, #12]
 801048e:	2300      	movs	r3, #0
 8010490:	6063      	str	r3, [r4, #4]
 8010492:	6923      	ldr	r3, [r4, #16]
 8010494:	6023      	str	r3, [r4, #0]
 8010496:	89a3      	ldrh	r3, [r4, #12]
 8010498:	f043 0308 	orr.w	r3, r3, #8
 801049c:	81a3      	strh	r3, [r4, #12]
 801049e:	6923      	ldr	r3, [r4, #16]
 80104a0:	b94b      	cbnz	r3, 80104b6 <__swsetup_r+0x9a>
 80104a2:	89a3      	ldrh	r3, [r4, #12]
 80104a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80104a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104ac:	d003      	beq.n	80104b6 <__swsetup_r+0x9a>
 80104ae:	4621      	mov	r1, r4
 80104b0:	4630      	mov	r0, r6
 80104b2:	f000 fa09 	bl	80108c8 <__smakebuf_r>
 80104b6:	89a0      	ldrh	r0, [r4, #12]
 80104b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104bc:	f010 0301 	ands.w	r3, r0, #1
 80104c0:	d00a      	beq.n	80104d8 <__swsetup_r+0xbc>
 80104c2:	2300      	movs	r3, #0
 80104c4:	60a3      	str	r3, [r4, #8]
 80104c6:	6963      	ldr	r3, [r4, #20]
 80104c8:	425b      	negs	r3, r3
 80104ca:	61a3      	str	r3, [r4, #24]
 80104cc:	6923      	ldr	r3, [r4, #16]
 80104ce:	b943      	cbnz	r3, 80104e2 <__swsetup_r+0xc6>
 80104d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80104d4:	d1ba      	bne.n	801044c <__swsetup_r+0x30>
 80104d6:	bd70      	pop	{r4, r5, r6, pc}
 80104d8:	0781      	lsls	r1, r0, #30
 80104da:	bf58      	it	pl
 80104dc:	6963      	ldrpl	r3, [r4, #20]
 80104de:	60a3      	str	r3, [r4, #8]
 80104e0:	e7f4      	b.n	80104cc <__swsetup_r+0xb0>
 80104e2:	2000      	movs	r0, #0
 80104e4:	e7f7      	b.n	80104d6 <__swsetup_r+0xba>
 80104e6:	bf00      	nop
 80104e8:	200002cc 	.word	0x200002cc
 80104ec:	080121ec 	.word	0x080121ec
 80104f0:	0801220c 	.word	0x0801220c
 80104f4:	080121cc 	.word	0x080121cc

080104f8 <abort>:
 80104f8:	b508      	push	{r3, lr}
 80104fa:	2006      	movs	r0, #6
 80104fc:	f000 fa54 	bl	80109a8 <raise>
 8010500:	2001      	movs	r0, #1
 8010502:	f7f2 fb81 	bl	8002c08 <_exit>
	...

08010508 <__sflush_r>:
 8010508:	898a      	ldrh	r2, [r1, #12]
 801050a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801050e:	4605      	mov	r5, r0
 8010510:	0710      	lsls	r0, r2, #28
 8010512:	460c      	mov	r4, r1
 8010514:	d458      	bmi.n	80105c8 <__sflush_r+0xc0>
 8010516:	684b      	ldr	r3, [r1, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	dc05      	bgt.n	8010528 <__sflush_r+0x20>
 801051c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801051e:	2b00      	cmp	r3, #0
 8010520:	dc02      	bgt.n	8010528 <__sflush_r+0x20>
 8010522:	2000      	movs	r0, #0
 8010524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801052a:	2e00      	cmp	r6, #0
 801052c:	d0f9      	beq.n	8010522 <__sflush_r+0x1a>
 801052e:	2300      	movs	r3, #0
 8010530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010534:	682f      	ldr	r7, [r5, #0]
 8010536:	602b      	str	r3, [r5, #0]
 8010538:	d032      	beq.n	80105a0 <__sflush_r+0x98>
 801053a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801053c:	89a3      	ldrh	r3, [r4, #12]
 801053e:	075a      	lsls	r2, r3, #29
 8010540:	d505      	bpl.n	801054e <__sflush_r+0x46>
 8010542:	6863      	ldr	r3, [r4, #4]
 8010544:	1ac0      	subs	r0, r0, r3
 8010546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010548:	b10b      	cbz	r3, 801054e <__sflush_r+0x46>
 801054a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801054c:	1ac0      	subs	r0, r0, r3
 801054e:	2300      	movs	r3, #0
 8010550:	4602      	mov	r2, r0
 8010552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010554:	6a21      	ldr	r1, [r4, #32]
 8010556:	4628      	mov	r0, r5
 8010558:	47b0      	blx	r6
 801055a:	1c43      	adds	r3, r0, #1
 801055c:	89a3      	ldrh	r3, [r4, #12]
 801055e:	d106      	bne.n	801056e <__sflush_r+0x66>
 8010560:	6829      	ldr	r1, [r5, #0]
 8010562:	291d      	cmp	r1, #29
 8010564:	d82c      	bhi.n	80105c0 <__sflush_r+0xb8>
 8010566:	4a2a      	ldr	r2, [pc, #168]	; (8010610 <__sflush_r+0x108>)
 8010568:	40ca      	lsrs	r2, r1
 801056a:	07d6      	lsls	r6, r2, #31
 801056c:	d528      	bpl.n	80105c0 <__sflush_r+0xb8>
 801056e:	2200      	movs	r2, #0
 8010570:	6062      	str	r2, [r4, #4]
 8010572:	04d9      	lsls	r1, r3, #19
 8010574:	6922      	ldr	r2, [r4, #16]
 8010576:	6022      	str	r2, [r4, #0]
 8010578:	d504      	bpl.n	8010584 <__sflush_r+0x7c>
 801057a:	1c42      	adds	r2, r0, #1
 801057c:	d101      	bne.n	8010582 <__sflush_r+0x7a>
 801057e:	682b      	ldr	r3, [r5, #0]
 8010580:	b903      	cbnz	r3, 8010584 <__sflush_r+0x7c>
 8010582:	6560      	str	r0, [r4, #84]	; 0x54
 8010584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010586:	602f      	str	r7, [r5, #0]
 8010588:	2900      	cmp	r1, #0
 801058a:	d0ca      	beq.n	8010522 <__sflush_r+0x1a>
 801058c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010590:	4299      	cmp	r1, r3
 8010592:	d002      	beq.n	801059a <__sflush_r+0x92>
 8010594:	4628      	mov	r0, r5
 8010596:	f7ff fa9b 	bl	800fad0 <_free_r>
 801059a:	2000      	movs	r0, #0
 801059c:	6360      	str	r0, [r4, #52]	; 0x34
 801059e:	e7c1      	b.n	8010524 <__sflush_r+0x1c>
 80105a0:	6a21      	ldr	r1, [r4, #32]
 80105a2:	2301      	movs	r3, #1
 80105a4:	4628      	mov	r0, r5
 80105a6:	47b0      	blx	r6
 80105a8:	1c41      	adds	r1, r0, #1
 80105aa:	d1c7      	bne.n	801053c <__sflush_r+0x34>
 80105ac:	682b      	ldr	r3, [r5, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d0c4      	beq.n	801053c <__sflush_r+0x34>
 80105b2:	2b1d      	cmp	r3, #29
 80105b4:	d001      	beq.n	80105ba <__sflush_r+0xb2>
 80105b6:	2b16      	cmp	r3, #22
 80105b8:	d101      	bne.n	80105be <__sflush_r+0xb6>
 80105ba:	602f      	str	r7, [r5, #0]
 80105bc:	e7b1      	b.n	8010522 <__sflush_r+0x1a>
 80105be:	89a3      	ldrh	r3, [r4, #12]
 80105c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105c4:	81a3      	strh	r3, [r4, #12]
 80105c6:	e7ad      	b.n	8010524 <__sflush_r+0x1c>
 80105c8:	690f      	ldr	r7, [r1, #16]
 80105ca:	2f00      	cmp	r7, #0
 80105cc:	d0a9      	beq.n	8010522 <__sflush_r+0x1a>
 80105ce:	0793      	lsls	r3, r2, #30
 80105d0:	680e      	ldr	r6, [r1, #0]
 80105d2:	bf08      	it	eq
 80105d4:	694b      	ldreq	r3, [r1, #20]
 80105d6:	600f      	str	r7, [r1, #0]
 80105d8:	bf18      	it	ne
 80105da:	2300      	movne	r3, #0
 80105dc:	eba6 0807 	sub.w	r8, r6, r7
 80105e0:	608b      	str	r3, [r1, #8]
 80105e2:	f1b8 0f00 	cmp.w	r8, #0
 80105e6:	dd9c      	ble.n	8010522 <__sflush_r+0x1a>
 80105e8:	6a21      	ldr	r1, [r4, #32]
 80105ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80105ec:	4643      	mov	r3, r8
 80105ee:	463a      	mov	r2, r7
 80105f0:	4628      	mov	r0, r5
 80105f2:	47b0      	blx	r6
 80105f4:	2800      	cmp	r0, #0
 80105f6:	dc06      	bgt.n	8010606 <__sflush_r+0xfe>
 80105f8:	89a3      	ldrh	r3, [r4, #12]
 80105fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105fe:	81a3      	strh	r3, [r4, #12]
 8010600:	f04f 30ff 	mov.w	r0, #4294967295
 8010604:	e78e      	b.n	8010524 <__sflush_r+0x1c>
 8010606:	4407      	add	r7, r0
 8010608:	eba8 0800 	sub.w	r8, r8, r0
 801060c:	e7e9      	b.n	80105e2 <__sflush_r+0xda>
 801060e:	bf00      	nop
 8010610:	20400001 	.word	0x20400001

08010614 <_fflush_r>:
 8010614:	b538      	push	{r3, r4, r5, lr}
 8010616:	690b      	ldr	r3, [r1, #16]
 8010618:	4605      	mov	r5, r0
 801061a:	460c      	mov	r4, r1
 801061c:	b913      	cbnz	r3, 8010624 <_fflush_r+0x10>
 801061e:	2500      	movs	r5, #0
 8010620:	4628      	mov	r0, r5
 8010622:	bd38      	pop	{r3, r4, r5, pc}
 8010624:	b118      	cbz	r0, 801062e <_fflush_r+0x1a>
 8010626:	6983      	ldr	r3, [r0, #24]
 8010628:	b90b      	cbnz	r3, 801062e <_fflush_r+0x1a>
 801062a:	f000 f887 	bl	801073c <__sinit>
 801062e:	4b14      	ldr	r3, [pc, #80]	; (8010680 <_fflush_r+0x6c>)
 8010630:	429c      	cmp	r4, r3
 8010632:	d11b      	bne.n	801066c <_fflush_r+0x58>
 8010634:	686c      	ldr	r4, [r5, #4]
 8010636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d0ef      	beq.n	801061e <_fflush_r+0xa>
 801063e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010640:	07d0      	lsls	r0, r2, #31
 8010642:	d404      	bmi.n	801064e <_fflush_r+0x3a>
 8010644:	0599      	lsls	r1, r3, #22
 8010646:	d402      	bmi.n	801064e <_fflush_r+0x3a>
 8010648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801064a:	f000 f915 	bl	8010878 <__retarget_lock_acquire_recursive>
 801064e:	4628      	mov	r0, r5
 8010650:	4621      	mov	r1, r4
 8010652:	f7ff ff59 	bl	8010508 <__sflush_r>
 8010656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010658:	07da      	lsls	r2, r3, #31
 801065a:	4605      	mov	r5, r0
 801065c:	d4e0      	bmi.n	8010620 <_fflush_r+0xc>
 801065e:	89a3      	ldrh	r3, [r4, #12]
 8010660:	059b      	lsls	r3, r3, #22
 8010662:	d4dd      	bmi.n	8010620 <_fflush_r+0xc>
 8010664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010666:	f000 f908 	bl	801087a <__retarget_lock_release_recursive>
 801066a:	e7d9      	b.n	8010620 <_fflush_r+0xc>
 801066c:	4b05      	ldr	r3, [pc, #20]	; (8010684 <_fflush_r+0x70>)
 801066e:	429c      	cmp	r4, r3
 8010670:	d101      	bne.n	8010676 <_fflush_r+0x62>
 8010672:	68ac      	ldr	r4, [r5, #8]
 8010674:	e7df      	b.n	8010636 <_fflush_r+0x22>
 8010676:	4b04      	ldr	r3, [pc, #16]	; (8010688 <_fflush_r+0x74>)
 8010678:	429c      	cmp	r4, r3
 801067a:	bf08      	it	eq
 801067c:	68ec      	ldreq	r4, [r5, #12]
 801067e:	e7da      	b.n	8010636 <_fflush_r+0x22>
 8010680:	080121ec 	.word	0x080121ec
 8010684:	0801220c 	.word	0x0801220c
 8010688:	080121cc 	.word	0x080121cc

0801068c <std>:
 801068c:	2300      	movs	r3, #0
 801068e:	b510      	push	{r4, lr}
 8010690:	4604      	mov	r4, r0
 8010692:	e9c0 3300 	strd	r3, r3, [r0]
 8010696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801069a:	6083      	str	r3, [r0, #8]
 801069c:	8181      	strh	r1, [r0, #12]
 801069e:	6643      	str	r3, [r0, #100]	; 0x64
 80106a0:	81c2      	strh	r2, [r0, #14]
 80106a2:	6183      	str	r3, [r0, #24]
 80106a4:	4619      	mov	r1, r3
 80106a6:	2208      	movs	r2, #8
 80106a8:	305c      	adds	r0, #92	; 0x5c
 80106aa:	f7fb fd99 	bl	800c1e0 <memset>
 80106ae:	4b05      	ldr	r3, [pc, #20]	; (80106c4 <std+0x38>)
 80106b0:	6263      	str	r3, [r4, #36]	; 0x24
 80106b2:	4b05      	ldr	r3, [pc, #20]	; (80106c8 <std+0x3c>)
 80106b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80106b6:	4b05      	ldr	r3, [pc, #20]	; (80106cc <std+0x40>)
 80106b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80106ba:	4b05      	ldr	r3, [pc, #20]	; (80106d0 <std+0x44>)
 80106bc:	6224      	str	r4, [r4, #32]
 80106be:	6323      	str	r3, [r4, #48]	; 0x30
 80106c0:	bd10      	pop	{r4, pc}
 80106c2:	bf00      	nop
 80106c4:	080109e1 	.word	0x080109e1
 80106c8:	08010a03 	.word	0x08010a03
 80106cc:	08010a3b 	.word	0x08010a3b
 80106d0:	08010a5f 	.word	0x08010a5f

080106d4 <_cleanup_r>:
 80106d4:	4901      	ldr	r1, [pc, #4]	; (80106dc <_cleanup_r+0x8>)
 80106d6:	f000 b8af 	b.w	8010838 <_fwalk_reent>
 80106da:	bf00      	nop
 80106dc:	08010615 	.word	0x08010615

080106e0 <__sfmoreglue>:
 80106e0:	b570      	push	{r4, r5, r6, lr}
 80106e2:	2268      	movs	r2, #104	; 0x68
 80106e4:	1e4d      	subs	r5, r1, #1
 80106e6:	4355      	muls	r5, r2
 80106e8:	460e      	mov	r6, r1
 80106ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80106ee:	f7ff fa5b 	bl	800fba8 <_malloc_r>
 80106f2:	4604      	mov	r4, r0
 80106f4:	b140      	cbz	r0, 8010708 <__sfmoreglue+0x28>
 80106f6:	2100      	movs	r1, #0
 80106f8:	e9c0 1600 	strd	r1, r6, [r0]
 80106fc:	300c      	adds	r0, #12
 80106fe:	60a0      	str	r0, [r4, #8]
 8010700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010704:	f7fb fd6c 	bl	800c1e0 <memset>
 8010708:	4620      	mov	r0, r4
 801070a:	bd70      	pop	{r4, r5, r6, pc}

0801070c <__sfp_lock_acquire>:
 801070c:	4801      	ldr	r0, [pc, #4]	; (8010714 <__sfp_lock_acquire+0x8>)
 801070e:	f000 b8b3 	b.w	8010878 <__retarget_lock_acquire_recursive>
 8010712:	bf00      	nop
 8010714:	2000127d 	.word	0x2000127d

08010718 <__sfp_lock_release>:
 8010718:	4801      	ldr	r0, [pc, #4]	; (8010720 <__sfp_lock_release+0x8>)
 801071a:	f000 b8ae 	b.w	801087a <__retarget_lock_release_recursive>
 801071e:	bf00      	nop
 8010720:	2000127d 	.word	0x2000127d

08010724 <__sinit_lock_acquire>:
 8010724:	4801      	ldr	r0, [pc, #4]	; (801072c <__sinit_lock_acquire+0x8>)
 8010726:	f000 b8a7 	b.w	8010878 <__retarget_lock_acquire_recursive>
 801072a:	bf00      	nop
 801072c:	2000127e 	.word	0x2000127e

08010730 <__sinit_lock_release>:
 8010730:	4801      	ldr	r0, [pc, #4]	; (8010738 <__sinit_lock_release+0x8>)
 8010732:	f000 b8a2 	b.w	801087a <__retarget_lock_release_recursive>
 8010736:	bf00      	nop
 8010738:	2000127e 	.word	0x2000127e

0801073c <__sinit>:
 801073c:	b510      	push	{r4, lr}
 801073e:	4604      	mov	r4, r0
 8010740:	f7ff fff0 	bl	8010724 <__sinit_lock_acquire>
 8010744:	69a3      	ldr	r3, [r4, #24]
 8010746:	b11b      	cbz	r3, 8010750 <__sinit+0x14>
 8010748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801074c:	f7ff bff0 	b.w	8010730 <__sinit_lock_release>
 8010750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010754:	6523      	str	r3, [r4, #80]	; 0x50
 8010756:	4b13      	ldr	r3, [pc, #76]	; (80107a4 <__sinit+0x68>)
 8010758:	4a13      	ldr	r2, [pc, #76]	; (80107a8 <__sinit+0x6c>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	62a2      	str	r2, [r4, #40]	; 0x28
 801075e:	42a3      	cmp	r3, r4
 8010760:	bf04      	itt	eq
 8010762:	2301      	moveq	r3, #1
 8010764:	61a3      	streq	r3, [r4, #24]
 8010766:	4620      	mov	r0, r4
 8010768:	f000 f820 	bl	80107ac <__sfp>
 801076c:	6060      	str	r0, [r4, #4]
 801076e:	4620      	mov	r0, r4
 8010770:	f000 f81c 	bl	80107ac <__sfp>
 8010774:	60a0      	str	r0, [r4, #8]
 8010776:	4620      	mov	r0, r4
 8010778:	f000 f818 	bl	80107ac <__sfp>
 801077c:	2200      	movs	r2, #0
 801077e:	60e0      	str	r0, [r4, #12]
 8010780:	2104      	movs	r1, #4
 8010782:	6860      	ldr	r0, [r4, #4]
 8010784:	f7ff ff82 	bl	801068c <std>
 8010788:	68a0      	ldr	r0, [r4, #8]
 801078a:	2201      	movs	r2, #1
 801078c:	2109      	movs	r1, #9
 801078e:	f7ff ff7d 	bl	801068c <std>
 8010792:	68e0      	ldr	r0, [r4, #12]
 8010794:	2202      	movs	r2, #2
 8010796:	2112      	movs	r1, #18
 8010798:	f7ff ff78 	bl	801068c <std>
 801079c:	2301      	movs	r3, #1
 801079e:	61a3      	str	r3, [r4, #24]
 80107a0:	e7d2      	b.n	8010748 <__sinit+0xc>
 80107a2:	bf00      	nop
 80107a4:	08011d84 	.word	0x08011d84
 80107a8:	080106d5 	.word	0x080106d5

080107ac <__sfp>:
 80107ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ae:	4607      	mov	r7, r0
 80107b0:	f7ff ffac 	bl	801070c <__sfp_lock_acquire>
 80107b4:	4b1e      	ldr	r3, [pc, #120]	; (8010830 <__sfp+0x84>)
 80107b6:	681e      	ldr	r6, [r3, #0]
 80107b8:	69b3      	ldr	r3, [r6, #24]
 80107ba:	b913      	cbnz	r3, 80107c2 <__sfp+0x16>
 80107bc:	4630      	mov	r0, r6
 80107be:	f7ff ffbd 	bl	801073c <__sinit>
 80107c2:	3648      	adds	r6, #72	; 0x48
 80107c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80107c8:	3b01      	subs	r3, #1
 80107ca:	d503      	bpl.n	80107d4 <__sfp+0x28>
 80107cc:	6833      	ldr	r3, [r6, #0]
 80107ce:	b30b      	cbz	r3, 8010814 <__sfp+0x68>
 80107d0:	6836      	ldr	r6, [r6, #0]
 80107d2:	e7f7      	b.n	80107c4 <__sfp+0x18>
 80107d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80107d8:	b9d5      	cbnz	r5, 8010810 <__sfp+0x64>
 80107da:	4b16      	ldr	r3, [pc, #88]	; (8010834 <__sfp+0x88>)
 80107dc:	60e3      	str	r3, [r4, #12]
 80107de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80107e2:	6665      	str	r5, [r4, #100]	; 0x64
 80107e4:	f000 f847 	bl	8010876 <__retarget_lock_init_recursive>
 80107e8:	f7ff ff96 	bl	8010718 <__sfp_lock_release>
 80107ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80107f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80107f4:	6025      	str	r5, [r4, #0]
 80107f6:	61a5      	str	r5, [r4, #24]
 80107f8:	2208      	movs	r2, #8
 80107fa:	4629      	mov	r1, r5
 80107fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010800:	f7fb fcee 	bl	800c1e0 <memset>
 8010804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801080c:	4620      	mov	r0, r4
 801080e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010810:	3468      	adds	r4, #104	; 0x68
 8010812:	e7d9      	b.n	80107c8 <__sfp+0x1c>
 8010814:	2104      	movs	r1, #4
 8010816:	4638      	mov	r0, r7
 8010818:	f7ff ff62 	bl	80106e0 <__sfmoreglue>
 801081c:	4604      	mov	r4, r0
 801081e:	6030      	str	r0, [r6, #0]
 8010820:	2800      	cmp	r0, #0
 8010822:	d1d5      	bne.n	80107d0 <__sfp+0x24>
 8010824:	f7ff ff78 	bl	8010718 <__sfp_lock_release>
 8010828:	230c      	movs	r3, #12
 801082a:	603b      	str	r3, [r7, #0]
 801082c:	e7ee      	b.n	801080c <__sfp+0x60>
 801082e:	bf00      	nop
 8010830:	08011d84 	.word	0x08011d84
 8010834:	ffff0001 	.word	0xffff0001

08010838 <_fwalk_reent>:
 8010838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801083c:	4606      	mov	r6, r0
 801083e:	4688      	mov	r8, r1
 8010840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010844:	2700      	movs	r7, #0
 8010846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801084a:	f1b9 0901 	subs.w	r9, r9, #1
 801084e:	d505      	bpl.n	801085c <_fwalk_reent+0x24>
 8010850:	6824      	ldr	r4, [r4, #0]
 8010852:	2c00      	cmp	r4, #0
 8010854:	d1f7      	bne.n	8010846 <_fwalk_reent+0xe>
 8010856:	4638      	mov	r0, r7
 8010858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801085c:	89ab      	ldrh	r3, [r5, #12]
 801085e:	2b01      	cmp	r3, #1
 8010860:	d907      	bls.n	8010872 <_fwalk_reent+0x3a>
 8010862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010866:	3301      	adds	r3, #1
 8010868:	d003      	beq.n	8010872 <_fwalk_reent+0x3a>
 801086a:	4629      	mov	r1, r5
 801086c:	4630      	mov	r0, r6
 801086e:	47c0      	blx	r8
 8010870:	4307      	orrs	r7, r0
 8010872:	3568      	adds	r5, #104	; 0x68
 8010874:	e7e9      	b.n	801084a <_fwalk_reent+0x12>

08010876 <__retarget_lock_init_recursive>:
 8010876:	4770      	bx	lr

08010878 <__retarget_lock_acquire_recursive>:
 8010878:	4770      	bx	lr

0801087a <__retarget_lock_release_recursive>:
 801087a:	4770      	bx	lr

0801087c <__swhatbuf_r>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	460e      	mov	r6, r1
 8010880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010884:	2900      	cmp	r1, #0
 8010886:	b096      	sub	sp, #88	; 0x58
 8010888:	4614      	mov	r4, r2
 801088a:	461d      	mov	r5, r3
 801088c:	da08      	bge.n	80108a0 <__swhatbuf_r+0x24>
 801088e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010892:	2200      	movs	r2, #0
 8010894:	602a      	str	r2, [r5, #0]
 8010896:	061a      	lsls	r2, r3, #24
 8010898:	d410      	bmi.n	80108bc <__swhatbuf_r+0x40>
 801089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801089e:	e00e      	b.n	80108be <__swhatbuf_r+0x42>
 80108a0:	466a      	mov	r2, sp
 80108a2:	f000 f903 	bl	8010aac <_fstat_r>
 80108a6:	2800      	cmp	r0, #0
 80108a8:	dbf1      	blt.n	801088e <__swhatbuf_r+0x12>
 80108aa:	9a01      	ldr	r2, [sp, #4]
 80108ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80108b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80108b4:	425a      	negs	r2, r3
 80108b6:	415a      	adcs	r2, r3
 80108b8:	602a      	str	r2, [r5, #0]
 80108ba:	e7ee      	b.n	801089a <__swhatbuf_r+0x1e>
 80108bc:	2340      	movs	r3, #64	; 0x40
 80108be:	2000      	movs	r0, #0
 80108c0:	6023      	str	r3, [r4, #0]
 80108c2:	b016      	add	sp, #88	; 0x58
 80108c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080108c8 <__smakebuf_r>:
 80108c8:	898b      	ldrh	r3, [r1, #12]
 80108ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80108cc:	079d      	lsls	r5, r3, #30
 80108ce:	4606      	mov	r6, r0
 80108d0:	460c      	mov	r4, r1
 80108d2:	d507      	bpl.n	80108e4 <__smakebuf_r+0x1c>
 80108d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80108d8:	6023      	str	r3, [r4, #0]
 80108da:	6123      	str	r3, [r4, #16]
 80108dc:	2301      	movs	r3, #1
 80108de:	6163      	str	r3, [r4, #20]
 80108e0:	b002      	add	sp, #8
 80108e2:	bd70      	pop	{r4, r5, r6, pc}
 80108e4:	ab01      	add	r3, sp, #4
 80108e6:	466a      	mov	r2, sp
 80108e8:	f7ff ffc8 	bl	801087c <__swhatbuf_r>
 80108ec:	9900      	ldr	r1, [sp, #0]
 80108ee:	4605      	mov	r5, r0
 80108f0:	4630      	mov	r0, r6
 80108f2:	f7ff f959 	bl	800fba8 <_malloc_r>
 80108f6:	b948      	cbnz	r0, 801090c <__smakebuf_r+0x44>
 80108f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108fc:	059a      	lsls	r2, r3, #22
 80108fe:	d4ef      	bmi.n	80108e0 <__smakebuf_r+0x18>
 8010900:	f023 0303 	bic.w	r3, r3, #3
 8010904:	f043 0302 	orr.w	r3, r3, #2
 8010908:	81a3      	strh	r3, [r4, #12]
 801090a:	e7e3      	b.n	80108d4 <__smakebuf_r+0xc>
 801090c:	4b0d      	ldr	r3, [pc, #52]	; (8010944 <__smakebuf_r+0x7c>)
 801090e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010910:	89a3      	ldrh	r3, [r4, #12]
 8010912:	6020      	str	r0, [r4, #0]
 8010914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010918:	81a3      	strh	r3, [r4, #12]
 801091a:	9b00      	ldr	r3, [sp, #0]
 801091c:	6163      	str	r3, [r4, #20]
 801091e:	9b01      	ldr	r3, [sp, #4]
 8010920:	6120      	str	r0, [r4, #16]
 8010922:	b15b      	cbz	r3, 801093c <__smakebuf_r+0x74>
 8010924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010928:	4630      	mov	r0, r6
 801092a:	f000 f8d1 	bl	8010ad0 <_isatty_r>
 801092e:	b128      	cbz	r0, 801093c <__smakebuf_r+0x74>
 8010930:	89a3      	ldrh	r3, [r4, #12]
 8010932:	f023 0303 	bic.w	r3, r3, #3
 8010936:	f043 0301 	orr.w	r3, r3, #1
 801093a:	81a3      	strh	r3, [r4, #12]
 801093c:	89a0      	ldrh	r0, [r4, #12]
 801093e:	4305      	orrs	r5, r0
 8010940:	81a5      	strh	r5, [r4, #12]
 8010942:	e7cd      	b.n	80108e0 <__smakebuf_r+0x18>
 8010944:	080106d5 	.word	0x080106d5

08010948 <_malloc_usable_size_r>:
 8010948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801094c:	1f18      	subs	r0, r3, #4
 801094e:	2b00      	cmp	r3, #0
 8010950:	bfbc      	itt	lt
 8010952:	580b      	ldrlt	r3, [r1, r0]
 8010954:	18c0      	addlt	r0, r0, r3
 8010956:	4770      	bx	lr

08010958 <_raise_r>:
 8010958:	291f      	cmp	r1, #31
 801095a:	b538      	push	{r3, r4, r5, lr}
 801095c:	4604      	mov	r4, r0
 801095e:	460d      	mov	r5, r1
 8010960:	d904      	bls.n	801096c <_raise_r+0x14>
 8010962:	2316      	movs	r3, #22
 8010964:	6003      	str	r3, [r0, #0]
 8010966:	f04f 30ff 	mov.w	r0, #4294967295
 801096a:	bd38      	pop	{r3, r4, r5, pc}
 801096c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801096e:	b112      	cbz	r2, 8010976 <_raise_r+0x1e>
 8010970:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010974:	b94b      	cbnz	r3, 801098a <_raise_r+0x32>
 8010976:	4620      	mov	r0, r4
 8010978:	f000 f830 	bl	80109dc <_getpid_r>
 801097c:	462a      	mov	r2, r5
 801097e:	4601      	mov	r1, r0
 8010980:	4620      	mov	r0, r4
 8010982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010986:	f000 b817 	b.w	80109b8 <_kill_r>
 801098a:	2b01      	cmp	r3, #1
 801098c:	d00a      	beq.n	80109a4 <_raise_r+0x4c>
 801098e:	1c59      	adds	r1, r3, #1
 8010990:	d103      	bne.n	801099a <_raise_r+0x42>
 8010992:	2316      	movs	r3, #22
 8010994:	6003      	str	r3, [r0, #0]
 8010996:	2001      	movs	r0, #1
 8010998:	e7e7      	b.n	801096a <_raise_r+0x12>
 801099a:	2400      	movs	r4, #0
 801099c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80109a0:	4628      	mov	r0, r5
 80109a2:	4798      	blx	r3
 80109a4:	2000      	movs	r0, #0
 80109a6:	e7e0      	b.n	801096a <_raise_r+0x12>

080109a8 <raise>:
 80109a8:	4b02      	ldr	r3, [pc, #8]	; (80109b4 <raise+0xc>)
 80109aa:	4601      	mov	r1, r0
 80109ac:	6818      	ldr	r0, [r3, #0]
 80109ae:	f7ff bfd3 	b.w	8010958 <_raise_r>
 80109b2:	bf00      	nop
 80109b4:	200002cc 	.word	0x200002cc

080109b8 <_kill_r>:
 80109b8:	b538      	push	{r3, r4, r5, lr}
 80109ba:	4d07      	ldr	r5, [pc, #28]	; (80109d8 <_kill_r+0x20>)
 80109bc:	2300      	movs	r3, #0
 80109be:	4604      	mov	r4, r0
 80109c0:	4608      	mov	r0, r1
 80109c2:	4611      	mov	r1, r2
 80109c4:	602b      	str	r3, [r5, #0]
 80109c6:	f7f2 f90f 	bl	8002be8 <_kill>
 80109ca:	1c43      	adds	r3, r0, #1
 80109cc:	d102      	bne.n	80109d4 <_kill_r+0x1c>
 80109ce:	682b      	ldr	r3, [r5, #0]
 80109d0:	b103      	cbz	r3, 80109d4 <_kill_r+0x1c>
 80109d2:	6023      	str	r3, [r4, #0]
 80109d4:	bd38      	pop	{r3, r4, r5, pc}
 80109d6:	bf00      	nop
 80109d8:	20001278 	.word	0x20001278

080109dc <_getpid_r>:
 80109dc:	f7f2 b8fc 	b.w	8002bd8 <_getpid>

080109e0 <__sread>:
 80109e0:	b510      	push	{r4, lr}
 80109e2:	460c      	mov	r4, r1
 80109e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109e8:	f000 f894 	bl	8010b14 <_read_r>
 80109ec:	2800      	cmp	r0, #0
 80109ee:	bfab      	itete	ge
 80109f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80109f2:	89a3      	ldrhlt	r3, [r4, #12]
 80109f4:	181b      	addge	r3, r3, r0
 80109f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80109fa:	bfac      	ite	ge
 80109fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80109fe:	81a3      	strhlt	r3, [r4, #12]
 8010a00:	bd10      	pop	{r4, pc}

08010a02 <__swrite>:
 8010a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a06:	461f      	mov	r7, r3
 8010a08:	898b      	ldrh	r3, [r1, #12]
 8010a0a:	05db      	lsls	r3, r3, #23
 8010a0c:	4605      	mov	r5, r0
 8010a0e:	460c      	mov	r4, r1
 8010a10:	4616      	mov	r6, r2
 8010a12:	d505      	bpl.n	8010a20 <__swrite+0x1e>
 8010a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a18:	2302      	movs	r3, #2
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	f000 f868 	bl	8010af0 <_lseek_r>
 8010a20:	89a3      	ldrh	r3, [r4, #12]
 8010a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a2a:	81a3      	strh	r3, [r4, #12]
 8010a2c:	4632      	mov	r2, r6
 8010a2e:	463b      	mov	r3, r7
 8010a30:	4628      	mov	r0, r5
 8010a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a36:	f000 b817 	b.w	8010a68 <_write_r>

08010a3a <__sseek>:
 8010a3a:	b510      	push	{r4, lr}
 8010a3c:	460c      	mov	r4, r1
 8010a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a42:	f000 f855 	bl	8010af0 <_lseek_r>
 8010a46:	1c43      	adds	r3, r0, #1
 8010a48:	89a3      	ldrh	r3, [r4, #12]
 8010a4a:	bf15      	itete	ne
 8010a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a56:	81a3      	strheq	r3, [r4, #12]
 8010a58:	bf18      	it	ne
 8010a5a:	81a3      	strhne	r3, [r4, #12]
 8010a5c:	bd10      	pop	{r4, pc}

08010a5e <__sclose>:
 8010a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a62:	f000 b813 	b.w	8010a8c <_close_r>
	...

08010a68 <_write_r>:
 8010a68:	b538      	push	{r3, r4, r5, lr}
 8010a6a:	4d07      	ldr	r5, [pc, #28]	; (8010a88 <_write_r+0x20>)
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	4608      	mov	r0, r1
 8010a70:	4611      	mov	r1, r2
 8010a72:	2200      	movs	r2, #0
 8010a74:	602a      	str	r2, [r5, #0]
 8010a76:	461a      	mov	r2, r3
 8010a78:	f7f2 f8ed 	bl	8002c56 <_write>
 8010a7c:	1c43      	adds	r3, r0, #1
 8010a7e:	d102      	bne.n	8010a86 <_write_r+0x1e>
 8010a80:	682b      	ldr	r3, [r5, #0]
 8010a82:	b103      	cbz	r3, 8010a86 <_write_r+0x1e>
 8010a84:	6023      	str	r3, [r4, #0]
 8010a86:	bd38      	pop	{r3, r4, r5, pc}
 8010a88:	20001278 	.word	0x20001278

08010a8c <_close_r>:
 8010a8c:	b538      	push	{r3, r4, r5, lr}
 8010a8e:	4d06      	ldr	r5, [pc, #24]	; (8010aa8 <_close_r+0x1c>)
 8010a90:	2300      	movs	r3, #0
 8010a92:	4604      	mov	r4, r0
 8010a94:	4608      	mov	r0, r1
 8010a96:	602b      	str	r3, [r5, #0]
 8010a98:	f7f2 f8f9 	bl	8002c8e <_close>
 8010a9c:	1c43      	adds	r3, r0, #1
 8010a9e:	d102      	bne.n	8010aa6 <_close_r+0x1a>
 8010aa0:	682b      	ldr	r3, [r5, #0]
 8010aa2:	b103      	cbz	r3, 8010aa6 <_close_r+0x1a>
 8010aa4:	6023      	str	r3, [r4, #0]
 8010aa6:	bd38      	pop	{r3, r4, r5, pc}
 8010aa8:	20001278 	.word	0x20001278

08010aac <_fstat_r>:
 8010aac:	b538      	push	{r3, r4, r5, lr}
 8010aae:	4d07      	ldr	r5, [pc, #28]	; (8010acc <_fstat_r+0x20>)
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	4608      	mov	r0, r1
 8010ab6:	4611      	mov	r1, r2
 8010ab8:	602b      	str	r3, [r5, #0]
 8010aba:	f7f2 f8f4 	bl	8002ca6 <_fstat>
 8010abe:	1c43      	adds	r3, r0, #1
 8010ac0:	d102      	bne.n	8010ac8 <_fstat_r+0x1c>
 8010ac2:	682b      	ldr	r3, [r5, #0]
 8010ac4:	b103      	cbz	r3, 8010ac8 <_fstat_r+0x1c>
 8010ac6:	6023      	str	r3, [r4, #0]
 8010ac8:	bd38      	pop	{r3, r4, r5, pc}
 8010aca:	bf00      	nop
 8010acc:	20001278 	.word	0x20001278

08010ad0 <_isatty_r>:
 8010ad0:	b538      	push	{r3, r4, r5, lr}
 8010ad2:	4d06      	ldr	r5, [pc, #24]	; (8010aec <_isatty_r+0x1c>)
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	4604      	mov	r4, r0
 8010ad8:	4608      	mov	r0, r1
 8010ada:	602b      	str	r3, [r5, #0]
 8010adc:	f7f2 f8f3 	bl	8002cc6 <_isatty>
 8010ae0:	1c43      	adds	r3, r0, #1
 8010ae2:	d102      	bne.n	8010aea <_isatty_r+0x1a>
 8010ae4:	682b      	ldr	r3, [r5, #0]
 8010ae6:	b103      	cbz	r3, 8010aea <_isatty_r+0x1a>
 8010ae8:	6023      	str	r3, [r4, #0]
 8010aea:	bd38      	pop	{r3, r4, r5, pc}
 8010aec:	20001278 	.word	0x20001278

08010af0 <_lseek_r>:
 8010af0:	b538      	push	{r3, r4, r5, lr}
 8010af2:	4d07      	ldr	r5, [pc, #28]	; (8010b10 <_lseek_r+0x20>)
 8010af4:	4604      	mov	r4, r0
 8010af6:	4608      	mov	r0, r1
 8010af8:	4611      	mov	r1, r2
 8010afa:	2200      	movs	r2, #0
 8010afc:	602a      	str	r2, [r5, #0]
 8010afe:	461a      	mov	r2, r3
 8010b00:	f7f2 f8ec 	bl	8002cdc <_lseek>
 8010b04:	1c43      	adds	r3, r0, #1
 8010b06:	d102      	bne.n	8010b0e <_lseek_r+0x1e>
 8010b08:	682b      	ldr	r3, [r5, #0]
 8010b0a:	b103      	cbz	r3, 8010b0e <_lseek_r+0x1e>
 8010b0c:	6023      	str	r3, [r4, #0]
 8010b0e:	bd38      	pop	{r3, r4, r5, pc}
 8010b10:	20001278 	.word	0x20001278

08010b14 <_read_r>:
 8010b14:	b538      	push	{r3, r4, r5, lr}
 8010b16:	4d07      	ldr	r5, [pc, #28]	; (8010b34 <_read_r+0x20>)
 8010b18:	4604      	mov	r4, r0
 8010b1a:	4608      	mov	r0, r1
 8010b1c:	4611      	mov	r1, r2
 8010b1e:	2200      	movs	r2, #0
 8010b20:	602a      	str	r2, [r5, #0]
 8010b22:	461a      	mov	r2, r3
 8010b24:	f7f2 f87a 	bl	8002c1c <_read>
 8010b28:	1c43      	adds	r3, r0, #1
 8010b2a:	d102      	bne.n	8010b32 <_read_r+0x1e>
 8010b2c:	682b      	ldr	r3, [r5, #0]
 8010b2e:	b103      	cbz	r3, 8010b32 <_read_r+0x1e>
 8010b30:	6023      	str	r3, [r4, #0]
 8010b32:	bd38      	pop	{r3, r4, r5, pc}
 8010b34:	20001278 	.word	0x20001278

08010b38 <ceilf>:
 8010b38:	ee10 3a10 	vmov	r3, s0
 8010b3c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010b40:	3a7f      	subs	r2, #127	; 0x7f
 8010b42:	2a16      	cmp	r2, #22
 8010b44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010b48:	dc2a      	bgt.n	8010ba0 <ceilf+0x68>
 8010b4a:	2a00      	cmp	r2, #0
 8010b4c:	da11      	bge.n	8010b72 <ceilf+0x3a>
 8010b4e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8010bb4 <ceilf+0x7c>
 8010b52:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5e:	dd05      	ble.n	8010b6c <ceilf+0x34>
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	db23      	blt.n	8010bac <ceilf+0x74>
 8010b64:	2900      	cmp	r1, #0
 8010b66:	bf18      	it	ne
 8010b68:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8010b6c:	ee00 3a10 	vmov	s0, r3
 8010b70:	4770      	bx	lr
 8010b72:	4911      	ldr	r1, [pc, #68]	; (8010bb8 <ceilf+0x80>)
 8010b74:	4111      	asrs	r1, r2
 8010b76:	420b      	tst	r3, r1
 8010b78:	d0fa      	beq.n	8010b70 <ceilf+0x38>
 8010b7a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8010bb4 <ceilf+0x7c>
 8010b7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8a:	ddef      	ble.n	8010b6c <ceilf+0x34>
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	bfc2      	ittt	gt
 8010b90:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8010b94:	fa40 f202 	asrgt.w	r2, r0, r2
 8010b98:	189b      	addgt	r3, r3, r2
 8010b9a:	ea23 0301 	bic.w	r3, r3, r1
 8010b9e:	e7e5      	b.n	8010b6c <ceilf+0x34>
 8010ba0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010ba4:	d3e4      	bcc.n	8010b70 <ceilf+0x38>
 8010ba6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010baa:	4770      	bx	lr
 8010bac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bb0:	e7dc      	b.n	8010b6c <ceilf+0x34>
 8010bb2:	bf00      	nop
 8010bb4:	7149f2ca 	.word	0x7149f2ca
 8010bb8:	007fffff 	.word	0x007fffff

08010bbc <_init>:
 8010bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bbe:	bf00      	nop
 8010bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bc2:	bc08      	pop	{r3}
 8010bc4:	469e      	mov	lr, r3
 8010bc6:	4770      	bx	lr

08010bc8 <_fini>:
 8010bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bca:	bf00      	nop
 8010bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bce:	bc08      	pop	{r3}
 8010bd0:	469e      	mov	lr, r3
 8010bd2:	4770      	bx	lr
