
minisumo_miras.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a224  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000164c  0800a3c8  0800a3c8  0001a3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba14  0800ba14  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba14  0800ba14  0001ba14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba1c  0800ba1c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba1c  0800ba1c  0001ba1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba20  0800ba20  0001ba20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ba24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  200001e4  0800bc08  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  0800bc08  00020890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f51  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f1  00000000  00000000  00033165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00035958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00036ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001944e  00000000  00000000  00037b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157a0  00000000  00000000  00050fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eb03  00000000  00000000  00066746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006010  00000000  00000000  0010529c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3ac 	.word	0x0800a3ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800a3ac 	.word	0x0800a3ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <calculateBatteryVoltage>:
 * @brief calculates battery voltage based on the averaged out value from the ADC
 *
 * @param battery
 * @return float calculated voltage
 */
float calculateBatteryVoltage(Battery* battery){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	calculateAverage(&(battery->adc_average), battery->adc_reading);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f103 020c 	add.w	r2, r3, #12
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f000 fed5 	bl	8001dcc <calculateAverage>
	battery->voltage = battery->adc_average.average * 3.3 / 4096 * 13.3 / 3.3;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa84 	bl	8000534 <__aeabi_i2d>
 800102c:	a31a      	add	r3, pc, #104	; (adr r3, 8001098 <calculateBatteryVoltage+0x90>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fae9 	bl	8000608 <__aeabi_dmul>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <calculateBatteryVoltage+0x98>)
 8001044:	f7ff fc0a 	bl	800085c <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	a30f      	add	r3, pc, #60	; (adr r3, 8001090 <calculateBatteryVoltage+0x88>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff fad7 	bl	8000608 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	a30d      	add	r3, pc, #52	; (adr r3, 8001098 <calculateBatteryVoltage+0x90>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fbf8 	bl	800085c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fdc0 	bl	8000bf8 <__aeabi_d2f>
 8001078:	4602      	mov	r2, r0
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]
	return battery->voltage;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	ee07 3a90 	vmov	s15, r3
}
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	9999999a 	.word	0x9999999a
 8001094:	402a9999 	.word	0x402a9999
 8001098:	66666666 	.word	0x66666666
 800109c:	400a6666 	.word	0x400a6666
 80010a0:	40b00000 	.word	0x40b00000

080010a4 <write_cmd>:

extern I2C_HandleTypeDef hi2c2;

static uint8_t buffer[DISPLAY_WIDTH*DISPLAY_HEIGHT/8] = {0};

static inline void write_cmd(const uint8_t byte) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, DISPLAY_ADDRESS << 1, 0x00, 1, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2301      	movs	r3, #1
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	2200      	movs	r2, #0
 80010c0:	2178      	movs	r1, #120	; 0x78
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <write_cmd+0x2c>)
 80010c4:	f002 fe94 	bl	8003df0 <HAL_I2C_Mem_Write>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200006fc 	.word	0x200006fc

080010d4 <write_buffer>:

static inline void write_buffer(const void *src, const uint32_t size) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af04      	add	r7, sp, #16
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c2, DISPLAY_ADDRESS << 1, 0x40, 1, (uint8_t *) src, size, HAL_MAX_DELAY);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	2240      	movs	r2, #64	; 0x40
 80010f2:	2178      	movs	r1, #120	; 0x78
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <write_buffer+0x30>)
 80010f6:	f002 fe7b 	bl	8003df0 <HAL_I2C_Mem_Write>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200006fc 	.word	0x200006fc

08001108 <set>:

static void set(int16_t x, int16_t y, const display_color_t color) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
 8001112:	460b      	mov	r3, r1
 8001114:	80bb      	strh	r3, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	70fb      	strb	r3, [r7, #3]
	if(x<0 || x>=DISPLAY_WIDTH || y<0 || y>=DISPLAY_HEIGHT)
 800111a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db60      	blt.n	80011e4 <set+0xdc>
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	2b7f      	cmp	r3, #127	; 0x7f
 8001128:	dc5c      	bgt.n	80011e4 <set+0xdc>
 800112a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db58      	blt.n	80011e4 <set+0xdc>
 8001132:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001136:	2b3f      	cmp	r3, #63	; 0x3f
 8001138:	dc54      	bgt.n	80011e4 <set+0xdc>
	#ifdef DISPLAY_FLIP
		x = DISPLAY_WIDTH - x - 1;
		y = DISPLAY_HEIGHT - y - 1;
	#endif

	if(color) {
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d027      	beq.n	8001190 <set+0x88>
		buffer[x + (y/8)*DISPLAY_WIDTH] |=(1<<(y%8));
 8001140:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001144:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	da00      	bge.n	800114e <set+0x46>
 800114c:	3307      	adds	r3, #7
 800114e:	10db      	asrs	r3, r3, #3
 8001150:	b218      	sxth	r0, r3
 8001152:	4603      	mov	r3, r0
 8001154:	01db      	lsls	r3, r3, #7
 8001156:	4413      	add	r3, r2
 8001158:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <set+0xe8>)
 800115a:	5cd3      	ldrb	r3, [r2, r3]
 800115c:	b25a      	sxtb	r2, r3
 800115e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001162:	4259      	negs	r1, r3
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	f001 0107 	and.w	r1, r1, #7
 800116c:	bf58      	it	pl
 800116e:	424b      	negpl	r3, r1
 8001170:	b21b      	sxth	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	2301      	movs	r3, #1
 8001176:	408b      	lsls	r3, r1
 8001178:	b25b      	sxtb	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b259      	sxtb	r1, r3
 800117e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001182:	4603      	mov	r3, r0
 8001184:	01db      	lsls	r3, r3, #7
 8001186:	4413      	add	r3, r2
 8001188:	b2c9      	uxtb	r1, r1
 800118a:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <set+0xe8>)
 800118c:	54d1      	strb	r1, [r2, r3]
 800118e:	e02a      	b.n	80011e6 <set+0xde>
	} else {
		buffer[x + (y/8)*DISPLAY_WIDTH] &=~(1<<(y%8));
 8001190:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001194:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <set+0x96>
 800119c:	3307      	adds	r3, #7
 800119e:	10db      	asrs	r3, r3, #3
 80011a0:	b218      	sxth	r0, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	01db      	lsls	r3, r3, #7
 80011a6:	4413      	add	r3, r2
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <set+0xe8>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	b25a      	sxtb	r2, r3
 80011ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011b2:	4259      	negs	r1, r3
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	f001 0107 	and.w	r1, r1, #7
 80011bc:	bf58      	it	pl
 80011be:	424b      	negpl	r3, r1
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	2301      	movs	r3, #1
 80011c6:	408b      	lsls	r3, r1
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	4013      	ands	r3, r2
 80011d0:	b259      	sxtb	r1, r3
 80011d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011d6:	4603      	mov	r3, r0
 80011d8:	01db      	lsls	r3, r3, #7
 80011da:	4413      	add	r3, r2
 80011dc:	b2c9      	uxtb	r1, r1
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <set+0xe8>)
 80011e0:	54d1      	strb	r1, [r2, r3]
 80011e2:	e000      	b.n	80011e6 <set+0xde>
		return;
 80011e4:	bf00      	nop
	}
}
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	20000200 	.word	0x20000200

080011f4 <display_init>:
	#endif

	return ((buffer[x + (y/8)*DISPLAY_WIDTH] & (1<<(y%8)))>0);
}

void display_init() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

	write_cmd(0xAE);	// display off
 80011f8:	20ae      	movs	r0, #174	; 0xae
 80011fa:	f7ff ff53 	bl	80010a4 <write_cmd>
	write_cmd(0x20);	// set memory addressing mode
 80011fe:	2020      	movs	r0, #32
 8001200:	f7ff ff50 	bl	80010a4 <write_cmd>
	write_cmd(0x00);	// horizontal addressing mode
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff4d 	bl	80010a4 <write_cmd>
	write_cmd(0xB0);	// set page start address for page addressing mode
 800120a:	20b0      	movs	r0, #176	; 0xb0
 800120c:	f7ff ff4a 	bl	80010a4 <write_cmd>
	//write_cmd(0xC0);	// mirror vertically
	write_cmd(0xC8);	// set COM output scan direction mode
 8001210:	20c8      	movs	r0, #200	; 0xc8
 8001212:	f7ff ff47 	bl	80010a4 <write_cmd>
	write_cmd(0x00);	// set low column address
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff ff44 	bl	80010a4 <write_cmd>
	write_cmd(0x10);	// set high column address
 800121c:	2010      	movs	r0, #16
 800121e:	f7ff ff41 	bl	80010a4 <write_cmd>
	write_cmd(0x40);	// set start line address
 8001222:	2040      	movs	r0, #64	; 0x40
 8001224:	f7ff ff3e 	bl	80010a4 <write_cmd>
	write_cmd(0x81);	// set contrast
 8001228:	2081      	movs	r0, #129	; 0x81
 800122a:	f7ff ff3b 	bl	80010a4 <write_cmd>
	write_cmd(0xFF);	//
 800122e:	20ff      	movs	r0, #255	; 0xff
 8001230:	f7ff ff38 	bl	80010a4 <write_cmd>
	//write_cmd(0xA0);	// mirror horizontally
	write_cmd(0xA1);	// set segment remap 0 to 127
 8001234:	20a1      	movs	r0, #161	; 0xa1
 8001236:	f7ff ff35 	bl	80010a4 <write_cmd>
	//write_cmd(0xA7);	// inverse colors
	write_cmd(0xA6);	// set normal color
 800123a:	20a6      	movs	r0, #166	; 0xa6
 800123c:	f7ff ff32 	bl	80010a4 <write_cmd>
	write_cmd(0xA8);	// set multiplex ratio 1 to 64
 8001240:	20a8      	movs	r0, #168	; 0xa8
 8001242:	f7ff ff2f 	bl	80010a4 <write_cmd>
	write_cmd(0x3F);	//
 8001246:	203f      	movs	r0, #63	; 0x3f
 8001248:	f7ff ff2c 	bl	80010a4 <write_cmd>
	write_cmd(0xA4);	// output follows RAM content
 800124c:	20a4      	movs	r0, #164	; 0xa4
 800124e:	f7ff ff29 	bl	80010a4 <write_cmd>
	write_cmd(0xD3);	// set display offset
 8001252:	20d3      	movs	r0, #211	; 0xd3
 8001254:	f7ff ff26 	bl	80010a4 <write_cmd>
	write_cmd(0x00);	//
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff ff23 	bl	80010a4 <write_cmd>
	write_cmd(0xD5);	// set display clock divide ratio
 800125e:	20d5      	movs	r0, #213	; 0xd5
 8001260:	f7ff ff20 	bl	80010a4 <write_cmd>
	write_cmd(0xF0);	//
 8001264:	20f0      	movs	r0, #240	; 0xf0
 8001266:	f7ff ff1d 	bl	80010a4 <write_cmd>
	write_cmd(0xD9);	// set pre-charge period
 800126a:	20d9      	movs	r0, #217	; 0xd9
 800126c:	f7ff ff1a 	bl	80010a4 <write_cmd>
	write_cmd(0x22);	//
 8001270:	2022      	movs	r0, #34	; 0x22
 8001272:	f7ff ff17 	bl	80010a4 <write_cmd>
	write_cmd(0xDA);	// set COM pins hardware configuration
 8001276:	20da      	movs	r0, #218	; 0xda
 8001278:	f7ff ff14 	bl	80010a4 <write_cmd>
	write_cmd(0x12);	//
 800127c:	2012      	movs	r0, #18
 800127e:	f7ff ff11 	bl	80010a4 <write_cmd>
	write_cmd(0xDB);	// set VCOMH
 8001282:	20db      	movs	r0, #219	; 0xdb
 8001284:	f7ff ff0e 	bl	80010a4 <write_cmd>
	write_cmd(0x20);	//
 8001288:	2020      	movs	r0, #32
 800128a:	f7ff ff0b 	bl	80010a4 <write_cmd>
	write_cmd(0x8D);	// set DC-DC enable
 800128e:	208d      	movs	r0, #141	; 0x8d
 8001290:	f7ff ff08 	bl	80010a4 <write_cmd>
	write_cmd(0x14);	//
 8001294:	2014      	movs	r0, #20
 8001296:	f7ff ff05 	bl	80010a4 <write_cmd>
	write_cmd(0xAF);	// set display on
 800129a:	20af      	movs	r0, #175	; 0xaf
 800129c:	f7ff ff02 	bl	80010a4 <write_cmd>

	display_fill(DISPLAY_COLOR_BLACK);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 f803 	bl	80012ac <display_fill>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <display_fill>:

void display_fill(const display_color_t color) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	if(color)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <display_fill+0x1e>
		memset(buffer, 0xFF, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
 80012bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c0:	21ff      	movs	r1, #255	; 0xff
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <display_fill+0x34>)
 80012c4:	f004 fb7c 	bl	80059c0 <memset>
	else
		memset(buffer, 0x00, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
}
 80012c8:	e005      	b.n	80012d6 <display_fill+0x2a>
		memset(buffer, 0x00, DISPLAY_WIDTH*DISPLAY_HEIGHT/8);
 80012ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ce:	2100      	movs	r1, #0
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <display_fill+0x34>)
 80012d2:	f004 fb75 	bl	80059c0 <memset>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000200 	.word	0x20000200

080012e4 <display_render>:

void display_render() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<DISPLAY_HEIGHT/8; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	e016      	b.n	800131e <display_render+0x3a>
		write_cmd(0xB0 + i);	// set current RAM page address
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	3b50      	subs	r3, #80	; 0x50
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fed4 	bl	80010a4 <write_cmd>
		write_cmd(0x00);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fed1 	bl	80010a4 <write_cmd>
		write_cmd(0x10);
 8001302:	2010      	movs	r0, #16
 8001304:	f7ff fece 	bl	80010a4 <write_cmd>
		write_buffer(&buffer[DISPLAY_WIDTH*i], DISPLAY_WIDTH);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	01db      	lsls	r3, r3, #7
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <display_render+0x4c>)
 800130e:	4413      	add	r3, r2
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fede 	bl	80010d4 <write_buffer>
	for(uint8_t i=0; i<DISPLAY_HEIGHT/8; i++) {
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	3301      	adds	r3, #1
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b07      	cmp	r3, #7
 8001322:	d9e5      	bls.n	80012f0 <display_render+0xc>
	}
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000200 	.word	0x20000200

08001334 <display_bitmap>:
			set(i + x, j + y, !get(i + x, j + y));
		}
	}
}

void display_bitmap(const int16_t x, const int16_t y, const display_color_t color, const void *src, const int16_t w, const int16_t h) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	4603      	mov	r3, r0
 800133e:	81fb      	strh	r3, [r7, #14]
 8001340:	460b      	mov	r3, r1
 8001342:	81bb      	strh	r3, [r7, #12]
 8001344:	4613      	mov	r3, r2
 8001346:	72fb      	strb	r3, [r7, #11]
	const uint16_t byte_per_row = ceilf((float)w/8.f);
 8001348:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001358:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800135c:	eeb0 0a47 	vmov.f32	s0, s14
 8001360:	f008 ffe2 	bl	800a328 <ceilf>
 8001364:	eef0 7a40 	vmov.f32	s15, s0
 8001368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136c:	ee17 3a90 	vmov	r3, s15
 8001370:	827b      	strh	r3, [r7, #18]

	for(int16_t i=0; i<h; i++) {
 8001372:	2300      	movs	r3, #0
 8001374:	82fb      	strh	r3, [r7, #22]
 8001376:	e05a      	b.n	800142e <display_bitmap+0xfa>
		for(int16_t j=0; j<w; j++) {
 8001378:	2300      	movs	r3, #0
 800137a:	82bb      	strh	r3, [r7, #20]
 800137c:	e04b      	b.n	8001416 <display_bitmap+0xe2>

			if(((uint8_t *)src)[i*byte_per_row + j/8] & (1<<(7 - j%8)))
 800137e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001382:	8a7a      	ldrh	r2, [r7, #18]
 8001384:	fb03 f202 	mul.w	r2, r3, r2
 8001388:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	da00      	bge.n	8001392 <display_bitmap+0x5e>
 8001390:	3307      	adds	r3, #7
 8001392:	10db      	asrs	r3, r3, #3
 8001394:	b21b      	sxth	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	461a      	mov	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013a6:	425a      	negs	r2, r3
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	f002 0207 	and.w	r2, r2, #7
 80013b0:	bf58      	it	pl
 80013b2:	4253      	negpl	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	fa41 f303 	asr.w	r3, r1, r3
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00e      	beq.n	80013e4 <display_bitmap+0xb0>
				set(j + x, i + y, color);
 80013c6:	8aba      	ldrh	r2, [r7, #20]
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	4413      	add	r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	b218      	sxth	r0, r3
 80013d0:	8afa      	ldrh	r2, [r7, #22]
 80013d2:	89bb      	ldrh	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	7afa      	ldrb	r2, [r7, #11]
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff fe93 	bl	8001108 <set>
 80013e2:	e012      	b.n	800140a <display_bitmap+0xd6>
			else
				set(j + x, i + y, !color);
 80013e4:	8aba      	ldrh	r2, [r7, #20]
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	4413      	add	r3, r2
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	8afa      	ldrh	r2, [r7, #22]
 80013f0:	89bb      	ldrh	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	b219      	sxth	r1, r3
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bf0c      	ite	eq
 80013fe:	2301      	moveq	r3, #1
 8001400:	2300      	movne	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	f7ff fe7f 	bl	8001108 <set>
		for(int16_t j=0; j<w; j++) {
 800140a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800140e:	b29b      	uxth	r3, r3
 8001410:	3301      	adds	r3, #1
 8001412:	b29b      	uxth	r3, r3
 8001414:	82bb      	strh	r3, [r7, #20]
 8001416:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800141a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800141e:	429a      	cmp	r2, r3
 8001420:	dbad      	blt.n	800137e <display_bitmap+0x4a>
	for(int16_t i=0; i<h; i++) {
 8001422:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001426:	b29b      	uxth	r3, r3
 8001428:	3301      	adds	r3, #1
 800142a:	b29b      	uxth	r3, r3
 800142c:	82fb      	strh	r3, [r7, #22]
 800142e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001432:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001436:	429a      	cmp	r2, r3
 8001438:	db9e      	blt.n	8001378 <display_bitmap+0x44>
		}
	}
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <character>:

static void character(const int16_t x, const int16_t y, const display_color_t color, const display_font_t font, const char c) {
 8001444:	b082      	sub	sp, #8
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
 8001452:	460b      	mov	r3, r1
 8001454:	80bb      	strh	r3, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	70fb      	strb	r3, [r7, #3]
	const void *src = &font.data[(c - ' ')*font.height];
 800145a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800145c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001460:	3b20      	subs	r3, #32
 8001462:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001466:	fb01 f303 	mul.w	r3, r1, r3
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
	const uint16_t byte_per_row = ceilf((float)font.width/16.f);
 8001470:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001480:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001484:	eeb0 0a47 	vmov.f32	s0, s14
 8001488:	f008 ff4e 	bl	800a328 <ceilf>
 800148c:	eef0 7a40 	vmov.f32	s15, s0
 8001490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001494:	ee17 3a90 	vmov	r3, s15
 8001498:	81fb      	strh	r3, [r7, #14]

	for(int16_t i=0; i<font.height; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	82fb      	strh	r3, [r7, #22]
 800149e:	e05a      	b.n	8001556 <character+0x112>
		for(int16_t j=0; j<font.width; j++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	82bb      	strh	r3, [r7, #20]
 80014a4:	e04b      	b.n	800153e <character+0xfa>

			if(((uint16_t *)src)[i*byte_per_row + j/16] & (1<<(15 - j%16)))
 80014a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014aa:	89fa      	ldrh	r2, [r7, #14]
 80014ac:	fb03 f202 	mul.w	r2, r3, r2
 80014b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da00      	bge.n	80014ba <character+0x76>
 80014b8:	330f      	adds	r3, #15
 80014ba:	111b      	asrs	r3, r3, #4
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4413      	add	r3, r2
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014ce:	425a      	negs	r2, r3
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	f002 020f 	and.w	r2, r2, #15
 80014d8:	bf58      	it	pl
 80014da:	4253      	negpl	r3, r2
 80014dc:	b21b      	sxth	r3, r3
 80014de:	f1c3 030f 	rsb	r3, r3, #15
 80014e2:	fa41 f303 	asr.w	r3, r1, r3
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00e      	beq.n	800150c <character+0xc8>
				set(j + x, i + y, color);
 80014ee:	8aba      	ldrh	r2, [r7, #20]
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	4413      	add	r3, r2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b218      	sxth	r0, r3
 80014f8:	8afa      	ldrh	r2, [r7, #22]
 80014fa:	88bb      	ldrh	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b21b      	sxth	r3, r3
 8001502:	78fa      	ldrb	r2, [r7, #3]
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fdff 	bl	8001108 <set>
 800150a:	e012      	b.n	8001532 <character+0xee>
			else
				set(j + x, i + y, !color);
 800150c:	8aba      	ldrh	r2, [r7, #20]
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	4413      	add	r3, r2
 8001512:	b29b      	uxth	r3, r3
 8001514:	b218      	sxth	r0, r3
 8001516:	8afa      	ldrh	r2, [r7, #22]
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	b29b      	uxth	r3, r3
 800151e:	b219      	sxth	r1, r3
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf0c      	ite	eq
 8001526:	2301      	moveq	r3, #1
 8001528:	2300      	movne	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	f7ff fdeb 	bl	8001108 <set>
		for(int16_t j=0; j<font.width; j++) {
 8001532:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001536:	b29b      	uxth	r3, r3
 8001538:	3301      	adds	r3, #1
 800153a:	b29b      	uxth	r3, r3
 800153c:	82bb      	strh	r3, [r7, #20]
 800153e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001542:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001546:	4293      	cmp	r3, r2
 8001548:	dbad      	blt.n	80014a6 <character+0x62>
	for(int16_t i=0; i<font.height; i++) {
 800154a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800154e:	b29b      	uxth	r3, r3
 8001550:	3301      	adds	r3, #1
 8001552:	b29b      	uxth	r3, r3
 8001554:	82fb      	strh	r3, [r7, #22]
 8001556:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800155a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800155e:	4293      	cmp	r3, r2
 8001560:	db9e      	blt.n	80014a0 <character+0x5c>
		}
	}
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800156e:	b002      	add	sp, #8
 8001570:	4770      	bx	lr

08001572 <display_printf>:

void display_printf(const int16_t x, const int16_t y, const display_color_t color, const display_font_t font, const char *format, ...) {
 8001572:	b40c      	push	{r2, r3}
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af02      	add	r7, sp, #8
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800157c:	4603      	mov	r3, r0
 800157e:	80fb      	strh	r3, [r7, #6]
 8001580:	460b      	mov	r3, r1
 8001582:	80bb      	strh	r3, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	70fb      	strb	r3, [r7, #3]
	va_list valist;
	va_start(valist, format);
 8001588:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

	char buffer[22] = {0};
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	821a      	strh	r2, [r3, #16]
	vsnprintf(buffer, 22, format, valist);
 80015a2:	f107 000c 	add.w	r0, r7, #12
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015aa:	2116      	movs	r1, #22
 80015ac:	f005 ff88 	bl	80074c0 <vsniprintf>

	const size_t n = strlen(buffer);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe fe13 	bl	80001e0 <strlen>
 80015ba:	62b8      	str	r0, [r7, #40]	; 0x28

	for(size_t i=0; i<n; i++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c0:	e01c      	b.n	80015fc <display_printf+0x8a>
		character(x + i*font.width, y, color, font, buffer[i]);
 80015c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	fb12 f303 	smulbb	r3, r2, r3
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4413      	add	r3, r2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b218      	sxth	r0, r3
 80015da:	f107 020c 	add.w	r2, r7, #12
 80015de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f2:	f7ff ff27 	bl	8001444 <character>
	for(size_t i=0; i<n; i++) {
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	3301      	adds	r3, #1
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	429a      	cmp	r2, r3
 8001602:	d3de      	bcc.n	80015c2 <display_printf+0x50>
	}
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3730      	adds	r7, #48	; 0x30
 800160a:	46bd      	mov	sp, r7
 800160c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001610:	b002      	add	sp, #8
 8001612:	4770      	bx	lr

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b094      	sub	sp, #80	; 0x50
 8001618:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f000 ffed 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f8a1 	bl	8001764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f000 fb09 	bl	8001c38 <MX_GPIO_Init>
  MX_DMA_Init();
 8001626:	f000 fae7 	bl	8001bf8 <MX_DMA_Init>
  MX_I2C1_Init();
 800162a:	f000 f975 	bl	8001918 <MX_I2C1_Init>
  MX_I2C3_Init();
 800162e:	f000 f9cf 	bl	80019d0 <MX_I2C3_Init>
  MX_ADC1_Init();
 8001632:	f000 f8f5 	bl	8001820 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001636:	f000 f99d 	bl	8001974 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800163a:	f000 fab3 	bl	8001ba4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800163e:	f000 f9f5 	bl	8001a2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001642:	f000 fa4b 	bl	8001adc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  display_init();
 8001646:	f7ff fdd5 	bl	80011f4 <display_init>
  */

  Battery battery;
  uint32_t values_adc[4];

  HAL_ADC_Start_DMA(&hadc1, values_adc, 4);
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2204      	movs	r2, #4
 800164e:	4619      	mov	r1, r3
 8001650:	483d      	ldr	r0, [pc, #244]	; (8001748 <main+0x134>)
 8001652:	f001 f8ab 	bl	80027ac <HAL_ADC_Start_DMA>

  display_printf(15, 20, DISPLAY_COLOR_WHITE, display_font_7x10, "Miras minisumo");
 8001656:	4b3d      	ldr	r3, [pc, #244]	; (800174c <main+0x138>)
 8001658:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <main+0x13c>)
 800165a:	9201      	str	r2, [sp, #4]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	2114      	movs	r1, #20
 8001666:	200f      	movs	r0, #15
 8001668:	f7ff ff83 	bl	8001572 <display_printf>
  display_render();
 800166c:	f7ff fe3a 	bl	80012e4 <display_render>

  HAL_Delay(500);
 8001670:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001674:	f001 f832 	bl	80026dc <HAL_Delay>
  //HAL_GPIO_WritePin(LS_ON_GPIO_Port, LS_ON_Pin, GPIO_PIN_SET);
  battery.adc_reading = values_adc[0];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	b29b      	uxth	r3, r3
 800167c:	82bb      	strh	r3, [r7, #20]
  initAverage(& (battery.adc_average), battery.adc_reading);
 800167e:	8aba      	ldrh	r2, [r7, #20]
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	330c      	adds	r3, #12
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fb76 	bl	8001d7a <initAverage>
  display_fill(DISPLAY_COLOR_BLACK);
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fe0c 	bl	80012ac <display_fill>
  while (1)
  {
	battery.adc_reading = values_adc[0];
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	b29b      	uxth	r3, r3
 8001698:	82bb      	strh	r3, [r7, #20]
	display_fill(DISPLAY_COLOR_BLACK);
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff fe06 	bl	80012ac <display_fill>
	display_bitmap(0, 0, DISPLAY_COLOR_WHITE, bitmap_konar_vertical_128_64, 128, 64);
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <main+0x140>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	9201      	str	r2, [sp, #4]
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	9200      	str	r2, [sp, #0]
 80016ac:	2201      	movs	r2, #1
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fe3f 	bl	8001334 <display_bitmap>
	display_printf(96, 0, DISPLAY_COLOR_WHITE, display_font_6x8, "%.2fV", calculateBatteryVoltage(& battery));
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fca4 	bl	8001008 <calculateBatteryVoltage>
 80016c0:	ee10 3a10 	vmov	r3, s0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff47 	bl	8000558 <__aeabi_f2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4922      	ldr	r1, [pc, #136]	; (8001758 <main+0x144>)
 80016d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <main+0x148>)
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	684b      	ldr	r3, [r1, #4]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	680b      	ldr	r3, [r1, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	2100      	movs	r1, #0
 80016e2:	2060      	movs	r0, #96	; 0x60
 80016e4:	f7ff ff45 	bl	8001572 <display_printf>
	display_printf(0, 0, DISPLAY_COLOR_WHITE, display_font_6x8, "%d", (int) values_adc[1]);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <main+0x144>)
 80016ee:	9202      	str	r2, [sp, #8]
 80016f0:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <main+0x14c>)
 80016f2:	9201      	str	r2, [sp, #4]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	9200      	str	r2, [sp, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2201      	movs	r2, #1
 80016fc:	2100      	movs	r1, #0
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff ff37 	bl	8001572 <display_printf>
	display_printf(0, 10, DISPLAY_COLOR_WHITE, display_font_6x8, "%d", (int) values_adc[2]);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	461a      	mov	r2, r3
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <main+0x144>)
 800170a:	9202      	str	r2, [sp, #8]
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <main+0x14c>)
 800170e:	9201      	str	r2, [sp, #4]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	9200      	str	r2, [sp, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	210a      	movs	r1, #10
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ff29 	bl	8001572 <display_printf>
	display_printf(0, 20, DISPLAY_COLOR_WHITE, display_font_6x8, "%d", (int) values_adc[3]);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	461a      	mov	r2, r3
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <main+0x144>)
 8001726:	9202      	str	r2, [sp, #8]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <main+0x14c>)
 800172a:	9201      	str	r2, [sp, #4]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	9200      	str	r2, [sp, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2201      	movs	r2, #1
 8001734:	2114      	movs	r1, #20
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff ff1b 	bl	8001572 <display_printf>
	//display_printf(96, 20, DISPLAY_COLOR_WHITE, display_font_6x8, values_adc[2]);
	//display_printf(96, 30, DISPLAY_COLOR_WHITE, display_font_6x8, values_adc[3]);
	display_render();
 800173c:	f7ff fdd2 	bl	80012e4 <display_render>
	HAL_Delay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f000 ffcb 	bl	80026dc <HAL_Delay>
	battery.adc_reading = values_adc[0];
 8001746:	e7a5      	b.n	8001694 <main+0x80>
 8001748:	20000600 	.word	0x20000600
 800174c:	0800b148 	.word	0x0800b148
 8001750:	0800a3c8 	.word	0x0800a3c8
 8001754:	20000000 	.word	0x20000000
 8001758:	0800b140 	.word	0x0800b140
 800175c:	0800a3d8 	.word	0x0800a3d8
 8001760:	0800a3e0 	.word	0x0800a3e0

08001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b094      	sub	sp, #80	; 0x50
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 0320 	add.w	r3, r7, #32
 800176e:	2230      	movs	r2, #48	; 0x30
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f004 f924 	bl	80059c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <SystemClock_Config+0xb4>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a21      	ldr	r2, [pc, #132]	; (8001818 <SystemClock_Config+0xb4>)
 8001792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <SystemClock_Config+0xb4>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <SystemClock_Config+0xb8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a1b      	ldr	r2, [pc, #108]	; (800181c <SystemClock_Config+0xb8>)
 80017ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <SystemClock_Config+0xb8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c0:	2302      	movs	r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c8:	2310      	movs	r3, #16
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fe23 	bl	8004420 <HAL_RCC_OscConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80017e0:	f000 fac6 	bl	8001d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e4:	230f      	movs	r3, #15
 80017e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 f886 	bl	8004910 <HAL_RCC_ClockConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800180a:	f000 fab1 	bl	8001d70 <Error_Handler>
  }
}
 800180e:	bf00      	nop
 8001810:	3750      	adds	r7, #80	; 0x50
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40007000 	.word	0x40007000

08001820 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001826:	463b      	mov	r3, r7
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <MX_ADC1_Init+0xec>)
 8001834:	4a36      	ldr	r2, [pc, #216]	; (8001910 <MX_ADC1_Init+0xf0>)
 8001836:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001838:	4b34      	ldr	r3, [pc, #208]	; (800190c <MX_ADC1_Init+0xec>)
 800183a:	2200      	movs	r2, #0
 800183c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800183e:	4b33      	ldr	r3, [pc, #204]	; (800190c <MX_ADC1_Init+0xec>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <MX_ADC1_Init+0xec>)
 8001846:	2201      	movs	r2, #1
 8001848:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <MX_ADC1_Init+0xec>)
 800184c:	2201      	movs	r2, #1
 800184e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <MX_ADC1_Init+0xec>)
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001858:	4b2c      	ldr	r3, [pc, #176]	; (800190c <MX_ADC1_Init+0xec>)
 800185a:	2200      	movs	r2, #0
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <MX_ADC1_Init+0xec>)
 8001860:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <MX_ADC1_Init+0xf4>)
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001864:	4b29      	ldr	r3, [pc, #164]	; (800190c <MX_ADC1_Init+0xec>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800186a:	4b28      	ldr	r3, [pc, #160]	; (800190c <MX_ADC1_Init+0xec>)
 800186c:	2204      	movs	r2, #4
 800186e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001870:	4b26      	ldr	r3, [pc, #152]	; (800190c <MX_ADC1_Init+0xec>)
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <MX_ADC1_Init+0xec>)
 800187a:	2201      	movs	r2, #1
 800187c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800187e:	4823      	ldr	r0, [pc, #140]	; (800190c <MX_ADC1_Init+0xec>)
 8001880:	f000 ff50 	bl	8002724 <HAL_ADC_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800188a:	f000 fa71 	bl	8001d70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800188e:	2309      	movs	r3, #9
 8001890:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001896:	2307      	movs	r3, #7
 8001898:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189a:	463b      	mov	r3, r7
 800189c:	4619      	mov	r1, r3
 800189e:	481b      	ldr	r0, [pc, #108]	; (800190c <MX_ADC1_Init+0xec>)
 80018a0:	f001 f892 	bl	80029c8 <HAL_ADC_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80018aa:	f000 fa61 	bl	8001d70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80018ae:	230b      	movs	r3, #11
 80018b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <MX_ADC1_Init+0xec>)
 80018bc:	f001 f884 	bl	80029c8 <HAL_ADC_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80018c6:	f000 fa53 	bl	8001d70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80018ca:	230c      	movs	r3, #12
 80018cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80018ce:	2303      	movs	r3, #3
 80018d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d2:	463b      	mov	r3, r7
 80018d4:	4619      	mov	r1, r3
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <MX_ADC1_Init+0xec>)
 80018d8:	f001 f876 	bl	80029c8 <HAL_ADC_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80018e2:	f000 fa45 	bl	8001d70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80018e6:	230d      	movs	r3, #13
 80018e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80018ea:	2304      	movs	r3, #4
 80018ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ee:	463b      	mov	r3, r7
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <MX_ADC1_Init+0xec>)
 80018f4:	f001 f868 	bl	80029c8 <HAL_ADC_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80018fe:	f000 fa37 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000600 	.word	0x20000600
 8001910:	40012000 	.word	0x40012000
 8001914:	0f000001 	.word	0x0f000001

08001918 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <MX_I2C1_Init+0x50>)
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <MX_I2C1_Init+0x54>)
 8001920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_I2C1_Init+0x50>)
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <MX_I2C1_Init+0x58>)
 8001926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_I2C1_Init+0x50>)
 8001936:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800193a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <MX_I2C1_Init+0x50>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_I2C1_Init+0x50>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <MX_I2C1_Init+0x50>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_I2C1_Init+0x50>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_I2C1_Init+0x50>)
 8001956:	f002 f907 	bl	8003b68 <HAL_I2C_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001960:	f000 fa06 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200006a8 	.word	0x200006a8
 800196c:	40005400 	.word	0x40005400
 8001970:	000186a0 	.word	0x000186a0

08001974 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_I2C2_Init+0x50>)
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <MX_I2C2_Init+0x54>)
 800197c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_I2C2_Init+0x50>)
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <MX_I2C2_Init+0x58>)
 8001982:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_I2C2_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_I2C2_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_I2C2_Init+0x50>)
 8001992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001996:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <MX_I2C2_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_I2C2_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <MX_I2C2_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_I2C2_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <MX_I2C2_Init+0x50>)
 80019b2:	f002 f8d9 	bl	8003b68 <HAL_I2C_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019bc:	f000 f9d8 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200006fc 	.word	0x200006fc
 80019c8:	40005800 	.word	0x40005800
 80019cc:	000186a0 	.word	0x000186a0

080019d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_I2C3_Init+0x50>)
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <MX_I2C3_Init+0x54>)
 80019d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_I2C3_Init+0x50>)
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_I2C3_Init+0x58>)
 80019de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_I2C3_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_I2C3_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_I2C3_Init+0x50>)
 80019ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_I2C3_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_I2C3_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MX_I2C3_Init+0x50>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_I2C3_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_I2C3_Init+0x50>)
 8001a0e:	f002 f8ab 	bl	8003b68 <HAL_I2C_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a18:	f000 f9aa 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000750 	.word	0x20000750
 8001a24:	40005c00 	.word	0x40005c00
 8001a28:	000186a0 	.word	0x000186a0

08001a2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a32:	f107 0320 	add.w	r3, r7, #32
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <MX_TIM2_Init+0xac>)
 8001a50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <MX_TIM2_Init+0xac>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_TIM2_Init+0xac>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <MX_TIM2_Init+0xac>)
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_TIM2_Init+0xac>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <MX_TIM2_Init+0xac>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a76:	4818      	ldr	r0, [pc, #96]	; (8001ad8 <MX_TIM2_Init+0xac>)
 8001a78:	f003 f92a 	bl	8004cd0 <HAL_TIM_PWM_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a82:	f000 f975 	bl	8001d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a8e:	f107 0320 	add.w	r3, r7, #32
 8001a92:	4619      	mov	r1, r3
 8001a94:	4810      	ldr	r0, [pc, #64]	; (8001ad8 <MX_TIM2_Init+0xac>)
 8001a96:	f003 fc39 	bl	800530c <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001aa0:	f000 f966 	bl	8001d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa4:	2360      	movs	r3, #96	; 0x60
 8001aa6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4807      	ldr	r0, [pc, #28]	; (8001ad8 <MX_TIM2_Init+0xac>)
 8001abc:	f003 f958 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ac6:	f000 f953 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001aca:	4803      	ldr	r0, [pc, #12]	; (8001ad8 <MX_TIM2_Init+0xac>)
 8001acc:	f000 fb98 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200007a4 	.word	0x200007a4

08001adc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001afe:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <MX_TIM3_Init+0xc4>)
 8001b02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b24:	481d      	ldr	r0, [pc, #116]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b26:	f003 f8d3 	bl	8004cd0 <HAL_TIM_PWM_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b30:	f000 f91e 	bl	8001d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	4619      	mov	r1, r3
 8001b42:	4816      	ldr	r0, [pc, #88]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b44:	f003 fbe2 	bl	800530c <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b4e:	f000 f90f 	bl	8001d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b52:	2360      	movs	r3, #96	; 0x60
 8001b54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b6a:	f003 f901 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b74:	f000 f8fc 	bl	8001d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b80:	f003 f8f6 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b8a:	f000 f8f1 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b8e:	4803      	ldr	r0, [pc, #12]	; (8001b9c <MX_TIM3_Init+0xc0>)
 8001b90:	f000 fb36 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200007ec 	.word	0x200007ec
 8001ba0:	40000400 	.word	0x40000400

08001ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <MX_USART2_UART_Init+0x50>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	f003 fc04 	bl	80053e8 <HAL_UART_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001be6:	f000 f8c3 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000834 	.word	0x20000834
 8001bf4:	40004400 	.word	0x40004400

08001bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_DMA_Init+0x3c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <MX_DMA_Init+0x3c>)
 8001c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_DMA_Init+0x3c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2038      	movs	r0, #56	; 0x38
 8001c20:	f001 fa5d 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c24:	2038      	movs	r0, #56	; 0x38
 8001c26:	f001 fa76 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a42      	ldr	r2, [pc, #264]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b3c      	ldr	r3, [pc, #240]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a34      	ldr	r2, [pc, #208]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a2d      	ldr	r2, [pc, #180]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <MX_GPIO_Init+0x128>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_X3_Pin|TOF_X2_Pin|TOF_X1_Pin|TOF_X6_Pin
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f64e 0120 	movw	r1, #59424	; 0xe820
 8001cc4:	4827      	ldr	r0, [pc, #156]	; (8001d64 <MX_GPIO_Init+0x12c>)
 8001cc6:	f001 ff35 	bl	8003b34 <HAL_GPIO_WritePin>
                          |LS_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motor_R_DIR_2_Pin|motor_R_DIR_1_Pin|TOF_X5_Pin|motor_L_DIR_1_Pin
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f244 3105 	movw	r1, #17157	; 0x4305
 8001cd0:	4825      	ldr	r0, [pc, #148]	; (8001d68 <MX_GPIO_Init+0x130>)
 8001cd2:	f001 ff2f 	bl	8003b34 <HAL_GPIO_WritePin>
                          |motor_L_DIR_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_X4_GPIO_Port, TOF_X4_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cdc:	4823      	ldr	r0, [pc, #140]	; (8001d6c <MX_GPIO_Init+0x134>)
 8001cde:	f001 ff29 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOF_X3_Pin TOF_X2_Pin TOF_X1_Pin TOF_X6_Pin
                           LS_ON_Pin */
  GPIO_InitStruct.Pin = TOF_X3_Pin|TOF_X2_Pin|TOF_X1_Pin|TOF_X6_Pin
 8001ce2:	f64e 0320 	movw	r3, #59424	; 0xe820
 8001ce6:	617b      	str	r3, [r7, #20]
                          |LS_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	481a      	ldr	r0, [pc, #104]	; (8001d64 <MX_GPIO_Init+0x12c>)
 8001cfc:	f001 fd96 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_R_DIR_2_Pin motor_R_DIR_1_Pin TOF_X5_Pin motor_L_DIR_1_Pin
                           motor_L_DIR_2_Pin */
  GPIO_InitStruct.Pin = motor_R_DIR_2_Pin|motor_R_DIR_1_Pin|TOF_X5_Pin|motor_L_DIR_1_Pin
 8001d00:	f244 3305 	movw	r3, #17157	; 0x4305
 8001d04:	617b      	str	r3, [r7, #20]
                          |motor_L_DIR_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4813      	ldr	r0, [pc, #76]	; (8001d68 <MX_GPIO_Init+0x130>)
 8001d1a:	f001 fd87 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : starter_Pin */
  GPIO_InitStruct.Pin = starter_Pin;
 8001d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(starter_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	480d      	ldr	r0, [pc, #52]	; (8001d68 <MX_GPIO_Init+0x130>)
 8001d34:	f001 fd7a 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_X4_Pin */
  GPIO_InitStruct.Pin = TOF_X4_Pin;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_X4_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4806      	ldr	r0, [pc, #24]	; (8001d6c <MX_GPIO_Init+0x134>)
 8001d52:	f001 fd6b 	bl	800382c <HAL_GPIO_Init>

}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40020000 	.word	0x40020000

08001d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d74:	b672      	cpsid	i
}
 8001d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <Error_Handler+0x8>

08001d7a <initAverage>:
 * @brief initializes the filter, this function must be called before using the filter
 *
 * @param mvngAverage
 * @param initialValue is the average value at the beginning
 */
void initAverage(MovingAverage* mvngAverage, uint16_t initialValue){
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < NUM_OF_READINGS; ++i)
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	e007      	b.n	8001d9c <initAverage+0x22>
		mvngAverage->readings[i] = initialValue;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	8879      	ldrh	r1, [r7, #2]
 8001d92:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < NUM_OF_READINGS; ++i)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b09      	cmp	r3, #9
 8001da0:	ddf4      	ble.n	8001d8c <initAverage+0x12>
	mvngAverage->readIndex = 0;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	751a      	strb	r2, [r3, #20]
	mvngAverage->average = initialValue;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	839a      	strh	r2, [r3, #28]
	mvngAverage->total = initialValue * NUM_OF_READINGS;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	461a      	mov	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <calculateAverage>:
 *
 * @param mvngAverage
 * @param reading value that is being averaged out
 * @return uint16_t averaged value
 */
uint16_t calculateAverage(MovingAverage * mvngAverage, uint16_t reading){
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
	mvngAverage->total -= mvngAverage->readings[mvngAverage->readIndex];    //subtract the last reading:
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	7d12      	ldrb	r2, [r2, #20]
 8001de0:	4611      	mov	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001de8:	1a9a      	subs	r2, r3, r2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	619a      	str	r2, [r3, #24]
	mvngAverage->readings[mvngAverage->readIndex] = reading;      			//read from the sensor:
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7d1b      	ldrb	r3, [r3, #20]
 8001df2:	4619      	mov	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	mvngAverage->total += mvngAverage->readings[mvngAverage->readIndex];    //add the reading to the total:
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	7d12      	ldrb	r2, [r2, #20]
 8001e04:	4611      	mov	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001e0c:	441a      	add	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
	++mvngAverage->readIndex;                        						//advance to the next position in the array:
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7d1b      	ldrb	r3, [r3, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	751a      	strb	r2, [r3, #20]
	if (mvngAverage->readIndex >= NUM_OF_READINGS)   						//if we're at the end of the array...
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7d1b      	ldrb	r3, [r3, #20]
 8001e22:	2b09      	cmp	r3, #9
 8001e24:	d902      	bls.n	8001e2c <calculateAverage+0x60>
		mvngAverage->readIndex = 0;                   						//...wrap around to the beginning:
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	751a      	strb	r2, [r3, #20]
	mvngAverage->average = mvngAverage->total / NUM_OF_READINGS;  			//calculate the average:
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <calculateAverage+0x84>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	08db      	lsrs	r3, r3, #3
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	839a      	strh	r2, [r3, #28]
	return mvngAverage->average;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	8b9b      	ldrh	r3, [r3, #28]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	cccccccd 	.word	0xcccccccd

08001e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a3c      	ldr	r2, [pc, #240]	; (8001fb4 <HAL_ADC_MspInit+0x110>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d171      	bne.n	8001faa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a3a      	ldr	r2, [pc, #232]	; (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a33      	ldr	r2, [pc, #204]	; (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a2c      	ldr	r2, [pc, #176]	; (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = adc_line_sensor1_Pin|adc_line_sensor2_Pin|adc_line_sensor3_Pin;
 8001f1a:	230e      	movs	r3, #14
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4823      	ldr	r0, [pc, #140]	; (8001fbc <HAL_ADC_MspInit+0x118>)
 8001f2e:	f001 fc7d 	bl	800382c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = adc_bat_meas_Pin;
 8001f32:	2302      	movs	r3, #2
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f36:	2303      	movs	r3, #3
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(adc_bat_meas_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	481e      	ldr	r0, [pc, #120]	; (8001fc0 <HAL_ADC_MspInit+0x11c>)
 8001f46:	f001 fc71 	bl	800382c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <HAL_ADC_MspInit+0x124>)
 8001f4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f8e:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f90:	f001 f8dc 	bl	800314c <HAL_DMA_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001f9a:	f7ff fee9 	bl	8001d70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40012000 	.word	0x40012000
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	20000648 	.word	0x20000648
 8001fc8:	40026410 	.word	0x40026410

08001fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	; 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a63      	ldr	r2, [pc, #396]	; (8002178 <HAL_I2C_MspInit+0x1ac>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d12c      	bne.n	8002048 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	4b62      	ldr	r3, [pc, #392]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a61      	ldr	r2, [pc, #388]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800200a:	23c0      	movs	r3, #192	; 0xc0
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200e:	2312      	movs	r3, #18
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800201a:	2304      	movs	r3, #4
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	4856      	ldr	r0, [pc, #344]	; (8002180 <HAL_I2C_MspInit+0x1b4>)
 8002026:	f001 fc01 	bl	800382c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 8002034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b50      	ldr	r3, [pc, #320]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002046:	e093      	b.n	8002170 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a4d      	ldr	r2, [pc, #308]	; (8002184 <HAL_I2C_MspInit+0x1b8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d13d      	bne.n	80020ce <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	4b49      	ldr	r3, [pc, #292]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a48      	ldr	r2, [pc, #288]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800206e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002074:	2312      	movs	r3, #18
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002080:	2304      	movs	r3, #4
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002088:	4619      	mov	r1, r3
 800208a:	483d      	ldr	r0, [pc, #244]	; (8002180 <HAL_I2C_MspInit+0x1b4>)
 800208c:	f001 fbce 	bl	800382c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002090:	2308      	movs	r3, #8
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002094:	2312      	movs	r3, #18
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80020a0:	2309      	movs	r3, #9
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a8:	4619      	mov	r1, r3
 80020aa:	4835      	ldr	r0, [pc, #212]	; (8002180 <HAL_I2C_MspInit+0x1b4>)
 80020ac:	f001 fbbe 	bl	800382c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a30      	ldr	r2, [pc, #192]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 80020ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
 80020c0:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
}
 80020cc:	e050      	b.n	8002170 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a2d      	ldr	r2, [pc, #180]	; (8002188 <HAL_I2C_MspInit+0x1bc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d14b      	bne.n	8002170 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	4a26      	ldr	r2, [pc, #152]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 80020e2:	f043 0304 	orr.w	r3, r3, #4
 80020e6:	6313      	str	r3, [r2, #48]	; 0x30
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6313      	str	r3, [r2, #48]	; 0x30
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002116:	2312      	movs	r3, #18
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002122:	2304      	movs	r3, #4
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212a:	4619      	mov	r1, r3
 800212c:	4817      	ldr	r0, [pc, #92]	; (800218c <HAL_I2C_MspInit+0x1c0>)
 800212e:	f001 fb7d 	bl	800382c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002138:	2312      	movs	r3, #18
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002144:	2304      	movs	r3, #4
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	4619      	mov	r1, r3
 800214e:	4810      	ldr	r0, [pc, #64]	; (8002190 <HAL_I2C_MspInit+0x1c4>)
 8002150:	f001 fb6c 	bl	800382c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 800215e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002162:	6413      	str	r3, [r2, #64]	; 0x40
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_I2C_MspInit+0x1b0>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
}
 8002170:	bf00      	nop
 8002172:	3738      	adds	r7, #56	; 0x38
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40005400 	.word	0x40005400
 800217c:	40023800 	.word	0x40023800
 8002180:	40020400 	.word	0x40020400
 8002184:	40005800 	.word	0x40005800
 8002188:	40005c00 	.word	0x40005c00
 800218c:	40020800 	.word	0x40020800
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a4:	d10e      	bne.n	80021c4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021c2:	e012      	b.n	80021ea <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HAL_TIM_PWM_MspInit+0x68>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10d      	bne.n	80021ea <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40000400 	.word	0x40000400

08002200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d11f      	bne.n	8002262 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	4b31      	ldr	r3, [pc, #196]	; (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a30      	ldr	r2, [pc, #192]	; (80022ec <HAL_TIM_MspPostInit+0xec>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = servo_Pin;
 800223e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002250:	2301      	movs	r3, #1
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	4825      	ldr	r0, [pc, #148]	; (80022f0 <HAL_TIM_MspPostInit+0xf0>)
 800225c:	f001 fae6 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002260:	e040      	b.n	80022e4 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <HAL_TIM_MspPostInit+0xf4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d13b      	bne.n	80022e4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6313      	str	r3, [r2, #48]	; 0x30
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_TIM_MspPostInit+0xec>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_TIM_MspPostInit+0xec>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002292:	f043 0302 	orr.w	r3, r3, #2
 8002296:	6313      	str	r3, [r2, #48]	; 0x30
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_TIM_MspPostInit+0xec>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = motor_R_PWM_Pin;
 80022a4:	2340      	movs	r3, #64	; 0x40
 80022a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022b4:	2302      	movs	r3, #2
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor_R_PWM_GPIO_Port, &GPIO_InitStruct);
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4619      	mov	r1, r3
 80022be:	480c      	ldr	r0, [pc, #48]	; (80022f0 <HAL_TIM_MspPostInit+0xf0>)
 80022c0:	f001 fab4 	bl	800382c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = motor_L_PWM_Pin;
 80022c4:	2320      	movs	r3, #32
 80022c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022d4:	2302      	movs	r3, #2
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor_L_PWM_GPIO_Port, &GPIO_InitStruct);
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <HAL_TIM_MspPostInit+0xf8>)
 80022e0:	f001 faa4 	bl	800382c <HAL_GPIO_Init>
}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40020400 	.word	0x40020400

080022fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_UART_MspInit+0x84>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d12b      	bne.n	8002376 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_UART_MspInit+0x88>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a17      	ldr	r2, [pc, #92]	; (8002384 <HAL_UART_MspInit+0x88>)
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_UART_MspInit+0x88>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_UART_MspInit+0x88>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_UART_MspInit+0x88>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_UART_MspInit+0x88>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002356:	230c      	movs	r3, #12
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002366:	2307      	movs	r3, #7
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_UART_MspInit+0x8c>)
 8002372:	f001 fa5b 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40004400 	.word	0x40004400
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <NMI_Handler+0x4>

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <MemManage_Handler+0x4>

0800239e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <UsageFault_Handler+0x4>

080023aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d8:	f000 f960 	bl	800269c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}

080023e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <DMA2_Stream0_IRQHandler+0x10>)
 80023e6:	f000 ffb7 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000648 	.word	0x20000648

080023f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return 1;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <_kill>:

int _kill(int pid, int sig)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800240e:	f003 faad 	bl	800596c <__errno>
 8002412:	4603      	mov	r3, r0
 8002414:	2216      	movs	r2, #22
 8002416:	601a      	str	r2, [r3, #0]
  return -1;
 8002418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_exit>:

void _exit (int status)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800242c:	f04f 31ff 	mov.w	r1, #4294967295
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ffe7 	bl	8002404 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002436:	e7fe      	b.n	8002436 <_exit+0x12>

08002438 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e00a      	b.n	8002460 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800244a:	f3af 8000 	nop.w
 800244e:	4601      	mov	r1, r0
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	60ba      	str	r2, [r7, #8]
 8002456:	b2ca      	uxtb	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3301      	adds	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	dbf0      	blt.n	800244a <_read+0x12>
  }

  return len;
 8002468:	687b      	ldr	r3, [r7, #4]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e009      	b.n	8002498 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	60ba      	str	r2, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	dbf1      	blt.n	8002484 <_write+0x12>
  }
  return len;
 80024a0:	687b      	ldr	r3, [r7, #4]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_close>:

int _close(int file)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d2:	605a      	str	r2, [r3, #4]
  return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_isatty>:

int _isatty(int file)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ea:	2301      	movs	r3, #1
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800251c:	4a14      	ldr	r2, [pc, #80]	; (8002570 <_sbrk+0x5c>)
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <_sbrk+0x60>)
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <_sbrk+0x64>)
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <_sbrk+0x68>)
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d207      	bcs.n	8002554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002544:	f003 fa12 	bl	800596c <__errno>
 8002548:	4603      	mov	r3, r0
 800254a:	220c      	movs	r2, #12
 800254c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	e009      	b.n	8002568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <_sbrk+0x64>)
 8002564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20020000 	.word	0x20020000
 8002574:	00000400 	.word	0x00000400
 8002578:	20000878 	.word	0x20000878
 800257c:	20000890 	.word	0x20000890

08002580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <SystemInit+0x20>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <SystemInit+0x20>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a8:	480d      	ldr	r0, [pc, #52]	; (80025e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025aa:	490e      	ldr	r1, [pc, #56]	; (80025e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c0:	4c0b      	ldr	r4, [pc, #44]	; (80025f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ce:	f7ff ffd7 	bl	8002580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d2:	f003 f9d1 	bl	8005978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7ff f81d 	bl	8001614 <main>
  bx  lr    
 80025da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80025e8:	0800ba24 	.word	0x0800ba24
  ldr r2, =_sbss
 80025ec:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80025f0:	20000890 	.word	0x20000890

080025f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025fc:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <HAL_Init+0x40>)
 8002602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_Init+0x40>)
 800260e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a07      	ldr	r2, [pc, #28]	; (8002638 <HAL_Init+0x40>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002620:	2003      	movs	r0, #3
 8002622:	f000 fd51 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002626:	200f      	movs	r0, #15
 8002628:	f000 f808 	bl	800263c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800262c:	f7ff fc12 	bl	8001e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_InitTick+0x54>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_InitTick+0x58>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002652:	fbb3 f3f1 	udiv	r3, r3, r1
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fd69 	bl	8003132 <HAL_SYSTICK_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e00e      	b.n	8002688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b0f      	cmp	r3, #15
 800266e:	d80a      	bhi.n	8002686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002670:	2200      	movs	r2, #0
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f000 fd31 	bl	80030de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_InitTick+0x5c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000004 	.word	0x20000004
 8002694:	2000000c 	.word	0x2000000c
 8002698:	20000008 	.word	0x20000008

0800269c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_IncTick+0x20>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_IncTick+0x24>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <HAL_IncTick+0x24>)
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2000000c 	.word	0x2000000c
 80026c0:	2000087c 	.word	0x2000087c

080026c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return uwTick;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_GetTick+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	2000087c 	.word	0x2000087c

080026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff ffee 	bl	80026c4 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d005      	beq.n	8002702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_Delay+0x44>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002702:	bf00      	nop
 8002704:	f7ff ffde 	bl	80026c4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d8f7      	bhi.n	8002704 <HAL_Delay+0x28>
  {
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	2000000c 	.word	0x2000000c

08002724 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e033      	b.n	80027a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fbae 	bl	8001ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800276a:	f023 0302 	bic.w	r3, r3, #2
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa58 	bl	8002c2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
 8002792:	e001      	b.n	8002798 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_Start_DMA+0x1e>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e0ce      	b.n	8002968 <HAL_ADC_Start_DMA+0x1bc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d018      	beq.n	8002812 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027f0:	4b5f      	ldr	r3, [pc, #380]	; (8002970 <HAL_ADC_Start_DMA+0x1c4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5f      	ldr	r2, [pc, #380]	; (8002974 <HAL_ADC_Start_DMA+0x1c8>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0c9a      	lsrs	r2, r3, #18
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002804:	e002      	b.n	800280c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	3b01      	subs	r3, #1
 800280a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f9      	bne.n	8002806 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002820:	d107      	bne.n	8002832 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002830:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	f040 8086 	bne.w	800294e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800286c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002880:	d106      	bne.n	8002890 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f023 0206 	bic.w	r2, r3, #6
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
 800288e:	e002      	b.n	8002896 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289e:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_ADC_Start_DMA+0x1cc>)
 80028a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	4a35      	ldr	r2, [pc, #212]	; (800297c <HAL_ADC_Start_DMA+0x1d0>)
 80028a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	4a34      	ldr	r2, [pc, #208]	; (8002980 <HAL_ADC_Start_DMA+0x1d4>)
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	4a33      	ldr	r2, [pc, #204]	; (8002984 <HAL_ADC_Start_DMA+0x1d8>)
 80028b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80028d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	334c      	adds	r3, #76	; 0x4c
 80028ee:	4619      	mov	r1, r3
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f000 fcd8 	bl	80032a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10f      	bne.n	8002924 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d129      	bne.n	8002966 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	e020      	b.n	8002966 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_ADC_Start_DMA+0x1dc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d11b      	bne.n	8002966 <HAL_ADC_Start_DMA+0x1ba>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d114      	bne.n	8002966 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e00b      	b.n	8002966 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f043 0210 	orr.w	r2, r3, #16
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000004 	.word	0x20000004
 8002974:	431bde83 	.word	0x431bde83
 8002978:	40012300 	.word	0x40012300
 800297c:	08002e25 	.word	0x08002e25
 8002980:	08002edf 	.word	0x08002edf
 8002984:	08002efb 	.word	0x08002efb
 8002988:	40012000 	.word	0x40012000

0800298c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1c>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e113      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x244>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b09      	cmp	r3, #9
 80029f2:	d925      	bls.n	8002a40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68d9      	ldr	r1, [r3, #12]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	3b1e      	subs	r3, #30
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43da      	mvns	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	400a      	ands	r2, r1
 8002a18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68d9      	ldr	r1, [r3, #12]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4403      	add	r3, r0
 8002a32:	3b1e      	subs	r3, #30
 8002a34:	409a      	lsls	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	e022      	b.n	8002a86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	2207      	movs	r2, #7
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	400a      	ands	r2, r1
 8002a62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6919      	ldr	r1, [r3, #16]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4618      	mov	r0, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4403      	add	r3, r0
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d824      	bhi.n	8002ad8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b05      	subs	r3, #5
 8002aa0:	221f      	movs	r2, #31
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	400a      	ands	r2, r1
 8002aae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b05      	subs	r3, #5
 8002aca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ad6:	e04c      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d824      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	3b23      	subs	r3, #35	; 0x23
 8002af2:	221f      	movs	r2, #31
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43da      	mvns	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	400a      	ands	r2, r1
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b23      	subs	r3, #35	; 0x23
 8002b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
 8002b28:	e023      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b41      	subs	r3, #65	; 0x41
 8002b3c:	221f      	movs	r2, #31
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	400a      	ands	r2, r1
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	3b41      	subs	r3, #65	; 0x41
 8002b66:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b72:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <HAL_ADC_ConfigChannel+0x250>)
 8002b74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <HAL_ADC_ConfigChannel+0x254>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1d8>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b12      	cmp	r3, #18
 8002b86:	d10b      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_ADC_ConfigChannel+0x254>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d12b      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x23a>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_ADC_ConfigChannel+0x258>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <HAL_ADC_ConfigChannel+0x1f4>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b11      	cmp	r3, #17
 8002bba:	d122      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_ADC_ConfigChannel+0x258>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d111      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_ADC_ConfigChannel+0x25c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_ADC_ConfigChannel+0x260>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	0c9a      	lsrs	r2, r3, #18
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bf4:	e002      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f9      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40012300 	.word	0x40012300
 8002c1c:	40012000 	.word	0x40012000
 8002c20:	10000012 	.word	0x10000012
 8002c24:	20000004 	.word	0x20000004
 8002c28:	431bde83 	.word	0x431bde83

08002c2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c34:	4b79      	ldr	r3, [pc, #484]	; (8002e1c <ADC_Init+0x1f0>)
 8002c36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	021a      	lsls	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	4a58      	ldr	r2, [pc, #352]	; (8002e20 <ADC_Init+0x1f4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d022      	beq.n	8002d0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6899      	ldr	r1, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6899      	ldr	r1, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	e00f      	b.n	8002d2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0202 	bic.w	r2, r2, #2
 8002d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7e1b      	ldrb	r3, [r3, #24]
 8002d44:	005a      	lsls	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	3b01      	subs	r3, #1
 8002d84:	035a      	lsls	r2, r3, #13
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	e007      	b.n	8002da0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	051a      	lsls	r2, r3, #20
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6899      	ldr	r1, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002de2:	025a      	lsls	r2, r3, #9
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6899      	ldr	r1, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	029a      	lsls	r2, r3, #10
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40012300 	.word	0x40012300
 8002e20:	0f000001 	.word	0x0f000001

08002e24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d13c      	bne.n	8002eb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d12b      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d127      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d119      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0220 	bic.w	r2, r2, #32
 8002e8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fd6b 	bl	800298c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eb6:	e00e      	b.n	8002ed6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fd75 	bl	80029b4 <HAL_ADC_ErrorCallback>
}
 8002eca:	e004      	b.n	8002ed6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff fd57 	bl	80029a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f043 0204 	orr.w	r2, r3, #4
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fd4a 	bl	80029b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db0b      	blt.n	8002fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <__NVIC_EnableIRQ+0x38>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	; (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	; (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
         );
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	; 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003094:	d301      	bcc.n	800309a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003096:	2301      	movs	r3, #1
 8003098:	e00f      	b.n	80030ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <SysTick_Config+0x40>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a2:	210f      	movs	r1, #15
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	f7ff ff8e 	bl	8002fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <SysTick_Config+0x40>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b2:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <SysTick_Config+0x40>)
 80030b4:	2207      	movs	r2, #7
 80030b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	e000e010 	.word	0xe000e010

080030c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff29 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff3e 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ff8e 	bl	800301c <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff5d 	bl	8002fc8 <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff31 	bl	8002f8c <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ffa2 	bl	8003084 <SysTick_Config>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff fab4 	bl	80026c4 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e099      	b.n	800329c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003188:	e00f      	b.n	80031aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318a:	f7ff fa9b 	bl	80026c4 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b05      	cmp	r3, #5
 8003196:	d908      	bls.n	80031aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e078      	b.n	800329c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e8      	bne.n	800318a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_DMA_Init+0x158>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b04      	cmp	r3, #4
 800323c:	d117      	bne.n	800326e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fa6f 	bl	8003734 <DMA_CheckFifoParam>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2240      	movs	r2, #64	; 0x40
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800326a:	2301      	movs	r3, #1
 800326c:	e016      	b.n	800329c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa26 	bl	80036c8 <DMA_CalcBaseAndBitshift>
 800327c:	4603      	mov	r3, r0
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	223f      	movs	r2, #63	; 0x3f
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	f010803f 	.word	0xf010803f

080032a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Start_IT+0x26>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e040      	b.n	8003350 <HAL_DMA_Start_IT+0xa8>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d12f      	bne.n	8003342 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f9b8 	bl	800366c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	223f      	movs	r2, #63	; 0x3f
 8003302:	409a      	lsls	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0216 	orr.w	r2, r2, #22
 8003316:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0208 	orr.w	r2, r2, #8
 800332e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e005      	b.n	800334e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800334a:	2302      	movs	r3, #2
 800334c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003364:	4b8e      	ldr	r3, [pc, #568]	; (80035a0 <HAL_DMA_IRQHandler+0x248>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a8e      	ldr	r2, [pc, #568]	; (80035a4 <HAL_DMA_IRQHandler+0x24c>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0a9b      	lsrs	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	2208      	movs	r2, #8
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01a      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2208      	movs	r2, #8
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	2201      	movs	r2, #1
 80033e8:	409a      	lsls	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	2204      	movs	r2, #4
 8003400:	409a      	lsls	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	2204      	movs	r2, #4
 800341e:	409a      	lsls	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	2210      	movs	r2, #16
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d043      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	2210      	movs	r2, #16
 8003454:	409a      	lsls	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d018      	beq.n	800349a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d024      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
 8003486:	e01f      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e016      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0208 	bic.w	r2, r2, #8
 80034b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	2220      	movs	r2, #32
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 808f 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8087 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2220      	movs	r2, #32
 80034f0:	409a      	lsls	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d136      	bne.n	8003570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_IRQHandler+0x1da>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	223f      	movs	r2, #63	; 0x3f
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d07e      	beq.n	8003664 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
        }
        return;
 800356e:	e079      	b.n	8003664 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10d      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	2b00      	cmp	r3, #0
 8003592:	d031      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e02c      	b.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
 800359e:	bf00      	nop
 80035a0:	20000004 	.word	0x20000004
 80035a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
 80035b8:	e01e      	b.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0210 	bic.w	r2, r2, #16
 80035d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d032      	beq.n	8003666 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d022      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2205      	movs	r2, #5
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	3301      	adds	r3, #1
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	429a      	cmp	r2, r3
 800362e:	d307      	bcc.n	8003640 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f2      	bne.n	8003624 <HAL_DMA_IRQHandler+0x2cc>
 800363e:	e000      	b.n	8003642 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003640:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
 8003662:	e000      	b.n	8003666 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003664:	bf00      	nop
    }
  }
}
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d108      	bne.n	80036ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036aa:	e007      	b.n	80036bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	3b10      	subs	r3, #16
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <DMA_CalcBaseAndBitshift+0x64>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036e2:	4a13      	ldr	r2, [pc, #76]	; (8003730 <DMA_CalcBaseAndBitshift+0x68>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d909      	bls.n	800370a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	659a      	str	r2, [r3, #88]	; 0x58
 8003708:	e007      	b.n	800371a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	aaaaaaab 	.word	0xaaaaaaab
 8003730:	0800b568 	.word	0x0800b568

08003734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11f      	bne.n	800378e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d856      	bhi.n	8003802 <DMA_CheckFifoParam+0xce>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <DMA_CheckFifoParam+0x28>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800376d 	.word	0x0800376d
 8003760:	0800377f 	.word	0x0800377f
 8003764:	0800376d 	.word	0x0800376d
 8003768:	08003803 	.word	0x08003803
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d046      	beq.n	8003806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377c:	e043      	b.n	8003806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003786:	d140      	bne.n	800380a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e03d      	b.n	800380a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003796:	d121      	bne.n	80037dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d837      	bhi.n	800380e <DMA_CheckFifoParam+0xda>
 800379e:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <DMA_CheckFifoParam+0x70>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bb 	.word	0x080037bb
 80037ac:	080037b5 	.word	0x080037b5
 80037b0:	080037cd 	.word	0x080037cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      break;
 80037b8:	e030      	b.n	800381c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d025      	beq.n	8003812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ca:	e022      	b.n	8003812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d4:	d11f      	bne.n	8003816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037da:	e01c      	b.n	8003816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d903      	bls.n	80037ea <DMA_CheckFifoParam+0xb6>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d003      	beq.n	80037f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037e8:	e018      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      break;
 80037ee:	e015      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00e      	beq.n	800381a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003800:	e00b      	b.n	800381a <DMA_CheckFifoParam+0xe6>
      break;
 8003802:	bf00      	nop
 8003804:	e00a      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e008      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e006      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e004      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
 8003814:	e002      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;   
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
    }
  } 
  
  return status; 
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	; 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e159      	b.n	8003afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	f040 8148 	bne.w	8003af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	2b02      	cmp	r3, #2
 800387c:	d130      	bne.n	80038e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d017      	beq.n	800391c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80a2 	beq.w	8003af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b57      	ldr	r3, [pc, #348]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a56      	ldr	r2, [pc, #344]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
 80039c2:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ce:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_GPIO_Init+0x2ec>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a49      	ldr	r2, [pc, #292]	; (8003b1c <HAL_GPIO_Init+0x2f0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x202>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a48      	ldr	r2, [pc, #288]	; (8003b20 <HAL_GPIO_Init+0x2f4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x1fe>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a47      	ldr	r2, [pc, #284]	; (8003b24 <HAL_GPIO_Init+0x2f8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x1fa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a46      	ldr	r2, [pc, #280]	; (8003b28 <HAL_GPIO_Init+0x2fc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x1f6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a45      	ldr	r2, [pc, #276]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x1f2>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a1e:	2307      	movs	r3, #7
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	4935      	ldr	r1, [pc, #212]	; (8003b18 <HAL_GPIO_Init+0x2ec>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4e:	4b38      	ldr	r3, [pc, #224]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a72:	4a2f      	ldr	r2, [pc, #188]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac6:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003acc:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af0:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f aea2 	bls.w	8003848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40013c00 	.word	0x40013c00

08003b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
 8003b40:	4613      	mov	r3, r2
 8003b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b44:	787b      	ldrb	r3, [r7, #1]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b50:	e003      	b.n	8003b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b52:	887b      	ldrh	r3, [r7, #2]
 8003b54:	041a      	lsls	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	619a      	str	r2, [r3, #24]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e12b      	b.n	8003dd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fe fa1c 	bl	8001fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	; 0x24
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f001 f858 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8003bd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4a81      	ldr	r2, [pc, #516]	; (8003ddc <HAL_I2C_Init+0x274>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d807      	bhi.n	8003bec <HAL_I2C_Init+0x84>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a80      	ldr	r2, [pc, #512]	; (8003de0 <HAL_I2C_Init+0x278>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	bf94      	ite	ls
 8003be4:	2301      	movls	r3, #1
 8003be6:	2300      	movhi	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e006      	b.n	8003bfa <HAL_I2C_Init+0x92>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a7d      	ldr	r2, [pc, #500]	; (8003de4 <HAL_I2C_Init+0x27c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bf94      	ite	ls
 8003bf4:	2301      	movls	r3, #1
 8003bf6:	2300      	movhi	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0e7      	b.n	8003dd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a78      	ldr	r2, [pc, #480]	; (8003de8 <HAL_I2C_Init+0x280>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	0c9b      	lsrs	r3, r3, #18
 8003c0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a6a      	ldr	r2, [pc, #424]	; (8003ddc <HAL_I2C_Init+0x274>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d802      	bhi.n	8003c3c <HAL_I2C_Init+0xd4>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	e009      	b.n	8003c50 <HAL_I2C_Init+0xe8>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	4a69      	ldr	r2, [pc, #420]	; (8003dec <HAL_I2C_Init+0x284>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	099b      	lsrs	r3, r3, #6
 8003c4e:	3301      	adds	r3, #1
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	495c      	ldr	r1, [pc, #368]	; (8003ddc <HAL_I2C_Init+0x274>)
 8003c6c:	428b      	cmp	r3, r1
 8003c6e:	d819      	bhi.n	8003ca4 <HAL_I2C_Init+0x13c>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1e59      	subs	r1, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c7e:	1c59      	adds	r1, r3, #1
 8003c80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c84:	400b      	ands	r3, r1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_I2C_Init+0x138>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1e59      	subs	r1, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9e:	e051      	b.n	8003d44 <HAL_I2C_Init+0x1dc>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	e04f      	b.n	8003d44 <HAL_I2C_Init+0x1dc>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d111      	bne.n	8003cd0 <HAL_I2C_Init+0x168>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1e58      	subs	r0, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	440b      	add	r3, r1
 8003cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e012      	b.n	8003cf6 <HAL_I2C_Init+0x18e>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e58      	subs	r0, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	0099      	lsls	r1, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_Init+0x196>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e022      	b.n	8003d44 <HAL_I2C_Init+0x1dc>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10e      	bne.n	8003d24 <HAL_I2C_Init+0x1bc>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1e58      	subs	r0, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	440b      	add	r3, r1
 8003d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d22:	e00f      	b.n	8003d44 <HAL_I2C_Init+0x1dc>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e58      	subs	r0, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	0099      	lsls	r1, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	6809      	ldr	r1, [r1, #0]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6911      	ldr	r1, [r2, #16]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68d2      	ldr	r2, [r2, #12]
 8003d7e:	4311      	orrs	r1, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	000186a0 	.word	0x000186a0
 8003de0:	001e847f 	.word	0x001e847f
 8003de4:	003d08ff 	.word	0x003d08ff
 8003de8:	431bde83 	.word	0x431bde83
 8003dec:	10624dd3 	.word	0x10624dd3

08003df0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	817b      	strh	r3, [r7, #10]
 8003e02:	460b      	mov	r3, r1
 8003e04:	813b      	strh	r3, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e0a:	f7fe fc5b 	bl	80026c4 <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	f040 80d9 	bne.w	8003fd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	2319      	movs	r3, #25
 8003e24:	2201      	movs	r2, #1
 8003e26:	496d      	ldr	r1, [pc, #436]	; (8003fdc <HAL_I2C_Mem_Write+0x1ec>)
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f971 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
 8003e36:	e0cc      	b.n	8003fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_I2C_Mem_Write+0x56>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e0c5      	b.n	8003fd2 <HAL_I2C_Mem_Write+0x1e2>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d007      	beq.n	8003e6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2221      	movs	r2, #33	; 0x21
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2240      	movs	r2, #64	; 0x40
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a4d      	ldr	r2, [pc, #308]	; (8003fe0 <HAL_I2C_Mem_Write+0x1f0>)
 8003eac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eae:	88f8      	ldrh	r0, [r7, #6]
 8003eb0:	893a      	ldrh	r2, [r7, #8]
 8003eb2:	8979      	ldrh	r1, [r7, #10]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f890 	bl	8003fe4 <I2C_RequestMemoryWrite>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d052      	beq.n	8003f70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e081      	b.n	8003fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f9f2 	bl	80042bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d107      	bne.n	8003ef6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e06b      	b.n	8003fd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	781a      	ldrb	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d11b      	bne.n	8003f70 <HAL_I2C_Mem_Write+0x180>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d017      	beq.n	8003f70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1aa      	bne.n	8003ece <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f9de 	bl	800433e <I2C_WaitOnBTFFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00d      	beq.n	8003fa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d107      	bne.n	8003fa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e016      	b.n	8003fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	00100002 	.word	0x00100002
 8003fe0:	ffff0000 	.word	0xffff0000

08003fe4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	4608      	mov	r0, r1
 8003fee:	4611      	mov	r1, r2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	817b      	strh	r3, [r7, #10]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	813b      	strh	r3, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800400c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	2200      	movs	r2, #0
 8004016:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f878 	bl	8004110 <I2C_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00d      	beq.n	8004042 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004034:	d103      	bne.n	800403e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e05f      	b.n	8004102 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004042:	897b      	ldrh	r3, [r7, #10]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004050:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	6a3a      	ldr	r2, [r7, #32]
 8004056:	492d      	ldr	r1, [pc, #180]	; (800410c <I2C_RequestMemoryWrite+0x128>)
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f8b0 	bl	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e04c      	b.n	8004102 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	6a39      	ldr	r1, [r7, #32]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f91a 	bl	80042bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2b04      	cmp	r3, #4
 8004094:	d107      	bne.n	80040a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e02b      	b.n	8004102 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d105      	bne.n	80040bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040b0:	893b      	ldrh	r3, [r7, #8]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	611a      	str	r2, [r3, #16]
 80040ba:	e021      	b.n	8004100 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040bc:	893b      	ldrh	r3, [r7, #8]
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	6a39      	ldr	r1, [r7, #32]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f8f4 	bl	80042bc <I2C_WaitOnTXEFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d107      	bne.n	80040f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e005      	b.n	8004102 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040f6:	893b      	ldrh	r3, [r7, #8]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	00010002 	.word	0x00010002

08004110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004120:	e025      	b.n	800416e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d021      	beq.n	800416e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412a:	f7fe facb 	bl	80026c4 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d116      	bne.n	800416e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e023      	b.n	80041b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	0c1b      	lsrs	r3, r3, #16
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d10d      	bne.n	8004194 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	43da      	mvns	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4013      	ands	r3, r2
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	e00c      	b.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d0b6      	beq.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041cc:	e051      	b.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041dc:	d123      	bne.n	8004226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f043 0204 	orr.w	r2, r3, #4
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e046      	b.n	80042b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d021      	beq.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fe fa49 	bl	80026c4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d116      	bne.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f043 0220 	orr.w	r2, r3, #32
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e020      	b.n	80042b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10c      	bne.n	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	43da      	mvns	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e00b      	b.n	80042ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	43da      	mvns	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d18d      	bne.n	80041ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c8:	e02d      	b.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f878 	bl	80043c0 <I2C_IsAcknowledgeFailed>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e02d      	b.n	8004336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d021      	beq.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e2:	f7fe f9ef 	bl	80026c4 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d116      	bne.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e007      	b.n	8004336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d1ca      	bne.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800434a:	e02d      	b.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f837 	bl	80043c0 <I2C_IsAcknowledgeFailed>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e02d      	b.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d021      	beq.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fe f9ae 	bl	80026c4 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d116      	bne.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f043 0220 	orr.w	r2, r3, #32
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e007      	b.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d1ca      	bne.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d6:	d11b      	bne.n	8004410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f043 0204 	orr.w	r2, r3, #4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
	...

08004420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e267      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d075      	beq.n	800452a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800443e:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b04      	cmp	r3, #4
 8004448:	d00c      	beq.n	8004464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800444a:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004452:	2b08      	cmp	r3, #8
 8004454:	d112      	bne.n	800447c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004456:	4b82      	ldr	r3, [pc, #520]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004462:	d10b      	bne.n	800447c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	4b7e      	ldr	r3, [pc, #504]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d05b      	beq.n	8004528 <HAL_RCC_OscConfig+0x108>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d157      	bne.n	8004528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e242      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d106      	bne.n	8004494 <HAL_RCC_OscConfig+0x74>
 8004486:	4b76      	ldr	r3, [pc, #472]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a75      	ldr	r2, [pc, #468]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e01d      	b.n	80044d0 <HAL_RCC_OscConfig+0xb0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x98>
 800449e:	4b70      	ldr	r3, [pc, #448]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a6f      	ldr	r2, [pc, #444]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80044a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b6d      	ldr	r3, [pc, #436]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a6c      	ldr	r2, [pc, #432]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e00b      	b.n	80044d0 <HAL_RCC_OscConfig+0xb0>
 80044b8:	4b69      	ldr	r3, [pc, #420]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a68      	ldr	r2, [pc, #416]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80044be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	4b66      	ldr	r3, [pc, #408]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a65      	ldr	r2, [pc, #404]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80044ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d013      	beq.n	8004500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fe f8f4 	bl	80026c4 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e0:	f7fe f8f0 	bl	80026c4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e207      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0xc0>
 80044fe:	e014      	b.n	800452a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fe f8e0 	bl	80026c4 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004508:	f7fe f8dc 	bl	80026c4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e1f3      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451a:	4b51      	ldr	r3, [pc, #324]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0xe8>
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d063      	beq.n	80045fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004542:	4b47      	ldr	r3, [pc, #284]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800454a:	2b08      	cmp	r3, #8
 800454c:	d11c      	bne.n	8004588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b44      	ldr	r3, [pc, #272]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d116      	bne.n	8004588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455a:	4b41      	ldr	r3, [pc, #260]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_RCC_OscConfig+0x152>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d001      	beq.n	8004572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e1c7      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004572:	4b3b      	ldr	r3, [pc, #236]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4937      	ldr	r1, [pc, #220]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004586:	e03a      	b.n	80045fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d020      	beq.n	80045d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004590:	4b34      	ldr	r3, [pc, #208]	; (8004664 <HAL_RCC_OscConfig+0x244>)
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004596:	f7fe f895 	bl	80026c4 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459e:	f7fe f891 	bl	80026c4 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e1a8      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b0:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045bc:	4b28      	ldr	r3, [pc, #160]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	4925      	ldr	r1, [pc, #148]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	600b      	str	r3, [r1, #0]
 80045d0:	e015      	b.n	80045fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_RCC_OscConfig+0x244>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fe f874 	bl	80026c4 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045e0:	f7fe f870 	bl	80026c4 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e187      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f2:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d036      	beq.n	8004678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d016      	beq.n	8004640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004612:	4b15      	ldr	r3, [pc, #84]	; (8004668 <HAL_RCC_OscConfig+0x248>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fe f854 	bl	80026c4 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004620:	f7fe f850 	bl	80026c4 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e167      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_OscConfig+0x240>)
 8004634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x200>
 800463e:	e01b      	b.n	8004678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004640:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_RCC_OscConfig+0x248>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004646:	f7fe f83d 	bl	80026c4 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800464c:	e00e      	b.n	800466c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800464e:	f7fe f839 	bl	80026c4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d907      	bls.n	800466c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e150      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
 8004660:	40023800 	.word	0x40023800
 8004664:	42470000 	.word	0x42470000
 8004668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466c:	4b88      	ldr	r3, [pc, #544]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 800466e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1ea      	bne.n	800464e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8097 	beq.w	80047b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468a:	4b81      	ldr	r3, [pc, #516]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10f      	bne.n	80046b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	4b7d      	ldr	r3, [pc, #500]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	4a7c      	ldr	r2, [pc, #496]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 80046a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a4:	6413      	str	r3, [r2, #64]	; 0x40
 80046a6:	4b7a      	ldr	r3, [pc, #488]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b6:	4b77      	ldr	r3, [pc, #476]	; (8004894 <HAL_RCC_OscConfig+0x474>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d118      	bne.n	80046f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c2:	4b74      	ldr	r3, [pc, #464]	; (8004894 <HAL_RCC_OscConfig+0x474>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a73      	ldr	r2, [pc, #460]	; (8004894 <HAL_RCC_OscConfig+0x474>)
 80046c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ce:	f7fd fff9 	bl	80026c4 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d6:	f7fd fff5 	bl	80026c4 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e10c      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e8:	4b6a      	ldr	r3, [pc, #424]	; (8004894 <HAL_RCC_OscConfig+0x474>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d106      	bne.n	800470a <HAL_RCC_OscConfig+0x2ea>
 80046fc:	4b64      	ldr	r3, [pc, #400]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a63      	ldr	r2, [pc, #396]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
 8004708:	e01c      	b.n	8004744 <HAL_RCC_OscConfig+0x324>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b05      	cmp	r3, #5
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0x30c>
 8004712:	4b5f      	ldr	r3, [pc, #380]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	4a5e      	ldr	r2, [pc, #376]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 8004718:	f043 0304 	orr.w	r3, r3, #4
 800471c:	6713      	str	r3, [r2, #112]	; 0x70
 800471e:	4b5c      	ldr	r3, [pc, #368]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	4a5b      	ldr	r2, [pc, #364]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	6713      	str	r3, [r2, #112]	; 0x70
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0x324>
 800472c:	4b58      	ldr	r3, [pc, #352]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	4a57      	ldr	r2, [pc, #348]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	6713      	str	r3, [r2, #112]	; 0x70
 8004738:	4b55      	ldr	r3, [pc, #340]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	4a54      	ldr	r2, [pc, #336]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 800473e:	f023 0304 	bic.w	r3, r3, #4
 8004742:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d015      	beq.n	8004778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fd ffba 	bl	80026c4 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004752:	e00a      	b.n	800476a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004754:	f7fd ffb6 	bl	80026c4 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0cb      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476a:	4b49      	ldr	r3, [pc, #292]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0ee      	beq.n	8004754 <HAL_RCC_OscConfig+0x334>
 8004776:	e014      	b.n	80047a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004778:	f7fd ffa4 	bl	80026c4 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477e:	e00a      	b.n	8004796 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004780:	f7fd ffa0 	bl	80026c4 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e0b5      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004796:	4b3e      	ldr	r3, [pc, #248]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1ee      	bne.n	8004780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d105      	bne.n	80047b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a8:	4b39      	ldr	r3, [pc, #228]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	4a38      	ldr	r2, [pc, #224]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 80047ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80a1 	beq.w	8004900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047be:	4b34      	ldr	r3, [pc, #208]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d05c      	beq.n	8004884 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d141      	bne.n	8004856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d2:	4b31      	ldr	r3, [pc, #196]	; (8004898 <HAL_RCC_OscConfig+0x478>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fd ff74 	bl	80026c4 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fd ff70 	bl	80026c4 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e087      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	4b27      	ldr	r3, [pc, #156]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69da      	ldr	r2, [r3, #28]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	019b      	lsls	r3, r3, #6
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	085b      	lsrs	r3, r3, #1
 8004816:	3b01      	subs	r3, #1
 8004818:	041b      	lsls	r3, r3, #16
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	061b      	lsls	r3, r3, #24
 8004822:	491b      	ldr	r1, [pc, #108]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004828:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <HAL_RCC_OscConfig+0x478>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482e:	f7fd ff49 	bl	80026c4 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004836:	f7fd ff45 	bl	80026c4 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e05c      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x416>
 8004854:	e054      	b.n	8004900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <HAL_RCC_OscConfig+0x478>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fd ff32 	bl	80026c4 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004864:	f7fd ff2e 	bl	80026c4 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e045      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_RCC_OscConfig+0x470>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x444>
 8004882:	e03d      	b.n	8004900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d107      	bne.n	800489c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e038      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
 8004890:	40023800 	.word	0x40023800
 8004894:	40007000 	.word	0x40007000
 8004898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800489c:	4b1b      	ldr	r3, [pc, #108]	; (800490c <HAL_RCC_OscConfig+0x4ec>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d028      	beq.n	80048fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d121      	bne.n	80048fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d11a      	bne.n	80048fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048cc:	4013      	ands	r3, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d111      	bne.n	80048fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	3b01      	subs	r3, #1
 80048e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800

08004910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0cc      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004924:	4b68      	ldr	r3, [pc, #416]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d90c      	bls.n	800494c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b65      	ldr	r3, [pc, #404]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0b8      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d020      	beq.n	800499a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004964:	4b59      	ldr	r3, [pc, #356]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a58      	ldr	r2, [pc, #352]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800496e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800497c:	4b53      	ldr	r3, [pc, #332]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4a52      	ldr	r2, [pc, #328]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004988:	4b50      	ldr	r3, [pc, #320]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	494d      	ldr	r1, [pc, #308]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d044      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d107      	bne.n	80049be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ae:	4b47      	ldr	r3, [pc, #284]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d119      	bne.n	80049ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e07f      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d003      	beq.n	80049ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d107      	bne.n	80049de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ce:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e06f      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049de:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e067      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ee:	4b37      	ldr	r3, [pc, #220]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f023 0203 	bic.w	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4934      	ldr	r1, [pc, #208]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a00:	f7fd fe60 	bl	80026c4 <HAL_GetTick>
 8004a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a08:	f7fd fe5c 	bl	80026c4 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e04f      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1e:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 020c 	and.w	r2, r3, #12
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d1eb      	bne.n	8004a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a30:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d20c      	bcs.n	8004a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3e:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a46:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e032      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4916      	ldr	r1, [pc, #88]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a82:	4b12      	ldr	r3, [pc, #72]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	490e      	ldr	r1, [pc, #56]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a96:	f000 f821 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	490a      	ldr	r1, [pc, #40]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	5ccb      	ldrb	r3, [r1, r3]
 8004aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004aae:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ab2:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fd fdc0 	bl	800263c <HAL_InitTick>

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40023c00 	.word	0x40023c00
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	0800b550 	.word	0x0800b550
 8004ad4:	20000004 	.word	0x20000004
 8004ad8:	20000008 	.word	0x20000008

08004adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae0:	b090      	sub	sp, #64	; 0x40
 8004ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae8:	2300      	movs	r3, #0
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aec:	2300      	movs	r3, #0
 8004aee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af4:	4b59      	ldr	r3, [pc, #356]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d00d      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x40>
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	f200 80a1 	bhi.w	8004c48 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0x34>
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b0e:	e09b      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b10:	4b53      	ldr	r3, [pc, #332]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004b14:	e09b      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b16:	4b53      	ldr	r3, [pc, #332]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b1a:	e098      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b1c:	4b4f      	ldr	r3, [pc, #316]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b26:	4b4d      	ldr	r3, [pc, #308]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d028      	beq.n	8004b84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b32:	4b4a      	ldr	r3, [pc, #296]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	099b      	lsrs	r3, r3, #6
 8004b38:	2200      	movs	r2, #0
 8004b3a:	623b      	str	r3, [r7, #32]
 8004b3c:	627a      	str	r2, [r7, #36]	; 0x24
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b44:	2100      	movs	r1, #0
 8004b46:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b48:	fb03 f201 	mul.w	r2, r3, r1
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	fb00 f303 	mul.w	r3, r0, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	4a43      	ldr	r2, [pc, #268]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b56:	fba0 1202 	umull	r1, r2, r0, r2
 8004b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b5c:	460a      	mov	r2, r1
 8004b5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b62:	4413      	add	r3, r2
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b68:	2200      	movs	r2, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	61fa      	str	r2, [r7, #28]
 8004b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b76:	f7fc f88f 	bl	8000c98 <__aeabi_uldivmod>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4613      	mov	r3, r2
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b82:	e053      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b84:	4b35      	ldr	r3, [pc, #212]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	099b      	lsrs	r3, r3, #6
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	617a      	str	r2, [r7, #20]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b96:	f04f 0b00 	mov.w	fp, #0
 8004b9a:	4652      	mov	r2, sl
 8004b9c:	465b      	mov	r3, fp
 8004b9e:	f04f 0000 	mov.w	r0, #0
 8004ba2:	f04f 0100 	mov.w	r1, #0
 8004ba6:	0159      	lsls	r1, r3, #5
 8004ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bac:	0150      	lsls	r0, r2, #5
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	ebb2 080a 	subs.w	r8, r2, sl
 8004bb6:	eb63 090b 	sbc.w	r9, r3, fp
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bce:	ebb2 0408 	subs.w	r4, r2, r8
 8004bd2:	eb63 0509 	sbc.w	r5, r3, r9
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	00eb      	lsls	r3, r5, #3
 8004be0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004be4:	00e2      	lsls	r2, r4, #3
 8004be6:	4614      	mov	r4, r2
 8004be8:	461d      	mov	r5, r3
 8004bea:	eb14 030a 	adds.w	r3, r4, sl
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	eb45 030b 	adc.w	r3, r5, fp
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c02:	4629      	mov	r1, r5
 8004c04:	028b      	lsls	r3, r1, #10
 8004c06:	4621      	mov	r1, r4
 8004c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	028a      	lsls	r2, r1, #10
 8004c10:	4610      	mov	r0, r2
 8004c12:	4619      	mov	r1, r3
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	2200      	movs	r2, #0
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	60fa      	str	r2, [r7, #12]
 8004c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c20:	f7fc f83a 	bl	8000c98 <__aeabi_uldivmod>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4613      	mov	r3, r2
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	3301      	adds	r3, #1
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c46:	e002      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3740      	adds	r7, #64	; 0x40
 8004c54:	46bd      	mov	sp, r7
 8004c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	00f42400 	.word	0x00f42400
 8004c64:	017d7840 	.word	0x017d7840

08004c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000004 	.word	0x20000004

08004c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c84:	f7ff fff0 	bl	8004c68 <HAL_RCC_GetHCLKFreq>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	0a9b      	lsrs	r3, r3, #10
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	4903      	ldr	r1, [pc, #12]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c96:	5ccb      	ldrb	r3, [r1, r3]
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	0800b560 	.word	0x0800b560

08004ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cac:	f7ff ffdc 	bl	8004c68 <HAL_RCC_GetHCLKFreq>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	0b5b      	lsrs	r3, r3, #13
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	4903      	ldr	r1, [pc, #12]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cbe:	5ccb      	ldrb	r3, [r1, r3]
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	0800b560 	.word	0x0800b560

08004cd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e041      	b.n	8004d66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fd fa4c 	bl	8002194 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f000 f8f0 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e0ae      	b.n	8004eec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b0c      	cmp	r3, #12
 8004d9a:	f200 809f 	bhi.w	8004edc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d9e:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004edd 	.word	0x08004edd
 8004dac:	08004edd 	.word	0x08004edd
 8004db0:	08004edd 	.word	0x08004edd
 8004db4:	08004e19 	.word	0x08004e19
 8004db8:	08004edd 	.word	0x08004edd
 8004dbc:	08004edd 	.word	0x08004edd
 8004dc0:	08004edd 	.word	0x08004edd
 8004dc4:	08004e5b 	.word	0x08004e5b
 8004dc8:	08004edd 	.word	0x08004edd
 8004dcc:	08004edd 	.word	0x08004edd
 8004dd0:	08004edd 	.word	0x08004edd
 8004dd4:	08004e9b 	.word	0x08004e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f908 	bl	8004ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0208 	orr.w	r2, r2, #8
 8004df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0204 	bic.w	r2, r2, #4
 8004e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6999      	ldr	r1, [r3, #24]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	619a      	str	r2, [r3, #24]
      break;
 8004e16:	e064      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f94e 	bl	80050c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	021a      	lsls	r2, r3, #8
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	619a      	str	r2, [r3, #24]
      break;
 8004e58:	e043      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 f999 	bl	8005198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0208 	orr.w	r2, r2, #8
 8004e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0204 	bic.w	r2, r2, #4
 8004e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69d9      	ldr	r1, [r3, #28]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	61da      	str	r2, [r3, #28]
      break;
 8004e98:	e023      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f9e3 	bl	800526c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69d9      	ldr	r1, [r3, #28]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	021a      	lsls	r2, r3, #8
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	61da      	str	r2, [r3, #28]
      break;
 8004eda:	e002      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a34      	ldr	r2, [pc, #208]	; (8004fd8 <TIM_Base_SetConfig+0xe4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00f      	beq.n	8004f2c <TIM_Base_SetConfig+0x38>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f12:	d00b      	beq.n	8004f2c <TIM_Base_SetConfig+0x38>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a31      	ldr	r2, [pc, #196]	; (8004fdc <TIM_Base_SetConfig+0xe8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d007      	beq.n	8004f2c <TIM_Base_SetConfig+0x38>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a30      	ldr	r2, [pc, #192]	; (8004fe0 <TIM_Base_SetConfig+0xec>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_Base_SetConfig+0x38>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a2f      	ldr	r2, [pc, #188]	; (8004fe4 <TIM_Base_SetConfig+0xf0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d108      	bne.n	8004f3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a25      	ldr	r2, [pc, #148]	; (8004fd8 <TIM_Base_SetConfig+0xe4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01b      	beq.n	8004f7e <TIM_Base_SetConfig+0x8a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4c:	d017      	beq.n	8004f7e <TIM_Base_SetConfig+0x8a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a22      	ldr	r2, [pc, #136]	; (8004fdc <TIM_Base_SetConfig+0xe8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d013      	beq.n	8004f7e <TIM_Base_SetConfig+0x8a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <TIM_Base_SetConfig+0xec>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00f      	beq.n	8004f7e <TIM_Base_SetConfig+0x8a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <TIM_Base_SetConfig+0xf0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00b      	beq.n	8004f7e <TIM_Base_SetConfig+0x8a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <TIM_Base_SetConfig+0xf4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d007      	beq.n	8004f7e <TIM_Base_SetConfig+0x8a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1e      	ldr	r2, [pc, #120]	; (8004fec <TIM_Base_SetConfig+0xf8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_Base_SetConfig+0x8a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <TIM_Base_SetConfig+0xfc>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d108      	bne.n	8004f90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a08      	ldr	r2, [pc, #32]	; (8004fd8 <TIM_Base_SetConfig+0xe4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d103      	bne.n	8004fc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	615a      	str	r2, [r3, #20]
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40014000 	.word	0x40014000
 8004fec:	40014400 	.word	0x40014400
 8004ff0:	40014800 	.word	0x40014800

08004ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 0302 	bic.w	r3, r3, #2
 800503c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <TIM_OC1_SetConfig+0xc8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d10c      	bne.n	800506a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f023 0308 	bic.w	r3, r3, #8
 8005056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 0304 	bic.w	r3, r3, #4
 8005068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <TIM_OC1_SetConfig+0xc8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d111      	bne.n	8005096 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	621a      	str	r2, [r3, #32]
}
 80050b0:	bf00      	nop
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40010000 	.word	0x40010000

080050c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f023 0210 	bic.w	r2, r3, #16
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 0320 	bic.w	r3, r3, #32
 800510a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <TIM_OC2_SetConfig+0xd4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10d      	bne.n	800513c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a15      	ldr	r2, [pc, #84]	; (8005194 <TIM_OC2_SetConfig+0xd4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d113      	bne.n	800516c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800514a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40010000 	.word	0x40010000

08005198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <TIM_OC3_SetConfig+0xd0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10d      	bne.n	8005212 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a14      	ldr	r2, [pc, #80]	; (8005268 <TIM_OC3_SetConfig+0xd0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d113      	bne.n	8005242 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	621a      	str	r2, [r3, #32]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40010000 	.word	0x40010000

0800526c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	031b      	lsls	r3, r3, #12
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a10      	ldr	r2, [pc, #64]	; (8005308 <TIM_OC4_SetConfig+0x9c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d109      	bne.n	80052e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	019b      	lsls	r3, r3, #6
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40010000 	.word	0x40010000

0800530c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005320:	2302      	movs	r3, #2
 8005322:	e050      	b.n	80053c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d018      	beq.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005370:	d013      	beq.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00e      	beq.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a16      	ldr	r2, [pc, #88]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d10c      	bne.n	80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40014000 	.word	0x40014000

080053e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e03f      	b.n	800547a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc ff74 	bl	80022fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2224      	movs	r2, #36	; 0x24
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800542a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f829 	bl	8005484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695a      	ldr	r2, [r3, #20]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005488:	b0c0      	sub	sp, #256	; 0x100
 800548a:	af00      	add	r7, sp, #0
 800548c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	68d9      	ldr	r1, [r3, #12]
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	ea40 0301 	orr.w	r3, r0, r1
 80054ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054dc:	f021 010c 	bic.w	r1, r1, #12
 80054e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054ea:	430b      	orrs	r3, r1
 80054ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fe:	6999      	ldr	r1, [r3, #24]
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	ea40 0301 	orr.w	r3, r0, r1
 800550a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b8f      	ldr	r3, [pc, #572]	; (8005750 <UART_SetConfig+0x2cc>)
 8005514:	429a      	cmp	r2, r3
 8005516:	d005      	beq.n	8005524 <UART_SetConfig+0xa0>
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b8d      	ldr	r3, [pc, #564]	; (8005754 <UART_SetConfig+0x2d0>)
 8005520:	429a      	cmp	r2, r3
 8005522:	d104      	bne.n	800552e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005524:	f7ff fbc0 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
 8005528:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800552c:	e003      	b.n	8005536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800552e:	f7ff fba7 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8005532:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005540:	f040 810c 	bne.w	800575c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005548:	2200      	movs	r2, #0
 800554a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800554e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005556:	4622      	mov	r2, r4
 8005558:	462b      	mov	r3, r5
 800555a:	1891      	adds	r1, r2, r2
 800555c:	65b9      	str	r1, [r7, #88]	; 0x58
 800555e:	415b      	adcs	r3, r3
 8005560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005566:	4621      	mov	r1, r4
 8005568:	eb12 0801 	adds.w	r8, r2, r1
 800556c:	4629      	mov	r1, r5
 800556e:	eb43 0901 	adc.w	r9, r3, r1
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800557e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005586:	4690      	mov	r8, r2
 8005588:	4699      	mov	r9, r3
 800558a:	4623      	mov	r3, r4
 800558c:	eb18 0303 	adds.w	r3, r8, r3
 8005590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005594:	462b      	mov	r3, r5
 8005596:	eb49 0303 	adc.w	r3, r9, r3
 800559a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800559e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055b2:	460b      	mov	r3, r1
 80055b4:	18db      	adds	r3, r3, r3
 80055b6:	653b      	str	r3, [r7, #80]	; 0x50
 80055b8:	4613      	mov	r3, r2
 80055ba:	eb42 0303 	adc.w	r3, r2, r3
 80055be:	657b      	str	r3, [r7, #84]	; 0x54
 80055c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055c8:	f7fb fb66 	bl	8000c98 <__aeabi_uldivmod>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4b61      	ldr	r3, [pc, #388]	; (8005758 <UART_SetConfig+0x2d4>)
 80055d2:	fba3 2302 	umull	r2, r3, r3, r2
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	011c      	lsls	r4, r3, #4
 80055da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055ec:	4642      	mov	r2, r8
 80055ee:	464b      	mov	r3, r9
 80055f0:	1891      	adds	r1, r2, r2
 80055f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80055f4:	415b      	adcs	r3, r3
 80055f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055fc:	4641      	mov	r1, r8
 80055fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005602:	4649      	mov	r1, r9
 8005604:	eb43 0b01 	adc.w	fp, r3, r1
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800561c:	4692      	mov	sl, r2
 800561e:	469b      	mov	fp, r3
 8005620:	4643      	mov	r3, r8
 8005622:	eb1a 0303 	adds.w	r3, sl, r3
 8005626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800562a:	464b      	mov	r3, r9
 800562c:	eb4b 0303 	adc.w	r3, fp, r3
 8005630:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005640:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005648:	460b      	mov	r3, r1
 800564a:	18db      	adds	r3, r3, r3
 800564c:	643b      	str	r3, [r7, #64]	; 0x40
 800564e:	4613      	mov	r3, r2
 8005650:	eb42 0303 	adc.w	r3, r2, r3
 8005654:	647b      	str	r3, [r7, #68]	; 0x44
 8005656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800565a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800565e:	f7fb fb1b 	bl	8000c98 <__aeabi_uldivmod>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4611      	mov	r1, r2
 8005668:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <UART_SetConfig+0x2d4>)
 800566a:	fba3 2301 	umull	r2, r3, r3, r1
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	2264      	movs	r2, #100	; 0x64
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	1acb      	subs	r3, r1, r3
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800567e:	4b36      	ldr	r3, [pc, #216]	; (8005758 <UART_SetConfig+0x2d4>)
 8005680:	fba3 2302 	umull	r2, r3, r3, r2
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800568c:	441c      	add	r4, r3
 800568e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005692:	2200      	movs	r2, #0
 8005694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005698:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800569c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056a0:	4642      	mov	r2, r8
 80056a2:	464b      	mov	r3, r9
 80056a4:	1891      	adds	r1, r2, r2
 80056a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80056a8:	415b      	adcs	r3, r3
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056b0:	4641      	mov	r1, r8
 80056b2:	1851      	adds	r1, r2, r1
 80056b4:	6339      	str	r1, [r7, #48]	; 0x30
 80056b6:	4649      	mov	r1, r9
 80056b8:	414b      	adcs	r3, r1
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056c8:	4659      	mov	r1, fp
 80056ca:	00cb      	lsls	r3, r1, #3
 80056cc:	4651      	mov	r1, sl
 80056ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d2:	4651      	mov	r1, sl
 80056d4:	00ca      	lsls	r2, r1, #3
 80056d6:	4610      	mov	r0, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	4603      	mov	r3, r0
 80056dc:	4642      	mov	r2, r8
 80056de:	189b      	adds	r3, r3, r2
 80056e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056e4:	464b      	mov	r3, r9
 80056e6:	460a      	mov	r2, r1
 80056e8:	eb42 0303 	adc.w	r3, r2, r3
 80056ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005704:	460b      	mov	r3, r1
 8005706:	18db      	adds	r3, r3, r3
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28
 800570a:	4613      	mov	r3, r2
 800570c:	eb42 0303 	adc.w	r3, r2, r3
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800571a:	f7fb fabd 	bl	8000c98 <__aeabi_uldivmod>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <UART_SetConfig+0x2d4>)
 8005724:	fba3 1302 	umull	r1, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	3332      	adds	r3, #50	; 0x32
 8005736:	4a08      	ldr	r2, [pc, #32]	; (8005758 <UART_SetConfig+0x2d4>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f003 0207 	and.w	r2, r3, #7
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4422      	add	r2, r4
 800574a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800574c:	e105      	b.n	800595a <UART_SetConfig+0x4d6>
 800574e:	bf00      	nop
 8005750:	40011000 	.word	0x40011000
 8005754:	40011400 	.word	0x40011400
 8005758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800575c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005760:	2200      	movs	r2, #0
 8005762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005766:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800576a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800576e:	4642      	mov	r2, r8
 8005770:	464b      	mov	r3, r9
 8005772:	1891      	adds	r1, r2, r2
 8005774:	6239      	str	r1, [r7, #32]
 8005776:	415b      	adcs	r3, r3
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
 800577a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800577e:	4641      	mov	r1, r8
 8005780:	1854      	adds	r4, r2, r1
 8005782:	4649      	mov	r1, r9
 8005784:	eb43 0501 	adc.w	r5, r3, r1
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	00eb      	lsls	r3, r5, #3
 8005792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005796:	00e2      	lsls	r2, r4, #3
 8005798:	4614      	mov	r4, r2
 800579a:	461d      	mov	r5, r3
 800579c:	4643      	mov	r3, r8
 800579e:	18e3      	adds	r3, r4, r3
 80057a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057a4:	464b      	mov	r3, r9
 80057a6:	eb45 0303 	adc.w	r3, r5, r3
 80057aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057ca:	4629      	mov	r1, r5
 80057cc:	008b      	lsls	r3, r1, #2
 80057ce:	4621      	mov	r1, r4
 80057d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057d4:	4621      	mov	r1, r4
 80057d6:	008a      	lsls	r2, r1, #2
 80057d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057dc:	f7fb fa5c 	bl	8000c98 <__aeabi_uldivmod>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4b60      	ldr	r3, [pc, #384]	; (8005968 <UART_SetConfig+0x4e4>)
 80057e6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	011c      	lsls	r4, r3, #4
 80057ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005800:	4642      	mov	r2, r8
 8005802:	464b      	mov	r3, r9
 8005804:	1891      	adds	r1, r2, r2
 8005806:	61b9      	str	r1, [r7, #24]
 8005808:	415b      	adcs	r3, r3
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005810:	4641      	mov	r1, r8
 8005812:	1851      	adds	r1, r2, r1
 8005814:	6139      	str	r1, [r7, #16]
 8005816:	4649      	mov	r1, r9
 8005818:	414b      	adcs	r3, r1
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005828:	4659      	mov	r1, fp
 800582a:	00cb      	lsls	r3, r1, #3
 800582c:	4651      	mov	r1, sl
 800582e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005832:	4651      	mov	r1, sl
 8005834:	00ca      	lsls	r2, r1, #3
 8005836:	4610      	mov	r0, r2
 8005838:	4619      	mov	r1, r3
 800583a:	4603      	mov	r3, r0
 800583c:	4642      	mov	r2, r8
 800583e:	189b      	adds	r3, r3, r2
 8005840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005844:	464b      	mov	r3, r9
 8005846:	460a      	mov	r2, r1
 8005848:	eb42 0303 	adc.w	r3, r2, r3
 800584c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	67bb      	str	r3, [r7, #120]	; 0x78
 800585a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005868:	4649      	mov	r1, r9
 800586a:	008b      	lsls	r3, r1, #2
 800586c:	4641      	mov	r1, r8
 800586e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005872:	4641      	mov	r1, r8
 8005874:	008a      	lsls	r2, r1, #2
 8005876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800587a:	f7fb fa0d 	bl	8000c98 <__aeabi_uldivmod>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4b39      	ldr	r3, [pc, #228]	; (8005968 <UART_SetConfig+0x4e4>)
 8005884:	fba3 1302 	umull	r1, r3, r3, r2
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	2164      	movs	r1, #100	; 0x64
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	3332      	adds	r3, #50	; 0x32
 8005896:	4a34      	ldr	r2, [pc, #208]	; (8005968 <UART_SetConfig+0x4e4>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058a2:	441c      	add	r4, r3
 80058a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a8:	2200      	movs	r2, #0
 80058aa:	673b      	str	r3, [r7, #112]	; 0x70
 80058ac:	677a      	str	r2, [r7, #116]	; 0x74
 80058ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058b2:	4642      	mov	r2, r8
 80058b4:	464b      	mov	r3, r9
 80058b6:	1891      	adds	r1, r2, r2
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	415b      	adcs	r3, r3
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058c2:	4641      	mov	r1, r8
 80058c4:	1851      	adds	r1, r2, r1
 80058c6:	6039      	str	r1, [r7, #0]
 80058c8:	4649      	mov	r1, r9
 80058ca:	414b      	adcs	r3, r1
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058da:	4659      	mov	r1, fp
 80058dc:	00cb      	lsls	r3, r1, #3
 80058de:	4651      	mov	r1, sl
 80058e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058e4:	4651      	mov	r1, sl
 80058e6:	00ca      	lsls	r2, r1, #3
 80058e8:	4610      	mov	r0, r2
 80058ea:	4619      	mov	r1, r3
 80058ec:	4603      	mov	r3, r0
 80058ee:	4642      	mov	r2, r8
 80058f0:	189b      	adds	r3, r3, r2
 80058f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f4:	464b      	mov	r3, r9
 80058f6:	460a      	mov	r2, r1
 80058f8:	eb42 0303 	adc.w	r3, r2, r3
 80058fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	663b      	str	r3, [r7, #96]	; 0x60
 8005908:	667a      	str	r2, [r7, #100]	; 0x64
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005916:	4649      	mov	r1, r9
 8005918:	008b      	lsls	r3, r1, #2
 800591a:	4641      	mov	r1, r8
 800591c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005920:	4641      	mov	r1, r8
 8005922:	008a      	lsls	r2, r1, #2
 8005924:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005928:	f7fb f9b6 	bl	8000c98 <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4b0d      	ldr	r3, [pc, #52]	; (8005968 <UART_SetConfig+0x4e4>)
 8005932:	fba3 1302 	umull	r1, r3, r3, r2
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	2164      	movs	r1, #100	; 0x64
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	3332      	adds	r3, #50	; 0x32
 8005944:	4a08      	ldr	r2, [pc, #32]	; (8005968 <UART_SetConfig+0x4e4>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	f003 020f 	and.w	r2, r3, #15
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4422      	add	r2, r4
 8005958:	609a      	str	r2, [r3, #8]
}
 800595a:	bf00      	nop
 800595c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005960:	46bd      	mov	sp, r7
 8005962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005966:	bf00      	nop
 8005968:	51eb851f 	.word	0x51eb851f

0800596c <__errno>:
 800596c:	4b01      	ldr	r3, [pc, #4]	; (8005974 <__errno+0x8>)
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000010 	.word	0x20000010

08005978 <__libc_init_array>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	4d0d      	ldr	r5, [pc, #52]	; (80059b0 <__libc_init_array+0x38>)
 800597c:	4c0d      	ldr	r4, [pc, #52]	; (80059b4 <__libc_init_array+0x3c>)
 800597e:	1b64      	subs	r4, r4, r5
 8005980:	10a4      	asrs	r4, r4, #2
 8005982:	2600      	movs	r6, #0
 8005984:	42a6      	cmp	r6, r4
 8005986:	d109      	bne.n	800599c <__libc_init_array+0x24>
 8005988:	4d0b      	ldr	r5, [pc, #44]	; (80059b8 <__libc_init_array+0x40>)
 800598a:	4c0c      	ldr	r4, [pc, #48]	; (80059bc <__libc_init_array+0x44>)
 800598c:	f004 fd0e 	bl	800a3ac <_init>
 8005990:	1b64      	subs	r4, r4, r5
 8005992:	10a4      	asrs	r4, r4, #2
 8005994:	2600      	movs	r6, #0
 8005996:	42a6      	cmp	r6, r4
 8005998:	d105      	bne.n	80059a6 <__libc_init_array+0x2e>
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a0:	4798      	blx	r3
 80059a2:	3601      	adds	r6, #1
 80059a4:	e7ee      	b.n	8005984 <__libc_init_array+0xc>
 80059a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059aa:	4798      	blx	r3
 80059ac:	3601      	adds	r6, #1
 80059ae:	e7f2      	b.n	8005996 <__libc_init_array+0x1e>
 80059b0:	0800ba1c 	.word	0x0800ba1c
 80059b4:	0800ba1c 	.word	0x0800ba1c
 80059b8:	0800ba1c 	.word	0x0800ba1c
 80059bc:	0800ba20 	.word	0x0800ba20

080059c0 <memset>:
 80059c0:	4402      	add	r2, r0
 80059c2:	4603      	mov	r3, r0
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d100      	bne.n	80059ca <memset+0xa>
 80059c8:	4770      	bx	lr
 80059ca:	f803 1b01 	strb.w	r1, [r3], #1
 80059ce:	e7f9      	b.n	80059c4 <memset+0x4>

080059d0 <__cvt>:
 80059d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	ec55 4b10 	vmov	r4, r5, d0
 80059d8:	2d00      	cmp	r5, #0
 80059da:	460e      	mov	r6, r1
 80059dc:	4619      	mov	r1, r3
 80059de:	462b      	mov	r3, r5
 80059e0:	bfbb      	ittet	lt
 80059e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059e6:	461d      	movlt	r5, r3
 80059e8:	2300      	movge	r3, #0
 80059ea:	232d      	movlt	r3, #45	; 0x2d
 80059ec:	700b      	strb	r3, [r1, #0]
 80059ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059f4:	4691      	mov	r9, r2
 80059f6:	f023 0820 	bic.w	r8, r3, #32
 80059fa:	bfbc      	itt	lt
 80059fc:	4622      	movlt	r2, r4
 80059fe:	4614      	movlt	r4, r2
 8005a00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a04:	d005      	beq.n	8005a12 <__cvt+0x42>
 8005a06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a0a:	d100      	bne.n	8005a0e <__cvt+0x3e>
 8005a0c:	3601      	adds	r6, #1
 8005a0e:	2102      	movs	r1, #2
 8005a10:	e000      	b.n	8005a14 <__cvt+0x44>
 8005a12:	2103      	movs	r1, #3
 8005a14:	ab03      	add	r3, sp, #12
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	ab02      	add	r3, sp, #8
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	ec45 4b10 	vmov	d0, r4, r5
 8005a20:	4653      	mov	r3, sl
 8005a22:	4632      	mov	r2, r6
 8005a24:	f001 fde8 	bl	80075f8 <_dtoa_r>
 8005a28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	d102      	bne.n	8005a36 <__cvt+0x66>
 8005a30:	f019 0f01 	tst.w	r9, #1
 8005a34:	d022      	beq.n	8005a7c <__cvt+0xac>
 8005a36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a3a:	eb07 0906 	add.w	r9, r7, r6
 8005a3e:	d110      	bne.n	8005a62 <__cvt+0x92>
 8005a40:	783b      	ldrb	r3, [r7, #0]
 8005a42:	2b30      	cmp	r3, #48	; 0x30
 8005a44:	d10a      	bne.n	8005a5c <__cvt+0x8c>
 8005a46:	2200      	movs	r2, #0
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	f7fb f843 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a52:	b918      	cbnz	r0, 8005a5c <__cvt+0x8c>
 8005a54:	f1c6 0601 	rsb	r6, r6, #1
 8005a58:	f8ca 6000 	str.w	r6, [sl]
 8005a5c:	f8da 3000 	ldr.w	r3, [sl]
 8005a60:	4499      	add	r9, r3
 8005a62:	2200      	movs	r2, #0
 8005a64:	2300      	movs	r3, #0
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f7fb f835 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a6e:	b108      	cbz	r0, 8005a74 <__cvt+0xa4>
 8005a70:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a74:	2230      	movs	r2, #48	; 0x30
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	454b      	cmp	r3, r9
 8005a7a:	d307      	bcc.n	8005a8c <__cvt+0xbc>
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a80:	1bdb      	subs	r3, r3, r7
 8005a82:	4638      	mov	r0, r7
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	b004      	add	sp, #16
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	1c59      	adds	r1, r3, #1
 8005a8e:	9103      	str	r1, [sp, #12]
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e7f0      	b.n	8005a76 <__cvt+0xa6>

08005a94 <__exponent>:
 8005a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a96:	4603      	mov	r3, r0
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	bfb8      	it	lt
 8005a9c:	4249      	neglt	r1, r1
 8005a9e:	f803 2b02 	strb.w	r2, [r3], #2
 8005aa2:	bfb4      	ite	lt
 8005aa4:	222d      	movlt	r2, #45	; 0x2d
 8005aa6:	222b      	movge	r2, #43	; 0x2b
 8005aa8:	2909      	cmp	r1, #9
 8005aaa:	7042      	strb	r2, [r0, #1]
 8005aac:	dd2a      	ble.n	8005b04 <__exponent+0x70>
 8005aae:	f10d 0407 	add.w	r4, sp, #7
 8005ab2:	46a4      	mov	ip, r4
 8005ab4:	270a      	movs	r7, #10
 8005ab6:	46a6      	mov	lr, r4
 8005ab8:	460a      	mov	r2, r1
 8005aba:	fb91 f6f7 	sdiv	r6, r1, r7
 8005abe:	fb07 1516 	mls	r5, r7, r6, r1
 8005ac2:	3530      	adds	r5, #48	; 0x30
 8005ac4:	2a63      	cmp	r2, #99	; 0x63
 8005ac6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005aca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ace:	4631      	mov	r1, r6
 8005ad0:	dcf1      	bgt.n	8005ab6 <__exponent+0x22>
 8005ad2:	3130      	adds	r1, #48	; 0x30
 8005ad4:	f1ae 0502 	sub.w	r5, lr, #2
 8005ad8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005adc:	1c44      	adds	r4, r0, #1
 8005ade:	4629      	mov	r1, r5
 8005ae0:	4561      	cmp	r1, ip
 8005ae2:	d30a      	bcc.n	8005afa <__exponent+0x66>
 8005ae4:	f10d 0209 	add.w	r2, sp, #9
 8005ae8:	eba2 020e 	sub.w	r2, r2, lr
 8005aec:	4565      	cmp	r5, ip
 8005aee:	bf88      	it	hi
 8005af0:	2200      	movhi	r2, #0
 8005af2:	4413      	add	r3, r2
 8005af4:	1a18      	subs	r0, r3, r0
 8005af6:	b003      	add	sp, #12
 8005af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005afe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b02:	e7ed      	b.n	8005ae0 <__exponent+0x4c>
 8005b04:	2330      	movs	r3, #48	; 0x30
 8005b06:	3130      	adds	r1, #48	; 0x30
 8005b08:	7083      	strb	r3, [r0, #2]
 8005b0a:	70c1      	strb	r1, [r0, #3]
 8005b0c:	1d03      	adds	r3, r0, #4
 8005b0e:	e7f1      	b.n	8005af4 <__exponent+0x60>

08005b10 <_printf_float>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	ed2d 8b02 	vpush	{d8}
 8005b18:	b08d      	sub	sp, #52	; 0x34
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b20:	4616      	mov	r6, r2
 8005b22:	461f      	mov	r7, r3
 8005b24:	4605      	mov	r5, r0
 8005b26:	f002 fec5 	bl	80088b4 <_localeconv_r>
 8005b2a:	f8d0 a000 	ldr.w	sl, [r0]
 8005b2e:	4650      	mov	r0, sl
 8005b30:	f7fa fb56 	bl	80001e0 <strlen>
 8005b34:	2300      	movs	r3, #0
 8005b36:	930a      	str	r3, [sp, #40]	; 0x28
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b44:	3307      	adds	r3, #7
 8005b46:	f023 0307 	bic.w	r3, r3, #7
 8005b4a:	f103 0208 	add.w	r2, r3, #8
 8005b4e:	f8c8 2000 	str.w	r2, [r8]
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b68:	ee08 0a10 	vmov	s16, r0
 8005b6c:	4b9f      	ldr	r3, [pc, #636]	; (8005dec <_printf_float+0x2dc>)
 8005b6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295
 8005b76:	f7fa ffe1 	bl	8000b3c <__aeabi_dcmpun>
 8005b7a:	bb88      	cbnz	r0, 8005be0 <_printf_float+0xd0>
 8005b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b80:	4b9a      	ldr	r3, [pc, #616]	; (8005dec <_printf_float+0x2dc>)
 8005b82:	f04f 32ff 	mov.w	r2, #4294967295
 8005b86:	f7fa ffbb 	bl	8000b00 <__aeabi_dcmple>
 8005b8a:	bb48      	cbnz	r0, 8005be0 <_printf_float+0xd0>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2300      	movs	r3, #0
 8005b90:	4640      	mov	r0, r8
 8005b92:	4649      	mov	r1, r9
 8005b94:	f7fa ffaa 	bl	8000aec <__aeabi_dcmplt>
 8005b98:	b110      	cbz	r0, 8005ba0 <_printf_float+0x90>
 8005b9a:	232d      	movs	r3, #45	; 0x2d
 8005b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba0:	4b93      	ldr	r3, [pc, #588]	; (8005df0 <_printf_float+0x2e0>)
 8005ba2:	4894      	ldr	r0, [pc, #592]	; (8005df4 <_printf_float+0x2e4>)
 8005ba4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ba8:	bf94      	ite	ls
 8005baa:	4698      	movls	r8, r3
 8005bac:	4680      	movhi	r8, r0
 8005bae:	2303      	movs	r3, #3
 8005bb0:	6123      	str	r3, [r4, #16]
 8005bb2:	9b05      	ldr	r3, [sp, #20]
 8005bb4:	f023 0204 	bic.w	r2, r3, #4
 8005bb8:	6022      	str	r2, [r4, #0]
 8005bba:	f04f 0900 	mov.w	r9, #0
 8005bbe:	9700      	str	r7, [sp, #0]
 8005bc0:	4633      	mov	r3, r6
 8005bc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 f9d8 	bl	8005f7c <_printf_common>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f040 8090 	bne.w	8005cf2 <_printf_float+0x1e2>
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd6:	b00d      	add	sp, #52	; 0x34
 8005bd8:	ecbd 8b02 	vpop	{d8}
 8005bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be0:	4642      	mov	r2, r8
 8005be2:	464b      	mov	r3, r9
 8005be4:	4640      	mov	r0, r8
 8005be6:	4649      	mov	r1, r9
 8005be8:	f7fa ffa8 	bl	8000b3c <__aeabi_dcmpun>
 8005bec:	b140      	cbz	r0, 8005c00 <_printf_float+0xf0>
 8005bee:	464b      	mov	r3, r9
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bfbc      	itt	lt
 8005bf4:	232d      	movlt	r3, #45	; 0x2d
 8005bf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005bfa:	487f      	ldr	r0, [pc, #508]	; (8005df8 <_printf_float+0x2e8>)
 8005bfc:	4b7f      	ldr	r3, [pc, #508]	; (8005dfc <_printf_float+0x2ec>)
 8005bfe:	e7d1      	b.n	8005ba4 <_printf_float+0x94>
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c06:	9206      	str	r2, [sp, #24]
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	d13f      	bne.n	8005c8c <_printf_float+0x17c>
 8005c0c:	2306      	movs	r3, #6
 8005c0e:	6063      	str	r3, [r4, #4]
 8005c10:	9b05      	ldr	r3, [sp, #20]
 8005c12:	6861      	ldr	r1, [r4, #4]
 8005c14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c18:	2300      	movs	r3, #0
 8005c1a:	9303      	str	r3, [sp, #12]
 8005c1c:	ab0a      	add	r3, sp, #40	; 0x28
 8005c1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c22:	ab09      	add	r3, sp, #36	; 0x24
 8005c24:	ec49 8b10 	vmov	d0, r8, r9
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	6022      	str	r2, [r4, #0]
 8005c2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c30:	4628      	mov	r0, r5
 8005c32:	f7ff fecd 	bl	80059d0 <__cvt>
 8005c36:	9b06      	ldr	r3, [sp, #24]
 8005c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c3a:	2b47      	cmp	r3, #71	; 0x47
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	d108      	bne.n	8005c52 <_printf_float+0x142>
 8005c40:	1cc8      	adds	r0, r1, #3
 8005c42:	db02      	blt.n	8005c4a <_printf_float+0x13a>
 8005c44:	6863      	ldr	r3, [r4, #4]
 8005c46:	4299      	cmp	r1, r3
 8005c48:	dd41      	ble.n	8005cce <_printf_float+0x1be>
 8005c4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c4e:	fa5f fb8b 	uxtb.w	fp, fp
 8005c52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c56:	d820      	bhi.n	8005c9a <_printf_float+0x18a>
 8005c58:	3901      	subs	r1, #1
 8005c5a:	465a      	mov	r2, fp
 8005c5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c60:	9109      	str	r1, [sp, #36]	; 0x24
 8005c62:	f7ff ff17 	bl	8005a94 <__exponent>
 8005c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c68:	1813      	adds	r3, r2, r0
 8005c6a:	2a01      	cmp	r2, #1
 8005c6c:	4681      	mov	r9, r0
 8005c6e:	6123      	str	r3, [r4, #16]
 8005c70:	dc02      	bgt.n	8005c78 <_printf_float+0x168>
 8005c72:	6822      	ldr	r2, [r4, #0]
 8005c74:	07d2      	lsls	r2, r2, #31
 8005c76:	d501      	bpl.n	8005c7c <_printf_float+0x16c>
 8005c78:	3301      	adds	r3, #1
 8005c7a:	6123      	str	r3, [r4, #16]
 8005c7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d09c      	beq.n	8005bbe <_printf_float+0xae>
 8005c84:	232d      	movs	r3, #45	; 0x2d
 8005c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c8a:	e798      	b.n	8005bbe <_printf_float+0xae>
 8005c8c:	9a06      	ldr	r2, [sp, #24]
 8005c8e:	2a47      	cmp	r2, #71	; 0x47
 8005c90:	d1be      	bne.n	8005c10 <_printf_float+0x100>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1bc      	bne.n	8005c10 <_printf_float+0x100>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e7b9      	b.n	8005c0e <_printf_float+0xfe>
 8005c9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c9e:	d118      	bne.n	8005cd2 <_printf_float+0x1c2>
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	6863      	ldr	r3, [r4, #4]
 8005ca4:	dd0b      	ble.n	8005cbe <_printf_float+0x1ae>
 8005ca6:	6121      	str	r1, [r4, #16]
 8005ca8:	b913      	cbnz	r3, 8005cb0 <_printf_float+0x1a0>
 8005caa:	6822      	ldr	r2, [r4, #0]
 8005cac:	07d0      	lsls	r0, r2, #31
 8005cae:	d502      	bpl.n	8005cb6 <_printf_float+0x1a6>
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	440b      	add	r3, r1
 8005cb4:	6123      	str	r3, [r4, #16]
 8005cb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005cb8:	f04f 0900 	mov.w	r9, #0
 8005cbc:	e7de      	b.n	8005c7c <_printf_float+0x16c>
 8005cbe:	b913      	cbnz	r3, 8005cc6 <_printf_float+0x1b6>
 8005cc0:	6822      	ldr	r2, [r4, #0]
 8005cc2:	07d2      	lsls	r2, r2, #31
 8005cc4:	d501      	bpl.n	8005cca <_printf_float+0x1ba>
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	e7f4      	b.n	8005cb4 <_printf_float+0x1a4>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e7f2      	b.n	8005cb4 <_printf_float+0x1a4>
 8005cce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd4:	4299      	cmp	r1, r3
 8005cd6:	db05      	blt.n	8005ce4 <_printf_float+0x1d4>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	6121      	str	r1, [r4, #16]
 8005cdc:	07d8      	lsls	r0, r3, #31
 8005cde:	d5ea      	bpl.n	8005cb6 <_printf_float+0x1a6>
 8005ce0:	1c4b      	adds	r3, r1, #1
 8005ce2:	e7e7      	b.n	8005cb4 <_printf_float+0x1a4>
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	bfd4      	ite	le
 8005ce8:	f1c1 0202 	rsble	r2, r1, #2
 8005cec:	2201      	movgt	r2, #1
 8005cee:	4413      	add	r3, r2
 8005cf0:	e7e0      	b.n	8005cb4 <_printf_float+0x1a4>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	055a      	lsls	r2, r3, #21
 8005cf6:	d407      	bmi.n	8005d08 <_printf_float+0x1f8>
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	4642      	mov	r2, r8
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	d12c      	bne.n	8005d60 <_printf_float+0x250>
 8005d06:	e764      	b.n	8005bd2 <_printf_float+0xc2>
 8005d08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d0c:	f240 80e0 	bls.w	8005ed0 <_printf_float+0x3c0>
 8005d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d14:	2200      	movs	r2, #0
 8005d16:	2300      	movs	r3, #0
 8005d18:	f7fa fede 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d034      	beq.n	8005d8a <_printf_float+0x27a>
 8005d20:	4a37      	ldr	r2, [pc, #220]	; (8005e00 <_printf_float+0x2f0>)
 8005d22:	2301      	movs	r3, #1
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f af51 	beq.w	8005bd2 <_printf_float+0xc2>
 8005d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d34:	429a      	cmp	r2, r3
 8005d36:	db02      	blt.n	8005d3e <_printf_float+0x22e>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	07d8      	lsls	r0, r3, #31
 8005d3c:	d510      	bpl.n	8005d60 <_printf_float+0x250>
 8005d3e:	ee18 3a10 	vmov	r3, s16
 8005d42:	4652      	mov	r2, sl
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f43f af41 	beq.w	8005bd2 <_printf_float+0xc2>
 8005d50:	f04f 0800 	mov.w	r8, #0
 8005d54:	f104 091a 	add.w	r9, r4, #26
 8005d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	4543      	cmp	r3, r8
 8005d5e:	dc09      	bgt.n	8005d74 <_printf_float+0x264>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	079b      	lsls	r3, r3, #30
 8005d64:	f100 8105 	bmi.w	8005f72 <_printf_float+0x462>
 8005d68:	68e0      	ldr	r0, [r4, #12]
 8005d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d6c:	4298      	cmp	r0, r3
 8005d6e:	bfb8      	it	lt
 8005d70:	4618      	movlt	r0, r3
 8005d72:	e730      	b.n	8005bd6 <_printf_float+0xc6>
 8005d74:	2301      	movs	r3, #1
 8005d76:	464a      	mov	r2, r9
 8005d78:	4631      	mov	r1, r6
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	47b8      	blx	r7
 8005d7e:	3001      	adds	r0, #1
 8005d80:	f43f af27 	beq.w	8005bd2 <_printf_float+0xc2>
 8005d84:	f108 0801 	add.w	r8, r8, #1
 8005d88:	e7e6      	b.n	8005d58 <_printf_float+0x248>
 8005d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dc39      	bgt.n	8005e04 <_printf_float+0x2f4>
 8005d90:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <_printf_float+0x2f0>)
 8005d92:	2301      	movs	r3, #1
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f af19 	beq.w	8005bd2 <_printf_float+0xc2>
 8005da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005da4:	4313      	orrs	r3, r2
 8005da6:	d102      	bne.n	8005dae <_printf_float+0x29e>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	07d9      	lsls	r1, r3, #31
 8005dac:	d5d8      	bpl.n	8005d60 <_printf_float+0x250>
 8005dae:	ee18 3a10 	vmov	r3, s16
 8005db2:	4652      	mov	r2, sl
 8005db4:	4631      	mov	r1, r6
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f43f af09 	beq.w	8005bd2 <_printf_float+0xc2>
 8005dc0:	f04f 0900 	mov.w	r9, #0
 8005dc4:	f104 0a1a 	add.w	sl, r4, #26
 8005dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dca:	425b      	negs	r3, r3
 8005dcc:	454b      	cmp	r3, r9
 8005dce:	dc01      	bgt.n	8005dd4 <_printf_float+0x2c4>
 8005dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd2:	e792      	b.n	8005cfa <_printf_float+0x1ea>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	4652      	mov	r2, sl
 8005dd8:	4631      	mov	r1, r6
 8005dda:	4628      	mov	r0, r5
 8005ddc:	47b8      	blx	r7
 8005dde:	3001      	adds	r0, #1
 8005de0:	f43f aef7 	beq.w	8005bd2 <_printf_float+0xc2>
 8005de4:	f109 0901 	add.w	r9, r9, #1
 8005de8:	e7ee      	b.n	8005dc8 <_printf_float+0x2b8>
 8005dea:	bf00      	nop
 8005dec:	7fefffff 	.word	0x7fefffff
 8005df0:	0800b574 	.word	0x0800b574
 8005df4:	0800b578 	.word	0x0800b578
 8005df8:	0800b580 	.word	0x0800b580
 8005dfc:	0800b57c 	.word	0x0800b57c
 8005e00:	0800b584 	.word	0x0800b584
 8005e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	bfa8      	it	ge
 8005e0c:	461a      	movge	r2, r3
 8005e0e:	2a00      	cmp	r2, #0
 8005e10:	4691      	mov	r9, r2
 8005e12:	dc37      	bgt.n	8005e84 <_printf_float+0x374>
 8005e14:	f04f 0b00 	mov.w	fp, #0
 8005e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e1c:	f104 021a 	add.w	r2, r4, #26
 8005e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e22:	9305      	str	r3, [sp, #20]
 8005e24:	eba3 0309 	sub.w	r3, r3, r9
 8005e28:	455b      	cmp	r3, fp
 8005e2a:	dc33      	bgt.n	8005e94 <_printf_float+0x384>
 8005e2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e30:	429a      	cmp	r2, r3
 8005e32:	db3b      	blt.n	8005eac <_printf_float+0x39c>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	07da      	lsls	r2, r3, #31
 8005e38:	d438      	bmi.n	8005eac <_printf_float+0x39c>
 8005e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3c:	9a05      	ldr	r2, [sp, #20]
 8005e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e40:	1a9a      	subs	r2, r3, r2
 8005e42:	eba3 0901 	sub.w	r9, r3, r1
 8005e46:	4591      	cmp	r9, r2
 8005e48:	bfa8      	it	ge
 8005e4a:	4691      	movge	r9, r2
 8005e4c:	f1b9 0f00 	cmp.w	r9, #0
 8005e50:	dc35      	bgt.n	8005ebe <_printf_float+0x3ae>
 8005e52:	f04f 0800 	mov.w	r8, #0
 8005e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e5a:	f104 0a1a 	add.w	sl, r4, #26
 8005e5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	eba3 0309 	sub.w	r3, r3, r9
 8005e68:	4543      	cmp	r3, r8
 8005e6a:	f77f af79 	ble.w	8005d60 <_printf_float+0x250>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4652      	mov	r2, sl
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f43f aeaa 	beq.w	8005bd2 <_printf_float+0xc2>
 8005e7e:	f108 0801 	add.w	r8, r8, #1
 8005e82:	e7ec      	b.n	8005e5e <_printf_float+0x34e>
 8005e84:	4613      	mov	r3, r2
 8005e86:	4631      	mov	r1, r6
 8005e88:	4642      	mov	r2, r8
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d1c0      	bne.n	8005e14 <_printf_float+0x304>
 8005e92:	e69e      	b.n	8005bd2 <_printf_float+0xc2>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	9205      	str	r2, [sp, #20]
 8005e9c:	47b8      	blx	r7
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f43f ae97 	beq.w	8005bd2 <_printf_float+0xc2>
 8005ea4:	9a05      	ldr	r2, [sp, #20]
 8005ea6:	f10b 0b01 	add.w	fp, fp, #1
 8005eaa:	e7b9      	b.n	8005e20 <_printf_float+0x310>
 8005eac:	ee18 3a10 	vmov	r3, s16
 8005eb0:	4652      	mov	r2, sl
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d1be      	bne.n	8005e3a <_printf_float+0x32a>
 8005ebc:	e689      	b.n	8005bd2 <_printf_float+0xc2>
 8005ebe:	9a05      	ldr	r2, [sp, #20]
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	4442      	add	r2, r8
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d1c1      	bne.n	8005e52 <_printf_float+0x342>
 8005ece:	e680      	b.n	8005bd2 <_printf_float+0xc2>
 8005ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ed2:	2a01      	cmp	r2, #1
 8005ed4:	dc01      	bgt.n	8005eda <_printf_float+0x3ca>
 8005ed6:	07db      	lsls	r3, r3, #31
 8005ed8:	d538      	bpl.n	8005f4c <_printf_float+0x43c>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4642      	mov	r2, r8
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f43f ae74 	beq.w	8005bd2 <_printf_float+0xc2>
 8005eea:	ee18 3a10 	vmov	r3, s16
 8005eee:	4652      	mov	r2, sl
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	47b8      	blx	r7
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	f43f ae6b 	beq.w	8005bd2 <_printf_float+0xc2>
 8005efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f00:	2200      	movs	r2, #0
 8005f02:	2300      	movs	r3, #0
 8005f04:	f7fa fde8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f08:	b9d8      	cbnz	r0, 8005f42 <_printf_float+0x432>
 8005f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f0c:	f108 0201 	add.w	r2, r8, #1
 8005f10:	3b01      	subs	r3, #1
 8005f12:	4631      	mov	r1, r6
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b8      	blx	r7
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d10e      	bne.n	8005f3a <_printf_float+0x42a>
 8005f1c:	e659      	b.n	8005bd2 <_printf_float+0xc2>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4652      	mov	r2, sl
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	f43f ae52 	beq.w	8005bd2 <_printf_float+0xc2>
 8005f2e:	f108 0801 	add.w	r8, r8, #1
 8005f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f34:	3b01      	subs	r3, #1
 8005f36:	4543      	cmp	r3, r8
 8005f38:	dcf1      	bgt.n	8005f1e <_printf_float+0x40e>
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f40:	e6dc      	b.n	8005cfc <_printf_float+0x1ec>
 8005f42:	f04f 0800 	mov.w	r8, #0
 8005f46:	f104 0a1a 	add.w	sl, r4, #26
 8005f4a:	e7f2      	b.n	8005f32 <_printf_float+0x422>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4642      	mov	r2, r8
 8005f50:	e7df      	b.n	8005f12 <_printf_float+0x402>
 8005f52:	2301      	movs	r3, #1
 8005f54:	464a      	mov	r2, r9
 8005f56:	4631      	mov	r1, r6
 8005f58:	4628      	mov	r0, r5
 8005f5a:	47b8      	blx	r7
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	f43f ae38 	beq.w	8005bd2 <_printf_float+0xc2>
 8005f62:	f108 0801 	add.w	r8, r8, #1
 8005f66:	68e3      	ldr	r3, [r4, #12]
 8005f68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f6a:	1a5b      	subs	r3, r3, r1
 8005f6c:	4543      	cmp	r3, r8
 8005f6e:	dcf0      	bgt.n	8005f52 <_printf_float+0x442>
 8005f70:	e6fa      	b.n	8005d68 <_printf_float+0x258>
 8005f72:	f04f 0800 	mov.w	r8, #0
 8005f76:	f104 0919 	add.w	r9, r4, #25
 8005f7a:	e7f4      	b.n	8005f66 <_printf_float+0x456>

08005f7c <_printf_common>:
 8005f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	4616      	mov	r6, r2
 8005f82:	4699      	mov	r9, r3
 8005f84:	688a      	ldr	r2, [r1, #8]
 8005f86:	690b      	ldr	r3, [r1, #16]
 8005f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	bfb8      	it	lt
 8005f90:	4613      	movlt	r3, r2
 8005f92:	6033      	str	r3, [r6, #0]
 8005f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f98:	4607      	mov	r7, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	b10a      	cbz	r2, 8005fa2 <_printf_common+0x26>
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	6033      	str	r3, [r6, #0]
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	0699      	lsls	r1, r3, #26
 8005fa6:	bf42      	ittt	mi
 8005fa8:	6833      	ldrmi	r3, [r6, #0]
 8005faa:	3302      	addmi	r3, #2
 8005fac:	6033      	strmi	r3, [r6, #0]
 8005fae:	6825      	ldr	r5, [r4, #0]
 8005fb0:	f015 0506 	ands.w	r5, r5, #6
 8005fb4:	d106      	bne.n	8005fc4 <_printf_common+0x48>
 8005fb6:	f104 0a19 	add.w	sl, r4, #25
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	6832      	ldr	r2, [r6, #0]
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	42ab      	cmp	r3, r5
 8005fc2:	dc26      	bgt.n	8006012 <_printf_common+0x96>
 8005fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fc8:	1e13      	subs	r3, r2, #0
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	bf18      	it	ne
 8005fce:	2301      	movne	r3, #1
 8005fd0:	0692      	lsls	r2, r2, #26
 8005fd2:	d42b      	bmi.n	800602c <_printf_common+0xb0>
 8005fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4638      	mov	r0, r7
 8005fdc:	47c0      	blx	r8
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d01e      	beq.n	8006020 <_printf_common+0xa4>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	68e5      	ldr	r5, [r4, #12]
 8005fe6:	6832      	ldr	r2, [r6, #0]
 8005fe8:	f003 0306 	and.w	r3, r3, #6
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	bf08      	it	eq
 8005ff0:	1aad      	subeq	r5, r5, r2
 8005ff2:	68a3      	ldr	r3, [r4, #8]
 8005ff4:	6922      	ldr	r2, [r4, #16]
 8005ff6:	bf0c      	ite	eq
 8005ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ffc:	2500      	movne	r5, #0
 8005ffe:	4293      	cmp	r3, r2
 8006000:	bfc4      	itt	gt
 8006002:	1a9b      	subgt	r3, r3, r2
 8006004:	18ed      	addgt	r5, r5, r3
 8006006:	2600      	movs	r6, #0
 8006008:	341a      	adds	r4, #26
 800600a:	42b5      	cmp	r5, r6
 800600c:	d11a      	bne.n	8006044 <_printf_common+0xc8>
 800600e:	2000      	movs	r0, #0
 8006010:	e008      	b.n	8006024 <_printf_common+0xa8>
 8006012:	2301      	movs	r3, #1
 8006014:	4652      	mov	r2, sl
 8006016:	4649      	mov	r1, r9
 8006018:	4638      	mov	r0, r7
 800601a:	47c0      	blx	r8
 800601c:	3001      	adds	r0, #1
 800601e:	d103      	bne.n	8006028 <_printf_common+0xac>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006028:	3501      	adds	r5, #1
 800602a:	e7c6      	b.n	8005fba <_printf_common+0x3e>
 800602c:	18e1      	adds	r1, r4, r3
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	2030      	movs	r0, #48	; 0x30
 8006032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006036:	4422      	add	r2, r4
 8006038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800603c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006040:	3302      	adds	r3, #2
 8006042:	e7c7      	b.n	8005fd4 <_printf_common+0x58>
 8006044:	2301      	movs	r3, #1
 8006046:	4622      	mov	r2, r4
 8006048:	4649      	mov	r1, r9
 800604a:	4638      	mov	r0, r7
 800604c:	47c0      	blx	r8
 800604e:	3001      	adds	r0, #1
 8006050:	d0e6      	beq.n	8006020 <_printf_common+0xa4>
 8006052:	3601      	adds	r6, #1
 8006054:	e7d9      	b.n	800600a <_printf_common+0x8e>
	...

08006058 <_printf_i>:
 8006058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	7e0f      	ldrb	r7, [r1, #24]
 800605e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006060:	2f78      	cmp	r7, #120	; 0x78
 8006062:	4691      	mov	r9, r2
 8006064:	4680      	mov	r8, r0
 8006066:	460c      	mov	r4, r1
 8006068:	469a      	mov	sl, r3
 800606a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800606e:	d807      	bhi.n	8006080 <_printf_i+0x28>
 8006070:	2f62      	cmp	r7, #98	; 0x62
 8006072:	d80a      	bhi.n	800608a <_printf_i+0x32>
 8006074:	2f00      	cmp	r7, #0
 8006076:	f000 80d8 	beq.w	800622a <_printf_i+0x1d2>
 800607a:	2f58      	cmp	r7, #88	; 0x58
 800607c:	f000 80a3 	beq.w	80061c6 <_printf_i+0x16e>
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006088:	e03a      	b.n	8006100 <_printf_i+0xa8>
 800608a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800608e:	2b15      	cmp	r3, #21
 8006090:	d8f6      	bhi.n	8006080 <_printf_i+0x28>
 8006092:	a101      	add	r1, pc, #4	; (adr r1, 8006098 <_printf_i+0x40>)
 8006094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006098:	080060f1 	.word	0x080060f1
 800609c:	08006105 	.word	0x08006105
 80060a0:	08006081 	.word	0x08006081
 80060a4:	08006081 	.word	0x08006081
 80060a8:	08006081 	.word	0x08006081
 80060ac:	08006081 	.word	0x08006081
 80060b0:	08006105 	.word	0x08006105
 80060b4:	08006081 	.word	0x08006081
 80060b8:	08006081 	.word	0x08006081
 80060bc:	08006081 	.word	0x08006081
 80060c0:	08006081 	.word	0x08006081
 80060c4:	08006211 	.word	0x08006211
 80060c8:	08006135 	.word	0x08006135
 80060cc:	080061f3 	.word	0x080061f3
 80060d0:	08006081 	.word	0x08006081
 80060d4:	08006081 	.word	0x08006081
 80060d8:	08006233 	.word	0x08006233
 80060dc:	08006081 	.word	0x08006081
 80060e0:	08006135 	.word	0x08006135
 80060e4:	08006081 	.word	0x08006081
 80060e8:	08006081 	.word	0x08006081
 80060ec:	080061fb 	.word	0x080061fb
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	602a      	str	r2, [r5, #0]
 80060f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006100:	2301      	movs	r3, #1
 8006102:	e0a3      	b.n	800624c <_printf_i+0x1f4>
 8006104:	6820      	ldr	r0, [r4, #0]
 8006106:	6829      	ldr	r1, [r5, #0]
 8006108:	0606      	lsls	r6, r0, #24
 800610a:	f101 0304 	add.w	r3, r1, #4
 800610e:	d50a      	bpl.n	8006126 <_printf_i+0xce>
 8006110:	680e      	ldr	r6, [r1, #0]
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	2e00      	cmp	r6, #0
 8006116:	da03      	bge.n	8006120 <_printf_i+0xc8>
 8006118:	232d      	movs	r3, #45	; 0x2d
 800611a:	4276      	negs	r6, r6
 800611c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006120:	485e      	ldr	r0, [pc, #376]	; (800629c <_printf_i+0x244>)
 8006122:	230a      	movs	r3, #10
 8006124:	e019      	b.n	800615a <_printf_i+0x102>
 8006126:	680e      	ldr	r6, [r1, #0]
 8006128:	602b      	str	r3, [r5, #0]
 800612a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800612e:	bf18      	it	ne
 8006130:	b236      	sxthne	r6, r6
 8006132:	e7ef      	b.n	8006114 <_printf_i+0xbc>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	1d19      	adds	r1, r3, #4
 800613a:	6029      	str	r1, [r5, #0]
 800613c:	0601      	lsls	r1, r0, #24
 800613e:	d501      	bpl.n	8006144 <_printf_i+0xec>
 8006140:	681e      	ldr	r6, [r3, #0]
 8006142:	e002      	b.n	800614a <_printf_i+0xf2>
 8006144:	0646      	lsls	r6, r0, #25
 8006146:	d5fb      	bpl.n	8006140 <_printf_i+0xe8>
 8006148:	881e      	ldrh	r6, [r3, #0]
 800614a:	4854      	ldr	r0, [pc, #336]	; (800629c <_printf_i+0x244>)
 800614c:	2f6f      	cmp	r7, #111	; 0x6f
 800614e:	bf0c      	ite	eq
 8006150:	2308      	moveq	r3, #8
 8006152:	230a      	movne	r3, #10
 8006154:	2100      	movs	r1, #0
 8006156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800615a:	6865      	ldr	r5, [r4, #4]
 800615c:	60a5      	str	r5, [r4, #8]
 800615e:	2d00      	cmp	r5, #0
 8006160:	bfa2      	ittt	ge
 8006162:	6821      	ldrge	r1, [r4, #0]
 8006164:	f021 0104 	bicge.w	r1, r1, #4
 8006168:	6021      	strge	r1, [r4, #0]
 800616a:	b90e      	cbnz	r6, 8006170 <_printf_i+0x118>
 800616c:	2d00      	cmp	r5, #0
 800616e:	d04d      	beq.n	800620c <_printf_i+0x1b4>
 8006170:	4615      	mov	r5, r2
 8006172:	fbb6 f1f3 	udiv	r1, r6, r3
 8006176:	fb03 6711 	mls	r7, r3, r1, r6
 800617a:	5dc7      	ldrb	r7, [r0, r7]
 800617c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006180:	4637      	mov	r7, r6
 8006182:	42bb      	cmp	r3, r7
 8006184:	460e      	mov	r6, r1
 8006186:	d9f4      	bls.n	8006172 <_printf_i+0x11a>
 8006188:	2b08      	cmp	r3, #8
 800618a:	d10b      	bne.n	80061a4 <_printf_i+0x14c>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	07de      	lsls	r6, r3, #31
 8006190:	d508      	bpl.n	80061a4 <_printf_i+0x14c>
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	6861      	ldr	r1, [r4, #4]
 8006196:	4299      	cmp	r1, r3
 8006198:	bfde      	ittt	le
 800619a:	2330      	movle	r3, #48	; 0x30
 800619c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061a4:	1b52      	subs	r2, r2, r5
 80061a6:	6122      	str	r2, [r4, #16]
 80061a8:	f8cd a000 	str.w	sl, [sp]
 80061ac:	464b      	mov	r3, r9
 80061ae:	aa03      	add	r2, sp, #12
 80061b0:	4621      	mov	r1, r4
 80061b2:	4640      	mov	r0, r8
 80061b4:	f7ff fee2 	bl	8005f7c <_printf_common>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d14c      	bne.n	8006256 <_printf_i+0x1fe>
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	b004      	add	sp, #16
 80061c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c6:	4835      	ldr	r0, [pc, #212]	; (800629c <_printf_i+0x244>)
 80061c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061cc:	6829      	ldr	r1, [r5, #0]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80061d4:	6029      	str	r1, [r5, #0]
 80061d6:	061d      	lsls	r5, r3, #24
 80061d8:	d514      	bpl.n	8006204 <_printf_i+0x1ac>
 80061da:	07df      	lsls	r7, r3, #31
 80061dc:	bf44      	itt	mi
 80061de:	f043 0320 	orrmi.w	r3, r3, #32
 80061e2:	6023      	strmi	r3, [r4, #0]
 80061e4:	b91e      	cbnz	r6, 80061ee <_printf_i+0x196>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	f023 0320 	bic.w	r3, r3, #32
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	2310      	movs	r3, #16
 80061f0:	e7b0      	b.n	8006154 <_printf_i+0xfc>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	f043 0320 	orr.w	r3, r3, #32
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	2378      	movs	r3, #120	; 0x78
 80061fc:	4828      	ldr	r0, [pc, #160]	; (80062a0 <_printf_i+0x248>)
 80061fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006202:	e7e3      	b.n	80061cc <_printf_i+0x174>
 8006204:	0659      	lsls	r1, r3, #25
 8006206:	bf48      	it	mi
 8006208:	b2b6      	uxthmi	r6, r6
 800620a:	e7e6      	b.n	80061da <_printf_i+0x182>
 800620c:	4615      	mov	r5, r2
 800620e:	e7bb      	b.n	8006188 <_printf_i+0x130>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	6826      	ldr	r6, [r4, #0]
 8006214:	6961      	ldr	r1, [r4, #20]
 8006216:	1d18      	adds	r0, r3, #4
 8006218:	6028      	str	r0, [r5, #0]
 800621a:	0635      	lsls	r5, r6, #24
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	d501      	bpl.n	8006224 <_printf_i+0x1cc>
 8006220:	6019      	str	r1, [r3, #0]
 8006222:	e002      	b.n	800622a <_printf_i+0x1d2>
 8006224:	0670      	lsls	r0, r6, #25
 8006226:	d5fb      	bpl.n	8006220 <_printf_i+0x1c8>
 8006228:	8019      	strh	r1, [r3, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	4615      	mov	r5, r2
 8006230:	e7ba      	b.n	80061a8 <_printf_i+0x150>
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	1d1a      	adds	r2, r3, #4
 8006236:	602a      	str	r2, [r5, #0]
 8006238:	681d      	ldr	r5, [r3, #0]
 800623a:	6862      	ldr	r2, [r4, #4]
 800623c:	2100      	movs	r1, #0
 800623e:	4628      	mov	r0, r5
 8006240:	f7f9 ffd6 	bl	80001f0 <memchr>
 8006244:	b108      	cbz	r0, 800624a <_printf_i+0x1f2>
 8006246:	1b40      	subs	r0, r0, r5
 8006248:	6060      	str	r0, [r4, #4]
 800624a:	6863      	ldr	r3, [r4, #4]
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	2300      	movs	r3, #0
 8006250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006254:	e7a8      	b.n	80061a8 <_printf_i+0x150>
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	462a      	mov	r2, r5
 800625a:	4649      	mov	r1, r9
 800625c:	4640      	mov	r0, r8
 800625e:	47d0      	blx	sl
 8006260:	3001      	adds	r0, #1
 8006262:	d0ab      	beq.n	80061bc <_printf_i+0x164>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	079b      	lsls	r3, r3, #30
 8006268:	d413      	bmi.n	8006292 <_printf_i+0x23a>
 800626a:	68e0      	ldr	r0, [r4, #12]
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	4298      	cmp	r0, r3
 8006270:	bfb8      	it	lt
 8006272:	4618      	movlt	r0, r3
 8006274:	e7a4      	b.n	80061c0 <_printf_i+0x168>
 8006276:	2301      	movs	r3, #1
 8006278:	4632      	mov	r2, r6
 800627a:	4649      	mov	r1, r9
 800627c:	4640      	mov	r0, r8
 800627e:	47d0      	blx	sl
 8006280:	3001      	adds	r0, #1
 8006282:	d09b      	beq.n	80061bc <_printf_i+0x164>
 8006284:	3501      	adds	r5, #1
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	9903      	ldr	r1, [sp, #12]
 800628a:	1a5b      	subs	r3, r3, r1
 800628c:	42ab      	cmp	r3, r5
 800628e:	dcf2      	bgt.n	8006276 <_printf_i+0x21e>
 8006290:	e7eb      	b.n	800626a <_printf_i+0x212>
 8006292:	2500      	movs	r5, #0
 8006294:	f104 0619 	add.w	r6, r4, #25
 8006298:	e7f5      	b.n	8006286 <_printf_i+0x22e>
 800629a:	bf00      	nop
 800629c:	0800b586 	.word	0x0800b586
 80062a0:	0800b597 	.word	0x0800b597

080062a4 <_scanf_float>:
 80062a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	b087      	sub	sp, #28
 80062aa:	4617      	mov	r7, r2
 80062ac:	9303      	str	r3, [sp, #12]
 80062ae:	688b      	ldr	r3, [r1, #8]
 80062b0:	1e5a      	subs	r2, r3, #1
 80062b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80062b6:	bf83      	ittte	hi
 80062b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80062bc:	195b      	addhi	r3, r3, r5
 80062be:	9302      	strhi	r3, [sp, #8]
 80062c0:	2300      	movls	r3, #0
 80062c2:	bf86      	itte	hi
 80062c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80062c8:	608b      	strhi	r3, [r1, #8]
 80062ca:	9302      	strls	r3, [sp, #8]
 80062cc:	680b      	ldr	r3, [r1, #0]
 80062ce:	468b      	mov	fp, r1
 80062d0:	2500      	movs	r5, #0
 80062d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80062d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80062da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80062de:	4680      	mov	r8, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	465e      	mov	r6, fp
 80062e4:	46aa      	mov	sl, r5
 80062e6:	46a9      	mov	r9, r5
 80062e8:	9501      	str	r5, [sp, #4]
 80062ea:	68a2      	ldr	r2, [r4, #8]
 80062ec:	b152      	cbz	r2, 8006304 <_scanf_float+0x60>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b4e      	cmp	r3, #78	; 0x4e
 80062f4:	d864      	bhi.n	80063c0 <_scanf_float+0x11c>
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d83c      	bhi.n	8006374 <_scanf_float+0xd0>
 80062fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80062fe:	b2c8      	uxtb	r0, r1
 8006300:	280e      	cmp	r0, #14
 8006302:	d93a      	bls.n	800637a <_scanf_float+0xd6>
 8006304:	f1b9 0f00 	cmp.w	r9, #0
 8006308:	d003      	beq.n	8006312 <_scanf_float+0x6e>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006316:	f1ba 0f01 	cmp.w	sl, #1
 800631a:	f200 8113 	bhi.w	8006544 <_scanf_float+0x2a0>
 800631e:	455e      	cmp	r6, fp
 8006320:	f200 8105 	bhi.w	800652e <_scanf_float+0x28a>
 8006324:	2501      	movs	r5, #1
 8006326:	4628      	mov	r0, r5
 8006328:	b007      	add	sp, #28
 800632a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006332:	2a0d      	cmp	r2, #13
 8006334:	d8e6      	bhi.n	8006304 <_scanf_float+0x60>
 8006336:	a101      	add	r1, pc, #4	; (adr r1, 800633c <_scanf_float+0x98>)
 8006338:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800633c:	0800647b 	.word	0x0800647b
 8006340:	08006305 	.word	0x08006305
 8006344:	08006305 	.word	0x08006305
 8006348:	08006305 	.word	0x08006305
 800634c:	080064db 	.word	0x080064db
 8006350:	080064b3 	.word	0x080064b3
 8006354:	08006305 	.word	0x08006305
 8006358:	08006305 	.word	0x08006305
 800635c:	08006489 	.word	0x08006489
 8006360:	08006305 	.word	0x08006305
 8006364:	08006305 	.word	0x08006305
 8006368:	08006305 	.word	0x08006305
 800636c:	08006305 	.word	0x08006305
 8006370:	08006441 	.word	0x08006441
 8006374:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006378:	e7db      	b.n	8006332 <_scanf_float+0x8e>
 800637a:	290e      	cmp	r1, #14
 800637c:	d8c2      	bhi.n	8006304 <_scanf_float+0x60>
 800637e:	a001      	add	r0, pc, #4	; (adr r0, 8006384 <_scanf_float+0xe0>)
 8006380:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006384:	08006433 	.word	0x08006433
 8006388:	08006305 	.word	0x08006305
 800638c:	08006433 	.word	0x08006433
 8006390:	080064c7 	.word	0x080064c7
 8006394:	08006305 	.word	0x08006305
 8006398:	080063e1 	.word	0x080063e1
 800639c:	0800641d 	.word	0x0800641d
 80063a0:	0800641d 	.word	0x0800641d
 80063a4:	0800641d 	.word	0x0800641d
 80063a8:	0800641d 	.word	0x0800641d
 80063ac:	0800641d 	.word	0x0800641d
 80063b0:	0800641d 	.word	0x0800641d
 80063b4:	0800641d 	.word	0x0800641d
 80063b8:	0800641d 	.word	0x0800641d
 80063bc:	0800641d 	.word	0x0800641d
 80063c0:	2b6e      	cmp	r3, #110	; 0x6e
 80063c2:	d809      	bhi.n	80063d8 <_scanf_float+0x134>
 80063c4:	2b60      	cmp	r3, #96	; 0x60
 80063c6:	d8b2      	bhi.n	800632e <_scanf_float+0x8a>
 80063c8:	2b54      	cmp	r3, #84	; 0x54
 80063ca:	d077      	beq.n	80064bc <_scanf_float+0x218>
 80063cc:	2b59      	cmp	r3, #89	; 0x59
 80063ce:	d199      	bne.n	8006304 <_scanf_float+0x60>
 80063d0:	2d07      	cmp	r5, #7
 80063d2:	d197      	bne.n	8006304 <_scanf_float+0x60>
 80063d4:	2508      	movs	r5, #8
 80063d6:	e029      	b.n	800642c <_scanf_float+0x188>
 80063d8:	2b74      	cmp	r3, #116	; 0x74
 80063da:	d06f      	beq.n	80064bc <_scanf_float+0x218>
 80063dc:	2b79      	cmp	r3, #121	; 0x79
 80063de:	e7f6      	b.n	80063ce <_scanf_float+0x12a>
 80063e0:	6821      	ldr	r1, [r4, #0]
 80063e2:	05c8      	lsls	r0, r1, #23
 80063e4:	d51a      	bpl.n	800641c <_scanf_float+0x178>
 80063e6:	9b02      	ldr	r3, [sp, #8]
 80063e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80063ec:	6021      	str	r1, [r4, #0]
 80063ee:	f109 0901 	add.w	r9, r9, #1
 80063f2:	b11b      	cbz	r3, 80063fc <_scanf_float+0x158>
 80063f4:	3b01      	subs	r3, #1
 80063f6:	3201      	adds	r2, #1
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	60a2      	str	r2, [r4, #8]
 80063fc:	68a3      	ldr	r3, [r4, #8]
 80063fe:	3b01      	subs	r3, #1
 8006400:	60a3      	str	r3, [r4, #8]
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	3301      	adds	r3, #1
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3b01      	subs	r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	607b      	str	r3, [r7, #4]
 8006410:	f340 8084 	ble.w	800651c <_scanf_float+0x278>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	3301      	adds	r3, #1
 8006418:	603b      	str	r3, [r7, #0]
 800641a:	e766      	b.n	80062ea <_scanf_float+0x46>
 800641c:	eb1a 0f05 	cmn.w	sl, r5
 8006420:	f47f af70 	bne.w	8006304 <_scanf_float+0x60>
 8006424:	6822      	ldr	r2, [r4, #0]
 8006426:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800642a:	6022      	str	r2, [r4, #0]
 800642c:	f806 3b01 	strb.w	r3, [r6], #1
 8006430:	e7e4      	b.n	80063fc <_scanf_float+0x158>
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	0610      	lsls	r0, r2, #24
 8006436:	f57f af65 	bpl.w	8006304 <_scanf_float+0x60>
 800643a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800643e:	e7f4      	b.n	800642a <_scanf_float+0x186>
 8006440:	f1ba 0f00 	cmp.w	sl, #0
 8006444:	d10e      	bne.n	8006464 <_scanf_float+0x1c0>
 8006446:	f1b9 0f00 	cmp.w	r9, #0
 800644a:	d10e      	bne.n	800646a <_scanf_float+0x1c6>
 800644c:	6822      	ldr	r2, [r4, #0]
 800644e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006452:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006456:	d108      	bne.n	800646a <_scanf_float+0x1c6>
 8006458:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800645c:	6022      	str	r2, [r4, #0]
 800645e:	f04f 0a01 	mov.w	sl, #1
 8006462:	e7e3      	b.n	800642c <_scanf_float+0x188>
 8006464:	f1ba 0f02 	cmp.w	sl, #2
 8006468:	d055      	beq.n	8006516 <_scanf_float+0x272>
 800646a:	2d01      	cmp	r5, #1
 800646c:	d002      	beq.n	8006474 <_scanf_float+0x1d0>
 800646e:	2d04      	cmp	r5, #4
 8006470:	f47f af48 	bne.w	8006304 <_scanf_float+0x60>
 8006474:	3501      	adds	r5, #1
 8006476:	b2ed      	uxtb	r5, r5
 8006478:	e7d8      	b.n	800642c <_scanf_float+0x188>
 800647a:	f1ba 0f01 	cmp.w	sl, #1
 800647e:	f47f af41 	bne.w	8006304 <_scanf_float+0x60>
 8006482:	f04f 0a02 	mov.w	sl, #2
 8006486:	e7d1      	b.n	800642c <_scanf_float+0x188>
 8006488:	b97d      	cbnz	r5, 80064aa <_scanf_float+0x206>
 800648a:	f1b9 0f00 	cmp.w	r9, #0
 800648e:	f47f af3c 	bne.w	800630a <_scanf_float+0x66>
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006498:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800649c:	f47f af39 	bne.w	8006312 <_scanf_float+0x6e>
 80064a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064a4:	6022      	str	r2, [r4, #0]
 80064a6:	2501      	movs	r5, #1
 80064a8:	e7c0      	b.n	800642c <_scanf_float+0x188>
 80064aa:	2d03      	cmp	r5, #3
 80064ac:	d0e2      	beq.n	8006474 <_scanf_float+0x1d0>
 80064ae:	2d05      	cmp	r5, #5
 80064b0:	e7de      	b.n	8006470 <_scanf_float+0x1cc>
 80064b2:	2d02      	cmp	r5, #2
 80064b4:	f47f af26 	bne.w	8006304 <_scanf_float+0x60>
 80064b8:	2503      	movs	r5, #3
 80064ba:	e7b7      	b.n	800642c <_scanf_float+0x188>
 80064bc:	2d06      	cmp	r5, #6
 80064be:	f47f af21 	bne.w	8006304 <_scanf_float+0x60>
 80064c2:	2507      	movs	r5, #7
 80064c4:	e7b2      	b.n	800642c <_scanf_float+0x188>
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	0591      	lsls	r1, r2, #22
 80064ca:	f57f af1b 	bpl.w	8006304 <_scanf_float+0x60>
 80064ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80064d2:	6022      	str	r2, [r4, #0]
 80064d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80064d8:	e7a8      	b.n	800642c <_scanf_float+0x188>
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80064e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80064e4:	d006      	beq.n	80064f4 <_scanf_float+0x250>
 80064e6:	0550      	lsls	r0, r2, #21
 80064e8:	f57f af0c 	bpl.w	8006304 <_scanf_float+0x60>
 80064ec:	f1b9 0f00 	cmp.w	r9, #0
 80064f0:	f43f af0f 	beq.w	8006312 <_scanf_float+0x6e>
 80064f4:	0591      	lsls	r1, r2, #22
 80064f6:	bf58      	it	pl
 80064f8:	9901      	ldrpl	r1, [sp, #4]
 80064fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064fe:	bf58      	it	pl
 8006500:	eba9 0101 	subpl.w	r1, r9, r1
 8006504:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006508:	bf58      	it	pl
 800650a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800650e:	6022      	str	r2, [r4, #0]
 8006510:	f04f 0900 	mov.w	r9, #0
 8006514:	e78a      	b.n	800642c <_scanf_float+0x188>
 8006516:	f04f 0a03 	mov.w	sl, #3
 800651a:	e787      	b.n	800642c <_scanf_float+0x188>
 800651c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006520:	4639      	mov	r1, r7
 8006522:	4640      	mov	r0, r8
 8006524:	4798      	blx	r3
 8006526:	2800      	cmp	r0, #0
 8006528:	f43f aedf 	beq.w	80062ea <_scanf_float+0x46>
 800652c:	e6ea      	b.n	8006304 <_scanf_float+0x60>
 800652e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006532:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006536:	463a      	mov	r2, r7
 8006538:	4640      	mov	r0, r8
 800653a:	4798      	blx	r3
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	3b01      	subs	r3, #1
 8006540:	6123      	str	r3, [r4, #16]
 8006542:	e6ec      	b.n	800631e <_scanf_float+0x7a>
 8006544:	1e6b      	subs	r3, r5, #1
 8006546:	2b06      	cmp	r3, #6
 8006548:	d825      	bhi.n	8006596 <_scanf_float+0x2f2>
 800654a:	2d02      	cmp	r5, #2
 800654c:	d836      	bhi.n	80065bc <_scanf_float+0x318>
 800654e:	455e      	cmp	r6, fp
 8006550:	f67f aee8 	bls.w	8006324 <_scanf_float+0x80>
 8006554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006558:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800655c:	463a      	mov	r2, r7
 800655e:	4640      	mov	r0, r8
 8006560:	4798      	blx	r3
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	3b01      	subs	r3, #1
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	e7f1      	b.n	800654e <_scanf_float+0x2aa>
 800656a:	9802      	ldr	r0, [sp, #8]
 800656c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006570:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006574:	9002      	str	r0, [sp, #8]
 8006576:	463a      	mov	r2, r7
 8006578:	4640      	mov	r0, r8
 800657a:	4798      	blx	r3
 800657c:	6923      	ldr	r3, [r4, #16]
 800657e:	3b01      	subs	r3, #1
 8006580:	6123      	str	r3, [r4, #16]
 8006582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006586:	fa5f fa8a 	uxtb.w	sl, sl
 800658a:	f1ba 0f02 	cmp.w	sl, #2
 800658e:	d1ec      	bne.n	800656a <_scanf_float+0x2c6>
 8006590:	3d03      	subs	r5, #3
 8006592:	b2ed      	uxtb	r5, r5
 8006594:	1b76      	subs	r6, r6, r5
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	05da      	lsls	r2, r3, #23
 800659a:	d52f      	bpl.n	80065fc <_scanf_float+0x358>
 800659c:	055b      	lsls	r3, r3, #21
 800659e:	d510      	bpl.n	80065c2 <_scanf_float+0x31e>
 80065a0:	455e      	cmp	r6, fp
 80065a2:	f67f aebf 	bls.w	8006324 <_scanf_float+0x80>
 80065a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065ae:	463a      	mov	r2, r7
 80065b0:	4640      	mov	r0, r8
 80065b2:	4798      	blx	r3
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	e7f1      	b.n	80065a0 <_scanf_float+0x2fc>
 80065bc:	46aa      	mov	sl, r5
 80065be:	9602      	str	r6, [sp, #8]
 80065c0:	e7df      	b.n	8006582 <_scanf_float+0x2de>
 80065c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	2965      	cmp	r1, #101	; 0x65
 80065ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80065ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	d00c      	beq.n	80065f0 <_scanf_float+0x34c>
 80065d6:	2945      	cmp	r1, #69	; 0x45
 80065d8:	d00a      	beq.n	80065f0 <_scanf_float+0x34c>
 80065da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065de:	463a      	mov	r2, r7
 80065e0:	4640      	mov	r0, r8
 80065e2:	4798      	blx	r3
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	1eb5      	subs	r5, r6, #2
 80065ee:	6123      	str	r3, [r4, #16]
 80065f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065f4:	463a      	mov	r2, r7
 80065f6:	4640      	mov	r0, r8
 80065f8:	4798      	blx	r3
 80065fa:	462e      	mov	r6, r5
 80065fc:	6825      	ldr	r5, [r4, #0]
 80065fe:	f015 0510 	ands.w	r5, r5, #16
 8006602:	d159      	bne.n	80066b8 <_scanf_float+0x414>
 8006604:	7035      	strb	r5, [r6, #0]
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800660c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006610:	d11b      	bne.n	800664a <_scanf_float+0x3a6>
 8006612:	9b01      	ldr	r3, [sp, #4]
 8006614:	454b      	cmp	r3, r9
 8006616:	eba3 0209 	sub.w	r2, r3, r9
 800661a:	d123      	bne.n	8006664 <_scanf_float+0x3c0>
 800661c:	2200      	movs	r2, #0
 800661e:	4659      	mov	r1, fp
 8006620:	4640      	mov	r0, r8
 8006622:	f000 fe97 	bl	8007354 <_strtod_r>
 8006626:	6822      	ldr	r2, [r4, #0]
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	f012 0f02 	tst.w	r2, #2
 800662e:	ec57 6b10 	vmov	r6, r7, d0
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	d021      	beq.n	800667a <_scanf_float+0x3d6>
 8006636:	9903      	ldr	r1, [sp, #12]
 8006638:	1d1a      	adds	r2, r3, #4
 800663a:	600a      	str	r2, [r1, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	e9c3 6700 	strd	r6, r7, [r3]
 8006642:	68e3      	ldr	r3, [r4, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	60e3      	str	r3, [r4, #12]
 8006648:	e66d      	b.n	8006326 <_scanf_float+0x82>
 800664a:	9b04      	ldr	r3, [sp, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0e5      	beq.n	800661c <_scanf_float+0x378>
 8006650:	9905      	ldr	r1, [sp, #20]
 8006652:	230a      	movs	r3, #10
 8006654:	462a      	mov	r2, r5
 8006656:	3101      	adds	r1, #1
 8006658:	4640      	mov	r0, r8
 800665a:	f000 ff03 	bl	8007464 <_strtol_r>
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	9e05      	ldr	r6, [sp, #20]
 8006662:	1ac2      	subs	r2, r0, r3
 8006664:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006668:	429e      	cmp	r6, r3
 800666a:	bf28      	it	cs
 800666c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006670:	4912      	ldr	r1, [pc, #72]	; (80066bc <_scanf_float+0x418>)
 8006672:	4630      	mov	r0, r6
 8006674:	f000 f82c 	bl	80066d0 <siprintf>
 8006678:	e7d0      	b.n	800661c <_scanf_float+0x378>
 800667a:	9903      	ldr	r1, [sp, #12]
 800667c:	f012 0f04 	tst.w	r2, #4
 8006680:	f103 0204 	add.w	r2, r3, #4
 8006684:	600a      	str	r2, [r1, #0]
 8006686:	d1d9      	bne.n	800663c <_scanf_float+0x398>
 8006688:	f8d3 8000 	ldr.w	r8, [r3]
 800668c:	ee10 2a10 	vmov	r2, s0
 8006690:	ee10 0a10 	vmov	r0, s0
 8006694:	463b      	mov	r3, r7
 8006696:	4639      	mov	r1, r7
 8006698:	f7fa fa50 	bl	8000b3c <__aeabi_dcmpun>
 800669c:	b128      	cbz	r0, 80066aa <_scanf_float+0x406>
 800669e:	4808      	ldr	r0, [pc, #32]	; (80066c0 <_scanf_float+0x41c>)
 80066a0:	f000 f810 	bl	80066c4 <nanf>
 80066a4:	ed88 0a00 	vstr	s0, [r8]
 80066a8:	e7cb      	b.n	8006642 <_scanf_float+0x39e>
 80066aa:	4630      	mov	r0, r6
 80066ac:	4639      	mov	r1, r7
 80066ae:	f7fa faa3 	bl	8000bf8 <__aeabi_d2f>
 80066b2:	f8c8 0000 	str.w	r0, [r8]
 80066b6:	e7c4      	b.n	8006642 <_scanf_float+0x39e>
 80066b8:	2500      	movs	r5, #0
 80066ba:	e634      	b.n	8006326 <_scanf_float+0x82>
 80066bc:	0800b5a8 	.word	0x0800b5a8
 80066c0:	0800b9b0 	.word	0x0800b9b0

080066c4 <nanf>:
 80066c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80066cc <nanf+0x8>
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	7fc00000 	.word	0x7fc00000

080066d0 <siprintf>:
 80066d0:	b40e      	push	{r1, r2, r3}
 80066d2:	b500      	push	{lr}
 80066d4:	b09c      	sub	sp, #112	; 0x70
 80066d6:	ab1d      	add	r3, sp, #116	; 0x74
 80066d8:	9002      	str	r0, [sp, #8]
 80066da:	9006      	str	r0, [sp, #24]
 80066dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066e0:	4809      	ldr	r0, [pc, #36]	; (8006708 <siprintf+0x38>)
 80066e2:	9107      	str	r1, [sp, #28]
 80066e4:	9104      	str	r1, [sp, #16]
 80066e6:	4909      	ldr	r1, [pc, #36]	; (800670c <siprintf+0x3c>)
 80066e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ec:	9105      	str	r1, [sp, #20]
 80066ee:	6800      	ldr	r0, [r0, #0]
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	a902      	add	r1, sp, #8
 80066f4:	f002 ff1e 	bl	8009534 <_svfiprintf_r>
 80066f8:	9b02      	ldr	r3, [sp, #8]
 80066fa:	2200      	movs	r2, #0
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	b01c      	add	sp, #112	; 0x70
 8006700:	f85d eb04 	ldr.w	lr, [sp], #4
 8006704:	b003      	add	sp, #12
 8006706:	4770      	bx	lr
 8006708:	20000010 	.word	0x20000010
 800670c:	ffff0208 	.word	0xffff0208

08006710 <sulp>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4604      	mov	r4, r0
 8006714:	460d      	mov	r5, r1
 8006716:	ec45 4b10 	vmov	d0, r4, r5
 800671a:	4616      	mov	r6, r2
 800671c:	f002 fc68 	bl	8008ff0 <__ulp>
 8006720:	ec51 0b10 	vmov	r0, r1, d0
 8006724:	b17e      	cbz	r6, 8006746 <sulp+0x36>
 8006726:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800672a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800672e:	2b00      	cmp	r3, #0
 8006730:	dd09      	ble.n	8006746 <sulp+0x36>
 8006732:	051b      	lsls	r3, r3, #20
 8006734:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006738:	2400      	movs	r4, #0
 800673a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	f7f9 ff61 	bl	8000608 <__aeabi_dmul>
 8006746:	bd70      	pop	{r4, r5, r6, pc}

08006748 <_strtod_l>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	ed2d 8b02 	vpush	{d8}
 8006750:	b09d      	sub	sp, #116	; 0x74
 8006752:	461f      	mov	r7, r3
 8006754:	2300      	movs	r3, #0
 8006756:	9318      	str	r3, [sp, #96]	; 0x60
 8006758:	4ba2      	ldr	r3, [pc, #648]	; (80069e4 <_strtod_l+0x29c>)
 800675a:	9213      	str	r2, [sp, #76]	; 0x4c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	9305      	str	r3, [sp, #20]
 8006760:	4604      	mov	r4, r0
 8006762:	4618      	mov	r0, r3
 8006764:	4688      	mov	r8, r1
 8006766:	f7f9 fd3b 	bl	80001e0 <strlen>
 800676a:	f04f 0a00 	mov.w	sl, #0
 800676e:	4605      	mov	r5, r0
 8006770:	f04f 0b00 	mov.w	fp, #0
 8006774:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	2a2b      	cmp	r2, #43	; 0x2b
 800677e:	d04e      	beq.n	800681e <_strtod_l+0xd6>
 8006780:	d83b      	bhi.n	80067fa <_strtod_l+0xb2>
 8006782:	2a0d      	cmp	r2, #13
 8006784:	d834      	bhi.n	80067f0 <_strtod_l+0xa8>
 8006786:	2a08      	cmp	r2, #8
 8006788:	d834      	bhi.n	80067f4 <_strtod_l+0xac>
 800678a:	2a00      	cmp	r2, #0
 800678c:	d03e      	beq.n	800680c <_strtod_l+0xc4>
 800678e:	2300      	movs	r3, #0
 8006790:	930a      	str	r3, [sp, #40]	; 0x28
 8006792:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006794:	7833      	ldrb	r3, [r6, #0]
 8006796:	2b30      	cmp	r3, #48	; 0x30
 8006798:	f040 80b0 	bne.w	80068fc <_strtod_l+0x1b4>
 800679c:	7873      	ldrb	r3, [r6, #1]
 800679e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067a2:	2b58      	cmp	r3, #88	; 0x58
 80067a4:	d168      	bne.n	8006878 <_strtod_l+0x130>
 80067a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	ab18      	add	r3, sp, #96	; 0x60
 80067ac:	9702      	str	r7, [sp, #8]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4a8d      	ldr	r2, [pc, #564]	; (80069e8 <_strtod_l+0x2a0>)
 80067b2:	ab19      	add	r3, sp, #100	; 0x64
 80067b4:	a917      	add	r1, sp, #92	; 0x5c
 80067b6:	4620      	mov	r0, r4
 80067b8:	f001 fd74 	bl	80082a4 <__gethex>
 80067bc:	f010 0707 	ands.w	r7, r0, #7
 80067c0:	4605      	mov	r5, r0
 80067c2:	d005      	beq.n	80067d0 <_strtod_l+0x88>
 80067c4:	2f06      	cmp	r7, #6
 80067c6:	d12c      	bne.n	8006822 <_strtod_l+0xda>
 80067c8:	3601      	adds	r6, #1
 80067ca:	2300      	movs	r3, #0
 80067cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80067ce:	930a      	str	r3, [sp, #40]	; 0x28
 80067d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 8590 	bne.w	80072f8 <_strtod_l+0xbb0>
 80067d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067da:	b1eb      	cbz	r3, 8006818 <_strtod_l+0xd0>
 80067dc:	4652      	mov	r2, sl
 80067de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80067e2:	ec43 2b10 	vmov	d0, r2, r3
 80067e6:	b01d      	add	sp, #116	; 0x74
 80067e8:	ecbd 8b02 	vpop	{d8}
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f0:	2a20      	cmp	r2, #32
 80067f2:	d1cc      	bne.n	800678e <_strtod_l+0x46>
 80067f4:	3301      	adds	r3, #1
 80067f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80067f8:	e7be      	b.n	8006778 <_strtod_l+0x30>
 80067fa:	2a2d      	cmp	r2, #45	; 0x2d
 80067fc:	d1c7      	bne.n	800678e <_strtod_l+0x46>
 80067fe:	2201      	movs	r2, #1
 8006800:	920a      	str	r2, [sp, #40]	; 0x28
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	9217      	str	r2, [sp, #92]	; 0x5c
 8006806:	785b      	ldrb	r3, [r3, #1]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1c2      	bne.n	8006792 <_strtod_l+0x4a>
 800680c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800680e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006812:	2b00      	cmp	r3, #0
 8006814:	f040 856e 	bne.w	80072f4 <_strtod_l+0xbac>
 8006818:	4652      	mov	r2, sl
 800681a:	465b      	mov	r3, fp
 800681c:	e7e1      	b.n	80067e2 <_strtod_l+0x9a>
 800681e:	2200      	movs	r2, #0
 8006820:	e7ee      	b.n	8006800 <_strtod_l+0xb8>
 8006822:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006824:	b13a      	cbz	r2, 8006836 <_strtod_l+0xee>
 8006826:	2135      	movs	r1, #53	; 0x35
 8006828:	a81a      	add	r0, sp, #104	; 0x68
 800682a:	f002 fcec 	bl	8009206 <__copybits>
 800682e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006830:	4620      	mov	r0, r4
 8006832:	f002 f8ab 	bl	800898c <_Bfree>
 8006836:	3f01      	subs	r7, #1
 8006838:	2f04      	cmp	r7, #4
 800683a:	d806      	bhi.n	800684a <_strtod_l+0x102>
 800683c:	e8df f007 	tbb	[pc, r7]
 8006840:	1714030a 	.word	0x1714030a
 8006844:	0a          	.byte	0x0a
 8006845:	00          	.byte	0x00
 8006846:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800684a:	0728      	lsls	r0, r5, #28
 800684c:	d5c0      	bpl.n	80067d0 <_strtod_l+0x88>
 800684e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006852:	e7bd      	b.n	80067d0 <_strtod_l+0x88>
 8006854:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006858:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800685a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800685e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006862:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006866:	e7f0      	b.n	800684a <_strtod_l+0x102>
 8006868:	f8df b180 	ldr.w	fp, [pc, #384]	; 80069ec <_strtod_l+0x2a4>
 800686c:	e7ed      	b.n	800684a <_strtod_l+0x102>
 800686e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006872:	f04f 3aff 	mov.w	sl, #4294967295
 8006876:	e7e8      	b.n	800684a <_strtod_l+0x102>
 8006878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	9217      	str	r2, [sp, #92]	; 0x5c
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	2b30      	cmp	r3, #48	; 0x30
 8006882:	d0f9      	beq.n	8006878 <_strtod_l+0x130>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0a3      	beq.n	80067d0 <_strtod_l+0x88>
 8006888:	2301      	movs	r3, #1
 800688a:	f04f 0900 	mov.w	r9, #0
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006892:	9308      	str	r3, [sp, #32]
 8006894:	f8cd 901c 	str.w	r9, [sp, #28]
 8006898:	464f      	mov	r7, r9
 800689a:	220a      	movs	r2, #10
 800689c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800689e:	7806      	ldrb	r6, [r0, #0]
 80068a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80068a4:	b2d9      	uxtb	r1, r3
 80068a6:	2909      	cmp	r1, #9
 80068a8:	d92a      	bls.n	8006900 <_strtod_l+0x1b8>
 80068aa:	9905      	ldr	r1, [sp, #20]
 80068ac:	462a      	mov	r2, r5
 80068ae:	f002 ff5b 	bl	8009768 <strncmp>
 80068b2:	b398      	cbz	r0, 800691c <_strtod_l+0x1d4>
 80068b4:	2000      	movs	r0, #0
 80068b6:	4632      	mov	r2, r6
 80068b8:	463d      	mov	r5, r7
 80068ba:	9005      	str	r0, [sp, #20]
 80068bc:	4603      	mov	r3, r0
 80068be:	2a65      	cmp	r2, #101	; 0x65
 80068c0:	d001      	beq.n	80068c6 <_strtod_l+0x17e>
 80068c2:	2a45      	cmp	r2, #69	; 0x45
 80068c4:	d118      	bne.n	80068f8 <_strtod_l+0x1b0>
 80068c6:	b91d      	cbnz	r5, 80068d0 <_strtod_l+0x188>
 80068c8:	9a04      	ldr	r2, [sp, #16]
 80068ca:	4302      	orrs	r2, r0
 80068cc:	d09e      	beq.n	800680c <_strtod_l+0xc4>
 80068ce:	2500      	movs	r5, #0
 80068d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80068d4:	f108 0201 	add.w	r2, r8, #1
 80068d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80068da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80068de:	2a2b      	cmp	r2, #43	; 0x2b
 80068e0:	d075      	beq.n	80069ce <_strtod_l+0x286>
 80068e2:	2a2d      	cmp	r2, #45	; 0x2d
 80068e4:	d07b      	beq.n	80069de <_strtod_l+0x296>
 80068e6:	f04f 0c00 	mov.w	ip, #0
 80068ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80068ee:	2909      	cmp	r1, #9
 80068f0:	f240 8082 	bls.w	80069f8 <_strtod_l+0x2b0>
 80068f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80068f8:	2600      	movs	r6, #0
 80068fa:	e09d      	b.n	8006a38 <_strtod_l+0x2f0>
 80068fc:	2300      	movs	r3, #0
 80068fe:	e7c4      	b.n	800688a <_strtod_l+0x142>
 8006900:	2f08      	cmp	r7, #8
 8006902:	bfd8      	it	le
 8006904:	9907      	ldrle	r1, [sp, #28]
 8006906:	f100 0001 	add.w	r0, r0, #1
 800690a:	bfda      	itte	le
 800690c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006910:	9307      	strle	r3, [sp, #28]
 8006912:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006916:	3701      	adds	r7, #1
 8006918:	9017      	str	r0, [sp, #92]	; 0x5c
 800691a:	e7bf      	b.n	800689c <_strtod_l+0x154>
 800691c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800691e:	195a      	adds	r2, r3, r5
 8006920:	9217      	str	r2, [sp, #92]	; 0x5c
 8006922:	5d5a      	ldrb	r2, [r3, r5]
 8006924:	2f00      	cmp	r7, #0
 8006926:	d037      	beq.n	8006998 <_strtod_l+0x250>
 8006928:	9005      	str	r0, [sp, #20]
 800692a:	463d      	mov	r5, r7
 800692c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006930:	2b09      	cmp	r3, #9
 8006932:	d912      	bls.n	800695a <_strtod_l+0x212>
 8006934:	2301      	movs	r3, #1
 8006936:	e7c2      	b.n	80068be <_strtod_l+0x176>
 8006938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	9217      	str	r2, [sp, #92]	; 0x5c
 800693e:	785a      	ldrb	r2, [r3, #1]
 8006940:	3001      	adds	r0, #1
 8006942:	2a30      	cmp	r2, #48	; 0x30
 8006944:	d0f8      	beq.n	8006938 <_strtod_l+0x1f0>
 8006946:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800694a:	2b08      	cmp	r3, #8
 800694c:	f200 84d9 	bhi.w	8007302 <_strtod_l+0xbba>
 8006950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006952:	9005      	str	r0, [sp, #20]
 8006954:	2000      	movs	r0, #0
 8006956:	9308      	str	r3, [sp, #32]
 8006958:	4605      	mov	r5, r0
 800695a:	3a30      	subs	r2, #48	; 0x30
 800695c:	f100 0301 	add.w	r3, r0, #1
 8006960:	d014      	beq.n	800698c <_strtod_l+0x244>
 8006962:	9905      	ldr	r1, [sp, #20]
 8006964:	4419      	add	r1, r3
 8006966:	9105      	str	r1, [sp, #20]
 8006968:	462b      	mov	r3, r5
 800696a:	eb00 0e05 	add.w	lr, r0, r5
 800696e:	210a      	movs	r1, #10
 8006970:	4573      	cmp	r3, lr
 8006972:	d113      	bne.n	800699c <_strtod_l+0x254>
 8006974:	182b      	adds	r3, r5, r0
 8006976:	2b08      	cmp	r3, #8
 8006978:	f105 0501 	add.w	r5, r5, #1
 800697c:	4405      	add	r5, r0
 800697e:	dc1c      	bgt.n	80069ba <_strtod_l+0x272>
 8006980:	9907      	ldr	r1, [sp, #28]
 8006982:	230a      	movs	r3, #10
 8006984:	fb03 2301 	mla	r3, r3, r1, r2
 8006988:	9307      	str	r3, [sp, #28]
 800698a:	2300      	movs	r3, #0
 800698c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800698e:	1c51      	adds	r1, r2, #1
 8006990:	9117      	str	r1, [sp, #92]	; 0x5c
 8006992:	7852      	ldrb	r2, [r2, #1]
 8006994:	4618      	mov	r0, r3
 8006996:	e7c9      	b.n	800692c <_strtod_l+0x1e4>
 8006998:	4638      	mov	r0, r7
 800699a:	e7d2      	b.n	8006942 <_strtod_l+0x1fa>
 800699c:	2b08      	cmp	r3, #8
 800699e:	dc04      	bgt.n	80069aa <_strtod_l+0x262>
 80069a0:	9e07      	ldr	r6, [sp, #28]
 80069a2:	434e      	muls	r6, r1
 80069a4:	9607      	str	r6, [sp, #28]
 80069a6:	3301      	adds	r3, #1
 80069a8:	e7e2      	b.n	8006970 <_strtod_l+0x228>
 80069aa:	f103 0c01 	add.w	ip, r3, #1
 80069ae:	f1bc 0f10 	cmp.w	ip, #16
 80069b2:	bfd8      	it	le
 80069b4:	fb01 f909 	mulle.w	r9, r1, r9
 80069b8:	e7f5      	b.n	80069a6 <_strtod_l+0x25e>
 80069ba:	2d10      	cmp	r5, #16
 80069bc:	bfdc      	itt	le
 80069be:	230a      	movle	r3, #10
 80069c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80069c4:	e7e1      	b.n	800698a <_strtod_l+0x242>
 80069c6:	2300      	movs	r3, #0
 80069c8:	9305      	str	r3, [sp, #20]
 80069ca:	2301      	movs	r3, #1
 80069cc:	e77c      	b.n	80068c8 <_strtod_l+0x180>
 80069ce:	f04f 0c00 	mov.w	ip, #0
 80069d2:	f108 0202 	add.w	r2, r8, #2
 80069d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80069d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80069dc:	e785      	b.n	80068ea <_strtod_l+0x1a2>
 80069de:	f04f 0c01 	mov.w	ip, #1
 80069e2:	e7f6      	b.n	80069d2 <_strtod_l+0x28a>
 80069e4:	0800b7f8 	.word	0x0800b7f8
 80069e8:	0800b5b0 	.word	0x0800b5b0
 80069ec:	7ff00000 	.word	0x7ff00000
 80069f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069f2:	1c51      	adds	r1, r2, #1
 80069f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80069f6:	7852      	ldrb	r2, [r2, #1]
 80069f8:	2a30      	cmp	r2, #48	; 0x30
 80069fa:	d0f9      	beq.n	80069f0 <_strtod_l+0x2a8>
 80069fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006a00:	2908      	cmp	r1, #8
 8006a02:	f63f af79 	bhi.w	80068f8 <_strtod_l+0x1b0>
 8006a06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006a0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a0c:	9206      	str	r2, [sp, #24]
 8006a0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a10:	1c51      	adds	r1, r2, #1
 8006a12:	9117      	str	r1, [sp, #92]	; 0x5c
 8006a14:	7852      	ldrb	r2, [r2, #1]
 8006a16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006a1a:	2e09      	cmp	r6, #9
 8006a1c:	d937      	bls.n	8006a8e <_strtod_l+0x346>
 8006a1e:	9e06      	ldr	r6, [sp, #24]
 8006a20:	1b89      	subs	r1, r1, r6
 8006a22:	2908      	cmp	r1, #8
 8006a24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006a28:	dc02      	bgt.n	8006a30 <_strtod_l+0x2e8>
 8006a2a:	4576      	cmp	r6, lr
 8006a2c:	bfa8      	it	ge
 8006a2e:	4676      	movge	r6, lr
 8006a30:	f1bc 0f00 	cmp.w	ip, #0
 8006a34:	d000      	beq.n	8006a38 <_strtod_l+0x2f0>
 8006a36:	4276      	negs	r6, r6
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	d14d      	bne.n	8006ad8 <_strtod_l+0x390>
 8006a3c:	9904      	ldr	r1, [sp, #16]
 8006a3e:	4301      	orrs	r1, r0
 8006a40:	f47f aec6 	bne.w	80067d0 <_strtod_l+0x88>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f47f aee1 	bne.w	800680c <_strtod_l+0xc4>
 8006a4a:	2a69      	cmp	r2, #105	; 0x69
 8006a4c:	d027      	beq.n	8006a9e <_strtod_l+0x356>
 8006a4e:	dc24      	bgt.n	8006a9a <_strtod_l+0x352>
 8006a50:	2a49      	cmp	r2, #73	; 0x49
 8006a52:	d024      	beq.n	8006a9e <_strtod_l+0x356>
 8006a54:	2a4e      	cmp	r2, #78	; 0x4e
 8006a56:	f47f aed9 	bne.w	800680c <_strtod_l+0xc4>
 8006a5a:	499f      	ldr	r1, [pc, #636]	; (8006cd8 <_strtod_l+0x590>)
 8006a5c:	a817      	add	r0, sp, #92	; 0x5c
 8006a5e:	f001 fe79 	bl	8008754 <__match>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	f43f aed2 	beq.w	800680c <_strtod_l+0xc4>
 8006a68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b28      	cmp	r3, #40	; 0x28
 8006a6e:	d12d      	bne.n	8006acc <_strtod_l+0x384>
 8006a70:	499a      	ldr	r1, [pc, #616]	; (8006cdc <_strtod_l+0x594>)
 8006a72:	aa1a      	add	r2, sp, #104	; 0x68
 8006a74:	a817      	add	r0, sp, #92	; 0x5c
 8006a76:	f001 fe81 	bl	800877c <__hexnan>
 8006a7a:	2805      	cmp	r0, #5
 8006a7c:	d126      	bne.n	8006acc <_strtod_l+0x384>
 8006a7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006a84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006a88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006a8c:	e6a0      	b.n	80067d0 <_strtod_l+0x88>
 8006a8e:	210a      	movs	r1, #10
 8006a90:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006a94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006a98:	e7b9      	b.n	8006a0e <_strtod_l+0x2c6>
 8006a9a:	2a6e      	cmp	r2, #110	; 0x6e
 8006a9c:	e7db      	b.n	8006a56 <_strtod_l+0x30e>
 8006a9e:	4990      	ldr	r1, [pc, #576]	; (8006ce0 <_strtod_l+0x598>)
 8006aa0:	a817      	add	r0, sp, #92	; 0x5c
 8006aa2:	f001 fe57 	bl	8008754 <__match>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f43f aeb0 	beq.w	800680c <_strtod_l+0xc4>
 8006aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aae:	498d      	ldr	r1, [pc, #564]	; (8006ce4 <_strtod_l+0x59c>)
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	a817      	add	r0, sp, #92	; 0x5c
 8006ab4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ab6:	f001 fe4d 	bl	8008754 <__match>
 8006aba:	b910      	cbnz	r0, 8006ac2 <_strtod_l+0x37a>
 8006abc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006abe:	3301      	adds	r3, #1
 8006ac0:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ac2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006cf4 <_strtod_l+0x5ac>
 8006ac6:	f04f 0a00 	mov.w	sl, #0
 8006aca:	e681      	b.n	80067d0 <_strtod_l+0x88>
 8006acc:	4886      	ldr	r0, [pc, #536]	; (8006ce8 <_strtod_l+0x5a0>)
 8006ace:	f002 fe33 	bl	8009738 <nan>
 8006ad2:	ec5b ab10 	vmov	sl, fp, d0
 8006ad6:	e67b      	b.n	80067d0 <_strtod_l+0x88>
 8006ad8:	9b05      	ldr	r3, [sp, #20]
 8006ada:	9807      	ldr	r0, [sp, #28]
 8006adc:	1af3      	subs	r3, r6, r3
 8006ade:	2f00      	cmp	r7, #0
 8006ae0:	bf08      	it	eq
 8006ae2:	462f      	moveq	r7, r5
 8006ae4:	2d10      	cmp	r5, #16
 8006ae6:	9306      	str	r3, [sp, #24]
 8006ae8:	46a8      	mov	r8, r5
 8006aea:	bfa8      	it	ge
 8006aec:	f04f 0810 	movge.w	r8, #16
 8006af0:	f7f9 fd10 	bl	8000514 <__aeabi_ui2d>
 8006af4:	2d09      	cmp	r5, #9
 8006af6:	4682      	mov	sl, r0
 8006af8:	468b      	mov	fp, r1
 8006afa:	dd13      	ble.n	8006b24 <_strtod_l+0x3dc>
 8006afc:	4b7b      	ldr	r3, [pc, #492]	; (8006cec <_strtod_l+0x5a4>)
 8006afe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006b02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006b06:	f7f9 fd7f 	bl	8000608 <__aeabi_dmul>
 8006b0a:	4682      	mov	sl, r0
 8006b0c:	4648      	mov	r0, r9
 8006b0e:	468b      	mov	fp, r1
 8006b10:	f7f9 fd00 	bl	8000514 <__aeabi_ui2d>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4650      	mov	r0, sl
 8006b1a:	4659      	mov	r1, fp
 8006b1c:	f7f9 fbbe 	bl	800029c <__adddf3>
 8006b20:	4682      	mov	sl, r0
 8006b22:	468b      	mov	fp, r1
 8006b24:	2d0f      	cmp	r5, #15
 8006b26:	dc38      	bgt.n	8006b9a <_strtod_l+0x452>
 8006b28:	9b06      	ldr	r3, [sp, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f43f ae50 	beq.w	80067d0 <_strtod_l+0x88>
 8006b30:	dd24      	ble.n	8006b7c <_strtod_l+0x434>
 8006b32:	2b16      	cmp	r3, #22
 8006b34:	dc0b      	bgt.n	8006b4e <_strtod_l+0x406>
 8006b36:	496d      	ldr	r1, [pc, #436]	; (8006cec <_strtod_l+0x5a4>)
 8006b38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b40:	4652      	mov	r2, sl
 8006b42:	465b      	mov	r3, fp
 8006b44:	f7f9 fd60 	bl	8000608 <__aeabi_dmul>
 8006b48:	4682      	mov	sl, r0
 8006b4a:	468b      	mov	fp, r1
 8006b4c:	e640      	b.n	80067d0 <_strtod_l+0x88>
 8006b4e:	9a06      	ldr	r2, [sp, #24]
 8006b50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006b54:	4293      	cmp	r3, r2
 8006b56:	db20      	blt.n	8006b9a <_strtod_l+0x452>
 8006b58:	4c64      	ldr	r4, [pc, #400]	; (8006cec <_strtod_l+0x5a4>)
 8006b5a:	f1c5 050f 	rsb	r5, r5, #15
 8006b5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b62:	4652      	mov	r2, sl
 8006b64:	465b      	mov	r3, fp
 8006b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b6a:	f7f9 fd4d 	bl	8000608 <__aeabi_dmul>
 8006b6e:	9b06      	ldr	r3, [sp, #24]
 8006b70:	1b5d      	subs	r5, r3, r5
 8006b72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b7a:	e7e3      	b.n	8006b44 <_strtod_l+0x3fc>
 8006b7c:	9b06      	ldr	r3, [sp, #24]
 8006b7e:	3316      	adds	r3, #22
 8006b80:	db0b      	blt.n	8006b9a <_strtod_l+0x452>
 8006b82:	9b05      	ldr	r3, [sp, #20]
 8006b84:	1b9e      	subs	r6, r3, r6
 8006b86:	4b59      	ldr	r3, [pc, #356]	; (8006cec <_strtod_l+0x5a4>)
 8006b88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006b8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b90:	4650      	mov	r0, sl
 8006b92:	4659      	mov	r1, fp
 8006b94:	f7f9 fe62 	bl	800085c <__aeabi_ddiv>
 8006b98:	e7d6      	b.n	8006b48 <_strtod_l+0x400>
 8006b9a:	9b06      	ldr	r3, [sp, #24]
 8006b9c:	eba5 0808 	sub.w	r8, r5, r8
 8006ba0:	4498      	add	r8, r3
 8006ba2:	f1b8 0f00 	cmp.w	r8, #0
 8006ba6:	dd74      	ble.n	8006c92 <_strtod_l+0x54a>
 8006ba8:	f018 030f 	ands.w	r3, r8, #15
 8006bac:	d00a      	beq.n	8006bc4 <_strtod_l+0x47c>
 8006bae:	494f      	ldr	r1, [pc, #316]	; (8006cec <_strtod_l+0x5a4>)
 8006bb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	465b      	mov	r3, fp
 8006bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bbc:	f7f9 fd24 	bl	8000608 <__aeabi_dmul>
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	468b      	mov	fp, r1
 8006bc4:	f038 080f 	bics.w	r8, r8, #15
 8006bc8:	d04f      	beq.n	8006c6a <_strtod_l+0x522>
 8006bca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006bce:	dd22      	ble.n	8006c16 <_strtod_l+0x4ce>
 8006bd0:	2500      	movs	r5, #0
 8006bd2:	462e      	mov	r6, r5
 8006bd4:	9507      	str	r5, [sp, #28]
 8006bd6:	9505      	str	r5, [sp, #20]
 8006bd8:	2322      	movs	r3, #34	; 0x22
 8006bda:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006cf4 <_strtod_l+0x5ac>
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	f04f 0a00 	mov.w	sl, #0
 8006be4:	9b07      	ldr	r3, [sp, #28]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f43f adf2 	beq.w	80067d0 <_strtod_l+0x88>
 8006bec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f001 fecc 	bl	800898c <_Bfree>
 8006bf4:	9905      	ldr	r1, [sp, #20]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f001 fec8 	bl	800898c <_Bfree>
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f001 fec4 	bl	800898c <_Bfree>
 8006c04:	9907      	ldr	r1, [sp, #28]
 8006c06:	4620      	mov	r0, r4
 8006c08:	f001 fec0 	bl	800898c <_Bfree>
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f001 febc 	bl	800898c <_Bfree>
 8006c14:	e5dc      	b.n	80067d0 <_strtod_l+0x88>
 8006c16:	4b36      	ldr	r3, [pc, #216]	; (8006cf0 <_strtod_l+0x5a8>)
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006c20:	4650      	mov	r0, sl
 8006c22:	4659      	mov	r1, fp
 8006c24:	4699      	mov	r9, r3
 8006c26:	f1b8 0f01 	cmp.w	r8, #1
 8006c2a:	dc21      	bgt.n	8006c70 <_strtod_l+0x528>
 8006c2c:	b10b      	cbz	r3, 8006c32 <_strtod_l+0x4ea>
 8006c2e:	4682      	mov	sl, r0
 8006c30:	468b      	mov	fp, r1
 8006c32:	4b2f      	ldr	r3, [pc, #188]	; (8006cf0 <_strtod_l+0x5a8>)
 8006c34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006c38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006c3c:	4652      	mov	r2, sl
 8006c3e:	465b      	mov	r3, fp
 8006c40:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006c44:	f7f9 fce0 	bl	8000608 <__aeabi_dmul>
 8006c48:	4b2a      	ldr	r3, [pc, #168]	; (8006cf4 <_strtod_l+0x5ac>)
 8006c4a:	460a      	mov	r2, r1
 8006c4c:	400b      	ands	r3, r1
 8006c4e:	492a      	ldr	r1, [pc, #168]	; (8006cf8 <_strtod_l+0x5b0>)
 8006c50:	428b      	cmp	r3, r1
 8006c52:	4682      	mov	sl, r0
 8006c54:	d8bc      	bhi.n	8006bd0 <_strtod_l+0x488>
 8006c56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006c5a:	428b      	cmp	r3, r1
 8006c5c:	bf86      	itte	hi
 8006c5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006cfc <_strtod_l+0x5b4>
 8006c62:	f04f 3aff 	movhi.w	sl, #4294967295
 8006c66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9304      	str	r3, [sp, #16]
 8006c6e:	e084      	b.n	8006d7a <_strtod_l+0x632>
 8006c70:	f018 0f01 	tst.w	r8, #1
 8006c74:	d005      	beq.n	8006c82 <_strtod_l+0x53a>
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f7f9 fcc4 	bl	8000608 <__aeabi_dmul>
 8006c80:	2301      	movs	r3, #1
 8006c82:	9a04      	ldr	r2, [sp, #16]
 8006c84:	3208      	adds	r2, #8
 8006c86:	f109 0901 	add.w	r9, r9, #1
 8006c8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c8e:	9204      	str	r2, [sp, #16]
 8006c90:	e7c9      	b.n	8006c26 <_strtod_l+0x4de>
 8006c92:	d0ea      	beq.n	8006c6a <_strtod_l+0x522>
 8006c94:	f1c8 0800 	rsb	r8, r8, #0
 8006c98:	f018 020f 	ands.w	r2, r8, #15
 8006c9c:	d00a      	beq.n	8006cb4 <_strtod_l+0x56c>
 8006c9e:	4b13      	ldr	r3, [pc, #76]	; (8006cec <_strtod_l+0x5a4>)
 8006ca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ca4:	4650      	mov	r0, sl
 8006ca6:	4659      	mov	r1, fp
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f7f9 fdd6 	bl	800085c <__aeabi_ddiv>
 8006cb0:	4682      	mov	sl, r0
 8006cb2:	468b      	mov	fp, r1
 8006cb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006cb8:	d0d7      	beq.n	8006c6a <_strtod_l+0x522>
 8006cba:	f1b8 0f1f 	cmp.w	r8, #31
 8006cbe:	dd1f      	ble.n	8006d00 <_strtod_l+0x5b8>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	462e      	mov	r6, r5
 8006cc4:	9507      	str	r5, [sp, #28]
 8006cc6:	9505      	str	r5, [sp, #20]
 8006cc8:	2322      	movs	r3, #34	; 0x22
 8006cca:	f04f 0a00 	mov.w	sl, #0
 8006cce:	f04f 0b00 	mov.w	fp, #0
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	e786      	b.n	8006be4 <_strtod_l+0x49c>
 8006cd6:	bf00      	nop
 8006cd8:	0800b581 	.word	0x0800b581
 8006cdc:	0800b5c4 	.word	0x0800b5c4
 8006ce0:	0800b579 	.word	0x0800b579
 8006ce4:	0800b704 	.word	0x0800b704
 8006ce8:	0800b9b0 	.word	0x0800b9b0
 8006cec:	0800b890 	.word	0x0800b890
 8006cf0:	0800b868 	.word	0x0800b868
 8006cf4:	7ff00000 	.word	0x7ff00000
 8006cf8:	7ca00000 	.word	0x7ca00000
 8006cfc:	7fefffff 	.word	0x7fefffff
 8006d00:	f018 0310 	ands.w	r3, r8, #16
 8006d04:	bf18      	it	ne
 8006d06:	236a      	movne	r3, #106	; 0x6a
 8006d08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80070b8 <_strtod_l+0x970>
 8006d0c:	9304      	str	r3, [sp, #16]
 8006d0e:	4650      	mov	r0, sl
 8006d10:	4659      	mov	r1, fp
 8006d12:	2300      	movs	r3, #0
 8006d14:	f018 0f01 	tst.w	r8, #1
 8006d18:	d004      	beq.n	8006d24 <_strtod_l+0x5dc>
 8006d1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d1e:	f7f9 fc73 	bl	8000608 <__aeabi_dmul>
 8006d22:	2301      	movs	r3, #1
 8006d24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006d28:	f109 0908 	add.w	r9, r9, #8
 8006d2c:	d1f2      	bne.n	8006d14 <_strtod_l+0x5cc>
 8006d2e:	b10b      	cbz	r3, 8006d34 <_strtod_l+0x5ec>
 8006d30:	4682      	mov	sl, r0
 8006d32:	468b      	mov	fp, r1
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	b1c3      	cbz	r3, 8006d6a <_strtod_l+0x622>
 8006d38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006d3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	4659      	mov	r1, fp
 8006d44:	dd11      	ble.n	8006d6a <_strtod_l+0x622>
 8006d46:	2b1f      	cmp	r3, #31
 8006d48:	f340 8124 	ble.w	8006f94 <_strtod_l+0x84c>
 8006d4c:	2b34      	cmp	r3, #52	; 0x34
 8006d4e:	bfde      	ittt	le
 8006d50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006d54:	f04f 33ff 	movle.w	r3, #4294967295
 8006d58:	fa03 f202 	lslle.w	r2, r3, r2
 8006d5c:	f04f 0a00 	mov.w	sl, #0
 8006d60:	bfcc      	ite	gt
 8006d62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006d66:	ea02 0b01 	andle.w	fp, r2, r1
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4650      	mov	r0, sl
 8006d70:	4659      	mov	r1, fp
 8006d72:	f7f9 feb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d1a2      	bne.n	8006cc0 <_strtod_l+0x578>
 8006d7a:	9b07      	ldr	r3, [sp, #28]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	9908      	ldr	r1, [sp, #32]
 8006d80:	462b      	mov	r3, r5
 8006d82:	463a      	mov	r2, r7
 8006d84:	4620      	mov	r0, r4
 8006d86:	f001 fe69 	bl	8008a5c <__s2b>
 8006d8a:	9007      	str	r0, [sp, #28]
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	f43f af1f 	beq.w	8006bd0 <_strtod_l+0x488>
 8006d92:	9b05      	ldr	r3, [sp, #20]
 8006d94:	1b9e      	subs	r6, r3, r6
 8006d96:	9b06      	ldr	r3, [sp, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfb4      	ite	lt
 8006d9c:	4633      	movlt	r3, r6
 8006d9e:	2300      	movge	r3, #0
 8006da0:	930c      	str	r3, [sp, #48]	; 0x30
 8006da2:	9b06      	ldr	r3, [sp, #24]
 8006da4:	2500      	movs	r5, #0
 8006da6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006daa:	9312      	str	r3, [sp, #72]	; 0x48
 8006dac:	462e      	mov	r6, r5
 8006dae:	9b07      	ldr	r3, [sp, #28]
 8006db0:	4620      	mov	r0, r4
 8006db2:	6859      	ldr	r1, [r3, #4]
 8006db4:	f001 fdaa 	bl	800890c <_Balloc>
 8006db8:	9005      	str	r0, [sp, #20]
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	f43f af0c 	beq.w	8006bd8 <_strtod_l+0x490>
 8006dc0:	9b07      	ldr	r3, [sp, #28]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	3202      	adds	r2, #2
 8006dc6:	f103 010c 	add.w	r1, r3, #12
 8006dca:	0092      	lsls	r2, r2, #2
 8006dcc:	300c      	adds	r0, #12
 8006dce:	f001 fd8f 	bl	80088f0 <memcpy>
 8006dd2:	ec4b ab10 	vmov	d0, sl, fp
 8006dd6:	aa1a      	add	r2, sp, #104	; 0x68
 8006dd8:	a919      	add	r1, sp, #100	; 0x64
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f002 f984 	bl	80090e8 <__d2b>
 8006de0:	ec4b ab18 	vmov	d8, sl, fp
 8006de4:	9018      	str	r0, [sp, #96]	; 0x60
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f43f aef6 	beq.w	8006bd8 <_strtod_l+0x490>
 8006dec:	2101      	movs	r1, #1
 8006dee:	4620      	mov	r0, r4
 8006df0:	f001 fece 	bl	8008b90 <__i2b>
 8006df4:	4606      	mov	r6, r0
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f43f aeee 	beq.w	8006bd8 <_strtod_l+0x490>
 8006dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dfe:	9904      	ldr	r1, [sp, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bfab      	itete	ge
 8006e04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006e06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006e08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006e0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006e0e:	bfac      	ite	ge
 8006e10:	eb03 0902 	addge.w	r9, r3, r2
 8006e14:	1ad7      	sublt	r7, r2, r3
 8006e16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e18:	eba3 0801 	sub.w	r8, r3, r1
 8006e1c:	4490      	add	r8, r2
 8006e1e:	4ba1      	ldr	r3, [pc, #644]	; (80070a4 <_strtod_l+0x95c>)
 8006e20:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e24:	4598      	cmp	r8, r3
 8006e26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e2a:	f280 80c7 	bge.w	8006fbc <_strtod_l+0x874>
 8006e2e:	eba3 0308 	sub.w	r3, r3, r8
 8006e32:	2b1f      	cmp	r3, #31
 8006e34:	eba2 0203 	sub.w	r2, r2, r3
 8006e38:	f04f 0101 	mov.w	r1, #1
 8006e3c:	f300 80b1 	bgt.w	8006fa2 <_strtod_l+0x85a>
 8006e40:	fa01 f303 	lsl.w	r3, r1, r3
 8006e44:	930d      	str	r3, [sp, #52]	; 0x34
 8006e46:	2300      	movs	r3, #0
 8006e48:	9308      	str	r3, [sp, #32]
 8006e4a:	eb09 0802 	add.w	r8, r9, r2
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	45c1      	cmp	r9, r8
 8006e52:	4417      	add	r7, r2
 8006e54:	441f      	add	r7, r3
 8006e56:	464b      	mov	r3, r9
 8006e58:	bfa8      	it	ge
 8006e5a:	4643      	movge	r3, r8
 8006e5c:	42bb      	cmp	r3, r7
 8006e5e:	bfa8      	it	ge
 8006e60:	463b      	movge	r3, r7
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bfc2      	ittt	gt
 8006e66:	eba8 0803 	subgt.w	r8, r8, r3
 8006e6a:	1aff      	subgt	r7, r7, r3
 8006e6c:	eba9 0903 	subgt.w	r9, r9, r3
 8006e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	dd17      	ble.n	8006ea6 <_strtod_l+0x75e>
 8006e76:	4631      	mov	r1, r6
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f001 ff48 	bl	8008d10 <__pow5mult>
 8006e80:	4606      	mov	r6, r0
 8006e82:	2800      	cmp	r0, #0
 8006e84:	f43f aea8 	beq.w	8006bd8 <_strtod_l+0x490>
 8006e88:	4601      	mov	r1, r0
 8006e8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f001 fe95 	bl	8008bbc <__multiply>
 8006e92:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e94:	2800      	cmp	r0, #0
 8006e96:	f43f ae9f 	beq.w	8006bd8 <_strtod_l+0x490>
 8006e9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f001 fd75 	bl	800898c <_Bfree>
 8006ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea4:	9318      	str	r3, [sp, #96]	; 0x60
 8006ea6:	f1b8 0f00 	cmp.w	r8, #0
 8006eaa:	f300 808c 	bgt.w	8006fc6 <_strtod_l+0x87e>
 8006eae:	9b06      	ldr	r3, [sp, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	dd08      	ble.n	8006ec6 <_strtod_l+0x77e>
 8006eb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006eb6:	9905      	ldr	r1, [sp, #20]
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f001 ff29 	bl	8008d10 <__pow5mult>
 8006ebe:	9005      	str	r0, [sp, #20]
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f43f ae89 	beq.w	8006bd8 <_strtod_l+0x490>
 8006ec6:	2f00      	cmp	r7, #0
 8006ec8:	dd08      	ble.n	8006edc <_strtod_l+0x794>
 8006eca:	9905      	ldr	r1, [sp, #20]
 8006ecc:	463a      	mov	r2, r7
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f001 ff78 	bl	8008dc4 <__lshift>
 8006ed4:	9005      	str	r0, [sp, #20]
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f43f ae7e 	beq.w	8006bd8 <_strtod_l+0x490>
 8006edc:	f1b9 0f00 	cmp.w	r9, #0
 8006ee0:	dd08      	ble.n	8006ef4 <_strtod_l+0x7ac>
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	464a      	mov	r2, r9
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f001 ff6c 	bl	8008dc4 <__lshift>
 8006eec:	4606      	mov	r6, r0
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f43f ae72 	beq.w	8006bd8 <_strtod_l+0x490>
 8006ef4:	9a05      	ldr	r2, [sp, #20]
 8006ef6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f001 ffef 	bl	8008edc <__mdiff>
 8006efe:	4605      	mov	r5, r0
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f43f ae69 	beq.w	8006bd8 <_strtod_l+0x490>
 8006f06:	68c3      	ldr	r3, [r0, #12]
 8006f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60c3      	str	r3, [r0, #12]
 8006f0e:	4631      	mov	r1, r6
 8006f10:	f001 ffc8 	bl	8008ea4 <__mcmp>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	da60      	bge.n	8006fda <_strtod_l+0x892>
 8006f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f1a:	ea53 030a 	orrs.w	r3, r3, sl
 8006f1e:	f040 8082 	bne.w	8007026 <_strtod_l+0x8de>
 8006f22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d17d      	bne.n	8007026 <_strtod_l+0x8de>
 8006f2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f2e:	0d1b      	lsrs	r3, r3, #20
 8006f30:	051b      	lsls	r3, r3, #20
 8006f32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f36:	d976      	bls.n	8007026 <_strtod_l+0x8de>
 8006f38:	696b      	ldr	r3, [r5, #20]
 8006f3a:	b913      	cbnz	r3, 8006f42 <_strtod_l+0x7fa>
 8006f3c:	692b      	ldr	r3, [r5, #16]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	dd71      	ble.n	8007026 <_strtod_l+0x8de>
 8006f42:	4629      	mov	r1, r5
 8006f44:	2201      	movs	r2, #1
 8006f46:	4620      	mov	r0, r4
 8006f48:	f001 ff3c 	bl	8008dc4 <__lshift>
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4605      	mov	r5, r0
 8006f50:	f001 ffa8 	bl	8008ea4 <__mcmp>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	dd66      	ble.n	8007026 <_strtod_l+0x8de>
 8006f58:	9904      	ldr	r1, [sp, #16]
 8006f5a:	4a53      	ldr	r2, [pc, #332]	; (80070a8 <_strtod_l+0x960>)
 8006f5c:	465b      	mov	r3, fp
 8006f5e:	2900      	cmp	r1, #0
 8006f60:	f000 8081 	beq.w	8007066 <_strtod_l+0x91e>
 8006f64:	ea02 010b 	and.w	r1, r2, fp
 8006f68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f6c:	dc7b      	bgt.n	8007066 <_strtod_l+0x91e>
 8006f6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006f72:	f77f aea9 	ble.w	8006cc8 <_strtod_l+0x580>
 8006f76:	4b4d      	ldr	r3, [pc, #308]	; (80070ac <_strtod_l+0x964>)
 8006f78:	4650      	mov	r0, sl
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f7f9 fb43 	bl	8000608 <__aeabi_dmul>
 8006f82:	460b      	mov	r3, r1
 8006f84:	4303      	orrs	r3, r0
 8006f86:	bf08      	it	eq
 8006f88:	2322      	moveq	r3, #34	; 0x22
 8006f8a:	4682      	mov	sl, r0
 8006f8c:	468b      	mov	fp, r1
 8006f8e:	bf08      	it	eq
 8006f90:	6023      	streq	r3, [r4, #0]
 8006f92:	e62b      	b.n	8006bec <_strtod_l+0x4a4>
 8006f94:	f04f 32ff 	mov.w	r2, #4294967295
 8006f98:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9c:	ea03 0a0a 	and.w	sl, r3, sl
 8006fa0:	e6e3      	b.n	8006d6a <_strtod_l+0x622>
 8006fa2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006fa6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006faa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006fae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006fb2:	fa01 f308 	lsl.w	r3, r1, r8
 8006fb6:	9308      	str	r3, [sp, #32]
 8006fb8:	910d      	str	r1, [sp, #52]	; 0x34
 8006fba:	e746      	b.n	8006e4a <_strtod_l+0x702>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9308      	str	r3, [sp, #32]
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8006fc4:	e741      	b.n	8006e4a <_strtod_l+0x702>
 8006fc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006fc8:	4642      	mov	r2, r8
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f001 fefa 	bl	8008dc4 <__lshift>
 8006fd0:	9018      	str	r0, [sp, #96]	; 0x60
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	f47f af6b 	bne.w	8006eae <_strtod_l+0x766>
 8006fd8:	e5fe      	b.n	8006bd8 <_strtod_l+0x490>
 8006fda:	465f      	mov	r7, fp
 8006fdc:	d16e      	bne.n	80070bc <_strtod_l+0x974>
 8006fde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fe4:	b342      	cbz	r2, 8007038 <_strtod_l+0x8f0>
 8006fe6:	4a32      	ldr	r2, [pc, #200]	; (80070b0 <_strtod_l+0x968>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d128      	bne.n	800703e <_strtod_l+0x8f6>
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	4651      	mov	r1, sl
 8006ff0:	b1eb      	cbz	r3, 800702e <_strtod_l+0x8e6>
 8006ff2:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <_strtod_l+0x960>)
 8006ff4:	403b      	ands	r3, r7
 8006ff6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffe:	d819      	bhi.n	8007034 <_strtod_l+0x8ec>
 8007000:	0d1b      	lsrs	r3, r3, #20
 8007002:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	4299      	cmp	r1, r3
 800700c:	d117      	bne.n	800703e <_strtod_l+0x8f6>
 800700e:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <_strtod_l+0x96c>)
 8007010:	429f      	cmp	r7, r3
 8007012:	d102      	bne.n	800701a <_strtod_l+0x8d2>
 8007014:	3101      	adds	r1, #1
 8007016:	f43f addf 	beq.w	8006bd8 <_strtod_l+0x490>
 800701a:	4b23      	ldr	r3, [pc, #140]	; (80070a8 <_strtod_l+0x960>)
 800701c:	403b      	ands	r3, r7
 800701e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007022:	f04f 0a00 	mov.w	sl, #0
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1a4      	bne.n	8006f76 <_strtod_l+0x82e>
 800702c:	e5de      	b.n	8006bec <_strtod_l+0x4a4>
 800702e:	f04f 33ff 	mov.w	r3, #4294967295
 8007032:	e7ea      	b.n	800700a <_strtod_l+0x8c2>
 8007034:	4613      	mov	r3, r2
 8007036:	e7e8      	b.n	800700a <_strtod_l+0x8c2>
 8007038:	ea53 030a 	orrs.w	r3, r3, sl
 800703c:	d08c      	beq.n	8006f58 <_strtod_l+0x810>
 800703e:	9b08      	ldr	r3, [sp, #32]
 8007040:	b1db      	cbz	r3, 800707a <_strtod_l+0x932>
 8007042:	423b      	tst	r3, r7
 8007044:	d0ef      	beq.n	8007026 <_strtod_l+0x8de>
 8007046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007048:	9a04      	ldr	r2, [sp, #16]
 800704a:	4650      	mov	r0, sl
 800704c:	4659      	mov	r1, fp
 800704e:	b1c3      	cbz	r3, 8007082 <_strtod_l+0x93a>
 8007050:	f7ff fb5e 	bl	8006710 <sulp>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	ec51 0b18 	vmov	r0, r1, d8
 800705c:	f7f9 f91e 	bl	800029c <__adddf3>
 8007060:	4682      	mov	sl, r0
 8007062:	468b      	mov	fp, r1
 8007064:	e7df      	b.n	8007026 <_strtod_l+0x8de>
 8007066:	4013      	ands	r3, r2
 8007068:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800706c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007070:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007074:	f04f 3aff 	mov.w	sl, #4294967295
 8007078:	e7d5      	b.n	8007026 <_strtod_l+0x8de>
 800707a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800707c:	ea13 0f0a 	tst.w	r3, sl
 8007080:	e7e0      	b.n	8007044 <_strtod_l+0x8fc>
 8007082:	f7ff fb45 	bl	8006710 <sulp>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	ec51 0b18 	vmov	r0, r1, d8
 800708e:	f7f9 f903 	bl	8000298 <__aeabi_dsub>
 8007092:	2200      	movs	r2, #0
 8007094:	2300      	movs	r3, #0
 8007096:	4682      	mov	sl, r0
 8007098:	468b      	mov	fp, r1
 800709a:	f7f9 fd1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d0c1      	beq.n	8007026 <_strtod_l+0x8de>
 80070a2:	e611      	b.n	8006cc8 <_strtod_l+0x580>
 80070a4:	fffffc02 	.word	0xfffffc02
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	39500000 	.word	0x39500000
 80070b0:	000fffff 	.word	0x000fffff
 80070b4:	7fefffff 	.word	0x7fefffff
 80070b8:	0800b5d8 	.word	0x0800b5d8
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	f002 f86e 	bl	80091a0 <__ratio>
 80070c4:	ec59 8b10 	vmov	r8, r9, d0
 80070c8:	ee10 0a10 	vmov	r0, s0
 80070cc:	2200      	movs	r2, #0
 80070ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070d2:	4649      	mov	r1, r9
 80070d4:	f7f9 fd14 	bl	8000b00 <__aeabi_dcmple>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d07a      	beq.n	80071d2 <_strtod_l+0xa8a>
 80070dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d04a      	beq.n	8007178 <_strtod_l+0xa30>
 80070e2:	4b95      	ldr	r3, [pc, #596]	; (8007338 <_strtod_l+0xbf0>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80070ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007338 <_strtod_l+0xbf0>
 80070ee:	f04f 0800 	mov.w	r8, #0
 80070f2:	4b92      	ldr	r3, [pc, #584]	; (800733c <_strtod_l+0xbf4>)
 80070f4:	403b      	ands	r3, r7
 80070f6:	930d      	str	r3, [sp, #52]	; 0x34
 80070f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070fa:	4b91      	ldr	r3, [pc, #580]	; (8007340 <_strtod_l+0xbf8>)
 80070fc:	429a      	cmp	r2, r3
 80070fe:	f040 80b0 	bne.w	8007262 <_strtod_l+0xb1a>
 8007102:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007106:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800710a:	ec4b ab10 	vmov	d0, sl, fp
 800710e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007112:	f001 ff6d 	bl	8008ff0 <__ulp>
 8007116:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800711a:	ec53 2b10 	vmov	r2, r3, d0
 800711e:	f7f9 fa73 	bl	8000608 <__aeabi_dmul>
 8007122:	4652      	mov	r2, sl
 8007124:	465b      	mov	r3, fp
 8007126:	f7f9 f8b9 	bl	800029c <__adddf3>
 800712a:	460b      	mov	r3, r1
 800712c:	4983      	ldr	r1, [pc, #524]	; (800733c <_strtod_l+0xbf4>)
 800712e:	4a85      	ldr	r2, [pc, #532]	; (8007344 <_strtod_l+0xbfc>)
 8007130:	4019      	ands	r1, r3
 8007132:	4291      	cmp	r1, r2
 8007134:	4682      	mov	sl, r0
 8007136:	d960      	bls.n	80071fa <_strtod_l+0xab2>
 8007138:	ee18 3a90 	vmov	r3, s17
 800713c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007140:	4293      	cmp	r3, r2
 8007142:	d104      	bne.n	800714e <_strtod_l+0xa06>
 8007144:	ee18 3a10 	vmov	r3, s16
 8007148:	3301      	adds	r3, #1
 800714a:	f43f ad45 	beq.w	8006bd8 <_strtod_l+0x490>
 800714e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007350 <_strtod_l+0xc08>
 8007152:	f04f 3aff 	mov.w	sl, #4294967295
 8007156:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007158:	4620      	mov	r0, r4
 800715a:	f001 fc17 	bl	800898c <_Bfree>
 800715e:	9905      	ldr	r1, [sp, #20]
 8007160:	4620      	mov	r0, r4
 8007162:	f001 fc13 	bl	800898c <_Bfree>
 8007166:	4631      	mov	r1, r6
 8007168:	4620      	mov	r0, r4
 800716a:	f001 fc0f 	bl	800898c <_Bfree>
 800716e:	4629      	mov	r1, r5
 8007170:	4620      	mov	r0, r4
 8007172:	f001 fc0b 	bl	800898c <_Bfree>
 8007176:	e61a      	b.n	8006dae <_strtod_l+0x666>
 8007178:	f1ba 0f00 	cmp.w	sl, #0
 800717c:	d11b      	bne.n	80071b6 <_strtod_l+0xa6e>
 800717e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007182:	b9f3      	cbnz	r3, 80071c2 <_strtod_l+0xa7a>
 8007184:	4b6c      	ldr	r3, [pc, #432]	; (8007338 <_strtod_l+0xbf0>)
 8007186:	2200      	movs	r2, #0
 8007188:	4640      	mov	r0, r8
 800718a:	4649      	mov	r1, r9
 800718c:	f7f9 fcae 	bl	8000aec <__aeabi_dcmplt>
 8007190:	b9d0      	cbnz	r0, 80071c8 <_strtod_l+0xa80>
 8007192:	4640      	mov	r0, r8
 8007194:	4649      	mov	r1, r9
 8007196:	4b6c      	ldr	r3, [pc, #432]	; (8007348 <_strtod_l+0xc00>)
 8007198:	2200      	movs	r2, #0
 800719a:	f7f9 fa35 	bl	8000608 <__aeabi_dmul>
 800719e:	4680      	mov	r8, r0
 80071a0:	4689      	mov	r9, r1
 80071a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80071aa:	9315      	str	r3, [sp, #84]	; 0x54
 80071ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80071b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80071b4:	e79d      	b.n	80070f2 <_strtod_l+0x9aa>
 80071b6:	f1ba 0f01 	cmp.w	sl, #1
 80071ba:	d102      	bne.n	80071c2 <_strtod_l+0xa7a>
 80071bc:	2f00      	cmp	r7, #0
 80071be:	f43f ad83 	beq.w	8006cc8 <_strtod_l+0x580>
 80071c2:	4b62      	ldr	r3, [pc, #392]	; (800734c <_strtod_l+0xc04>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	e78e      	b.n	80070e6 <_strtod_l+0x99e>
 80071c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007348 <_strtod_l+0xc00>
 80071cc:	f04f 0800 	mov.w	r8, #0
 80071d0:	e7e7      	b.n	80071a2 <_strtod_l+0xa5a>
 80071d2:	4b5d      	ldr	r3, [pc, #372]	; (8007348 <_strtod_l+0xc00>)
 80071d4:	4640      	mov	r0, r8
 80071d6:	4649      	mov	r1, r9
 80071d8:	2200      	movs	r2, #0
 80071da:	f7f9 fa15 	bl	8000608 <__aeabi_dmul>
 80071de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e0:	4680      	mov	r8, r0
 80071e2:	4689      	mov	r9, r1
 80071e4:	b933      	cbnz	r3, 80071f4 <_strtod_l+0xaac>
 80071e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ea:	900e      	str	r0, [sp, #56]	; 0x38
 80071ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80071f2:	e7dd      	b.n	80071b0 <_strtod_l+0xa68>
 80071f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80071f8:	e7f9      	b.n	80071ee <_strtod_l+0xaa6>
 80071fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80071fe:	9b04      	ldr	r3, [sp, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1a8      	bne.n	8007156 <_strtod_l+0xa0e>
 8007204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800720a:	0d1b      	lsrs	r3, r3, #20
 800720c:	051b      	lsls	r3, r3, #20
 800720e:	429a      	cmp	r2, r3
 8007210:	d1a1      	bne.n	8007156 <_strtod_l+0xa0e>
 8007212:	4640      	mov	r0, r8
 8007214:	4649      	mov	r1, r9
 8007216:	f7f9 fd57 	bl	8000cc8 <__aeabi_d2lz>
 800721a:	f7f9 f9c7 	bl	80005ac <__aeabi_l2d>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4640      	mov	r0, r8
 8007224:	4649      	mov	r1, r9
 8007226:	f7f9 f837 	bl	8000298 <__aeabi_dsub>
 800722a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800722c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007230:	ea43 030a 	orr.w	r3, r3, sl
 8007234:	4313      	orrs	r3, r2
 8007236:	4680      	mov	r8, r0
 8007238:	4689      	mov	r9, r1
 800723a:	d055      	beq.n	80072e8 <_strtod_l+0xba0>
 800723c:	a336      	add	r3, pc, #216	; (adr r3, 8007318 <_strtod_l+0xbd0>)
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f7f9 fc53 	bl	8000aec <__aeabi_dcmplt>
 8007246:	2800      	cmp	r0, #0
 8007248:	f47f acd0 	bne.w	8006bec <_strtod_l+0x4a4>
 800724c:	a334      	add	r3, pc, #208	; (adr r3, 8007320 <_strtod_l+0xbd8>)
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	4640      	mov	r0, r8
 8007254:	4649      	mov	r1, r9
 8007256:	f7f9 fc67 	bl	8000b28 <__aeabi_dcmpgt>
 800725a:	2800      	cmp	r0, #0
 800725c:	f43f af7b 	beq.w	8007156 <_strtod_l+0xa0e>
 8007260:	e4c4      	b.n	8006bec <_strtod_l+0x4a4>
 8007262:	9b04      	ldr	r3, [sp, #16]
 8007264:	b333      	cbz	r3, 80072b4 <_strtod_l+0xb6c>
 8007266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007268:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800726c:	d822      	bhi.n	80072b4 <_strtod_l+0xb6c>
 800726e:	a32e      	add	r3, pc, #184	; (adr r3, 8007328 <_strtod_l+0xbe0>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	4640      	mov	r0, r8
 8007276:	4649      	mov	r1, r9
 8007278:	f7f9 fc42 	bl	8000b00 <__aeabi_dcmple>
 800727c:	b1a0      	cbz	r0, 80072a8 <_strtod_l+0xb60>
 800727e:	4649      	mov	r1, r9
 8007280:	4640      	mov	r0, r8
 8007282:	f7f9 fc99 	bl	8000bb8 <__aeabi_d2uiz>
 8007286:	2801      	cmp	r0, #1
 8007288:	bf38      	it	cc
 800728a:	2001      	movcc	r0, #1
 800728c:	f7f9 f942 	bl	8000514 <__aeabi_ui2d>
 8007290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007292:	4680      	mov	r8, r0
 8007294:	4689      	mov	r9, r1
 8007296:	bb23      	cbnz	r3, 80072e2 <_strtod_l+0xb9a>
 8007298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800729c:	9010      	str	r0, [sp, #64]	; 0x40
 800729e:	9311      	str	r3, [sp, #68]	; 0x44
 80072a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80072b0:	1a9b      	subs	r3, r3, r2
 80072b2:	9309      	str	r3, [sp, #36]	; 0x24
 80072b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072b8:	eeb0 0a48 	vmov.f32	s0, s16
 80072bc:	eef0 0a68 	vmov.f32	s1, s17
 80072c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072c4:	f001 fe94 	bl	8008ff0 <__ulp>
 80072c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072cc:	ec53 2b10 	vmov	r2, r3, d0
 80072d0:	f7f9 f99a 	bl	8000608 <__aeabi_dmul>
 80072d4:	ec53 2b18 	vmov	r2, r3, d8
 80072d8:	f7f8 ffe0 	bl	800029c <__adddf3>
 80072dc:	4682      	mov	sl, r0
 80072de:	468b      	mov	fp, r1
 80072e0:	e78d      	b.n	80071fe <_strtod_l+0xab6>
 80072e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80072e6:	e7db      	b.n	80072a0 <_strtod_l+0xb58>
 80072e8:	a311      	add	r3, pc, #68	; (adr r3, 8007330 <_strtod_l+0xbe8>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f7f9 fbfd 	bl	8000aec <__aeabi_dcmplt>
 80072f2:	e7b2      	b.n	800725a <_strtod_l+0xb12>
 80072f4:	2300      	movs	r3, #0
 80072f6:	930a      	str	r3, [sp, #40]	; 0x28
 80072f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	f7ff ba6b 	b.w	80067d8 <_strtod_l+0x90>
 8007302:	2a65      	cmp	r2, #101	; 0x65
 8007304:	f43f ab5f 	beq.w	80069c6 <_strtod_l+0x27e>
 8007308:	2a45      	cmp	r2, #69	; 0x45
 800730a:	f43f ab5c 	beq.w	80069c6 <_strtod_l+0x27e>
 800730e:	2301      	movs	r3, #1
 8007310:	f7ff bb94 	b.w	8006a3c <_strtod_l+0x2f4>
 8007314:	f3af 8000 	nop.w
 8007318:	94a03595 	.word	0x94a03595
 800731c:	3fdfffff 	.word	0x3fdfffff
 8007320:	35afe535 	.word	0x35afe535
 8007324:	3fe00000 	.word	0x3fe00000
 8007328:	ffc00000 	.word	0xffc00000
 800732c:	41dfffff 	.word	0x41dfffff
 8007330:	94a03595 	.word	0x94a03595
 8007334:	3fcfffff 	.word	0x3fcfffff
 8007338:	3ff00000 	.word	0x3ff00000
 800733c:	7ff00000 	.word	0x7ff00000
 8007340:	7fe00000 	.word	0x7fe00000
 8007344:	7c9fffff 	.word	0x7c9fffff
 8007348:	3fe00000 	.word	0x3fe00000
 800734c:	bff00000 	.word	0xbff00000
 8007350:	7fefffff 	.word	0x7fefffff

08007354 <_strtod_r>:
 8007354:	4b01      	ldr	r3, [pc, #4]	; (800735c <_strtod_r+0x8>)
 8007356:	f7ff b9f7 	b.w	8006748 <_strtod_l>
 800735a:	bf00      	nop
 800735c:	20000078 	.word	0x20000078

08007360 <_strtol_l.constprop.0>:
 8007360:	2b01      	cmp	r3, #1
 8007362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007366:	d001      	beq.n	800736c <_strtol_l.constprop.0+0xc>
 8007368:	2b24      	cmp	r3, #36	; 0x24
 800736a:	d906      	bls.n	800737a <_strtol_l.constprop.0+0x1a>
 800736c:	f7fe fafe 	bl	800596c <__errno>
 8007370:	2316      	movs	r3, #22
 8007372:	6003      	str	r3, [r0, #0]
 8007374:	2000      	movs	r0, #0
 8007376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007460 <_strtol_l.constprop.0+0x100>
 800737e:	460d      	mov	r5, r1
 8007380:	462e      	mov	r6, r5
 8007382:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007386:	f814 700c 	ldrb.w	r7, [r4, ip]
 800738a:	f017 0708 	ands.w	r7, r7, #8
 800738e:	d1f7      	bne.n	8007380 <_strtol_l.constprop.0+0x20>
 8007390:	2c2d      	cmp	r4, #45	; 0x2d
 8007392:	d132      	bne.n	80073fa <_strtol_l.constprop.0+0x9a>
 8007394:	782c      	ldrb	r4, [r5, #0]
 8007396:	2701      	movs	r7, #1
 8007398:	1cb5      	adds	r5, r6, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d05b      	beq.n	8007456 <_strtol_l.constprop.0+0xf6>
 800739e:	2b10      	cmp	r3, #16
 80073a0:	d109      	bne.n	80073b6 <_strtol_l.constprop.0+0x56>
 80073a2:	2c30      	cmp	r4, #48	; 0x30
 80073a4:	d107      	bne.n	80073b6 <_strtol_l.constprop.0+0x56>
 80073a6:	782c      	ldrb	r4, [r5, #0]
 80073a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80073ac:	2c58      	cmp	r4, #88	; 0x58
 80073ae:	d14d      	bne.n	800744c <_strtol_l.constprop.0+0xec>
 80073b0:	786c      	ldrb	r4, [r5, #1]
 80073b2:	2310      	movs	r3, #16
 80073b4:	3502      	adds	r5, #2
 80073b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80073ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80073be:	f04f 0c00 	mov.w	ip, #0
 80073c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80073c6:	4666      	mov	r6, ip
 80073c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80073cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80073d0:	f1be 0f09 	cmp.w	lr, #9
 80073d4:	d816      	bhi.n	8007404 <_strtol_l.constprop.0+0xa4>
 80073d6:	4674      	mov	r4, lr
 80073d8:	42a3      	cmp	r3, r4
 80073da:	dd24      	ble.n	8007426 <_strtol_l.constprop.0+0xc6>
 80073dc:	f1bc 0f00 	cmp.w	ip, #0
 80073e0:	db1e      	blt.n	8007420 <_strtol_l.constprop.0+0xc0>
 80073e2:	45b1      	cmp	r9, r6
 80073e4:	d31c      	bcc.n	8007420 <_strtol_l.constprop.0+0xc0>
 80073e6:	d101      	bne.n	80073ec <_strtol_l.constprop.0+0x8c>
 80073e8:	45a2      	cmp	sl, r4
 80073ea:	db19      	blt.n	8007420 <_strtol_l.constprop.0+0xc0>
 80073ec:	fb06 4603 	mla	r6, r6, r3, r4
 80073f0:	f04f 0c01 	mov.w	ip, #1
 80073f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073f8:	e7e8      	b.n	80073cc <_strtol_l.constprop.0+0x6c>
 80073fa:	2c2b      	cmp	r4, #43	; 0x2b
 80073fc:	bf04      	itt	eq
 80073fe:	782c      	ldrbeq	r4, [r5, #0]
 8007400:	1cb5      	addeq	r5, r6, #2
 8007402:	e7ca      	b.n	800739a <_strtol_l.constprop.0+0x3a>
 8007404:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007408:	f1be 0f19 	cmp.w	lr, #25
 800740c:	d801      	bhi.n	8007412 <_strtol_l.constprop.0+0xb2>
 800740e:	3c37      	subs	r4, #55	; 0x37
 8007410:	e7e2      	b.n	80073d8 <_strtol_l.constprop.0+0x78>
 8007412:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007416:	f1be 0f19 	cmp.w	lr, #25
 800741a:	d804      	bhi.n	8007426 <_strtol_l.constprop.0+0xc6>
 800741c:	3c57      	subs	r4, #87	; 0x57
 800741e:	e7db      	b.n	80073d8 <_strtol_l.constprop.0+0x78>
 8007420:	f04f 3cff 	mov.w	ip, #4294967295
 8007424:	e7e6      	b.n	80073f4 <_strtol_l.constprop.0+0x94>
 8007426:	f1bc 0f00 	cmp.w	ip, #0
 800742a:	da05      	bge.n	8007438 <_strtol_l.constprop.0+0xd8>
 800742c:	2322      	movs	r3, #34	; 0x22
 800742e:	6003      	str	r3, [r0, #0]
 8007430:	4646      	mov	r6, r8
 8007432:	b942      	cbnz	r2, 8007446 <_strtol_l.constprop.0+0xe6>
 8007434:	4630      	mov	r0, r6
 8007436:	e79e      	b.n	8007376 <_strtol_l.constprop.0+0x16>
 8007438:	b107      	cbz	r7, 800743c <_strtol_l.constprop.0+0xdc>
 800743a:	4276      	negs	r6, r6
 800743c:	2a00      	cmp	r2, #0
 800743e:	d0f9      	beq.n	8007434 <_strtol_l.constprop.0+0xd4>
 8007440:	f1bc 0f00 	cmp.w	ip, #0
 8007444:	d000      	beq.n	8007448 <_strtol_l.constprop.0+0xe8>
 8007446:	1e69      	subs	r1, r5, #1
 8007448:	6011      	str	r1, [r2, #0]
 800744a:	e7f3      	b.n	8007434 <_strtol_l.constprop.0+0xd4>
 800744c:	2430      	movs	r4, #48	; 0x30
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1b1      	bne.n	80073b6 <_strtol_l.constprop.0+0x56>
 8007452:	2308      	movs	r3, #8
 8007454:	e7af      	b.n	80073b6 <_strtol_l.constprop.0+0x56>
 8007456:	2c30      	cmp	r4, #48	; 0x30
 8007458:	d0a5      	beq.n	80073a6 <_strtol_l.constprop.0+0x46>
 800745a:	230a      	movs	r3, #10
 800745c:	e7ab      	b.n	80073b6 <_strtol_l.constprop.0+0x56>
 800745e:	bf00      	nop
 8007460:	0800b601 	.word	0x0800b601

08007464 <_strtol_r>:
 8007464:	f7ff bf7c 	b.w	8007360 <_strtol_l.constprop.0>

08007468 <_vsniprintf_r>:
 8007468:	b530      	push	{r4, r5, lr}
 800746a:	4614      	mov	r4, r2
 800746c:	2c00      	cmp	r4, #0
 800746e:	b09b      	sub	sp, #108	; 0x6c
 8007470:	4605      	mov	r5, r0
 8007472:	461a      	mov	r2, r3
 8007474:	da05      	bge.n	8007482 <_vsniprintf_r+0x1a>
 8007476:	238b      	movs	r3, #139	; 0x8b
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	f04f 30ff 	mov.w	r0, #4294967295
 800747e:	b01b      	add	sp, #108	; 0x6c
 8007480:	bd30      	pop	{r4, r5, pc}
 8007482:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007486:	f8ad 300c 	strh.w	r3, [sp, #12]
 800748a:	bf14      	ite	ne
 800748c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007490:	4623      	moveq	r3, r4
 8007492:	9302      	str	r3, [sp, #8]
 8007494:	9305      	str	r3, [sp, #20]
 8007496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800749a:	9100      	str	r1, [sp, #0]
 800749c:	9104      	str	r1, [sp, #16]
 800749e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80074a2:	4669      	mov	r1, sp
 80074a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80074a6:	f002 f845 	bl	8009534 <_svfiprintf_r>
 80074aa:	1c43      	adds	r3, r0, #1
 80074ac:	bfbc      	itt	lt
 80074ae:	238b      	movlt	r3, #139	; 0x8b
 80074b0:	602b      	strlt	r3, [r5, #0]
 80074b2:	2c00      	cmp	r4, #0
 80074b4:	d0e3      	beq.n	800747e <_vsniprintf_r+0x16>
 80074b6:	9b00      	ldr	r3, [sp, #0]
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e7df      	b.n	800747e <_vsniprintf_r+0x16>
	...

080074c0 <vsniprintf>:
 80074c0:	b507      	push	{r0, r1, r2, lr}
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	4613      	mov	r3, r2
 80074c6:	460a      	mov	r2, r1
 80074c8:	4601      	mov	r1, r0
 80074ca:	4803      	ldr	r0, [pc, #12]	; (80074d8 <vsniprintf+0x18>)
 80074cc:	6800      	ldr	r0, [r0, #0]
 80074ce:	f7ff ffcb 	bl	8007468 <_vsniprintf_r>
 80074d2:	b003      	add	sp, #12
 80074d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80074d8:	20000010 	.word	0x20000010

080074dc <quorem>:
 80074dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	6903      	ldr	r3, [r0, #16]
 80074e2:	690c      	ldr	r4, [r1, #16]
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	4607      	mov	r7, r0
 80074e8:	f2c0 8081 	blt.w	80075ee <quorem+0x112>
 80074ec:	3c01      	subs	r4, #1
 80074ee:	f101 0814 	add.w	r8, r1, #20
 80074f2:	f100 0514 	add.w	r5, r0, #20
 80074f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007504:	3301      	adds	r3, #1
 8007506:	429a      	cmp	r2, r3
 8007508:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800750c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007510:	fbb2 f6f3 	udiv	r6, r2, r3
 8007514:	d331      	bcc.n	800757a <quorem+0x9e>
 8007516:	f04f 0e00 	mov.w	lr, #0
 800751a:	4640      	mov	r0, r8
 800751c:	46ac      	mov	ip, r5
 800751e:	46f2      	mov	sl, lr
 8007520:	f850 2b04 	ldr.w	r2, [r0], #4
 8007524:	b293      	uxth	r3, r2
 8007526:	fb06 e303 	mla	r3, r6, r3, lr
 800752a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800752e:	b29b      	uxth	r3, r3
 8007530:	ebaa 0303 	sub.w	r3, sl, r3
 8007534:	f8dc a000 	ldr.w	sl, [ip]
 8007538:	0c12      	lsrs	r2, r2, #16
 800753a:	fa13 f38a 	uxtah	r3, r3, sl
 800753e:	fb06 e202 	mla	r2, r6, r2, lr
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	9b00      	ldr	r3, [sp, #0]
 8007546:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800754a:	b292      	uxth	r2, r2
 800754c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007554:	f8bd 3000 	ldrh.w	r3, [sp]
 8007558:	4581      	cmp	r9, r0
 800755a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800755e:	f84c 3b04 	str.w	r3, [ip], #4
 8007562:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007566:	d2db      	bcs.n	8007520 <quorem+0x44>
 8007568:	f855 300b 	ldr.w	r3, [r5, fp]
 800756c:	b92b      	cbnz	r3, 800757a <quorem+0x9e>
 800756e:	9b01      	ldr	r3, [sp, #4]
 8007570:	3b04      	subs	r3, #4
 8007572:	429d      	cmp	r5, r3
 8007574:	461a      	mov	r2, r3
 8007576:	d32e      	bcc.n	80075d6 <quorem+0xfa>
 8007578:	613c      	str	r4, [r7, #16]
 800757a:	4638      	mov	r0, r7
 800757c:	f001 fc92 	bl	8008ea4 <__mcmp>
 8007580:	2800      	cmp	r0, #0
 8007582:	db24      	blt.n	80075ce <quorem+0xf2>
 8007584:	3601      	adds	r6, #1
 8007586:	4628      	mov	r0, r5
 8007588:	f04f 0c00 	mov.w	ip, #0
 800758c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007590:	f8d0 e000 	ldr.w	lr, [r0]
 8007594:	b293      	uxth	r3, r2
 8007596:	ebac 0303 	sub.w	r3, ip, r3
 800759a:	0c12      	lsrs	r2, r2, #16
 800759c:	fa13 f38e 	uxtah	r3, r3, lr
 80075a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ae:	45c1      	cmp	r9, r8
 80075b0:	f840 3b04 	str.w	r3, [r0], #4
 80075b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075b8:	d2e8      	bcs.n	800758c <quorem+0xb0>
 80075ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075c2:	b922      	cbnz	r2, 80075ce <quorem+0xf2>
 80075c4:	3b04      	subs	r3, #4
 80075c6:	429d      	cmp	r5, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	d30a      	bcc.n	80075e2 <quorem+0x106>
 80075cc:	613c      	str	r4, [r7, #16]
 80075ce:	4630      	mov	r0, r6
 80075d0:	b003      	add	sp, #12
 80075d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	3b04      	subs	r3, #4
 80075da:	2a00      	cmp	r2, #0
 80075dc:	d1cc      	bne.n	8007578 <quorem+0x9c>
 80075de:	3c01      	subs	r4, #1
 80075e0:	e7c7      	b.n	8007572 <quorem+0x96>
 80075e2:	6812      	ldr	r2, [r2, #0]
 80075e4:	3b04      	subs	r3, #4
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	d1f0      	bne.n	80075cc <quorem+0xf0>
 80075ea:	3c01      	subs	r4, #1
 80075ec:	e7eb      	b.n	80075c6 <quorem+0xea>
 80075ee:	2000      	movs	r0, #0
 80075f0:	e7ee      	b.n	80075d0 <quorem+0xf4>
 80075f2:	0000      	movs	r0, r0
 80075f4:	0000      	movs	r0, r0
	...

080075f8 <_dtoa_r>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	ed2d 8b04 	vpush	{d8-d9}
 8007600:	ec57 6b10 	vmov	r6, r7, d0
 8007604:	b093      	sub	sp, #76	; 0x4c
 8007606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007608:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800760c:	9106      	str	r1, [sp, #24]
 800760e:	ee10 aa10 	vmov	sl, s0
 8007612:	4604      	mov	r4, r0
 8007614:	9209      	str	r2, [sp, #36]	; 0x24
 8007616:	930c      	str	r3, [sp, #48]	; 0x30
 8007618:	46bb      	mov	fp, r7
 800761a:	b975      	cbnz	r5, 800763a <_dtoa_r+0x42>
 800761c:	2010      	movs	r0, #16
 800761e:	f001 f94d 	bl	80088bc <malloc>
 8007622:	4602      	mov	r2, r0
 8007624:	6260      	str	r0, [r4, #36]	; 0x24
 8007626:	b920      	cbnz	r0, 8007632 <_dtoa_r+0x3a>
 8007628:	4ba7      	ldr	r3, [pc, #668]	; (80078c8 <_dtoa_r+0x2d0>)
 800762a:	21ea      	movs	r1, #234	; 0xea
 800762c:	48a7      	ldr	r0, [pc, #668]	; (80078cc <_dtoa_r+0x2d4>)
 800762e:	f002 f8bd 	bl	80097ac <__assert_func>
 8007632:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007636:	6005      	str	r5, [r0, #0]
 8007638:	60c5      	str	r5, [r0, #12]
 800763a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800763c:	6819      	ldr	r1, [r3, #0]
 800763e:	b151      	cbz	r1, 8007656 <_dtoa_r+0x5e>
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	604a      	str	r2, [r1, #4]
 8007644:	2301      	movs	r3, #1
 8007646:	4093      	lsls	r3, r2
 8007648:	608b      	str	r3, [r1, #8]
 800764a:	4620      	mov	r0, r4
 800764c:	f001 f99e 	bl	800898c <_Bfree>
 8007650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	1e3b      	subs	r3, r7, #0
 8007658:	bfaa      	itet	ge
 800765a:	2300      	movge	r3, #0
 800765c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007660:	f8c8 3000 	strge.w	r3, [r8]
 8007664:	4b9a      	ldr	r3, [pc, #616]	; (80078d0 <_dtoa_r+0x2d8>)
 8007666:	bfbc      	itt	lt
 8007668:	2201      	movlt	r2, #1
 800766a:	f8c8 2000 	strlt.w	r2, [r8]
 800766e:	ea33 030b 	bics.w	r3, r3, fp
 8007672:	d11b      	bne.n	80076ac <_dtoa_r+0xb4>
 8007674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007676:	f242 730f 	movw	r3, #9999	; 0x270f
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007680:	4333      	orrs	r3, r6
 8007682:	f000 8592 	beq.w	80081aa <_dtoa_r+0xbb2>
 8007686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007688:	b963      	cbnz	r3, 80076a4 <_dtoa_r+0xac>
 800768a:	4b92      	ldr	r3, [pc, #584]	; (80078d4 <_dtoa_r+0x2dc>)
 800768c:	e022      	b.n	80076d4 <_dtoa_r+0xdc>
 800768e:	4b92      	ldr	r3, [pc, #584]	; (80078d8 <_dtoa_r+0x2e0>)
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	3308      	adds	r3, #8
 8007694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	9801      	ldr	r0, [sp, #4]
 800769a:	b013      	add	sp, #76	; 0x4c
 800769c:	ecbd 8b04 	vpop	{d8-d9}
 80076a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a4:	4b8b      	ldr	r3, [pc, #556]	; (80078d4 <_dtoa_r+0x2dc>)
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	3303      	adds	r3, #3
 80076aa:	e7f3      	b.n	8007694 <_dtoa_r+0x9c>
 80076ac:	2200      	movs	r2, #0
 80076ae:	2300      	movs	r3, #0
 80076b0:	4650      	mov	r0, sl
 80076b2:	4659      	mov	r1, fp
 80076b4:	f7f9 fa10 	bl	8000ad8 <__aeabi_dcmpeq>
 80076b8:	ec4b ab19 	vmov	d9, sl, fp
 80076bc:	4680      	mov	r8, r0
 80076be:	b158      	cbz	r0, 80076d8 <_dtoa_r+0xe0>
 80076c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076c2:	2301      	movs	r3, #1
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 856b 	beq.w	80081a4 <_dtoa_r+0xbac>
 80076ce:	4883      	ldr	r0, [pc, #524]	; (80078dc <_dtoa_r+0x2e4>)
 80076d0:	6018      	str	r0, [r3, #0]
 80076d2:	1e43      	subs	r3, r0, #1
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	e7df      	b.n	8007698 <_dtoa_r+0xa0>
 80076d8:	ec4b ab10 	vmov	d0, sl, fp
 80076dc:	aa10      	add	r2, sp, #64	; 0x40
 80076de:	a911      	add	r1, sp, #68	; 0x44
 80076e0:	4620      	mov	r0, r4
 80076e2:	f001 fd01 	bl	80090e8 <__d2b>
 80076e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80076ea:	ee08 0a10 	vmov	s16, r0
 80076ee:	2d00      	cmp	r5, #0
 80076f0:	f000 8084 	beq.w	80077fc <_dtoa_r+0x204>
 80076f4:	ee19 3a90 	vmov	r3, s19
 80076f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007700:	4656      	mov	r6, sl
 8007702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800770a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800770e:	4b74      	ldr	r3, [pc, #464]	; (80078e0 <_dtoa_r+0x2e8>)
 8007710:	2200      	movs	r2, #0
 8007712:	4630      	mov	r0, r6
 8007714:	4639      	mov	r1, r7
 8007716:	f7f8 fdbf 	bl	8000298 <__aeabi_dsub>
 800771a:	a365      	add	r3, pc, #404	; (adr r3, 80078b0 <_dtoa_r+0x2b8>)
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f7f8 ff72 	bl	8000608 <__aeabi_dmul>
 8007724:	a364      	add	r3, pc, #400	; (adr r3, 80078b8 <_dtoa_r+0x2c0>)
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	f7f8 fdb7 	bl	800029c <__adddf3>
 800772e:	4606      	mov	r6, r0
 8007730:	4628      	mov	r0, r5
 8007732:	460f      	mov	r7, r1
 8007734:	f7f8 fefe 	bl	8000534 <__aeabi_i2d>
 8007738:	a361      	add	r3, pc, #388	; (adr r3, 80078c0 <_dtoa_r+0x2c8>)
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f7f8 ff63 	bl	8000608 <__aeabi_dmul>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4630      	mov	r0, r6
 8007748:	4639      	mov	r1, r7
 800774a:	f7f8 fda7 	bl	800029c <__adddf3>
 800774e:	4606      	mov	r6, r0
 8007750:	460f      	mov	r7, r1
 8007752:	f7f9 fa09 	bl	8000b68 <__aeabi_d2iz>
 8007756:	2200      	movs	r2, #0
 8007758:	9000      	str	r0, [sp, #0]
 800775a:	2300      	movs	r3, #0
 800775c:	4630      	mov	r0, r6
 800775e:	4639      	mov	r1, r7
 8007760:	f7f9 f9c4 	bl	8000aec <__aeabi_dcmplt>
 8007764:	b150      	cbz	r0, 800777c <_dtoa_r+0x184>
 8007766:	9800      	ldr	r0, [sp, #0]
 8007768:	f7f8 fee4 	bl	8000534 <__aeabi_i2d>
 800776c:	4632      	mov	r2, r6
 800776e:	463b      	mov	r3, r7
 8007770:	f7f9 f9b2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007774:	b910      	cbnz	r0, 800777c <_dtoa_r+0x184>
 8007776:	9b00      	ldr	r3, [sp, #0]
 8007778:	3b01      	subs	r3, #1
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	9b00      	ldr	r3, [sp, #0]
 800777e:	2b16      	cmp	r3, #22
 8007780:	d85a      	bhi.n	8007838 <_dtoa_r+0x240>
 8007782:	9a00      	ldr	r2, [sp, #0]
 8007784:	4b57      	ldr	r3, [pc, #348]	; (80078e4 <_dtoa_r+0x2ec>)
 8007786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	ec51 0b19 	vmov	r0, r1, d9
 8007792:	f7f9 f9ab 	bl	8000aec <__aeabi_dcmplt>
 8007796:	2800      	cmp	r0, #0
 8007798:	d050      	beq.n	800783c <_dtoa_r+0x244>
 800779a:	9b00      	ldr	r3, [sp, #0]
 800779c:	3b01      	subs	r3, #1
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	2300      	movs	r3, #0
 80077a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80077a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077a6:	1b5d      	subs	r5, r3, r5
 80077a8:	1e6b      	subs	r3, r5, #1
 80077aa:	9305      	str	r3, [sp, #20]
 80077ac:	bf45      	ittet	mi
 80077ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80077b2:	9304      	strmi	r3, [sp, #16]
 80077b4:	2300      	movpl	r3, #0
 80077b6:	2300      	movmi	r3, #0
 80077b8:	bf4c      	ite	mi
 80077ba:	9305      	strmi	r3, [sp, #20]
 80077bc:	9304      	strpl	r3, [sp, #16]
 80077be:	9b00      	ldr	r3, [sp, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	db3d      	blt.n	8007840 <_dtoa_r+0x248>
 80077c4:	9b05      	ldr	r3, [sp, #20]
 80077c6:	9a00      	ldr	r2, [sp, #0]
 80077c8:	920a      	str	r2, [sp, #40]	; 0x28
 80077ca:	4413      	add	r3, r2
 80077cc:	9305      	str	r3, [sp, #20]
 80077ce:	2300      	movs	r3, #0
 80077d0:	9307      	str	r3, [sp, #28]
 80077d2:	9b06      	ldr	r3, [sp, #24]
 80077d4:	2b09      	cmp	r3, #9
 80077d6:	f200 8089 	bhi.w	80078ec <_dtoa_r+0x2f4>
 80077da:	2b05      	cmp	r3, #5
 80077dc:	bfc4      	itt	gt
 80077de:	3b04      	subgt	r3, #4
 80077e0:	9306      	strgt	r3, [sp, #24]
 80077e2:	9b06      	ldr	r3, [sp, #24]
 80077e4:	f1a3 0302 	sub.w	r3, r3, #2
 80077e8:	bfcc      	ite	gt
 80077ea:	2500      	movgt	r5, #0
 80077ec:	2501      	movle	r5, #1
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	f200 8087 	bhi.w	8007902 <_dtoa_r+0x30a>
 80077f4:	e8df f003 	tbb	[pc, r3]
 80077f8:	59383a2d 	.word	0x59383a2d
 80077fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007800:	441d      	add	r5, r3
 8007802:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007806:	2b20      	cmp	r3, #32
 8007808:	bfc1      	itttt	gt
 800780a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800780e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007812:	fa0b f303 	lslgt.w	r3, fp, r3
 8007816:	fa26 f000 	lsrgt.w	r0, r6, r0
 800781a:	bfda      	itte	le
 800781c:	f1c3 0320 	rsble	r3, r3, #32
 8007820:	fa06 f003 	lslle.w	r0, r6, r3
 8007824:	4318      	orrgt	r0, r3
 8007826:	f7f8 fe75 	bl	8000514 <__aeabi_ui2d>
 800782a:	2301      	movs	r3, #1
 800782c:	4606      	mov	r6, r0
 800782e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007832:	3d01      	subs	r5, #1
 8007834:	930e      	str	r3, [sp, #56]	; 0x38
 8007836:	e76a      	b.n	800770e <_dtoa_r+0x116>
 8007838:	2301      	movs	r3, #1
 800783a:	e7b2      	b.n	80077a2 <_dtoa_r+0x1aa>
 800783c:	900b      	str	r0, [sp, #44]	; 0x2c
 800783e:	e7b1      	b.n	80077a4 <_dtoa_r+0x1ac>
 8007840:	9b04      	ldr	r3, [sp, #16]
 8007842:	9a00      	ldr	r2, [sp, #0]
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	4253      	negs	r3, r2
 800784a:	9307      	str	r3, [sp, #28]
 800784c:	2300      	movs	r3, #0
 800784e:	930a      	str	r3, [sp, #40]	; 0x28
 8007850:	e7bf      	b.n	80077d2 <_dtoa_r+0x1da>
 8007852:	2300      	movs	r3, #0
 8007854:	9308      	str	r3, [sp, #32]
 8007856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc55      	bgt.n	8007908 <_dtoa_r+0x310>
 800785c:	2301      	movs	r3, #1
 800785e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007862:	461a      	mov	r2, r3
 8007864:	9209      	str	r2, [sp, #36]	; 0x24
 8007866:	e00c      	b.n	8007882 <_dtoa_r+0x28a>
 8007868:	2301      	movs	r3, #1
 800786a:	e7f3      	b.n	8007854 <_dtoa_r+0x25c>
 800786c:	2300      	movs	r3, #0
 800786e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007870:	9308      	str	r3, [sp, #32]
 8007872:	9b00      	ldr	r3, [sp, #0]
 8007874:	4413      	add	r3, r2
 8007876:	9302      	str	r3, [sp, #8]
 8007878:	3301      	adds	r3, #1
 800787a:	2b01      	cmp	r3, #1
 800787c:	9303      	str	r3, [sp, #12]
 800787e:	bfb8      	it	lt
 8007880:	2301      	movlt	r3, #1
 8007882:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007884:	2200      	movs	r2, #0
 8007886:	6042      	str	r2, [r0, #4]
 8007888:	2204      	movs	r2, #4
 800788a:	f102 0614 	add.w	r6, r2, #20
 800788e:	429e      	cmp	r6, r3
 8007890:	6841      	ldr	r1, [r0, #4]
 8007892:	d93d      	bls.n	8007910 <_dtoa_r+0x318>
 8007894:	4620      	mov	r0, r4
 8007896:	f001 f839 	bl	800890c <_Balloc>
 800789a:	9001      	str	r0, [sp, #4]
 800789c:	2800      	cmp	r0, #0
 800789e:	d13b      	bne.n	8007918 <_dtoa_r+0x320>
 80078a0:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <_dtoa_r+0x2f0>)
 80078a2:	4602      	mov	r2, r0
 80078a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80078a8:	e6c0      	b.n	800762c <_dtoa_r+0x34>
 80078aa:	2301      	movs	r3, #1
 80078ac:	e7df      	b.n	800786e <_dtoa_r+0x276>
 80078ae:	bf00      	nop
 80078b0:	636f4361 	.word	0x636f4361
 80078b4:	3fd287a7 	.word	0x3fd287a7
 80078b8:	8b60c8b3 	.word	0x8b60c8b3
 80078bc:	3fc68a28 	.word	0x3fc68a28
 80078c0:	509f79fb 	.word	0x509f79fb
 80078c4:	3fd34413 	.word	0x3fd34413
 80078c8:	0800b70e 	.word	0x0800b70e
 80078cc:	0800b725 	.word	0x0800b725
 80078d0:	7ff00000 	.word	0x7ff00000
 80078d4:	0800b70a 	.word	0x0800b70a
 80078d8:	0800b701 	.word	0x0800b701
 80078dc:	0800b585 	.word	0x0800b585
 80078e0:	3ff80000 	.word	0x3ff80000
 80078e4:	0800b890 	.word	0x0800b890
 80078e8:	0800b780 	.word	0x0800b780
 80078ec:	2501      	movs	r5, #1
 80078ee:	2300      	movs	r3, #0
 80078f0:	9306      	str	r3, [sp, #24]
 80078f2:	9508      	str	r5, [sp, #32]
 80078f4:	f04f 33ff 	mov.w	r3, #4294967295
 80078f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078fc:	2200      	movs	r2, #0
 80078fe:	2312      	movs	r3, #18
 8007900:	e7b0      	b.n	8007864 <_dtoa_r+0x26c>
 8007902:	2301      	movs	r3, #1
 8007904:	9308      	str	r3, [sp, #32]
 8007906:	e7f5      	b.n	80078f4 <_dtoa_r+0x2fc>
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800790e:	e7b8      	b.n	8007882 <_dtoa_r+0x28a>
 8007910:	3101      	adds	r1, #1
 8007912:	6041      	str	r1, [r0, #4]
 8007914:	0052      	lsls	r2, r2, #1
 8007916:	e7b8      	b.n	800788a <_dtoa_r+0x292>
 8007918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800791a:	9a01      	ldr	r2, [sp, #4]
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	2b0e      	cmp	r3, #14
 8007922:	f200 809d 	bhi.w	8007a60 <_dtoa_r+0x468>
 8007926:	2d00      	cmp	r5, #0
 8007928:	f000 809a 	beq.w	8007a60 <_dtoa_r+0x468>
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	dd32      	ble.n	8007998 <_dtoa_r+0x3a0>
 8007932:	4ab7      	ldr	r2, [pc, #732]	; (8007c10 <_dtoa_r+0x618>)
 8007934:	f003 030f 	and.w	r3, r3, #15
 8007938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800793c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007940:	9b00      	ldr	r3, [sp, #0]
 8007942:	05d8      	lsls	r0, r3, #23
 8007944:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007948:	d516      	bpl.n	8007978 <_dtoa_r+0x380>
 800794a:	4bb2      	ldr	r3, [pc, #712]	; (8007c14 <_dtoa_r+0x61c>)
 800794c:	ec51 0b19 	vmov	r0, r1, d9
 8007950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007954:	f7f8 ff82 	bl	800085c <__aeabi_ddiv>
 8007958:	f007 070f 	and.w	r7, r7, #15
 800795c:	4682      	mov	sl, r0
 800795e:	468b      	mov	fp, r1
 8007960:	2503      	movs	r5, #3
 8007962:	4eac      	ldr	r6, [pc, #688]	; (8007c14 <_dtoa_r+0x61c>)
 8007964:	b957      	cbnz	r7, 800797c <_dtoa_r+0x384>
 8007966:	4642      	mov	r2, r8
 8007968:	464b      	mov	r3, r9
 800796a:	4650      	mov	r0, sl
 800796c:	4659      	mov	r1, fp
 800796e:	f7f8 ff75 	bl	800085c <__aeabi_ddiv>
 8007972:	4682      	mov	sl, r0
 8007974:	468b      	mov	fp, r1
 8007976:	e028      	b.n	80079ca <_dtoa_r+0x3d2>
 8007978:	2502      	movs	r5, #2
 800797a:	e7f2      	b.n	8007962 <_dtoa_r+0x36a>
 800797c:	07f9      	lsls	r1, r7, #31
 800797e:	d508      	bpl.n	8007992 <_dtoa_r+0x39a>
 8007980:	4640      	mov	r0, r8
 8007982:	4649      	mov	r1, r9
 8007984:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007988:	f7f8 fe3e 	bl	8000608 <__aeabi_dmul>
 800798c:	3501      	adds	r5, #1
 800798e:	4680      	mov	r8, r0
 8007990:	4689      	mov	r9, r1
 8007992:	107f      	asrs	r7, r7, #1
 8007994:	3608      	adds	r6, #8
 8007996:	e7e5      	b.n	8007964 <_dtoa_r+0x36c>
 8007998:	f000 809b 	beq.w	8007ad2 <_dtoa_r+0x4da>
 800799c:	9b00      	ldr	r3, [sp, #0]
 800799e:	4f9d      	ldr	r7, [pc, #628]	; (8007c14 <_dtoa_r+0x61c>)
 80079a0:	425e      	negs	r6, r3
 80079a2:	4b9b      	ldr	r3, [pc, #620]	; (8007c10 <_dtoa_r+0x618>)
 80079a4:	f006 020f 	and.w	r2, r6, #15
 80079a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	ec51 0b19 	vmov	r0, r1, d9
 80079b4:	f7f8 fe28 	bl	8000608 <__aeabi_dmul>
 80079b8:	1136      	asrs	r6, r6, #4
 80079ba:	4682      	mov	sl, r0
 80079bc:	468b      	mov	fp, r1
 80079be:	2300      	movs	r3, #0
 80079c0:	2502      	movs	r5, #2
 80079c2:	2e00      	cmp	r6, #0
 80079c4:	d17a      	bne.n	8007abc <_dtoa_r+0x4c4>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1d3      	bne.n	8007972 <_dtoa_r+0x37a>
 80079ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8082 	beq.w	8007ad6 <_dtoa_r+0x4de>
 80079d2:	4b91      	ldr	r3, [pc, #580]	; (8007c18 <_dtoa_r+0x620>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	4650      	mov	r0, sl
 80079d8:	4659      	mov	r1, fp
 80079da:	f7f9 f887 	bl	8000aec <__aeabi_dcmplt>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d079      	beq.n	8007ad6 <_dtoa_r+0x4de>
 80079e2:	9b03      	ldr	r3, [sp, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d076      	beq.n	8007ad6 <_dtoa_r+0x4de>
 80079e8:	9b02      	ldr	r3, [sp, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dd36      	ble.n	8007a5c <_dtoa_r+0x464>
 80079ee:	9b00      	ldr	r3, [sp, #0]
 80079f0:	4650      	mov	r0, sl
 80079f2:	4659      	mov	r1, fp
 80079f4:	1e5f      	subs	r7, r3, #1
 80079f6:	2200      	movs	r2, #0
 80079f8:	4b88      	ldr	r3, [pc, #544]	; (8007c1c <_dtoa_r+0x624>)
 80079fa:	f7f8 fe05 	bl	8000608 <__aeabi_dmul>
 80079fe:	9e02      	ldr	r6, [sp, #8]
 8007a00:	4682      	mov	sl, r0
 8007a02:	468b      	mov	fp, r1
 8007a04:	3501      	adds	r5, #1
 8007a06:	4628      	mov	r0, r5
 8007a08:	f7f8 fd94 	bl	8000534 <__aeabi_i2d>
 8007a0c:	4652      	mov	r2, sl
 8007a0e:	465b      	mov	r3, fp
 8007a10:	f7f8 fdfa 	bl	8000608 <__aeabi_dmul>
 8007a14:	4b82      	ldr	r3, [pc, #520]	; (8007c20 <_dtoa_r+0x628>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	f7f8 fc40 	bl	800029c <__adddf3>
 8007a1c:	46d0      	mov	r8, sl
 8007a1e:	46d9      	mov	r9, fp
 8007a20:	4682      	mov	sl, r0
 8007a22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007a26:	2e00      	cmp	r6, #0
 8007a28:	d158      	bne.n	8007adc <_dtoa_r+0x4e4>
 8007a2a:	4b7e      	ldr	r3, [pc, #504]	; (8007c24 <_dtoa_r+0x62c>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4640      	mov	r0, r8
 8007a30:	4649      	mov	r1, r9
 8007a32:	f7f8 fc31 	bl	8000298 <__aeabi_dsub>
 8007a36:	4652      	mov	r2, sl
 8007a38:	465b      	mov	r3, fp
 8007a3a:	4680      	mov	r8, r0
 8007a3c:	4689      	mov	r9, r1
 8007a3e:	f7f9 f873 	bl	8000b28 <__aeabi_dcmpgt>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	f040 8295 	bne.w	8007f72 <_dtoa_r+0x97a>
 8007a48:	4652      	mov	r2, sl
 8007a4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a4e:	4640      	mov	r0, r8
 8007a50:	4649      	mov	r1, r9
 8007a52:	f7f9 f84b 	bl	8000aec <__aeabi_dcmplt>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f040 8289 	bne.w	8007f6e <_dtoa_r+0x976>
 8007a5c:	ec5b ab19 	vmov	sl, fp, d9
 8007a60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f2c0 8148 	blt.w	8007cf8 <_dtoa_r+0x700>
 8007a68:	9a00      	ldr	r2, [sp, #0]
 8007a6a:	2a0e      	cmp	r2, #14
 8007a6c:	f300 8144 	bgt.w	8007cf8 <_dtoa_r+0x700>
 8007a70:	4b67      	ldr	r3, [pc, #412]	; (8007c10 <_dtoa_r+0x618>)
 8007a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f280 80d5 	bge.w	8007c2c <_dtoa_r+0x634>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f300 80d1 	bgt.w	8007c2c <_dtoa_r+0x634>
 8007a8a:	f040 826f 	bne.w	8007f6c <_dtoa_r+0x974>
 8007a8e:	4b65      	ldr	r3, [pc, #404]	; (8007c24 <_dtoa_r+0x62c>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	4640      	mov	r0, r8
 8007a94:	4649      	mov	r1, r9
 8007a96:	f7f8 fdb7 	bl	8000608 <__aeabi_dmul>
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	465b      	mov	r3, fp
 8007a9e:	f7f9 f839 	bl	8000b14 <__aeabi_dcmpge>
 8007aa2:	9e03      	ldr	r6, [sp, #12]
 8007aa4:	4637      	mov	r7, r6
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f040 8245 	bne.w	8007f36 <_dtoa_r+0x93e>
 8007aac:	9d01      	ldr	r5, [sp, #4]
 8007aae:	2331      	movs	r3, #49	; 0x31
 8007ab0:	f805 3b01 	strb.w	r3, [r5], #1
 8007ab4:	9b00      	ldr	r3, [sp, #0]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	e240      	b.n	8007f3e <_dtoa_r+0x946>
 8007abc:	07f2      	lsls	r2, r6, #31
 8007abe:	d505      	bpl.n	8007acc <_dtoa_r+0x4d4>
 8007ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac4:	f7f8 fda0 	bl	8000608 <__aeabi_dmul>
 8007ac8:	3501      	adds	r5, #1
 8007aca:	2301      	movs	r3, #1
 8007acc:	1076      	asrs	r6, r6, #1
 8007ace:	3708      	adds	r7, #8
 8007ad0:	e777      	b.n	80079c2 <_dtoa_r+0x3ca>
 8007ad2:	2502      	movs	r5, #2
 8007ad4:	e779      	b.n	80079ca <_dtoa_r+0x3d2>
 8007ad6:	9f00      	ldr	r7, [sp, #0]
 8007ad8:	9e03      	ldr	r6, [sp, #12]
 8007ada:	e794      	b.n	8007a06 <_dtoa_r+0x40e>
 8007adc:	9901      	ldr	r1, [sp, #4]
 8007ade:	4b4c      	ldr	r3, [pc, #304]	; (8007c10 <_dtoa_r+0x618>)
 8007ae0:	4431      	add	r1, r6
 8007ae2:	910d      	str	r1, [sp, #52]	; 0x34
 8007ae4:	9908      	ldr	r1, [sp, #32]
 8007ae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007aea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007aee:	2900      	cmp	r1, #0
 8007af0:	d043      	beq.n	8007b7a <_dtoa_r+0x582>
 8007af2:	494d      	ldr	r1, [pc, #308]	; (8007c28 <_dtoa_r+0x630>)
 8007af4:	2000      	movs	r0, #0
 8007af6:	f7f8 feb1 	bl	800085c <__aeabi_ddiv>
 8007afa:	4652      	mov	r2, sl
 8007afc:	465b      	mov	r3, fp
 8007afe:	f7f8 fbcb 	bl	8000298 <__aeabi_dsub>
 8007b02:	9d01      	ldr	r5, [sp, #4]
 8007b04:	4682      	mov	sl, r0
 8007b06:	468b      	mov	fp, r1
 8007b08:	4649      	mov	r1, r9
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	f7f9 f82c 	bl	8000b68 <__aeabi_d2iz>
 8007b10:	4606      	mov	r6, r0
 8007b12:	f7f8 fd0f 	bl	8000534 <__aeabi_i2d>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	f7f8 fbbb 	bl	8000298 <__aeabi_dsub>
 8007b22:	3630      	adds	r6, #48	; 0x30
 8007b24:	f805 6b01 	strb.w	r6, [r5], #1
 8007b28:	4652      	mov	r2, sl
 8007b2a:	465b      	mov	r3, fp
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	4689      	mov	r9, r1
 8007b30:	f7f8 ffdc 	bl	8000aec <__aeabi_dcmplt>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d163      	bne.n	8007c00 <_dtoa_r+0x608>
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	4936      	ldr	r1, [pc, #216]	; (8007c18 <_dtoa_r+0x620>)
 8007b3e:	2000      	movs	r0, #0
 8007b40:	f7f8 fbaa 	bl	8000298 <__aeabi_dsub>
 8007b44:	4652      	mov	r2, sl
 8007b46:	465b      	mov	r3, fp
 8007b48:	f7f8 ffd0 	bl	8000aec <__aeabi_dcmplt>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	f040 80b5 	bne.w	8007cbc <_dtoa_r+0x6c4>
 8007b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b54:	429d      	cmp	r5, r3
 8007b56:	d081      	beq.n	8007a5c <_dtoa_r+0x464>
 8007b58:	4b30      	ldr	r3, [pc, #192]	; (8007c1c <_dtoa_r+0x624>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4650      	mov	r0, sl
 8007b5e:	4659      	mov	r1, fp
 8007b60:	f7f8 fd52 	bl	8000608 <__aeabi_dmul>
 8007b64:	4b2d      	ldr	r3, [pc, #180]	; (8007c1c <_dtoa_r+0x624>)
 8007b66:	4682      	mov	sl, r0
 8007b68:	468b      	mov	fp, r1
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f7f8 fd4a 	bl	8000608 <__aeabi_dmul>
 8007b74:	4680      	mov	r8, r0
 8007b76:	4689      	mov	r9, r1
 8007b78:	e7c6      	b.n	8007b08 <_dtoa_r+0x510>
 8007b7a:	4650      	mov	r0, sl
 8007b7c:	4659      	mov	r1, fp
 8007b7e:	f7f8 fd43 	bl	8000608 <__aeabi_dmul>
 8007b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b84:	9d01      	ldr	r5, [sp, #4]
 8007b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b88:	4682      	mov	sl, r0
 8007b8a:	468b      	mov	fp, r1
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	4640      	mov	r0, r8
 8007b90:	f7f8 ffea 	bl	8000b68 <__aeabi_d2iz>
 8007b94:	4606      	mov	r6, r0
 8007b96:	f7f8 fccd 	bl	8000534 <__aeabi_i2d>
 8007b9a:	3630      	adds	r6, #48	; 0x30
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	f7f8 fb78 	bl	8000298 <__aeabi_dsub>
 8007ba8:	f805 6b01 	strb.w	r6, [r5], #1
 8007bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bae:	429d      	cmp	r5, r3
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	4689      	mov	r9, r1
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	d124      	bne.n	8007c04 <_dtoa_r+0x60c>
 8007bba:	4b1b      	ldr	r3, [pc, #108]	; (8007c28 <_dtoa_r+0x630>)
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	4659      	mov	r1, fp
 8007bc0:	f7f8 fb6c 	bl	800029c <__adddf3>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4640      	mov	r0, r8
 8007bca:	4649      	mov	r1, r9
 8007bcc:	f7f8 ffac 	bl	8000b28 <__aeabi_dcmpgt>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d173      	bne.n	8007cbc <_dtoa_r+0x6c4>
 8007bd4:	4652      	mov	r2, sl
 8007bd6:	465b      	mov	r3, fp
 8007bd8:	4913      	ldr	r1, [pc, #76]	; (8007c28 <_dtoa_r+0x630>)
 8007bda:	2000      	movs	r0, #0
 8007bdc:	f7f8 fb5c 	bl	8000298 <__aeabi_dsub>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4640      	mov	r0, r8
 8007be6:	4649      	mov	r1, r9
 8007be8:	f7f8 ff80 	bl	8000aec <__aeabi_dcmplt>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f43f af35 	beq.w	8007a5c <_dtoa_r+0x464>
 8007bf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007bf4:	1e6b      	subs	r3, r5, #1
 8007bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bfc:	2b30      	cmp	r3, #48	; 0x30
 8007bfe:	d0f8      	beq.n	8007bf2 <_dtoa_r+0x5fa>
 8007c00:	9700      	str	r7, [sp, #0]
 8007c02:	e049      	b.n	8007c98 <_dtoa_r+0x6a0>
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <_dtoa_r+0x624>)
 8007c06:	f7f8 fcff 	bl	8000608 <__aeabi_dmul>
 8007c0a:	4680      	mov	r8, r0
 8007c0c:	4689      	mov	r9, r1
 8007c0e:	e7bd      	b.n	8007b8c <_dtoa_r+0x594>
 8007c10:	0800b890 	.word	0x0800b890
 8007c14:	0800b868 	.word	0x0800b868
 8007c18:	3ff00000 	.word	0x3ff00000
 8007c1c:	40240000 	.word	0x40240000
 8007c20:	401c0000 	.word	0x401c0000
 8007c24:	40140000 	.word	0x40140000
 8007c28:	3fe00000 	.word	0x3fe00000
 8007c2c:	9d01      	ldr	r5, [sp, #4]
 8007c2e:	4656      	mov	r6, sl
 8007c30:	465f      	mov	r7, fp
 8007c32:	4642      	mov	r2, r8
 8007c34:	464b      	mov	r3, r9
 8007c36:	4630      	mov	r0, r6
 8007c38:	4639      	mov	r1, r7
 8007c3a:	f7f8 fe0f 	bl	800085c <__aeabi_ddiv>
 8007c3e:	f7f8 ff93 	bl	8000b68 <__aeabi_d2iz>
 8007c42:	4682      	mov	sl, r0
 8007c44:	f7f8 fc76 	bl	8000534 <__aeabi_i2d>
 8007c48:	4642      	mov	r2, r8
 8007c4a:	464b      	mov	r3, r9
 8007c4c:	f7f8 fcdc 	bl	8000608 <__aeabi_dmul>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4630      	mov	r0, r6
 8007c56:	4639      	mov	r1, r7
 8007c58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007c5c:	f7f8 fb1c 	bl	8000298 <__aeabi_dsub>
 8007c60:	f805 6b01 	strb.w	r6, [r5], #1
 8007c64:	9e01      	ldr	r6, [sp, #4]
 8007c66:	9f03      	ldr	r7, [sp, #12]
 8007c68:	1bae      	subs	r6, r5, r6
 8007c6a:	42b7      	cmp	r7, r6
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	d135      	bne.n	8007cde <_dtoa_r+0x6e6>
 8007c72:	f7f8 fb13 	bl	800029c <__adddf3>
 8007c76:	4642      	mov	r2, r8
 8007c78:	464b      	mov	r3, r9
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460f      	mov	r7, r1
 8007c7e:	f7f8 ff53 	bl	8000b28 <__aeabi_dcmpgt>
 8007c82:	b9d0      	cbnz	r0, 8007cba <_dtoa_r+0x6c2>
 8007c84:	4642      	mov	r2, r8
 8007c86:	464b      	mov	r3, r9
 8007c88:	4630      	mov	r0, r6
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	f7f8 ff24 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c90:	b110      	cbz	r0, 8007c98 <_dtoa_r+0x6a0>
 8007c92:	f01a 0f01 	tst.w	sl, #1
 8007c96:	d110      	bne.n	8007cba <_dtoa_r+0x6c2>
 8007c98:	4620      	mov	r0, r4
 8007c9a:	ee18 1a10 	vmov	r1, s16
 8007c9e:	f000 fe75 	bl	800898c <_Bfree>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9800      	ldr	r0, [sp, #0]
 8007ca6:	702b      	strb	r3, [r5, #0]
 8007ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007caa:	3001      	adds	r0, #1
 8007cac:	6018      	str	r0, [r3, #0]
 8007cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f43f acf1 	beq.w	8007698 <_dtoa_r+0xa0>
 8007cb6:	601d      	str	r5, [r3, #0]
 8007cb8:	e4ee      	b.n	8007698 <_dtoa_r+0xa0>
 8007cba:	9f00      	ldr	r7, [sp, #0]
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	461d      	mov	r5, r3
 8007cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cc4:	2a39      	cmp	r2, #57	; 0x39
 8007cc6:	d106      	bne.n	8007cd6 <_dtoa_r+0x6de>
 8007cc8:	9a01      	ldr	r2, [sp, #4]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d1f7      	bne.n	8007cbe <_dtoa_r+0x6c6>
 8007cce:	9901      	ldr	r1, [sp, #4]
 8007cd0:	2230      	movs	r2, #48	; 0x30
 8007cd2:	3701      	adds	r7, #1
 8007cd4:	700a      	strb	r2, [r1, #0]
 8007cd6:	781a      	ldrb	r2, [r3, #0]
 8007cd8:	3201      	adds	r2, #1
 8007cda:	701a      	strb	r2, [r3, #0]
 8007cdc:	e790      	b.n	8007c00 <_dtoa_r+0x608>
 8007cde:	4ba6      	ldr	r3, [pc, #664]	; (8007f78 <_dtoa_r+0x980>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f7f8 fc91 	bl	8000608 <__aeabi_dmul>
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	4606      	mov	r6, r0
 8007cec:	460f      	mov	r7, r1
 8007cee:	f7f8 fef3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d09d      	beq.n	8007c32 <_dtoa_r+0x63a>
 8007cf6:	e7cf      	b.n	8007c98 <_dtoa_r+0x6a0>
 8007cf8:	9a08      	ldr	r2, [sp, #32]
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	f000 80d7 	beq.w	8007eae <_dtoa_r+0x8b6>
 8007d00:	9a06      	ldr	r2, [sp, #24]
 8007d02:	2a01      	cmp	r2, #1
 8007d04:	f300 80ba 	bgt.w	8007e7c <_dtoa_r+0x884>
 8007d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d0a:	2a00      	cmp	r2, #0
 8007d0c:	f000 80b2 	beq.w	8007e74 <_dtoa_r+0x87c>
 8007d10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d14:	9e07      	ldr	r6, [sp, #28]
 8007d16:	9d04      	ldr	r5, [sp, #16]
 8007d18:	9a04      	ldr	r2, [sp, #16]
 8007d1a:	441a      	add	r2, r3
 8007d1c:	9204      	str	r2, [sp, #16]
 8007d1e:	9a05      	ldr	r2, [sp, #20]
 8007d20:	2101      	movs	r1, #1
 8007d22:	441a      	add	r2, r3
 8007d24:	4620      	mov	r0, r4
 8007d26:	9205      	str	r2, [sp, #20]
 8007d28:	f000 ff32 	bl	8008b90 <__i2b>
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	2d00      	cmp	r5, #0
 8007d30:	dd0c      	ble.n	8007d4c <_dtoa_r+0x754>
 8007d32:	9b05      	ldr	r3, [sp, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	dd09      	ble.n	8007d4c <_dtoa_r+0x754>
 8007d38:	42ab      	cmp	r3, r5
 8007d3a:	9a04      	ldr	r2, [sp, #16]
 8007d3c:	bfa8      	it	ge
 8007d3e:	462b      	movge	r3, r5
 8007d40:	1ad2      	subs	r2, r2, r3
 8007d42:	9204      	str	r2, [sp, #16]
 8007d44:	9a05      	ldr	r2, [sp, #20]
 8007d46:	1aed      	subs	r5, r5, r3
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	9b07      	ldr	r3, [sp, #28]
 8007d4e:	b31b      	cbz	r3, 8007d98 <_dtoa_r+0x7a0>
 8007d50:	9b08      	ldr	r3, [sp, #32]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 80af 	beq.w	8007eb6 <_dtoa_r+0x8be>
 8007d58:	2e00      	cmp	r6, #0
 8007d5a:	dd13      	ble.n	8007d84 <_dtoa_r+0x78c>
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	4632      	mov	r2, r6
 8007d60:	4620      	mov	r0, r4
 8007d62:	f000 ffd5 	bl	8008d10 <__pow5mult>
 8007d66:	ee18 2a10 	vmov	r2, s16
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f000 ff24 	bl	8008bbc <__multiply>
 8007d74:	ee18 1a10 	vmov	r1, s16
 8007d78:	4680      	mov	r8, r0
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 fe06 	bl	800898c <_Bfree>
 8007d80:	ee08 8a10 	vmov	s16, r8
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	1b9a      	subs	r2, r3, r6
 8007d88:	d006      	beq.n	8007d98 <_dtoa_r+0x7a0>
 8007d8a:	ee18 1a10 	vmov	r1, s16
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 ffbe 	bl	8008d10 <__pow5mult>
 8007d94:	ee08 0a10 	vmov	s16, r0
 8007d98:	2101      	movs	r1, #1
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 fef8 	bl	8008b90 <__i2b>
 8007da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	4606      	mov	r6, r0
 8007da6:	f340 8088 	ble.w	8007eba <_dtoa_r+0x8c2>
 8007daa:	461a      	mov	r2, r3
 8007dac:	4601      	mov	r1, r0
 8007dae:	4620      	mov	r0, r4
 8007db0:	f000 ffae 	bl	8008d10 <__pow5mult>
 8007db4:	9b06      	ldr	r3, [sp, #24]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	4606      	mov	r6, r0
 8007dba:	f340 8081 	ble.w	8007ec0 <_dtoa_r+0x8c8>
 8007dbe:	f04f 0800 	mov.w	r8, #0
 8007dc2:	6933      	ldr	r3, [r6, #16]
 8007dc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007dc8:	6918      	ldr	r0, [r3, #16]
 8007dca:	f000 fe91 	bl	8008af0 <__hi0bits>
 8007dce:	f1c0 0020 	rsb	r0, r0, #32
 8007dd2:	9b05      	ldr	r3, [sp, #20]
 8007dd4:	4418      	add	r0, r3
 8007dd6:	f010 001f 	ands.w	r0, r0, #31
 8007dda:	f000 8092 	beq.w	8007f02 <_dtoa_r+0x90a>
 8007dde:	f1c0 0320 	rsb	r3, r0, #32
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	f340 808a 	ble.w	8007efc <_dtoa_r+0x904>
 8007de8:	f1c0 001c 	rsb	r0, r0, #28
 8007dec:	9b04      	ldr	r3, [sp, #16]
 8007dee:	4403      	add	r3, r0
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	9b05      	ldr	r3, [sp, #20]
 8007df4:	4403      	add	r3, r0
 8007df6:	4405      	add	r5, r0
 8007df8:	9305      	str	r3, [sp, #20]
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dd07      	ble.n	8007e10 <_dtoa_r+0x818>
 8007e00:	ee18 1a10 	vmov	r1, s16
 8007e04:	461a      	mov	r2, r3
 8007e06:	4620      	mov	r0, r4
 8007e08:	f000 ffdc 	bl	8008dc4 <__lshift>
 8007e0c:	ee08 0a10 	vmov	s16, r0
 8007e10:	9b05      	ldr	r3, [sp, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	dd05      	ble.n	8007e22 <_dtoa_r+0x82a>
 8007e16:	4631      	mov	r1, r6
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f000 ffd2 	bl	8008dc4 <__lshift>
 8007e20:	4606      	mov	r6, r0
 8007e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d06e      	beq.n	8007f06 <_dtoa_r+0x90e>
 8007e28:	ee18 0a10 	vmov	r0, s16
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	f001 f839 	bl	8008ea4 <__mcmp>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	da67      	bge.n	8007f06 <_dtoa_r+0x90e>
 8007e36:	9b00      	ldr	r3, [sp, #0]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	ee18 1a10 	vmov	r1, s16
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	220a      	movs	r2, #10
 8007e42:	2300      	movs	r3, #0
 8007e44:	4620      	mov	r0, r4
 8007e46:	f000 fdc3 	bl	80089d0 <__multadd>
 8007e4a:	9b08      	ldr	r3, [sp, #32]
 8007e4c:	ee08 0a10 	vmov	s16, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 81b1 	beq.w	80081b8 <_dtoa_r+0xbc0>
 8007e56:	2300      	movs	r3, #0
 8007e58:	4639      	mov	r1, r7
 8007e5a:	220a      	movs	r2, #10
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 fdb7 	bl	80089d0 <__multadd>
 8007e62:	9b02      	ldr	r3, [sp, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	4607      	mov	r7, r0
 8007e68:	f300 808e 	bgt.w	8007f88 <_dtoa_r+0x990>
 8007e6c:	9b06      	ldr	r3, [sp, #24]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	dc51      	bgt.n	8007f16 <_dtoa_r+0x91e>
 8007e72:	e089      	b.n	8007f88 <_dtoa_r+0x990>
 8007e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e7a:	e74b      	b.n	8007d14 <_dtoa_r+0x71c>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	1e5e      	subs	r6, r3, #1
 8007e80:	9b07      	ldr	r3, [sp, #28]
 8007e82:	42b3      	cmp	r3, r6
 8007e84:	bfbf      	itttt	lt
 8007e86:	9b07      	ldrlt	r3, [sp, #28]
 8007e88:	9607      	strlt	r6, [sp, #28]
 8007e8a:	1af2      	sublt	r2, r6, r3
 8007e8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e8e:	bfb6      	itet	lt
 8007e90:	189b      	addlt	r3, r3, r2
 8007e92:	1b9e      	subge	r6, r3, r6
 8007e94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	bfb8      	it	lt
 8007e9a:	2600      	movlt	r6, #0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bfb7      	itett	lt
 8007ea0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ea4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ea8:	1a9d      	sublt	r5, r3, r2
 8007eaa:	2300      	movlt	r3, #0
 8007eac:	e734      	b.n	8007d18 <_dtoa_r+0x720>
 8007eae:	9e07      	ldr	r6, [sp, #28]
 8007eb0:	9d04      	ldr	r5, [sp, #16]
 8007eb2:	9f08      	ldr	r7, [sp, #32]
 8007eb4:	e73b      	b.n	8007d2e <_dtoa_r+0x736>
 8007eb6:	9a07      	ldr	r2, [sp, #28]
 8007eb8:	e767      	b.n	8007d8a <_dtoa_r+0x792>
 8007eba:	9b06      	ldr	r3, [sp, #24]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	dc18      	bgt.n	8007ef2 <_dtoa_r+0x8fa>
 8007ec0:	f1ba 0f00 	cmp.w	sl, #0
 8007ec4:	d115      	bne.n	8007ef2 <_dtoa_r+0x8fa>
 8007ec6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007eca:	b993      	cbnz	r3, 8007ef2 <_dtoa_r+0x8fa>
 8007ecc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ed0:	0d1b      	lsrs	r3, r3, #20
 8007ed2:	051b      	lsls	r3, r3, #20
 8007ed4:	b183      	cbz	r3, 8007ef8 <_dtoa_r+0x900>
 8007ed6:	9b04      	ldr	r3, [sp, #16]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	9304      	str	r3, [sp, #16]
 8007edc:	9b05      	ldr	r3, [sp, #20]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	9305      	str	r3, [sp, #20]
 8007ee2:	f04f 0801 	mov.w	r8, #1
 8007ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f47f af6a 	bne.w	8007dc2 <_dtoa_r+0x7ca>
 8007eee:	2001      	movs	r0, #1
 8007ef0:	e76f      	b.n	8007dd2 <_dtoa_r+0x7da>
 8007ef2:	f04f 0800 	mov.w	r8, #0
 8007ef6:	e7f6      	b.n	8007ee6 <_dtoa_r+0x8ee>
 8007ef8:	4698      	mov	r8, r3
 8007efa:	e7f4      	b.n	8007ee6 <_dtoa_r+0x8ee>
 8007efc:	f43f af7d 	beq.w	8007dfa <_dtoa_r+0x802>
 8007f00:	4618      	mov	r0, r3
 8007f02:	301c      	adds	r0, #28
 8007f04:	e772      	b.n	8007dec <_dtoa_r+0x7f4>
 8007f06:	9b03      	ldr	r3, [sp, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc37      	bgt.n	8007f7c <_dtoa_r+0x984>
 8007f0c:	9b06      	ldr	r3, [sp, #24]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	dd34      	ble.n	8007f7c <_dtoa_r+0x984>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	9302      	str	r3, [sp, #8]
 8007f16:	9b02      	ldr	r3, [sp, #8]
 8007f18:	b96b      	cbnz	r3, 8007f36 <_dtoa_r+0x93e>
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	2205      	movs	r2, #5
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 fd56 	bl	80089d0 <__multadd>
 8007f24:	4601      	mov	r1, r0
 8007f26:	4606      	mov	r6, r0
 8007f28:	ee18 0a10 	vmov	r0, s16
 8007f2c:	f000 ffba 	bl	8008ea4 <__mcmp>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	f73f adbb 	bgt.w	8007aac <_dtoa_r+0x4b4>
 8007f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f38:	9d01      	ldr	r5, [sp, #4]
 8007f3a:	43db      	mvns	r3, r3
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	f04f 0800 	mov.w	r8, #0
 8007f42:	4631      	mov	r1, r6
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 fd21 	bl	800898c <_Bfree>
 8007f4a:	2f00      	cmp	r7, #0
 8007f4c:	f43f aea4 	beq.w	8007c98 <_dtoa_r+0x6a0>
 8007f50:	f1b8 0f00 	cmp.w	r8, #0
 8007f54:	d005      	beq.n	8007f62 <_dtoa_r+0x96a>
 8007f56:	45b8      	cmp	r8, r7
 8007f58:	d003      	beq.n	8007f62 <_dtoa_r+0x96a>
 8007f5a:	4641      	mov	r1, r8
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 fd15 	bl	800898c <_Bfree>
 8007f62:	4639      	mov	r1, r7
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 fd11 	bl	800898c <_Bfree>
 8007f6a:	e695      	b.n	8007c98 <_dtoa_r+0x6a0>
 8007f6c:	2600      	movs	r6, #0
 8007f6e:	4637      	mov	r7, r6
 8007f70:	e7e1      	b.n	8007f36 <_dtoa_r+0x93e>
 8007f72:	9700      	str	r7, [sp, #0]
 8007f74:	4637      	mov	r7, r6
 8007f76:	e599      	b.n	8007aac <_dtoa_r+0x4b4>
 8007f78:	40240000 	.word	0x40240000
 8007f7c:	9b08      	ldr	r3, [sp, #32]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 80ca 	beq.w	8008118 <_dtoa_r+0xb20>
 8007f84:	9b03      	ldr	r3, [sp, #12]
 8007f86:	9302      	str	r3, [sp, #8]
 8007f88:	2d00      	cmp	r5, #0
 8007f8a:	dd05      	ble.n	8007f98 <_dtoa_r+0x9a0>
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	462a      	mov	r2, r5
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 ff17 	bl	8008dc4 <__lshift>
 8007f96:	4607      	mov	r7, r0
 8007f98:	f1b8 0f00 	cmp.w	r8, #0
 8007f9c:	d05b      	beq.n	8008056 <_dtoa_r+0xa5e>
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fcb3 	bl	800890c <_Balloc>
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	b928      	cbnz	r0, 8007fb6 <_dtoa_r+0x9be>
 8007faa:	4b87      	ldr	r3, [pc, #540]	; (80081c8 <_dtoa_r+0xbd0>)
 8007fac:	4602      	mov	r2, r0
 8007fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007fb2:	f7ff bb3b 	b.w	800762c <_dtoa_r+0x34>
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	3202      	adds	r2, #2
 8007fba:	0092      	lsls	r2, r2, #2
 8007fbc:	f107 010c 	add.w	r1, r7, #12
 8007fc0:	300c      	adds	r0, #12
 8007fc2:	f000 fc95 	bl	80088f0 <memcpy>
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 fefa 	bl	8008dc4 <__lshift>
 8007fd0:	9b01      	ldr	r3, [sp, #4]
 8007fd2:	f103 0901 	add.w	r9, r3, #1
 8007fd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007fda:	4413      	add	r3, r2
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	f00a 0301 	and.w	r3, sl, #1
 8007fe2:	46b8      	mov	r8, r7
 8007fe4:	9304      	str	r3, [sp, #16]
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	4631      	mov	r1, r6
 8007fea:	ee18 0a10 	vmov	r0, s16
 8007fee:	f7ff fa75 	bl	80074dc <quorem>
 8007ff2:	4641      	mov	r1, r8
 8007ff4:	9002      	str	r0, [sp, #8]
 8007ff6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ffa:	ee18 0a10 	vmov	r0, s16
 8007ffe:	f000 ff51 	bl	8008ea4 <__mcmp>
 8008002:	463a      	mov	r2, r7
 8008004:	9003      	str	r0, [sp, #12]
 8008006:	4631      	mov	r1, r6
 8008008:	4620      	mov	r0, r4
 800800a:	f000 ff67 	bl	8008edc <__mdiff>
 800800e:	68c2      	ldr	r2, [r0, #12]
 8008010:	f109 3bff 	add.w	fp, r9, #4294967295
 8008014:	4605      	mov	r5, r0
 8008016:	bb02      	cbnz	r2, 800805a <_dtoa_r+0xa62>
 8008018:	4601      	mov	r1, r0
 800801a:	ee18 0a10 	vmov	r0, s16
 800801e:	f000 ff41 	bl	8008ea4 <__mcmp>
 8008022:	4602      	mov	r2, r0
 8008024:	4629      	mov	r1, r5
 8008026:	4620      	mov	r0, r4
 8008028:	9207      	str	r2, [sp, #28]
 800802a:	f000 fcaf 	bl	800898c <_Bfree>
 800802e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008032:	ea43 0102 	orr.w	r1, r3, r2
 8008036:	9b04      	ldr	r3, [sp, #16]
 8008038:	430b      	orrs	r3, r1
 800803a:	464d      	mov	r5, r9
 800803c:	d10f      	bne.n	800805e <_dtoa_r+0xa66>
 800803e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008042:	d02a      	beq.n	800809a <_dtoa_r+0xaa2>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	dd02      	ble.n	8008050 <_dtoa_r+0xa58>
 800804a:	9b02      	ldr	r3, [sp, #8]
 800804c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008050:	f88b a000 	strb.w	sl, [fp]
 8008054:	e775      	b.n	8007f42 <_dtoa_r+0x94a>
 8008056:	4638      	mov	r0, r7
 8008058:	e7ba      	b.n	8007fd0 <_dtoa_r+0x9d8>
 800805a:	2201      	movs	r2, #1
 800805c:	e7e2      	b.n	8008024 <_dtoa_r+0xa2c>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	db04      	blt.n	800806e <_dtoa_r+0xa76>
 8008064:	9906      	ldr	r1, [sp, #24]
 8008066:	430b      	orrs	r3, r1
 8008068:	9904      	ldr	r1, [sp, #16]
 800806a:	430b      	orrs	r3, r1
 800806c:	d122      	bne.n	80080b4 <_dtoa_r+0xabc>
 800806e:	2a00      	cmp	r2, #0
 8008070:	ddee      	ble.n	8008050 <_dtoa_r+0xa58>
 8008072:	ee18 1a10 	vmov	r1, s16
 8008076:	2201      	movs	r2, #1
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fea3 	bl	8008dc4 <__lshift>
 800807e:	4631      	mov	r1, r6
 8008080:	ee08 0a10 	vmov	s16, r0
 8008084:	f000 ff0e 	bl	8008ea4 <__mcmp>
 8008088:	2800      	cmp	r0, #0
 800808a:	dc03      	bgt.n	8008094 <_dtoa_r+0xa9c>
 800808c:	d1e0      	bne.n	8008050 <_dtoa_r+0xa58>
 800808e:	f01a 0f01 	tst.w	sl, #1
 8008092:	d0dd      	beq.n	8008050 <_dtoa_r+0xa58>
 8008094:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008098:	d1d7      	bne.n	800804a <_dtoa_r+0xa52>
 800809a:	2339      	movs	r3, #57	; 0x39
 800809c:	f88b 3000 	strb.w	r3, [fp]
 80080a0:	462b      	mov	r3, r5
 80080a2:	461d      	mov	r5, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080aa:	2a39      	cmp	r2, #57	; 0x39
 80080ac:	d071      	beq.n	8008192 <_dtoa_r+0xb9a>
 80080ae:	3201      	adds	r2, #1
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	e746      	b.n	8007f42 <_dtoa_r+0x94a>
 80080b4:	2a00      	cmp	r2, #0
 80080b6:	dd07      	ble.n	80080c8 <_dtoa_r+0xad0>
 80080b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080bc:	d0ed      	beq.n	800809a <_dtoa_r+0xaa2>
 80080be:	f10a 0301 	add.w	r3, sl, #1
 80080c2:	f88b 3000 	strb.w	r3, [fp]
 80080c6:	e73c      	b.n	8007f42 <_dtoa_r+0x94a>
 80080c8:	9b05      	ldr	r3, [sp, #20]
 80080ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80080ce:	4599      	cmp	r9, r3
 80080d0:	d047      	beq.n	8008162 <_dtoa_r+0xb6a>
 80080d2:	ee18 1a10 	vmov	r1, s16
 80080d6:	2300      	movs	r3, #0
 80080d8:	220a      	movs	r2, #10
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fc78 	bl	80089d0 <__multadd>
 80080e0:	45b8      	cmp	r8, r7
 80080e2:	ee08 0a10 	vmov	s16, r0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	f04f 020a 	mov.w	r2, #10
 80080ee:	4641      	mov	r1, r8
 80080f0:	4620      	mov	r0, r4
 80080f2:	d106      	bne.n	8008102 <_dtoa_r+0xb0a>
 80080f4:	f000 fc6c 	bl	80089d0 <__multadd>
 80080f8:	4680      	mov	r8, r0
 80080fa:	4607      	mov	r7, r0
 80080fc:	f109 0901 	add.w	r9, r9, #1
 8008100:	e772      	b.n	8007fe8 <_dtoa_r+0x9f0>
 8008102:	f000 fc65 	bl	80089d0 <__multadd>
 8008106:	4639      	mov	r1, r7
 8008108:	4680      	mov	r8, r0
 800810a:	2300      	movs	r3, #0
 800810c:	220a      	movs	r2, #10
 800810e:	4620      	mov	r0, r4
 8008110:	f000 fc5e 	bl	80089d0 <__multadd>
 8008114:	4607      	mov	r7, r0
 8008116:	e7f1      	b.n	80080fc <_dtoa_r+0xb04>
 8008118:	9b03      	ldr	r3, [sp, #12]
 800811a:	9302      	str	r3, [sp, #8]
 800811c:	9d01      	ldr	r5, [sp, #4]
 800811e:	ee18 0a10 	vmov	r0, s16
 8008122:	4631      	mov	r1, r6
 8008124:	f7ff f9da 	bl	80074dc <quorem>
 8008128:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800812c:	9b01      	ldr	r3, [sp, #4]
 800812e:	f805 ab01 	strb.w	sl, [r5], #1
 8008132:	1aea      	subs	r2, r5, r3
 8008134:	9b02      	ldr	r3, [sp, #8]
 8008136:	4293      	cmp	r3, r2
 8008138:	dd09      	ble.n	800814e <_dtoa_r+0xb56>
 800813a:	ee18 1a10 	vmov	r1, s16
 800813e:	2300      	movs	r3, #0
 8008140:	220a      	movs	r2, #10
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fc44 	bl	80089d0 <__multadd>
 8008148:	ee08 0a10 	vmov	s16, r0
 800814c:	e7e7      	b.n	800811e <_dtoa_r+0xb26>
 800814e:	9b02      	ldr	r3, [sp, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	bfc8      	it	gt
 8008154:	461d      	movgt	r5, r3
 8008156:	9b01      	ldr	r3, [sp, #4]
 8008158:	bfd8      	it	le
 800815a:	2501      	movle	r5, #1
 800815c:	441d      	add	r5, r3
 800815e:	f04f 0800 	mov.w	r8, #0
 8008162:	ee18 1a10 	vmov	r1, s16
 8008166:	2201      	movs	r2, #1
 8008168:	4620      	mov	r0, r4
 800816a:	f000 fe2b 	bl	8008dc4 <__lshift>
 800816e:	4631      	mov	r1, r6
 8008170:	ee08 0a10 	vmov	s16, r0
 8008174:	f000 fe96 	bl	8008ea4 <__mcmp>
 8008178:	2800      	cmp	r0, #0
 800817a:	dc91      	bgt.n	80080a0 <_dtoa_r+0xaa8>
 800817c:	d102      	bne.n	8008184 <_dtoa_r+0xb8c>
 800817e:	f01a 0f01 	tst.w	sl, #1
 8008182:	d18d      	bne.n	80080a0 <_dtoa_r+0xaa8>
 8008184:	462b      	mov	r3, r5
 8008186:	461d      	mov	r5, r3
 8008188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800818c:	2a30      	cmp	r2, #48	; 0x30
 800818e:	d0fa      	beq.n	8008186 <_dtoa_r+0xb8e>
 8008190:	e6d7      	b.n	8007f42 <_dtoa_r+0x94a>
 8008192:	9a01      	ldr	r2, [sp, #4]
 8008194:	429a      	cmp	r2, r3
 8008196:	d184      	bne.n	80080a2 <_dtoa_r+0xaaa>
 8008198:	9b00      	ldr	r3, [sp, #0]
 800819a:	3301      	adds	r3, #1
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	2331      	movs	r3, #49	; 0x31
 80081a0:	7013      	strb	r3, [r2, #0]
 80081a2:	e6ce      	b.n	8007f42 <_dtoa_r+0x94a>
 80081a4:	4b09      	ldr	r3, [pc, #36]	; (80081cc <_dtoa_r+0xbd4>)
 80081a6:	f7ff ba95 	b.w	80076d4 <_dtoa_r+0xdc>
 80081aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f47f aa6e 	bne.w	800768e <_dtoa_r+0x96>
 80081b2:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <_dtoa_r+0xbd8>)
 80081b4:	f7ff ba8e 	b.w	80076d4 <_dtoa_r+0xdc>
 80081b8:	9b02      	ldr	r3, [sp, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	dcae      	bgt.n	800811c <_dtoa_r+0xb24>
 80081be:	9b06      	ldr	r3, [sp, #24]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	f73f aea8 	bgt.w	8007f16 <_dtoa_r+0x91e>
 80081c6:	e7a9      	b.n	800811c <_dtoa_r+0xb24>
 80081c8:	0800b780 	.word	0x0800b780
 80081cc:	0800b584 	.word	0x0800b584
 80081d0:	0800b701 	.word	0x0800b701

080081d4 <rshift>:
 80081d4:	6903      	ldr	r3, [r0, #16]
 80081d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80081da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80081e2:	f100 0414 	add.w	r4, r0, #20
 80081e6:	dd45      	ble.n	8008274 <rshift+0xa0>
 80081e8:	f011 011f 	ands.w	r1, r1, #31
 80081ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80081f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80081f4:	d10c      	bne.n	8008210 <rshift+0x3c>
 80081f6:	f100 0710 	add.w	r7, r0, #16
 80081fa:	4629      	mov	r1, r5
 80081fc:	42b1      	cmp	r1, r6
 80081fe:	d334      	bcc.n	800826a <rshift+0x96>
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	1eea      	subs	r2, r5, #3
 8008206:	4296      	cmp	r6, r2
 8008208:	bf38      	it	cc
 800820a:	2300      	movcc	r3, #0
 800820c:	4423      	add	r3, r4
 800820e:	e015      	b.n	800823c <rshift+0x68>
 8008210:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008214:	f1c1 0820 	rsb	r8, r1, #32
 8008218:	40cf      	lsrs	r7, r1
 800821a:	f105 0e04 	add.w	lr, r5, #4
 800821e:	46a1      	mov	r9, r4
 8008220:	4576      	cmp	r6, lr
 8008222:	46f4      	mov	ip, lr
 8008224:	d815      	bhi.n	8008252 <rshift+0x7e>
 8008226:	1a9a      	subs	r2, r3, r2
 8008228:	0092      	lsls	r2, r2, #2
 800822a:	3a04      	subs	r2, #4
 800822c:	3501      	adds	r5, #1
 800822e:	42ae      	cmp	r6, r5
 8008230:	bf38      	it	cc
 8008232:	2200      	movcc	r2, #0
 8008234:	18a3      	adds	r3, r4, r2
 8008236:	50a7      	str	r7, [r4, r2]
 8008238:	b107      	cbz	r7, 800823c <rshift+0x68>
 800823a:	3304      	adds	r3, #4
 800823c:	1b1a      	subs	r2, r3, r4
 800823e:	42a3      	cmp	r3, r4
 8008240:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008244:	bf08      	it	eq
 8008246:	2300      	moveq	r3, #0
 8008248:	6102      	str	r2, [r0, #16]
 800824a:	bf08      	it	eq
 800824c:	6143      	streq	r3, [r0, #20]
 800824e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008252:	f8dc c000 	ldr.w	ip, [ip]
 8008256:	fa0c fc08 	lsl.w	ip, ip, r8
 800825a:	ea4c 0707 	orr.w	r7, ip, r7
 800825e:	f849 7b04 	str.w	r7, [r9], #4
 8008262:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008266:	40cf      	lsrs	r7, r1
 8008268:	e7da      	b.n	8008220 <rshift+0x4c>
 800826a:	f851 cb04 	ldr.w	ip, [r1], #4
 800826e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008272:	e7c3      	b.n	80081fc <rshift+0x28>
 8008274:	4623      	mov	r3, r4
 8008276:	e7e1      	b.n	800823c <rshift+0x68>

08008278 <__hexdig_fun>:
 8008278:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800827c:	2b09      	cmp	r3, #9
 800827e:	d802      	bhi.n	8008286 <__hexdig_fun+0xe>
 8008280:	3820      	subs	r0, #32
 8008282:	b2c0      	uxtb	r0, r0
 8008284:	4770      	bx	lr
 8008286:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800828a:	2b05      	cmp	r3, #5
 800828c:	d801      	bhi.n	8008292 <__hexdig_fun+0x1a>
 800828e:	3847      	subs	r0, #71	; 0x47
 8008290:	e7f7      	b.n	8008282 <__hexdig_fun+0xa>
 8008292:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008296:	2b05      	cmp	r3, #5
 8008298:	d801      	bhi.n	800829e <__hexdig_fun+0x26>
 800829a:	3827      	subs	r0, #39	; 0x27
 800829c:	e7f1      	b.n	8008282 <__hexdig_fun+0xa>
 800829e:	2000      	movs	r0, #0
 80082a0:	4770      	bx	lr
	...

080082a4 <__gethex>:
 80082a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	ed2d 8b02 	vpush	{d8}
 80082ac:	b089      	sub	sp, #36	; 0x24
 80082ae:	ee08 0a10 	vmov	s16, r0
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	4bb4      	ldr	r3, [pc, #720]	; (8008588 <__gethex+0x2e4>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	4618      	mov	r0, r3
 80082bc:	468b      	mov	fp, r1
 80082be:	4690      	mov	r8, r2
 80082c0:	f7f7 ff8e 	bl	80001e0 <strlen>
 80082c4:	9b01      	ldr	r3, [sp, #4]
 80082c6:	f8db 2000 	ldr.w	r2, [fp]
 80082ca:	4403      	add	r3, r0
 80082cc:	4682      	mov	sl, r0
 80082ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80082d2:	9305      	str	r3, [sp, #20]
 80082d4:	1c93      	adds	r3, r2, #2
 80082d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80082da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80082de:	32fe      	adds	r2, #254	; 0xfe
 80082e0:	18d1      	adds	r1, r2, r3
 80082e2:	461f      	mov	r7, r3
 80082e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80082e8:	9100      	str	r1, [sp, #0]
 80082ea:	2830      	cmp	r0, #48	; 0x30
 80082ec:	d0f8      	beq.n	80082e0 <__gethex+0x3c>
 80082ee:	f7ff ffc3 	bl	8008278 <__hexdig_fun>
 80082f2:	4604      	mov	r4, r0
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d13a      	bne.n	800836e <__gethex+0xca>
 80082f8:	9901      	ldr	r1, [sp, #4]
 80082fa:	4652      	mov	r2, sl
 80082fc:	4638      	mov	r0, r7
 80082fe:	f001 fa33 	bl	8009768 <strncmp>
 8008302:	4605      	mov	r5, r0
 8008304:	2800      	cmp	r0, #0
 8008306:	d168      	bne.n	80083da <__gethex+0x136>
 8008308:	f817 000a 	ldrb.w	r0, [r7, sl]
 800830c:	eb07 060a 	add.w	r6, r7, sl
 8008310:	f7ff ffb2 	bl	8008278 <__hexdig_fun>
 8008314:	2800      	cmp	r0, #0
 8008316:	d062      	beq.n	80083de <__gethex+0x13a>
 8008318:	4633      	mov	r3, r6
 800831a:	7818      	ldrb	r0, [r3, #0]
 800831c:	2830      	cmp	r0, #48	; 0x30
 800831e:	461f      	mov	r7, r3
 8008320:	f103 0301 	add.w	r3, r3, #1
 8008324:	d0f9      	beq.n	800831a <__gethex+0x76>
 8008326:	f7ff ffa7 	bl	8008278 <__hexdig_fun>
 800832a:	2301      	movs	r3, #1
 800832c:	fab0 f480 	clz	r4, r0
 8008330:	0964      	lsrs	r4, r4, #5
 8008332:	4635      	mov	r5, r6
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	463a      	mov	r2, r7
 8008338:	4616      	mov	r6, r2
 800833a:	3201      	adds	r2, #1
 800833c:	7830      	ldrb	r0, [r6, #0]
 800833e:	f7ff ff9b 	bl	8008278 <__hexdig_fun>
 8008342:	2800      	cmp	r0, #0
 8008344:	d1f8      	bne.n	8008338 <__gethex+0x94>
 8008346:	9901      	ldr	r1, [sp, #4]
 8008348:	4652      	mov	r2, sl
 800834a:	4630      	mov	r0, r6
 800834c:	f001 fa0c 	bl	8009768 <strncmp>
 8008350:	b980      	cbnz	r0, 8008374 <__gethex+0xd0>
 8008352:	b94d      	cbnz	r5, 8008368 <__gethex+0xc4>
 8008354:	eb06 050a 	add.w	r5, r6, sl
 8008358:	462a      	mov	r2, r5
 800835a:	4616      	mov	r6, r2
 800835c:	3201      	adds	r2, #1
 800835e:	7830      	ldrb	r0, [r6, #0]
 8008360:	f7ff ff8a 	bl	8008278 <__hexdig_fun>
 8008364:	2800      	cmp	r0, #0
 8008366:	d1f8      	bne.n	800835a <__gethex+0xb6>
 8008368:	1bad      	subs	r5, r5, r6
 800836a:	00ad      	lsls	r5, r5, #2
 800836c:	e004      	b.n	8008378 <__gethex+0xd4>
 800836e:	2400      	movs	r4, #0
 8008370:	4625      	mov	r5, r4
 8008372:	e7e0      	b.n	8008336 <__gethex+0x92>
 8008374:	2d00      	cmp	r5, #0
 8008376:	d1f7      	bne.n	8008368 <__gethex+0xc4>
 8008378:	7833      	ldrb	r3, [r6, #0]
 800837a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800837e:	2b50      	cmp	r3, #80	; 0x50
 8008380:	d13b      	bne.n	80083fa <__gethex+0x156>
 8008382:	7873      	ldrb	r3, [r6, #1]
 8008384:	2b2b      	cmp	r3, #43	; 0x2b
 8008386:	d02c      	beq.n	80083e2 <__gethex+0x13e>
 8008388:	2b2d      	cmp	r3, #45	; 0x2d
 800838a:	d02e      	beq.n	80083ea <__gethex+0x146>
 800838c:	1c71      	adds	r1, r6, #1
 800838e:	f04f 0900 	mov.w	r9, #0
 8008392:	7808      	ldrb	r0, [r1, #0]
 8008394:	f7ff ff70 	bl	8008278 <__hexdig_fun>
 8008398:	1e43      	subs	r3, r0, #1
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b18      	cmp	r3, #24
 800839e:	d82c      	bhi.n	80083fa <__gethex+0x156>
 80083a0:	f1a0 0210 	sub.w	r2, r0, #16
 80083a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083a8:	f7ff ff66 	bl	8008278 <__hexdig_fun>
 80083ac:	1e43      	subs	r3, r0, #1
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b18      	cmp	r3, #24
 80083b2:	d91d      	bls.n	80083f0 <__gethex+0x14c>
 80083b4:	f1b9 0f00 	cmp.w	r9, #0
 80083b8:	d000      	beq.n	80083bc <__gethex+0x118>
 80083ba:	4252      	negs	r2, r2
 80083bc:	4415      	add	r5, r2
 80083be:	f8cb 1000 	str.w	r1, [fp]
 80083c2:	b1e4      	cbz	r4, 80083fe <__gethex+0x15a>
 80083c4:	9b00      	ldr	r3, [sp, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	bf14      	ite	ne
 80083ca:	2700      	movne	r7, #0
 80083cc:	2706      	moveq	r7, #6
 80083ce:	4638      	mov	r0, r7
 80083d0:	b009      	add	sp, #36	; 0x24
 80083d2:	ecbd 8b02 	vpop	{d8}
 80083d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083da:	463e      	mov	r6, r7
 80083dc:	4625      	mov	r5, r4
 80083de:	2401      	movs	r4, #1
 80083e0:	e7ca      	b.n	8008378 <__gethex+0xd4>
 80083e2:	f04f 0900 	mov.w	r9, #0
 80083e6:	1cb1      	adds	r1, r6, #2
 80083e8:	e7d3      	b.n	8008392 <__gethex+0xee>
 80083ea:	f04f 0901 	mov.w	r9, #1
 80083ee:	e7fa      	b.n	80083e6 <__gethex+0x142>
 80083f0:	230a      	movs	r3, #10
 80083f2:	fb03 0202 	mla	r2, r3, r2, r0
 80083f6:	3a10      	subs	r2, #16
 80083f8:	e7d4      	b.n	80083a4 <__gethex+0x100>
 80083fa:	4631      	mov	r1, r6
 80083fc:	e7df      	b.n	80083be <__gethex+0x11a>
 80083fe:	1bf3      	subs	r3, r6, r7
 8008400:	3b01      	subs	r3, #1
 8008402:	4621      	mov	r1, r4
 8008404:	2b07      	cmp	r3, #7
 8008406:	dc0b      	bgt.n	8008420 <__gethex+0x17c>
 8008408:	ee18 0a10 	vmov	r0, s16
 800840c:	f000 fa7e 	bl	800890c <_Balloc>
 8008410:	4604      	mov	r4, r0
 8008412:	b940      	cbnz	r0, 8008426 <__gethex+0x182>
 8008414:	4b5d      	ldr	r3, [pc, #372]	; (800858c <__gethex+0x2e8>)
 8008416:	4602      	mov	r2, r0
 8008418:	21de      	movs	r1, #222	; 0xde
 800841a:	485d      	ldr	r0, [pc, #372]	; (8008590 <__gethex+0x2ec>)
 800841c:	f001 f9c6 	bl	80097ac <__assert_func>
 8008420:	3101      	adds	r1, #1
 8008422:	105b      	asrs	r3, r3, #1
 8008424:	e7ee      	b.n	8008404 <__gethex+0x160>
 8008426:	f100 0914 	add.w	r9, r0, #20
 800842a:	f04f 0b00 	mov.w	fp, #0
 800842e:	f1ca 0301 	rsb	r3, sl, #1
 8008432:	f8cd 9008 	str.w	r9, [sp, #8]
 8008436:	f8cd b000 	str.w	fp, [sp]
 800843a:	9306      	str	r3, [sp, #24]
 800843c:	42b7      	cmp	r7, r6
 800843e:	d340      	bcc.n	80084c2 <__gethex+0x21e>
 8008440:	9802      	ldr	r0, [sp, #8]
 8008442:	9b00      	ldr	r3, [sp, #0]
 8008444:	f840 3b04 	str.w	r3, [r0], #4
 8008448:	eba0 0009 	sub.w	r0, r0, r9
 800844c:	1080      	asrs	r0, r0, #2
 800844e:	0146      	lsls	r6, r0, #5
 8008450:	6120      	str	r0, [r4, #16]
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fb4c 	bl	8008af0 <__hi0bits>
 8008458:	1a30      	subs	r0, r6, r0
 800845a:	f8d8 6000 	ldr.w	r6, [r8]
 800845e:	42b0      	cmp	r0, r6
 8008460:	dd63      	ble.n	800852a <__gethex+0x286>
 8008462:	1b87      	subs	r7, r0, r6
 8008464:	4639      	mov	r1, r7
 8008466:	4620      	mov	r0, r4
 8008468:	f000 fef0 	bl	800924c <__any_on>
 800846c:	4682      	mov	sl, r0
 800846e:	b1a8      	cbz	r0, 800849c <__gethex+0x1f8>
 8008470:	1e7b      	subs	r3, r7, #1
 8008472:	1159      	asrs	r1, r3, #5
 8008474:	f003 021f 	and.w	r2, r3, #31
 8008478:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800847c:	f04f 0a01 	mov.w	sl, #1
 8008480:	fa0a f202 	lsl.w	r2, sl, r2
 8008484:	420a      	tst	r2, r1
 8008486:	d009      	beq.n	800849c <__gethex+0x1f8>
 8008488:	4553      	cmp	r3, sl
 800848a:	dd05      	ble.n	8008498 <__gethex+0x1f4>
 800848c:	1eb9      	subs	r1, r7, #2
 800848e:	4620      	mov	r0, r4
 8008490:	f000 fedc 	bl	800924c <__any_on>
 8008494:	2800      	cmp	r0, #0
 8008496:	d145      	bne.n	8008524 <__gethex+0x280>
 8008498:	f04f 0a02 	mov.w	sl, #2
 800849c:	4639      	mov	r1, r7
 800849e:	4620      	mov	r0, r4
 80084a0:	f7ff fe98 	bl	80081d4 <rshift>
 80084a4:	443d      	add	r5, r7
 80084a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084aa:	42ab      	cmp	r3, r5
 80084ac:	da4c      	bge.n	8008548 <__gethex+0x2a4>
 80084ae:	ee18 0a10 	vmov	r0, s16
 80084b2:	4621      	mov	r1, r4
 80084b4:	f000 fa6a 	bl	800898c <_Bfree>
 80084b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084ba:	2300      	movs	r3, #0
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	27a3      	movs	r7, #163	; 0xa3
 80084c0:	e785      	b.n	80083ce <__gethex+0x12a>
 80084c2:	1e73      	subs	r3, r6, #1
 80084c4:	9a05      	ldr	r2, [sp, #20]
 80084c6:	9303      	str	r3, [sp, #12]
 80084c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d019      	beq.n	8008504 <__gethex+0x260>
 80084d0:	f1bb 0f20 	cmp.w	fp, #32
 80084d4:	d107      	bne.n	80084e6 <__gethex+0x242>
 80084d6:	9b02      	ldr	r3, [sp, #8]
 80084d8:	9a00      	ldr	r2, [sp, #0]
 80084da:	f843 2b04 	str.w	r2, [r3], #4
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	2300      	movs	r3, #0
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	469b      	mov	fp, r3
 80084e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80084ea:	f7ff fec5 	bl	8008278 <__hexdig_fun>
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	f000 000f 	and.w	r0, r0, #15
 80084f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80084f8:	4303      	orrs	r3, r0
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	f10b 0b04 	add.w	fp, fp, #4
 8008500:	9b03      	ldr	r3, [sp, #12]
 8008502:	e00d      	b.n	8008520 <__gethex+0x27c>
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	9a06      	ldr	r2, [sp, #24]
 8008508:	4413      	add	r3, r2
 800850a:	42bb      	cmp	r3, r7
 800850c:	d3e0      	bcc.n	80084d0 <__gethex+0x22c>
 800850e:	4618      	mov	r0, r3
 8008510:	9901      	ldr	r1, [sp, #4]
 8008512:	9307      	str	r3, [sp, #28]
 8008514:	4652      	mov	r2, sl
 8008516:	f001 f927 	bl	8009768 <strncmp>
 800851a:	9b07      	ldr	r3, [sp, #28]
 800851c:	2800      	cmp	r0, #0
 800851e:	d1d7      	bne.n	80084d0 <__gethex+0x22c>
 8008520:	461e      	mov	r6, r3
 8008522:	e78b      	b.n	800843c <__gethex+0x198>
 8008524:	f04f 0a03 	mov.w	sl, #3
 8008528:	e7b8      	b.n	800849c <__gethex+0x1f8>
 800852a:	da0a      	bge.n	8008542 <__gethex+0x29e>
 800852c:	1a37      	subs	r7, r6, r0
 800852e:	4621      	mov	r1, r4
 8008530:	ee18 0a10 	vmov	r0, s16
 8008534:	463a      	mov	r2, r7
 8008536:	f000 fc45 	bl	8008dc4 <__lshift>
 800853a:	1bed      	subs	r5, r5, r7
 800853c:	4604      	mov	r4, r0
 800853e:	f100 0914 	add.w	r9, r0, #20
 8008542:	f04f 0a00 	mov.w	sl, #0
 8008546:	e7ae      	b.n	80084a6 <__gethex+0x202>
 8008548:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800854c:	42a8      	cmp	r0, r5
 800854e:	dd72      	ble.n	8008636 <__gethex+0x392>
 8008550:	1b45      	subs	r5, r0, r5
 8008552:	42ae      	cmp	r6, r5
 8008554:	dc36      	bgt.n	80085c4 <__gethex+0x320>
 8008556:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d02a      	beq.n	80085b4 <__gethex+0x310>
 800855e:	2b03      	cmp	r3, #3
 8008560:	d02c      	beq.n	80085bc <__gethex+0x318>
 8008562:	2b01      	cmp	r3, #1
 8008564:	d11c      	bne.n	80085a0 <__gethex+0x2fc>
 8008566:	42ae      	cmp	r6, r5
 8008568:	d11a      	bne.n	80085a0 <__gethex+0x2fc>
 800856a:	2e01      	cmp	r6, #1
 800856c:	d112      	bne.n	8008594 <__gethex+0x2f0>
 800856e:	9a04      	ldr	r2, [sp, #16]
 8008570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	2301      	movs	r3, #1
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	f8c9 3000 	str.w	r3, [r9]
 800857e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008580:	2762      	movs	r7, #98	; 0x62
 8008582:	601c      	str	r4, [r3, #0]
 8008584:	e723      	b.n	80083ce <__gethex+0x12a>
 8008586:	bf00      	nop
 8008588:	0800b7f8 	.word	0x0800b7f8
 800858c:	0800b780 	.word	0x0800b780
 8008590:	0800b791 	.word	0x0800b791
 8008594:	1e71      	subs	r1, r6, #1
 8008596:	4620      	mov	r0, r4
 8008598:	f000 fe58 	bl	800924c <__any_on>
 800859c:	2800      	cmp	r0, #0
 800859e:	d1e6      	bne.n	800856e <__gethex+0x2ca>
 80085a0:	ee18 0a10 	vmov	r0, s16
 80085a4:	4621      	mov	r1, r4
 80085a6:	f000 f9f1 	bl	800898c <_Bfree>
 80085aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085ac:	2300      	movs	r3, #0
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	2750      	movs	r7, #80	; 0x50
 80085b2:	e70c      	b.n	80083ce <__gethex+0x12a>
 80085b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1f2      	bne.n	80085a0 <__gethex+0x2fc>
 80085ba:	e7d8      	b.n	800856e <__gethex+0x2ca>
 80085bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1d5      	bne.n	800856e <__gethex+0x2ca>
 80085c2:	e7ed      	b.n	80085a0 <__gethex+0x2fc>
 80085c4:	1e6f      	subs	r7, r5, #1
 80085c6:	f1ba 0f00 	cmp.w	sl, #0
 80085ca:	d131      	bne.n	8008630 <__gethex+0x38c>
 80085cc:	b127      	cbz	r7, 80085d8 <__gethex+0x334>
 80085ce:	4639      	mov	r1, r7
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 fe3b 	bl	800924c <__any_on>
 80085d6:	4682      	mov	sl, r0
 80085d8:	117b      	asrs	r3, r7, #5
 80085da:	2101      	movs	r1, #1
 80085dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80085e0:	f007 071f 	and.w	r7, r7, #31
 80085e4:	fa01 f707 	lsl.w	r7, r1, r7
 80085e8:	421f      	tst	r7, r3
 80085ea:	4629      	mov	r1, r5
 80085ec:	4620      	mov	r0, r4
 80085ee:	bf18      	it	ne
 80085f0:	f04a 0a02 	orrne.w	sl, sl, #2
 80085f4:	1b76      	subs	r6, r6, r5
 80085f6:	f7ff fded 	bl	80081d4 <rshift>
 80085fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80085fe:	2702      	movs	r7, #2
 8008600:	f1ba 0f00 	cmp.w	sl, #0
 8008604:	d048      	beq.n	8008698 <__gethex+0x3f4>
 8008606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d015      	beq.n	800863a <__gethex+0x396>
 800860e:	2b03      	cmp	r3, #3
 8008610:	d017      	beq.n	8008642 <__gethex+0x39e>
 8008612:	2b01      	cmp	r3, #1
 8008614:	d109      	bne.n	800862a <__gethex+0x386>
 8008616:	f01a 0f02 	tst.w	sl, #2
 800861a:	d006      	beq.n	800862a <__gethex+0x386>
 800861c:	f8d9 0000 	ldr.w	r0, [r9]
 8008620:	ea4a 0a00 	orr.w	sl, sl, r0
 8008624:	f01a 0f01 	tst.w	sl, #1
 8008628:	d10e      	bne.n	8008648 <__gethex+0x3a4>
 800862a:	f047 0710 	orr.w	r7, r7, #16
 800862e:	e033      	b.n	8008698 <__gethex+0x3f4>
 8008630:	f04f 0a01 	mov.w	sl, #1
 8008634:	e7d0      	b.n	80085d8 <__gethex+0x334>
 8008636:	2701      	movs	r7, #1
 8008638:	e7e2      	b.n	8008600 <__gethex+0x35c>
 800863a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800863c:	f1c3 0301 	rsb	r3, r3, #1
 8008640:	9315      	str	r3, [sp, #84]	; 0x54
 8008642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0f0      	beq.n	800862a <__gethex+0x386>
 8008648:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800864c:	f104 0314 	add.w	r3, r4, #20
 8008650:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008654:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008658:	f04f 0c00 	mov.w	ip, #0
 800865c:	4618      	mov	r0, r3
 800865e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008662:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008666:	d01c      	beq.n	80086a2 <__gethex+0x3fe>
 8008668:	3201      	adds	r2, #1
 800866a:	6002      	str	r2, [r0, #0]
 800866c:	2f02      	cmp	r7, #2
 800866e:	f104 0314 	add.w	r3, r4, #20
 8008672:	d13f      	bne.n	80086f4 <__gethex+0x450>
 8008674:	f8d8 2000 	ldr.w	r2, [r8]
 8008678:	3a01      	subs	r2, #1
 800867a:	42b2      	cmp	r2, r6
 800867c:	d10a      	bne.n	8008694 <__gethex+0x3f0>
 800867e:	1171      	asrs	r1, r6, #5
 8008680:	2201      	movs	r2, #1
 8008682:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008686:	f006 061f 	and.w	r6, r6, #31
 800868a:	fa02 f606 	lsl.w	r6, r2, r6
 800868e:	421e      	tst	r6, r3
 8008690:	bf18      	it	ne
 8008692:	4617      	movne	r7, r2
 8008694:	f047 0720 	orr.w	r7, r7, #32
 8008698:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800869a:	601c      	str	r4, [r3, #0]
 800869c:	9b04      	ldr	r3, [sp, #16]
 800869e:	601d      	str	r5, [r3, #0]
 80086a0:	e695      	b.n	80083ce <__gethex+0x12a>
 80086a2:	4299      	cmp	r1, r3
 80086a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80086a8:	d8d8      	bhi.n	800865c <__gethex+0x3b8>
 80086aa:	68a3      	ldr	r3, [r4, #8]
 80086ac:	459b      	cmp	fp, r3
 80086ae:	db19      	blt.n	80086e4 <__gethex+0x440>
 80086b0:	6861      	ldr	r1, [r4, #4]
 80086b2:	ee18 0a10 	vmov	r0, s16
 80086b6:	3101      	adds	r1, #1
 80086b8:	f000 f928 	bl	800890c <_Balloc>
 80086bc:	4681      	mov	r9, r0
 80086be:	b918      	cbnz	r0, 80086c8 <__gethex+0x424>
 80086c0:	4b1a      	ldr	r3, [pc, #104]	; (800872c <__gethex+0x488>)
 80086c2:	4602      	mov	r2, r0
 80086c4:	2184      	movs	r1, #132	; 0x84
 80086c6:	e6a8      	b.n	800841a <__gethex+0x176>
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	3202      	adds	r2, #2
 80086cc:	f104 010c 	add.w	r1, r4, #12
 80086d0:	0092      	lsls	r2, r2, #2
 80086d2:	300c      	adds	r0, #12
 80086d4:	f000 f90c 	bl	80088f0 <memcpy>
 80086d8:	4621      	mov	r1, r4
 80086da:	ee18 0a10 	vmov	r0, s16
 80086de:	f000 f955 	bl	800898c <_Bfree>
 80086e2:	464c      	mov	r4, r9
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086ec:	6122      	str	r2, [r4, #16]
 80086ee:	2201      	movs	r2, #1
 80086f0:	615a      	str	r2, [r3, #20]
 80086f2:	e7bb      	b.n	800866c <__gethex+0x3c8>
 80086f4:	6922      	ldr	r2, [r4, #16]
 80086f6:	455a      	cmp	r2, fp
 80086f8:	dd0b      	ble.n	8008712 <__gethex+0x46e>
 80086fa:	2101      	movs	r1, #1
 80086fc:	4620      	mov	r0, r4
 80086fe:	f7ff fd69 	bl	80081d4 <rshift>
 8008702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008706:	3501      	adds	r5, #1
 8008708:	42ab      	cmp	r3, r5
 800870a:	f6ff aed0 	blt.w	80084ae <__gethex+0x20a>
 800870e:	2701      	movs	r7, #1
 8008710:	e7c0      	b.n	8008694 <__gethex+0x3f0>
 8008712:	f016 061f 	ands.w	r6, r6, #31
 8008716:	d0fa      	beq.n	800870e <__gethex+0x46a>
 8008718:	4453      	add	r3, sl
 800871a:	f1c6 0620 	rsb	r6, r6, #32
 800871e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008722:	f000 f9e5 	bl	8008af0 <__hi0bits>
 8008726:	42b0      	cmp	r0, r6
 8008728:	dbe7      	blt.n	80086fa <__gethex+0x456>
 800872a:	e7f0      	b.n	800870e <__gethex+0x46a>
 800872c:	0800b780 	.word	0x0800b780

08008730 <L_shift>:
 8008730:	f1c2 0208 	rsb	r2, r2, #8
 8008734:	0092      	lsls	r2, r2, #2
 8008736:	b570      	push	{r4, r5, r6, lr}
 8008738:	f1c2 0620 	rsb	r6, r2, #32
 800873c:	6843      	ldr	r3, [r0, #4]
 800873e:	6804      	ldr	r4, [r0, #0]
 8008740:	fa03 f506 	lsl.w	r5, r3, r6
 8008744:	432c      	orrs	r4, r5
 8008746:	40d3      	lsrs	r3, r2
 8008748:	6004      	str	r4, [r0, #0]
 800874a:	f840 3f04 	str.w	r3, [r0, #4]!
 800874e:	4288      	cmp	r0, r1
 8008750:	d3f4      	bcc.n	800873c <L_shift+0xc>
 8008752:	bd70      	pop	{r4, r5, r6, pc}

08008754 <__match>:
 8008754:	b530      	push	{r4, r5, lr}
 8008756:	6803      	ldr	r3, [r0, #0]
 8008758:	3301      	adds	r3, #1
 800875a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800875e:	b914      	cbnz	r4, 8008766 <__match+0x12>
 8008760:	6003      	str	r3, [r0, #0]
 8008762:	2001      	movs	r0, #1
 8008764:	bd30      	pop	{r4, r5, pc}
 8008766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800876a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800876e:	2d19      	cmp	r5, #25
 8008770:	bf98      	it	ls
 8008772:	3220      	addls	r2, #32
 8008774:	42a2      	cmp	r2, r4
 8008776:	d0f0      	beq.n	800875a <__match+0x6>
 8008778:	2000      	movs	r0, #0
 800877a:	e7f3      	b.n	8008764 <__match+0x10>

0800877c <__hexnan>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	680b      	ldr	r3, [r1, #0]
 8008782:	115e      	asrs	r6, r3, #5
 8008784:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008788:	f013 031f 	ands.w	r3, r3, #31
 800878c:	b087      	sub	sp, #28
 800878e:	bf18      	it	ne
 8008790:	3604      	addne	r6, #4
 8008792:	2500      	movs	r5, #0
 8008794:	1f37      	subs	r7, r6, #4
 8008796:	4690      	mov	r8, r2
 8008798:	6802      	ldr	r2, [r0, #0]
 800879a:	9301      	str	r3, [sp, #4]
 800879c:	4682      	mov	sl, r0
 800879e:	f846 5c04 	str.w	r5, [r6, #-4]
 80087a2:	46b9      	mov	r9, r7
 80087a4:	463c      	mov	r4, r7
 80087a6:	9502      	str	r5, [sp, #8]
 80087a8:	46ab      	mov	fp, r5
 80087aa:	7851      	ldrb	r1, [r2, #1]
 80087ac:	1c53      	adds	r3, r2, #1
 80087ae:	9303      	str	r3, [sp, #12]
 80087b0:	b341      	cbz	r1, 8008804 <__hexnan+0x88>
 80087b2:	4608      	mov	r0, r1
 80087b4:	9205      	str	r2, [sp, #20]
 80087b6:	9104      	str	r1, [sp, #16]
 80087b8:	f7ff fd5e 	bl	8008278 <__hexdig_fun>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d14f      	bne.n	8008860 <__hexnan+0xe4>
 80087c0:	9904      	ldr	r1, [sp, #16]
 80087c2:	9a05      	ldr	r2, [sp, #20]
 80087c4:	2920      	cmp	r1, #32
 80087c6:	d818      	bhi.n	80087fa <__hexnan+0x7e>
 80087c8:	9b02      	ldr	r3, [sp, #8]
 80087ca:	459b      	cmp	fp, r3
 80087cc:	dd13      	ble.n	80087f6 <__hexnan+0x7a>
 80087ce:	454c      	cmp	r4, r9
 80087d0:	d206      	bcs.n	80087e0 <__hexnan+0x64>
 80087d2:	2d07      	cmp	r5, #7
 80087d4:	dc04      	bgt.n	80087e0 <__hexnan+0x64>
 80087d6:	462a      	mov	r2, r5
 80087d8:	4649      	mov	r1, r9
 80087da:	4620      	mov	r0, r4
 80087dc:	f7ff ffa8 	bl	8008730 <L_shift>
 80087e0:	4544      	cmp	r4, r8
 80087e2:	d950      	bls.n	8008886 <__hexnan+0x10a>
 80087e4:	2300      	movs	r3, #0
 80087e6:	f1a4 0904 	sub.w	r9, r4, #4
 80087ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80087ee:	f8cd b008 	str.w	fp, [sp, #8]
 80087f2:	464c      	mov	r4, r9
 80087f4:	461d      	mov	r5, r3
 80087f6:	9a03      	ldr	r2, [sp, #12]
 80087f8:	e7d7      	b.n	80087aa <__hexnan+0x2e>
 80087fa:	2929      	cmp	r1, #41	; 0x29
 80087fc:	d156      	bne.n	80088ac <__hexnan+0x130>
 80087fe:	3202      	adds	r2, #2
 8008800:	f8ca 2000 	str.w	r2, [sl]
 8008804:	f1bb 0f00 	cmp.w	fp, #0
 8008808:	d050      	beq.n	80088ac <__hexnan+0x130>
 800880a:	454c      	cmp	r4, r9
 800880c:	d206      	bcs.n	800881c <__hexnan+0xa0>
 800880e:	2d07      	cmp	r5, #7
 8008810:	dc04      	bgt.n	800881c <__hexnan+0xa0>
 8008812:	462a      	mov	r2, r5
 8008814:	4649      	mov	r1, r9
 8008816:	4620      	mov	r0, r4
 8008818:	f7ff ff8a 	bl	8008730 <L_shift>
 800881c:	4544      	cmp	r4, r8
 800881e:	d934      	bls.n	800888a <__hexnan+0x10e>
 8008820:	f1a8 0204 	sub.w	r2, r8, #4
 8008824:	4623      	mov	r3, r4
 8008826:	f853 1b04 	ldr.w	r1, [r3], #4
 800882a:	f842 1f04 	str.w	r1, [r2, #4]!
 800882e:	429f      	cmp	r7, r3
 8008830:	d2f9      	bcs.n	8008826 <__hexnan+0xaa>
 8008832:	1b3b      	subs	r3, r7, r4
 8008834:	f023 0303 	bic.w	r3, r3, #3
 8008838:	3304      	adds	r3, #4
 800883a:	3401      	adds	r4, #1
 800883c:	3e03      	subs	r6, #3
 800883e:	42b4      	cmp	r4, r6
 8008840:	bf88      	it	hi
 8008842:	2304      	movhi	r3, #4
 8008844:	4443      	add	r3, r8
 8008846:	2200      	movs	r2, #0
 8008848:	f843 2b04 	str.w	r2, [r3], #4
 800884c:	429f      	cmp	r7, r3
 800884e:	d2fb      	bcs.n	8008848 <__hexnan+0xcc>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	b91b      	cbnz	r3, 800885c <__hexnan+0xe0>
 8008854:	4547      	cmp	r7, r8
 8008856:	d127      	bne.n	80088a8 <__hexnan+0x12c>
 8008858:	2301      	movs	r3, #1
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	2005      	movs	r0, #5
 800885e:	e026      	b.n	80088ae <__hexnan+0x132>
 8008860:	3501      	adds	r5, #1
 8008862:	2d08      	cmp	r5, #8
 8008864:	f10b 0b01 	add.w	fp, fp, #1
 8008868:	dd06      	ble.n	8008878 <__hexnan+0xfc>
 800886a:	4544      	cmp	r4, r8
 800886c:	d9c3      	bls.n	80087f6 <__hexnan+0x7a>
 800886e:	2300      	movs	r3, #0
 8008870:	f844 3c04 	str.w	r3, [r4, #-4]
 8008874:	2501      	movs	r5, #1
 8008876:	3c04      	subs	r4, #4
 8008878:	6822      	ldr	r2, [r4, #0]
 800887a:	f000 000f 	and.w	r0, r0, #15
 800887e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008882:	6022      	str	r2, [r4, #0]
 8008884:	e7b7      	b.n	80087f6 <__hexnan+0x7a>
 8008886:	2508      	movs	r5, #8
 8008888:	e7b5      	b.n	80087f6 <__hexnan+0x7a>
 800888a:	9b01      	ldr	r3, [sp, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0df      	beq.n	8008850 <__hexnan+0xd4>
 8008890:	f04f 32ff 	mov.w	r2, #4294967295
 8008894:	f1c3 0320 	rsb	r3, r3, #32
 8008898:	fa22 f303 	lsr.w	r3, r2, r3
 800889c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80088a0:	401a      	ands	r2, r3
 80088a2:	f846 2c04 	str.w	r2, [r6, #-4]
 80088a6:	e7d3      	b.n	8008850 <__hexnan+0xd4>
 80088a8:	3f04      	subs	r7, #4
 80088aa:	e7d1      	b.n	8008850 <__hexnan+0xd4>
 80088ac:	2004      	movs	r0, #4
 80088ae:	b007      	add	sp, #28
 80088b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088b4 <_localeconv_r>:
 80088b4:	4800      	ldr	r0, [pc, #0]	; (80088b8 <_localeconv_r+0x4>)
 80088b6:	4770      	bx	lr
 80088b8:	20000168 	.word	0x20000168

080088bc <malloc>:
 80088bc:	4b02      	ldr	r3, [pc, #8]	; (80088c8 <malloc+0xc>)
 80088be:	4601      	mov	r1, r0
 80088c0:	6818      	ldr	r0, [r3, #0]
 80088c2:	f000 bd67 	b.w	8009394 <_malloc_r>
 80088c6:	bf00      	nop
 80088c8:	20000010 	.word	0x20000010

080088cc <__ascii_mbtowc>:
 80088cc:	b082      	sub	sp, #8
 80088ce:	b901      	cbnz	r1, 80088d2 <__ascii_mbtowc+0x6>
 80088d0:	a901      	add	r1, sp, #4
 80088d2:	b142      	cbz	r2, 80088e6 <__ascii_mbtowc+0x1a>
 80088d4:	b14b      	cbz	r3, 80088ea <__ascii_mbtowc+0x1e>
 80088d6:	7813      	ldrb	r3, [r2, #0]
 80088d8:	600b      	str	r3, [r1, #0]
 80088da:	7812      	ldrb	r2, [r2, #0]
 80088dc:	1e10      	subs	r0, r2, #0
 80088de:	bf18      	it	ne
 80088e0:	2001      	movne	r0, #1
 80088e2:	b002      	add	sp, #8
 80088e4:	4770      	bx	lr
 80088e6:	4610      	mov	r0, r2
 80088e8:	e7fb      	b.n	80088e2 <__ascii_mbtowc+0x16>
 80088ea:	f06f 0001 	mvn.w	r0, #1
 80088ee:	e7f8      	b.n	80088e2 <__ascii_mbtowc+0x16>

080088f0 <memcpy>:
 80088f0:	440a      	add	r2, r1
 80088f2:	4291      	cmp	r1, r2
 80088f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088f8:	d100      	bne.n	80088fc <memcpy+0xc>
 80088fa:	4770      	bx	lr
 80088fc:	b510      	push	{r4, lr}
 80088fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008902:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008906:	4291      	cmp	r1, r2
 8008908:	d1f9      	bne.n	80088fe <memcpy+0xe>
 800890a:	bd10      	pop	{r4, pc}

0800890c <_Balloc>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008910:	4604      	mov	r4, r0
 8008912:	460d      	mov	r5, r1
 8008914:	b976      	cbnz	r6, 8008934 <_Balloc+0x28>
 8008916:	2010      	movs	r0, #16
 8008918:	f7ff ffd0 	bl	80088bc <malloc>
 800891c:	4602      	mov	r2, r0
 800891e:	6260      	str	r0, [r4, #36]	; 0x24
 8008920:	b920      	cbnz	r0, 800892c <_Balloc+0x20>
 8008922:	4b18      	ldr	r3, [pc, #96]	; (8008984 <_Balloc+0x78>)
 8008924:	4818      	ldr	r0, [pc, #96]	; (8008988 <_Balloc+0x7c>)
 8008926:	2166      	movs	r1, #102	; 0x66
 8008928:	f000 ff40 	bl	80097ac <__assert_func>
 800892c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008930:	6006      	str	r6, [r0, #0]
 8008932:	60c6      	str	r6, [r0, #12]
 8008934:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008936:	68f3      	ldr	r3, [r6, #12]
 8008938:	b183      	cbz	r3, 800895c <_Balloc+0x50>
 800893a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008942:	b9b8      	cbnz	r0, 8008974 <_Balloc+0x68>
 8008944:	2101      	movs	r1, #1
 8008946:	fa01 f605 	lsl.w	r6, r1, r5
 800894a:	1d72      	adds	r2, r6, #5
 800894c:	0092      	lsls	r2, r2, #2
 800894e:	4620      	mov	r0, r4
 8008950:	f000 fc9d 	bl	800928e <_calloc_r>
 8008954:	b160      	cbz	r0, 8008970 <_Balloc+0x64>
 8008956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800895a:	e00e      	b.n	800897a <_Balloc+0x6e>
 800895c:	2221      	movs	r2, #33	; 0x21
 800895e:	2104      	movs	r1, #4
 8008960:	4620      	mov	r0, r4
 8008962:	f000 fc94 	bl	800928e <_calloc_r>
 8008966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008968:	60f0      	str	r0, [r6, #12]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e4      	bne.n	800893a <_Balloc+0x2e>
 8008970:	2000      	movs	r0, #0
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	6802      	ldr	r2, [r0, #0]
 8008976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800897a:	2300      	movs	r3, #0
 800897c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008980:	e7f7      	b.n	8008972 <_Balloc+0x66>
 8008982:	bf00      	nop
 8008984:	0800b70e 	.word	0x0800b70e
 8008988:	0800b80c 	.word	0x0800b80c

0800898c <_Bfree>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008990:	4605      	mov	r5, r0
 8008992:	460c      	mov	r4, r1
 8008994:	b976      	cbnz	r6, 80089b4 <_Bfree+0x28>
 8008996:	2010      	movs	r0, #16
 8008998:	f7ff ff90 	bl	80088bc <malloc>
 800899c:	4602      	mov	r2, r0
 800899e:	6268      	str	r0, [r5, #36]	; 0x24
 80089a0:	b920      	cbnz	r0, 80089ac <_Bfree+0x20>
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <_Bfree+0x3c>)
 80089a4:	4809      	ldr	r0, [pc, #36]	; (80089cc <_Bfree+0x40>)
 80089a6:	218a      	movs	r1, #138	; 0x8a
 80089a8:	f000 ff00 	bl	80097ac <__assert_func>
 80089ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089b0:	6006      	str	r6, [r0, #0]
 80089b2:	60c6      	str	r6, [r0, #12]
 80089b4:	b13c      	cbz	r4, 80089c6 <_Bfree+0x3a>
 80089b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089b8:	6862      	ldr	r2, [r4, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089c0:	6021      	str	r1, [r4, #0]
 80089c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	0800b70e 	.word	0x0800b70e
 80089cc:	0800b80c 	.word	0x0800b80c

080089d0 <__multadd>:
 80089d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d4:	690d      	ldr	r5, [r1, #16]
 80089d6:	4607      	mov	r7, r0
 80089d8:	460c      	mov	r4, r1
 80089da:	461e      	mov	r6, r3
 80089dc:	f101 0c14 	add.w	ip, r1, #20
 80089e0:	2000      	movs	r0, #0
 80089e2:	f8dc 3000 	ldr.w	r3, [ip]
 80089e6:	b299      	uxth	r1, r3
 80089e8:	fb02 6101 	mla	r1, r2, r1, r6
 80089ec:	0c1e      	lsrs	r6, r3, #16
 80089ee:	0c0b      	lsrs	r3, r1, #16
 80089f0:	fb02 3306 	mla	r3, r2, r6, r3
 80089f4:	b289      	uxth	r1, r1
 80089f6:	3001      	adds	r0, #1
 80089f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089fc:	4285      	cmp	r5, r0
 80089fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008a02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a06:	dcec      	bgt.n	80089e2 <__multadd+0x12>
 8008a08:	b30e      	cbz	r6, 8008a4e <__multadd+0x7e>
 8008a0a:	68a3      	ldr	r3, [r4, #8]
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	dc19      	bgt.n	8008a44 <__multadd+0x74>
 8008a10:	6861      	ldr	r1, [r4, #4]
 8008a12:	4638      	mov	r0, r7
 8008a14:	3101      	adds	r1, #1
 8008a16:	f7ff ff79 	bl	800890c <_Balloc>
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	b928      	cbnz	r0, 8008a2a <__multadd+0x5a>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	4b0c      	ldr	r3, [pc, #48]	; (8008a54 <__multadd+0x84>)
 8008a22:	480d      	ldr	r0, [pc, #52]	; (8008a58 <__multadd+0x88>)
 8008a24:	21b5      	movs	r1, #181	; 0xb5
 8008a26:	f000 fec1 	bl	80097ac <__assert_func>
 8008a2a:	6922      	ldr	r2, [r4, #16]
 8008a2c:	3202      	adds	r2, #2
 8008a2e:	f104 010c 	add.w	r1, r4, #12
 8008a32:	0092      	lsls	r2, r2, #2
 8008a34:	300c      	adds	r0, #12
 8008a36:	f7ff ff5b 	bl	80088f0 <memcpy>
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff ffa5 	bl	800898c <_Bfree>
 8008a42:	4644      	mov	r4, r8
 8008a44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a48:	3501      	adds	r5, #1
 8008a4a:	615e      	str	r6, [r3, #20]
 8008a4c:	6125      	str	r5, [r4, #16]
 8008a4e:	4620      	mov	r0, r4
 8008a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a54:	0800b780 	.word	0x0800b780
 8008a58:	0800b80c 	.word	0x0800b80c

08008a5c <__s2b>:
 8008a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a60:	460c      	mov	r4, r1
 8008a62:	4615      	mov	r5, r2
 8008a64:	461f      	mov	r7, r3
 8008a66:	2209      	movs	r2, #9
 8008a68:	3308      	adds	r3, #8
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a70:	2100      	movs	r1, #0
 8008a72:	2201      	movs	r2, #1
 8008a74:	429a      	cmp	r2, r3
 8008a76:	db09      	blt.n	8008a8c <__s2b+0x30>
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f7ff ff47 	bl	800890c <_Balloc>
 8008a7e:	b940      	cbnz	r0, 8008a92 <__s2b+0x36>
 8008a80:	4602      	mov	r2, r0
 8008a82:	4b19      	ldr	r3, [pc, #100]	; (8008ae8 <__s2b+0x8c>)
 8008a84:	4819      	ldr	r0, [pc, #100]	; (8008aec <__s2b+0x90>)
 8008a86:	21ce      	movs	r1, #206	; 0xce
 8008a88:	f000 fe90 	bl	80097ac <__assert_func>
 8008a8c:	0052      	lsls	r2, r2, #1
 8008a8e:	3101      	adds	r1, #1
 8008a90:	e7f0      	b.n	8008a74 <__s2b+0x18>
 8008a92:	9b08      	ldr	r3, [sp, #32]
 8008a94:	6143      	str	r3, [r0, #20]
 8008a96:	2d09      	cmp	r5, #9
 8008a98:	f04f 0301 	mov.w	r3, #1
 8008a9c:	6103      	str	r3, [r0, #16]
 8008a9e:	dd16      	ble.n	8008ace <__s2b+0x72>
 8008aa0:	f104 0909 	add.w	r9, r4, #9
 8008aa4:	46c8      	mov	r8, r9
 8008aa6:	442c      	add	r4, r5
 8008aa8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008aac:	4601      	mov	r1, r0
 8008aae:	3b30      	subs	r3, #48	; 0x30
 8008ab0:	220a      	movs	r2, #10
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f7ff ff8c 	bl	80089d0 <__multadd>
 8008ab8:	45a0      	cmp	r8, r4
 8008aba:	d1f5      	bne.n	8008aa8 <__s2b+0x4c>
 8008abc:	f1a5 0408 	sub.w	r4, r5, #8
 8008ac0:	444c      	add	r4, r9
 8008ac2:	1b2d      	subs	r5, r5, r4
 8008ac4:	1963      	adds	r3, r4, r5
 8008ac6:	42bb      	cmp	r3, r7
 8008ac8:	db04      	blt.n	8008ad4 <__s2b+0x78>
 8008aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ace:	340a      	adds	r4, #10
 8008ad0:	2509      	movs	r5, #9
 8008ad2:	e7f6      	b.n	8008ac2 <__s2b+0x66>
 8008ad4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ad8:	4601      	mov	r1, r0
 8008ada:	3b30      	subs	r3, #48	; 0x30
 8008adc:	220a      	movs	r2, #10
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f7ff ff76 	bl	80089d0 <__multadd>
 8008ae4:	e7ee      	b.n	8008ac4 <__s2b+0x68>
 8008ae6:	bf00      	nop
 8008ae8:	0800b780 	.word	0x0800b780
 8008aec:	0800b80c 	.word	0x0800b80c

08008af0 <__hi0bits>:
 8008af0:	0c03      	lsrs	r3, r0, #16
 8008af2:	041b      	lsls	r3, r3, #16
 8008af4:	b9d3      	cbnz	r3, 8008b2c <__hi0bits+0x3c>
 8008af6:	0400      	lsls	r0, r0, #16
 8008af8:	2310      	movs	r3, #16
 8008afa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008afe:	bf04      	itt	eq
 8008b00:	0200      	lsleq	r0, r0, #8
 8008b02:	3308      	addeq	r3, #8
 8008b04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b08:	bf04      	itt	eq
 8008b0a:	0100      	lsleq	r0, r0, #4
 8008b0c:	3304      	addeq	r3, #4
 8008b0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b12:	bf04      	itt	eq
 8008b14:	0080      	lsleq	r0, r0, #2
 8008b16:	3302      	addeq	r3, #2
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	db05      	blt.n	8008b28 <__hi0bits+0x38>
 8008b1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b20:	f103 0301 	add.w	r3, r3, #1
 8008b24:	bf08      	it	eq
 8008b26:	2320      	moveq	r3, #32
 8008b28:	4618      	mov	r0, r3
 8008b2a:	4770      	bx	lr
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e7e4      	b.n	8008afa <__hi0bits+0xa>

08008b30 <__lo0bits>:
 8008b30:	6803      	ldr	r3, [r0, #0]
 8008b32:	f013 0207 	ands.w	r2, r3, #7
 8008b36:	4601      	mov	r1, r0
 8008b38:	d00b      	beq.n	8008b52 <__lo0bits+0x22>
 8008b3a:	07da      	lsls	r2, r3, #31
 8008b3c:	d423      	bmi.n	8008b86 <__lo0bits+0x56>
 8008b3e:	0798      	lsls	r0, r3, #30
 8008b40:	bf49      	itett	mi
 8008b42:	085b      	lsrmi	r3, r3, #1
 8008b44:	089b      	lsrpl	r3, r3, #2
 8008b46:	2001      	movmi	r0, #1
 8008b48:	600b      	strmi	r3, [r1, #0]
 8008b4a:	bf5c      	itt	pl
 8008b4c:	600b      	strpl	r3, [r1, #0]
 8008b4e:	2002      	movpl	r0, #2
 8008b50:	4770      	bx	lr
 8008b52:	b298      	uxth	r0, r3
 8008b54:	b9a8      	cbnz	r0, 8008b82 <__lo0bits+0x52>
 8008b56:	0c1b      	lsrs	r3, r3, #16
 8008b58:	2010      	movs	r0, #16
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	b90a      	cbnz	r2, 8008b62 <__lo0bits+0x32>
 8008b5e:	3008      	adds	r0, #8
 8008b60:	0a1b      	lsrs	r3, r3, #8
 8008b62:	071a      	lsls	r2, r3, #28
 8008b64:	bf04      	itt	eq
 8008b66:	091b      	lsreq	r3, r3, #4
 8008b68:	3004      	addeq	r0, #4
 8008b6a:	079a      	lsls	r2, r3, #30
 8008b6c:	bf04      	itt	eq
 8008b6e:	089b      	lsreq	r3, r3, #2
 8008b70:	3002      	addeq	r0, #2
 8008b72:	07da      	lsls	r2, r3, #31
 8008b74:	d403      	bmi.n	8008b7e <__lo0bits+0x4e>
 8008b76:	085b      	lsrs	r3, r3, #1
 8008b78:	f100 0001 	add.w	r0, r0, #1
 8008b7c:	d005      	beq.n	8008b8a <__lo0bits+0x5a>
 8008b7e:	600b      	str	r3, [r1, #0]
 8008b80:	4770      	bx	lr
 8008b82:	4610      	mov	r0, r2
 8008b84:	e7e9      	b.n	8008b5a <__lo0bits+0x2a>
 8008b86:	2000      	movs	r0, #0
 8008b88:	4770      	bx	lr
 8008b8a:	2020      	movs	r0, #32
 8008b8c:	4770      	bx	lr
	...

08008b90 <__i2b>:
 8008b90:	b510      	push	{r4, lr}
 8008b92:	460c      	mov	r4, r1
 8008b94:	2101      	movs	r1, #1
 8008b96:	f7ff feb9 	bl	800890c <_Balloc>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	b928      	cbnz	r0, 8008baa <__i2b+0x1a>
 8008b9e:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <__i2b+0x24>)
 8008ba0:	4805      	ldr	r0, [pc, #20]	; (8008bb8 <__i2b+0x28>)
 8008ba2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ba6:	f000 fe01 	bl	80097ac <__assert_func>
 8008baa:	2301      	movs	r3, #1
 8008bac:	6144      	str	r4, [r0, #20]
 8008bae:	6103      	str	r3, [r0, #16]
 8008bb0:	bd10      	pop	{r4, pc}
 8008bb2:	bf00      	nop
 8008bb4:	0800b780 	.word	0x0800b780
 8008bb8:	0800b80c 	.word	0x0800b80c

08008bbc <__multiply>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	4691      	mov	r9, r2
 8008bc2:	690a      	ldr	r2, [r1, #16]
 8008bc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	bfb8      	it	lt
 8008bcc:	460b      	movlt	r3, r1
 8008bce:	460c      	mov	r4, r1
 8008bd0:	bfbc      	itt	lt
 8008bd2:	464c      	movlt	r4, r9
 8008bd4:	4699      	movlt	r9, r3
 8008bd6:	6927      	ldr	r7, [r4, #16]
 8008bd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bdc:	68a3      	ldr	r3, [r4, #8]
 8008bde:	6861      	ldr	r1, [r4, #4]
 8008be0:	eb07 060a 	add.w	r6, r7, sl
 8008be4:	42b3      	cmp	r3, r6
 8008be6:	b085      	sub	sp, #20
 8008be8:	bfb8      	it	lt
 8008bea:	3101      	addlt	r1, #1
 8008bec:	f7ff fe8e 	bl	800890c <_Balloc>
 8008bf0:	b930      	cbnz	r0, 8008c00 <__multiply+0x44>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	4b44      	ldr	r3, [pc, #272]	; (8008d08 <__multiply+0x14c>)
 8008bf6:	4845      	ldr	r0, [pc, #276]	; (8008d0c <__multiply+0x150>)
 8008bf8:	f240 115d 	movw	r1, #349	; 0x15d
 8008bfc:	f000 fdd6 	bl	80097ac <__assert_func>
 8008c00:	f100 0514 	add.w	r5, r0, #20
 8008c04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c08:	462b      	mov	r3, r5
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	4543      	cmp	r3, r8
 8008c0e:	d321      	bcc.n	8008c54 <__multiply+0x98>
 8008c10:	f104 0314 	add.w	r3, r4, #20
 8008c14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c18:	f109 0314 	add.w	r3, r9, #20
 8008c1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c20:	9202      	str	r2, [sp, #8]
 8008c22:	1b3a      	subs	r2, r7, r4
 8008c24:	3a15      	subs	r2, #21
 8008c26:	f022 0203 	bic.w	r2, r2, #3
 8008c2a:	3204      	adds	r2, #4
 8008c2c:	f104 0115 	add.w	r1, r4, #21
 8008c30:	428f      	cmp	r7, r1
 8008c32:	bf38      	it	cc
 8008c34:	2204      	movcc	r2, #4
 8008c36:	9201      	str	r2, [sp, #4]
 8008c38:	9a02      	ldr	r2, [sp, #8]
 8008c3a:	9303      	str	r3, [sp, #12]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d80c      	bhi.n	8008c5a <__multiply+0x9e>
 8008c40:	2e00      	cmp	r6, #0
 8008c42:	dd03      	ble.n	8008c4c <__multiply+0x90>
 8008c44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d05a      	beq.n	8008d02 <__multiply+0x146>
 8008c4c:	6106      	str	r6, [r0, #16]
 8008c4e:	b005      	add	sp, #20
 8008c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c54:	f843 2b04 	str.w	r2, [r3], #4
 8008c58:	e7d8      	b.n	8008c0c <__multiply+0x50>
 8008c5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c5e:	f1ba 0f00 	cmp.w	sl, #0
 8008c62:	d024      	beq.n	8008cae <__multiply+0xf2>
 8008c64:	f104 0e14 	add.w	lr, r4, #20
 8008c68:	46a9      	mov	r9, r5
 8008c6a:	f04f 0c00 	mov.w	ip, #0
 8008c6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c72:	f8d9 1000 	ldr.w	r1, [r9]
 8008c76:	fa1f fb82 	uxth.w	fp, r2
 8008c7a:	b289      	uxth	r1, r1
 8008c7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c84:	f8d9 2000 	ldr.w	r2, [r9]
 8008c88:	4461      	add	r1, ip
 8008c8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c96:	b289      	uxth	r1, r1
 8008c98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c9c:	4577      	cmp	r7, lr
 8008c9e:	f849 1b04 	str.w	r1, [r9], #4
 8008ca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ca6:	d8e2      	bhi.n	8008c6e <__multiply+0xb2>
 8008ca8:	9a01      	ldr	r2, [sp, #4]
 8008caa:	f845 c002 	str.w	ip, [r5, r2]
 8008cae:	9a03      	ldr	r2, [sp, #12]
 8008cb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	f1b9 0f00 	cmp.w	r9, #0
 8008cba:	d020      	beq.n	8008cfe <__multiply+0x142>
 8008cbc:	6829      	ldr	r1, [r5, #0]
 8008cbe:	f104 0c14 	add.w	ip, r4, #20
 8008cc2:	46ae      	mov	lr, r5
 8008cc4:	f04f 0a00 	mov.w	sl, #0
 8008cc8:	f8bc b000 	ldrh.w	fp, [ip]
 8008ccc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008cd0:	fb09 220b 	mla	r2, r9, fp, r2
 8008cd4:	4492      	add	sl, r2
 8008cd6:	b289      	uxth	r1, r1
 8008cd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008cdc:	f84e 1b04 	str.w	r1, [lr], #4
 8008ce0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ce4:	f8be 1000 	ldrh.w	r1, [lr]
 8008ce8:	0c12      	lsrs	r2, r2, #16
 8008cea:	fb09 1102 	mla	r1, r9, r2, r1
 8008cee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008cf2:	4567      	cmp	r7, ip
 8008cf4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cf8:	d8e6      	bhi.n	8008cc8 <__multiply+0x10c>
 8008cfa:	9a01      	ldr	r2, [sp, #4]
 8008cfc:	50a9      	str	r1, [r5, r2]
 8008cfe:	3504      	adds	r5, #4
 8008d00:	e79a      	b.n	8008c38 <__multiply+0x7c>
 8008d02:	3e01      	subs	r6, #1
 8008d04:	e79c      	b.n	8008c40 <__multiply+0x84>
 8008d06:	bf00      	nop
 8008d08:	0800b780 	.word	0x0800b780
 8008d0c:	0800b80c 	.word	0x0800b80c

08008d10 <__pow5mult>:
 8008d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d14:	4615      	mov	r5, r2
 8008d16:	f012 0203 	ands.w	r2, r2, #3
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460f      	mov	r7, r1
 8008d1e:	d007      	beq.n	8008d30 <__pow5mult+0x20>
 8008d20:	4c25      	ldr	r4, [pc, #148]	; (8008db8 <__pow5mult+0xa8>)
 8008d22:	3a01      	subs	r2, #1
 8008d24:	2300      	movs	r3, #0
 8008d26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d2a:	f7ff fe51 	bl	80089d0 <__multadd>
 8008d2e:	4607      	mov	r7, r0
 8008d30:	10ad      	asrs	r5, r5, #2
 8008d32:	d03d      	beq.n	8008db0 <__pow5mult+0xa0>
 8008d34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d36:	b97c      	cbnz	r4, 8008d58 <__pow5mult+0x48>
 8008d38:	2010      	movs	r0, #16
 8008d3a:	f7ff fdbf 	bl	80088bc <malloc>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	6270      	str	r0, [r6, #36]	; 0x24
 8008d42:	b928      	cbnz	r0, 8008d50 <__pow5mult+0x40>
 8008d44:	4b1d      	ldr	r3, [pc, #116]	; (8008dbc <__pow5mult+0xac>)
 8008d46:	481e      	ldr	r0, [pc, #120]	; (8008dc0 <__pow5mult+0xb0>)
 8008d48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d4c:	f000 fd2e 	bl	80097ac <__assert_func>
 8008d50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d54:	6004      	str	r4, [r0, #0]
 8008d56:	60c4      	str	r4, [r0, #12]
 8008d58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d60:	b94c      	cbnz	r4, 8008d76 <__pow5mult+0x66>
 8008d62:	f240 2171 	movw	r1, #625	; 0x271
 8008d66:	4630      	mov	r0, r6
 8008d68:	f7ff ff12 	bl	8008b90 <__i2b>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d72:	4604      	mov	r4, r0
 8008d74:	6003      	str	r3, [r0, #0]
 8008d76:	f04f 0900 	mov.w	r9, #0
 8008d7a:	07eb      	lsls	r3, r5, #31
 8008d7c:	d50a      	bpl.n	8008d94 <__pow5mult+0x84>
 8008d7e:	4639      	mov	r1, r7
 8008d80:	4622      	mov	r2, r4
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7ff ff1a 	bl	8008bbc <__multiply>
 8008d88:	4639      	mov	r1, r7
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7ff fdfd 	bl	800898c <_Bfree>
 8008d92:	4647      	mov	r7, r8
 8008d94:	106d      	asrs	r5, r5, #1
 8008d96:	d00b      	beq.n	8008db0 <__pow5mult+0xa0>
 8008d98:	6820      	ldr	r0, [r4, #0]
 8008d9a:	b938      	cbnz	r0, 8008dac <__pow5mult+0x9c>
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4630      	mov	r0, r6
 8008da2:	f7ff ff0b 	bl	8008bbc <__multiply>
 8008da6:	6020      	str	r0, [r4, #0]
 8008da8:	f8c0 9000 	str.w	r9, [r0]
 8008dac:	4604      	mov	r4, r0
 8008dae:	e7e4      	b.n	8008d7a <__pow5mult+0x6a>
 8008db0:	4638      	mov	r0, r7
 8008db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db6:	bf00      	nop
 8008db8:	0800b958 	.word	0x0800b958
 8008dbc:	0800b70e 	.word	0x0800b70e
 8008dc0:	0800b80c 	.word	0x0800b80c

08008dc4 <__lshift>:
 8008dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc8:	460c      	mov	r4, r1
 8008dca:	6849      	ldr	r1, [r1, #4]
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dd2:	68a3      	ldr	r3, [r4, #8]
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	4691      	mov	r9, r2
 8008dd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ddc:	f108 0601 	add.w	r6, r8, #1
 8008de0:	42b3      	cmp	r3, r6
 8008de2:	db0b      	blt.n	8008dfc <__lshift+0x38>
 8008de4:	4638      	mov	r0, r7
 8008de6:	f7ff fd91 	bl	800890c <_Balloc>
 8008dea:	4605      	mov	r5, r0
 8008dec:	b948      	cbnz	r0, 8008e02 <__lshift+0x3e>
 8008dee:	4602      	mov	r2, r0
 8008df0:	4b2a      	ldr	r3, [pc, #168]	; (8008e9c <__lshift+0xd8>)
 8008df2:	482b      	ldr	r0, [pc, #172]	; (8008ea0 <__lshift+0xdc>)
 8008df4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008df8:	f000 fcd8 	bl	80097ac <__assert_func>
 8008dfc:	3101      	adds	r1, #1
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	e7ee      	b.n	8008de0 <__lshift+0x1c>
 8008e02:	2300      	movs	r3, #0
 8008e04:	f100 0114 	add.w	r1, r0, #20
 8008e08:	f100 0210 	add.w	r2, r0, #16
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	4553      	cmp	r3, sl
 8008e10:	db37      	blt.n	8008e82 <__lshift+0xbe>
 8008e12:	6920      	ldr	r0, [r4, #16]
 8008e14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e18:	f104 0314 	add.w	r3, r4, #20
 8008e1c:	f019 091f 	ands.w	r9, r9, #31
 8008e20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e28:	d02f      	beq.n	8008e8a <__lshift+0xc6>
 8008e2a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e2e:	468a      	mov	sl, r1
 8008e30:	f04f 0c00 	mov.w	ip, #0
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	fa02 f209 	lsl.w	r2, r2, r9
 8008e3a:	ea42 020c 	orr.w	r2, r2, ip
 8008e3e:	f84a 2b04 	str.w	r2, [sl], #4
 8008e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e46:	4298      	cmp	r0, r3
 8008e48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008e4c:	d8f2      	bhi.n	8008e34 <__lshift+0x70>
 8008e4e:	1b03      	subs	r3, r0, r4
 8008e50:	3b15      	subs	r3, #21
 8008e52:	f023 0303 	bic.w	r3, r3, #3
 8008e56:	3304      	adds	r3, #4
 8008e58:	f104 0215 	add.w	r2, r4, #21
 8008e5c:	4290      	cmp	r0, r2
 8008e5e:	bf38      	it	cc
 8008e60:	2304      	movcc	r3, #4
 8008e62:	f841 c003 	str.w	ip, [r1, r3]
 8008e66:	f1bc 0f00 	cmp.w	ip, #0
 8008e6a:	d001      	beq.n	8008e70 <__lshift+0xac>
 8008e6c:	f108 0602 	add.w	r6, r8, #2
 8008e70:	3e01      	subs	r6, #1
 8008e72:	4638      	mov	r0, r7
 8008e74:	612e      	str	r6, [r5, #16]
 8008e76:	4621      	mov	r1, r4
 8008e78:	f7ff fd88 	bl	800898c <_Bfree>
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e82:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e86:	3301      	adds	r3, #1
 8008e88:	e7c1      	b.n	8008e0e <__lshift+0x4a>
 8008e8a:	3904      	subs	r1, #4
 8008e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e90:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e94:	4298      	cmp	r0, r3
 8008e96:	d8f9      	bhi.n	8008e8c <__lshift+0xc8>
 8008e98:	e7ea      	b.n	8008e70 <__lshift+0xac>
 8008e9a:	bf00      	nop
 8008e9c:	0800b780 	.word	0x0800b780
 8008ea0:	0800b80c 	.word	0x0800b80c

08008ea4 <__mcmp>:
 8008ea4:	b530      	push	{r4, r5, lr}
 8008ea6:	6902      	ldr	r2, [r0, #16]
 8008ea8:	690c      	ldr	r4, [r1, #16]
 8008eaa:	1b12      	subs	r2, r2, r4
 8008eac:	d10e      	bne.n	8008ecc <__mcmp+0x28>
 8008eae:	f100 0314 	add.w	r3, r0, #20
 8008eb2:	3114      	adds	r1, #20
 8008eb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008eb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ebc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ec0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ec4:	42a5      	cmp	r5, r4
 8008ec6:	d003      	beq.n	8008ed0 <__mcmp+0x2c>
 8008ec8:	d305      	bcc.n	8008ed6 <__mcmp+0x32>
 8008eca:	2201      	movs	r2, #1
 8008ecc:	4610      	mov	r0, r2
 8008ece:	bd30      	pop	{r4, r5, pc}
 8008ed0:	4283      	cmp	r3, r0
 8008ed2:	d3f3      	bcc.n	8008ebc <__mcmp+0x18>
 8008ed4:	e7fa      	b.n	8008ecc <__mcmp+0x28>
 8008ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eda:	e7f7      	b.n	8008ecc <__mcmp+0x28>

08008edc <__mdiff>:
 8008edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4690      	mov	r8, r2
 8008eea:	f7ff ffdb 	bl	8008ea4 <__mcmp>
 8008eee:	1e05      	subs	r5, r0, #0
 8008ef0:	d110      	bne.n	8008f14 <__mdiff+0x38>
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f7ff fd09 	bl	800890c <_Balloc>
 8008efa:	b930      	cbnz	r0, 8008f0a <__mdiff+0x2e>
 8008efc:	4b3a      	ldr	r3, [pc, #232]	; (8008fe8 <__mdiff+0x10c>)
 8008efe:	4602      	mov	r2, r0
 8008f00:	f240 2132 	movw	r1, #562	; 0x232
 8008f04:	4839      	ldr	r0, [pc, #228]	; (8008fec <__mdiff+0x110>)
 8008f06:	f000 fc51 	bl	80097ac <__assert_func>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f14:	bfa4      	itt	ge
 8008f16:	4643      	movge	r3, r8
 8008f18:	46a0      	movge	r8, r4
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f20:	bfa6      	itte	ge
 8008f22:	461c      	movge	r4, r3
 8008f24:	2500      	movge	r5, #0
 8008f26:	2501      	movlt	r5, #1
 8008f28:	f7ff fcf0 	bl	800890c <_Balloc>
 8008f2c:	b920      	cbnz	r0, 8008f38 <__mdiff+0x5c>
 8008f2e:	4b2e      	ldr	r3, [pc, #184]	; (8008fe8 <__mdiff+0x10c>)
 8008f30:	4602      	mov	r2, r0
 8008f32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f36:	e7e5      	b.n	8008f04 <__mdiff+0x28>
 8008f38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f3c:	6926      	ldr	r6, [r4, #16]
 8008f3e:	60c5      	str	r5, [r0, #12]
 8008f40:	f104 0914 	add.w	r9, r4, #20
 8008f44:	f108 0514 	add.w	r5, r8, #20
 8008f48:	f100 0e14 	add.w	lr, r0, #20
 8008f4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f54:	f108 0210 	add.w	r2, r8, #16
 8008f58:	46f2      	mov	sl, lr
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f64:	fa1f f883 	uxth.w	r8, r3
 8008f68:	fa11 f18b 	uxtah	r1, r1, fp
 8008f6c:	0c1b      	lsrs	r3, r3, #16
 8008f6e:	eba1 0808 	sub.w	r8, r1, r8
 8008f72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f7a:	fa1f f888 	uxth.w	r8, r8
 8008f7e:	1419      	asrs	r1, r3, #16
 8008f80:	454e      	cmp	r6, r9
 8008f82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f86:	f84a 3b04 	str.w	r3, [sl], #4
 8008f8a:	d8e7      	bhi.n	8008f5c <__mdiff+0x80>
 8008f8c:	1b33      	subs	r3, r6, r4
 8008f8e:	3b15      	subs	r3, #21
 8008f90:	f023 0303 	bic.w	r3, r3, #3
 8008f94:	3304      	adds	r3, #4
 8008f96:	3415      	adds	r4, #21
 8008f98:	42a6      	cmp	r6, r4
 8008f9a:	bf38      	it	cc
 8008f9c:	2304      	movcc	r3, #4
 8008f9e:	441d      	add	r5, r3
 8008fa0:	4473      	add	r3, lr
 8008fa2:	469e      	mov	lr, r3
 8008fa4:	462e      	mov	r6, r5
 8008fa6:	4566      	cmp	r6, ip
 8008fa8:	d30e      	bcc.n	8008fc8 <__mdiff+0xec>
 8008faa:	f10c 0203 	add.w	r2, ip, #3
 8008fae:	1b52      	subs	r2, r2, r5
 8008fb0:	f022 0203 	bic.w	r2, r2, #3
 8008fb4:	3d03      	subs	r5, #3
 8008fb6:	45ac      	cmp	ip, r5
 8008fb8:	bf38      	it	cc
 8008fba:	2200      	movcc	r2, #0
 8008fbc:	441a      	add	r2, r3
 8008fbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008fc2:	b17b      	cbz	r3, 8008fe4 <__mdiff+0x108>
 8008fc4:	6107      	str	r7, [r0, #16]
 8008fc6:	e7a3      	b.n	8008f10 <__mdiff+0x34>
 8008fc8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008fcc:	fa11 f288 	uxtah	r2, r1, r8
 8008fd0:	1414      	asrs	r4, r2, #16
 8008fd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fd6:	b292      	uxth	r2, r2
 8008fd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fdc:	f84e 2b04 	str.w	r2, [lr], #4
 8008fe0:	1421      	asrs	r1, r4, #16
 8008fe2:	e7e0      	b.n	8008fa6 <__mdiff+0xca>
 8008fe4:	3f01      	subs	r7, #1
 8008fe6:	e7ea      	b.n	8008fbe <__mdiff+0xe2>
 8008fe8:	0800b780 	.word	0x0800b780
 8008fec:	0800b80c 	.word	0x0800b80c

08008ff0 <__ulp>:
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	ed8d 0b00 	vstr	d0, [sp]
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	4912      	ldr	r1, [pc, #72]	; (8009044 <__ulp+0x54>)
 8008ffa:	4019      	ands	r1, r3
 8008ffc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009000:	2900      	cmp	r1, #0
 8009002:	dd05      	ble.n	8009010 <__ulp+0x20>
 8009004:	2200      	movs	r2, #0
 8009006:	460b      	mov	r3, r1
 8009008:	ec43 2b10 	vmov	d0, r2, r3
 800900c:	b002      	add	sp, #8
 800900e:	4770      	bx	lr
 8009010:	4249      	negs	r1, r1
 8009012:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009016:	ea4f 5021 	mov.w	r0, r1, asr #20
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	f04f 0300 	mov.w	r3, #0
 8009022:	da04      	bge.n	800902e <__ulp+0x3e>
 8009024:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009028:	fa41 f300 	asr.w	r3, r1, r0
 800902c:	e7ec      	b.n	8009008 <__ulp+0x18>
 800902e:	f1a0 0114 	sub.w	r1, r0, #20
 8009032:	291e      	cmp	r1, #30
 8009034:	bfda      	itte	le
 8009036:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800903a:	fa20 f101 	lsrle.w	r1, r0, r1
 800903e:	2101      	movgt	r1, #1
 8009040:	460a      	mov	r2, r1
 8009042:	e7e1      	b.n	8009008 <__ulp+0x18>
 8009044:	7ff00000 	.word	0x7ff00000

08009048 <__b2d>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	6905      	ldr	r5, [r0, #16]
 800904c:	f100 0714 	add.w	r7, r0, #20
 8009050:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009054:	1f2e      	subs	r6, r5, #4
 8009056:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800905a:	4620      	mov	r0, r4
 800905c:	f7ff fd48 	bl	8008af0 <__hi0bits>
 8009060:	f1c0 0320 	rsb	r3, r0, #32
 8009064:	280a      	cmp	r0, #10
 8009066:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80090e4 <__b2d+0x9c>
 800906a:	600b      	str	r3, [r1, #0]
 800906c:	dc14      	bgt.n	8009098 <__b2d+0x50>
 800906e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009072:	fa24 f10e 	lsr.w	r1, r4, lr
 8009076:	42b7      	cmp	r7, r6
 8009078:	ea41 030c 	orr.w	r3, r1, ip
 800907c:	bf34      	ite	cc
 800907e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009082:	2100      	movcs	r1, #0
 8009084:	3015      	adds	r0, #21
 8009086:	fa04 f000 	lsl.w	r0, r4, r0
 800908a:	fa21 f10e 	lsr.w	r1, r1, lr
 800908e:	ea40 0201 	orr.w	r2, r0, r1
 8009092:	ec43 2b10 	vmov	d0, r2, r3
 8009096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009098:	42b7      	cmp	r7, r6
 800909a:	bf3a      	itte	cc
 800909c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80090a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80090a4:	2100      	movcs	r1, #0
 80090a6:	380b      	subs	r0, #11
 80090a8:	d017      	beq.n	80090da <__b2d+0x92>
 80090aa:	f1c0 0c20 	rsb	ip, r0, #32
 80090ae:	fa04 f500 	lsl.w	r5, r4, r0
 80090b2:	42be      	cmp	r6, r7
 80090b4:	fa21 f40c 	lsr.w	r4, r1, ip
 80090b8:	ea45 0504 	orr.w	r5, r5, r4
 80090bc:	bf8c      	ite	hi
 80090be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80090c2:	2400      	movls	r4, #0
 80090c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80090c8:	fa01 f000 	lsl.w	r0, r1, r0
 80090cc:	fa24 f40c 	lsr.w	r4, r4, ip
 80090d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80090d4:	ea40 0204 	orr.w	r2, r0, r4
 80090d8:	e7db      	b.n	8009092 <__b2d+0x4a>
 80090da:	ea44 030c 	orr.w	r3, r4, ip
 80090de:	460a      	mov	r2, r1
 80090e0:	e7d7      	b.n	8009092 <__b2d+0x4a>
 80090e2:	bf00      	nop
 80090e4:	3ff00000 	.word	0x3ff00000

080090e8 <__d2b>:
 80090e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090ec:	4689      	mov	r9, r1
 80090ee:	2101      	movs	r1, #1
 80090f0:	ec57 6b10 	vmov	r6, r7, d0
 80090f4:	4690      	mov	r8, r2
 80090f6:	f7ff fc09 	bl	800890c <_Balloc>
 80090fa:	4604      	mov	r4, r0
 80090fc:	b930      	cbnz	r0, 800910c <__d2b+0x24>
 80090fe:	4602      	mov	r2, r0
 8009100:	4b25      	ldr	r3, [pc, #148]	; (8009198 <__d2b+0xb0>)
 8009102:	4826      	ldr	r0, [pc, #152]	; (800919c <__d2b+0xb4>)
 8009104:	f240 310a 	movw	r1, #778	; 0x30a
 8009108:	f000 fb50 	bl	80097ac <__assert_func>
 800910c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009114:	bb35      	cbnz	r5, 8009164 <__d2b+0x7c>
 8009116:	2e00      	cmp	r6, #0
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	d028      	beq.n	800916e <__d2b+0x86>
 800911c:	4668      	mov	r0, sp
 800911e:	9600      	str	r6, [sp, #0]
 8009120:	f7ff fd06 	bl	8008b30 <__lo0bits>
 8009124:	9900      	ldr	r1, [sp, #0]
 8009126:	b300      	cbz	r0, 800916a <__d2b+0x82>
 8009128:	9a01      	ldr	r2, [sp, #4]
 800912a:	f1c0 0320 	rsb	r3, r0, #32
 800912e:	fa02 f303 	lsl.w	r3, r2, r3
 8009132:	430b      	orrs	r3, r1
 8009134:	40c2      	lsrs	r2, r0
 8009136:	6163      	str	r3, [r4, #20]
 8009138:	9201      	str	r2, [sp, #4]
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	61a3      	str	r3, [r4, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	bf14      	ite	ne
 8009142:	2202      	movne	r2, #2
 8009144:	2201      	moveq	r2, #1
 8009146:	6122      	str	r2, [r4, #16]
 8009148:	b1d5      	cbz	r5, 8009180 <__d2b+0x98>
 800914a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800914e:	4405      	add	r5, r0
 8009150:	f8c9 5000 	str.w	r5, [r9]
 8009154:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009158:	f8c8 0000 	str.w	r0, [r8]
 800915c:	4620      	mov	r0, r4
 800915e:	b003      	add	sp, #12
 8009160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009168:	e7d5      	b.n	8009116 <__d2b+0x2e>
 800916a:	6161      	str	r1, [r4, #20]
 800916c:	e7e5      	b.n	800913a <__d2b+0x52>
 800916e:	a801      	add	r0, sp, #4
 8009170:	f7ff fcde 	bl	8008b30 <__lo0bits>
 8009174:	9b01      	ldr	r3, [sp, #4]
 8009176:	6163      	str	r3, [r4, #20]
 8009178:	2201      	movs	r2, #1
 800917a:	6122      	str	r2, [r4, #16]
 800917c:	3020      	adds	r0, #32
 800917e:	e7e3      	b.n	8009148 <__d2b+0x60>
 8009180:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009184:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009188:	f8c9 0000 	str.w	r0, [r9]
 800918c:	6918      	ldr	r0, [r3, #16]
 800918e:	f7ff fcaf 	bl	8008af0 <__hi0bits>
 8009192:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009196:	e7df      	b.n	8009158 <__d2b+0x70>
 8009198:	0800b780 	.word	0x0800b780
 800919c:	0800b80c 	.word	0x0800b80c

080091a0 <__ratio>:
 80091a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	4688      	mov	r8, r1
 80091a6:	4669      	mov	r1, sp
 80091a8:	4681      	mov	r9, r0
 80091aa:	f7ff ff4d 	bl	8009048 <__b2d>
 80091ae:	a901      	add	r1, sp, #4
 80091b0:	4640      	mov	r0, r8
 80091b2:	ec55 4b10 	vmov	r4, r5, d0
 80091b6:	f7ff ff47 	bl	8009048 <__b2d>
 80091ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80091c2:	eba3 0c02 	sub.w	ip, r3, r2
 80091c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80091ca:	1a9b      	subs	r3, r3, r2
 80091cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80091d0:	ec51 0b10 	vmov	r0, r1, d0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bfd6      	itet	le
 80091d8:	460a      	movle	r2, r1
 80091da:	462a      	movgt	r2, r5
 80091dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091e0:	468b      	mov	fp, r1
 80091e2:	462f      	mov	r7, r5
 80091e4:	bfd4      	ite	le
 80091e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80091ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80091ee:	4620      	mov	r0, r4
 80091f0:	ee10 2a10 	vmov	r2, s0
 80091f4:	465b      	mov	r3, fp
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f7 fb30 	bl	800085c <__aeabi_ddiv>
 80091fc:	ec41 0b10 	vmov	d0, r0, r1
 8009200:	b003      	add	sp, #12
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009206 <__copybits>:
 8009206:	3901      	subs	r1, #1
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	1149      	asrs	r1, r1, #5
 800920c:	6914      	ldr	r4, [r2, #16]
 800920e:	3101      	adds	r1, #1
 8009210:	f102 0314 	add.w	r3, r2, #20
 8009214:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009218:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800921c:	1f05      	subs	r5, r0, #4
 800921e:	42a3      	cmp	r3, r4
 8009220:	d30c      	bcc.n	800923c <__copybits+0x36>
 8009222:	1aa3      	subs	r3, r4, r2
 8009224:	3b11      	subs	r3, #17
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	3211      	adds	r2, #17
 800922c:	42a2      	cmp	r2, r4
 800922e:	bf88      	it	hi
 8009230:	2300      	movhi	r3, #0
 8009232:	4418      	add	r0, r3
 8009234:	2300      	movs	r3, #0
 8009236:	4288      	cmp	r0, r1
 8009238:	d305      	bcc.n	8009246 <__copybits+0x40>
 800923a:	bd70      	pop	{r4, r5, r6, pc}
 800923c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009240:	f845 6f04 	str.w	r6, [r5, #4]!
 8009244:	e7eb      	b.n	800921e <__copybits+0x18>
 8009246:	f840 3b04 	str.w	r3, [r0], #4
 800924a:	e7f4      	b.n	8009236 <__copybits+0x30>

0800924c <__any_on>:
 800924c:	f100 0214 	add.w	r2, r0, #20
 8009250:	6900      	ldr	r0, [r0, #16]
 8009252:	114b      	asrs	r3, r1, #5
 8009254:	4298      	cmp	r0, r3
 8009256:	b510      	push	{r4, lr}
 8009258:	db11      	blt.n	800927e <__any_on+0x32>
 800925a:	dd0a      	ble.n	8009272 <__any_on+0x26>
 800925c:	f011 011f 	ands.w	r1, r1, #31
 8009260:	d007      	beq.n	8009272 <__any_on+0x26>
 8009262:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009266:	fa24 f001 	lsr.w	r0, r4, r1
 800926a:	fa00 f101 	lsl.w	r1, r0, r1
 800926e:	428c      	cmp	r4, r1
 8009270:	d10b      	bne.n	800928a <__any_on+0x3e>
 8009272:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009276:	4293      	cmp	r3, r2
 8009278:	d803      	bhi.n	8009282 <__any_on+0x36>
 800927a:	2000      	movs	r0, #0
 800927c:	bd10      	pop	{r4, pc}
 800927e:	4603      	mov	r3, r0
 8009280:	e7f7      	b.n	8009272 <__any_on+0x26>
 8009282:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009286:	2900      	cmp	r1, #0
 8009288:	d0f5      	beq.n	8009276 <__any_on+0x2a>
 800928a:	2001      	movs	r0, #1
 800928c:	e7f6      	b.n	800927c <__any_on+0x30>

0800928e <_calloc_r>:
 800928e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009290:	fba1 2402 	umull	r2, r4, r1, r2
 8009294:	b94c      	cbnz	r4, 80092aa <_calloc_r+0x1c>
 8009296:	4611      	mov	r1, r2
 8009298:	9201      	str	r2, [sp, #4]
 800929a:	f000 f87b 	bl	8009394 <_malloc_r>
 800929e:	9a01      	ldr	r2, [sp, #4]
 80092a0:	4605      	mov	r5, r0
 80092a2:	b930      	cbnz	r0, 80092b2 <_calloc_r+0x24>
 80092a4:	4628      	mov	r0, r5
 80092a6:	b003      	add	sp, #12
 80092a8:	bd30      	pop	{r4, r5, pc}
 80092aa:	220c      	movs	r2, #12
 80092ac:	6002      	str	r2, [r0, #0]
 80092ae:	2500      	movs	r5, #0
 80092b0:	e7f8      	b.n	80092a4 <_calloc_r+0x16>
 80092b2:	4621      	mov	r1, r4
 80092b4:	f7fc fb84 	bl	80059c0 <memset>
 80092b8:	e7f4      	b.n	80092a4 <_calloc_r+0x16>
	...

080092bc <_free_r>:
 80092bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092be:	2900      	cmp	r1, #0
 80092c0:	d044      	beq.n	800934c <_free_r+0x90>
 80092c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c6:	9001      	str	r0, [sp, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f1a1 0404 	sub.w	r4, r1, #4
 80092ce:	bfb8      	it	lt
 80092d0:	18e4      	addlt	r4, r4, r3
 80092d2:	f000 fab5 	bl	8009840 <__malloc_lock>
 80092d6:	4a1e      	ldr	r2, [pc, #120]	; (8009350 <_free_r+0x94>)
 80092d8:	9801      	ldr	r0, [sp, #4]
 80092da:	6813      	ldr	r3, [r2, #0]
 80092dc:	b933      	cbnz	r3, 80092ec <_free_r+0x30>
 80092de:	6063      	str	r3, [r4, #4]
 80092e0:	6014      	str	r4, [r2, #0]
 80092e2:	b003      	add	sp, #12
 80092e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092e8:	f000 bab0 	b.w	800984c <__malloc_unlock>
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	d908      	bls.n	8009302 <_free_r+0x46>
 80092f0:	6825      	ldr	r5, [r4, #0]
 80092f2:	1961      	adds	r1, r4, r5
 80092f4:	428b      	cmp	r3, r1
 80092f6:	bf01      	itttt	eq
 80092f8:	6819      	ldreq	r1, [r3, #0]
 80092fa:	685b      	ldreq	r3, [r3, #4]
 80092fc:	1949      	addeq	r1, r1, r5
 80092fe:	6021      	streq	r1, [r4, #0]
 8009300:	e7ed      	b.n	80092de <_free_r+0x22>
 8009302:	461a      	mov	r2, r3
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	b10b      	cbz	r3, 800930c <_free_r+0x50>
 8009308:	42a3      	cmp	r3, r4
 800930a:	d9fa      	bls.n	8009302 <_free_r+0x46>
 800930c:	6811      	ldr	r1, [r2, #0]
 800930e:	1855      	adds	r5, r2, r1
 8009310:	42a5      	cmp	r5, r4
 8009312:	d10b      	bne.n	800932c <_free_r+0x70>
 8009314:	6824      	ldr	r4, [r4, #0]
 8009316:	4421      	add	r1, r4
 8009318:	1854      	adds	r4, r2, r1
 800931a:	42a3      	cmp	r3, r4
 800931c:	6011      	str	r1, [r2, #0]
 800931e:	d1e0      	bne.n	80092e2 <_free_r+0x26>
 8009320:	681c      	ldr	r4, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	6053      	str	r3, [r2, #4]
 8009326:	4421      	add	r1, r4
 8009328:	6011      	str	r1, [r2, #0]
 800932a:	e7da      	b.n	80092e2 <_free_r+0x26>
 800932c:	d902      	bls.n	8009334 <_free_r+0x78>
 800932e:	230c      	movs	r3, #12
 8009330:	6003      	str	r3, [r0, #0]
 8009332:	e7d6      	b.n	80092e2 <_free_r+0x26>
 8009334:	6825      	ldr	r5, [r4, #0]
 8009336:	1961      	adds	r1, r4, r5
 8009338:	428b      	cmp	r3, r1
 800933a:	bf04      	itt	eq
 800933c:	6819      	ldreq	r1, [r3, #0]
 800933e:	685b      	ldreq	r3, [r3, #4]
 8009340:	6063      	str	r3, [r4, #4]
 8009342:	bf04      	itt	eq
 8009344:	1949      	addeq	r1, r1, r5
 8009346:	6021      	streq	r1, [r4, #0]
 8009348:	6054      	str	r4, [r2, #4]
 800934a:	e7ca      	b.n	80092e2 <_free_r+0x26>
 800934c:	b003      	add	sp, #12
 800934e:	bd30      	pop	{r4, r5, pc}
 8009350:	20000880 	.word	0x20000880

08009354 <sbrk_aligned>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	4e0e      	ldr	r6, [pc, #56]	; (8009390 <sbrk_aligned+0x3c>)
 8009358:	460c      	mov	r4, r1
 800935a:	6831      	ldr	r1, [r6, #0]
 800935c:	4605      	mov	r5, r0
 800935e:	b911      	cbnz	r1, 8009366 <sbrk_aligned+0x12>
 8009360:	f000 f9f2 	bl	8009748 <_sbrk_r>
 8009364:	6030      	str	r0, [r6, #0]
 8009366:	4621      	mov	r1, r4
 8009368:	4628      	mov	r0, r5
 800936a:	f000 f9ed 	bl	8009748 <_sbrk_r>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	d00a      	beq.n	8009388 <sbrk_aligned+0x34>
 8009372:	1cc4      	adds	r4, r0, #3
 8009374:	f024 0403 	bic.w	r4, r4, #3
 8009378:	42a0      	cmp	r0, r4
 800937a:	d007      	beq.n	800938c <sbrk_aligned+0x38>
 800937c:	1a21      	subs	r1, r4, r0
 800937e:	4628      	mov	r0, r5
 8009380:	f000 f9e2 	bl	8009748 <_sbrk_r>
 8009384:	3001      	adds	r0, #1
 8009386:	d101      	bne.n	800938c <sbrk_aligned+0x38>
 8009388:	f04f 34ff 	mov.w	r4, #4294967295
 800938c:	4620      	mov	r0, r4
 800938e:	bd70      	pop	{r4, r5, r6, pc}
 8009390:	20000884 	.word	0x20000884

08009394 <_malloc_r>:
 8009394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009398:	1ccd      	adds	r5, r1, #3
 800939a:	f025 0503 	bic.w	r5, r5, #3
 800939e:	3508      	adds	r5, #8
 80093a0:	2d0c      	cmp	r5, #12
 80093a2:	bf38      	it	cc
 80093a4:	250c      	movcc	r5, #12
 80093a6:	2d00      	cmp	r5, #0
 80093a8:	4607      	mov	r7, r0
 80093aa:	db01      	blt.n	80093b0 <_malloc_r+0x1c>
 80093ac:	42a9      	cmp	r1, r5
 80093ae:	d905      	bls.n	80093bc <_malloc_r+0x28>
 80093b0:	230c      	movs	r3, #12
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	2600      	movs	r6, #0
 80093b6:	4630      	mov	r0, r6
 80093b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093bc:	4e2e      	ldr	r6, [pc, #184]	; (8009478 <_malloc_r+0xe4>)
 80093be:	f000 fa3f 	bl	8009840 <__malloc_lock>
 80093c2:	6833      	ldr	r3, [r6, #0]
 80093c4:	461c      	mov	r4, r3
 80093c6:	bb34      	cbnz	r4, 8009416 <_malloc_r+0x82>
 80093c8:	4629      	mov	r1, r5
 80093ca:	4638      	mov	r0, r7
 80093cc:	f7ff ffc2 	bl	8009354 <sbrk_aligned>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	4604      	mov	r4, r0
 80093d4:	d14d      	bne.n	8009472 <_malloc_r+0xde>
 80093d6:	6834      	ldr	r4, [r6, #0]
 80093d8:	4626      	mov	r6, r4
 80093da:	2e00      	cmp	r6, #0
 80093dc:	d140      	bne.n	8009460 <_malloc_r+0xcc>
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	4631      	mov	r1, r6
 80093e2:	4638      	mov	r0, r7
 80093e4:	eb04 0803 	add.w	r8, r4, r3
 80093e8:	f000 f9ae 	bl	8009748 <_sbrk_r>
 80093ec:	4580      	cmp	r8, r0
 80093ee:	d13a      	bne.n	8009466 <_malloc_r+0xd2>
 80093f0:	6821      	ldr	r1, [r4, #0]
 80093f2:	3503      	adds	r5, #3
 80093f4:	1a6d      	subs	r5, r5, r1
 80093f6:	f025 0503 	bic.w	r5, r5, #3
 80093fa:	3508      	adds	r5, #8
 80093fc:	2d0c      	cmp	r5, #12
 80093fe:	bf38      	it	cc
 8009400:	250c      	movcc	r5, #12
 8009402:	4629      	mov	r1, r5
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff ffa5 	bl	8009354 <sbrk_aligned>
 800940a:	3001      	adds	r0, #1
 800940c:	d02b      	beq.n	8009466 <_malloc_r+0xd2>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	442b      	add	r3, r5
 8009412:	6023      	str	r3, [r4, #0]
 8009414:	e00e      	b.n	8009434 <_malloc_r+0xa0>
 8009416:	6822      	ldr	r2, [r4, #0]
 8009418:	1b52      	subs	r2, r2, r5
 800941a:	d41e      	bmi.n	800945a <_malloc_r+0xc6>
 800941c:	2a0b      	cmp	r2, #11
 800941e:	d916      	bls.n	800944e <_malloc_r+0xba>
 8009420:	1961      	adds	r1, r4, r5
 8009422:	42a3      	cmp	r3, r4
 8009424:	6025      	str	r5, [r4, #0]
 8009426:	bf18      	it	ne
 8009428:	6059      	strne	r1, [r3, #4]
 800942a:	6863      	ldr	r3, [r4, #4]
 800942c:	bf08      	it	eq
 800942e:	6031      	streq	r1, [r6, #0]
 8009430:	5162      	str	r2, [r4, r5]
 8009432:	604b      	str	r3, [r1, #4]
 8009434:	4638      	mov	r0, r7
 8009436:	f104 060b 	add.w	r6, r4, #11
 800943a:	f000 fa07 	bl	800984c <__malloc_unlock>
 800943e:	f026 0607 	bic.w	r6, r6, #7
 8009442:	1d23      	adds	r3, r4, #4
 8009444:	1af2      	subs	r2, r6, r3
 8009446:	d0b6      	beq.n	80093b6 <_malloc_r+0x22>
 8009448:	1b9b      	subs	r3, r3, r6
 800944a:	50a3      	str	r3, [r4, r2]
 800944c:	e7b3      	b.n	80093b6 <_malloc_r+0x22>
 800944e:	6862      	ldr	r2, [r4, #4]
 8009450:	42a3      	cmp	r3, r4
 8009452:	bf0c      	ite	eq
 8009454:	6032      	streq	r2, [r6, #0]
 8009456:	605a      	strne	r2, [r3, #4]
 8009458:	e7ec      	b.n	8009434 <_malloc_r+0xa0>
 800945a:	4623      	mov	r3, r4
 800945c:	6864      	ldr	r4, [r4, #4]
 800945e:	e7b2      	b.n	80093c6 <_malloc_r+0x32>
 8009460:	4634      	mov	r4, r6
 8009462:	6876      	ldr	r6, [r6, #4]
 8009464:	e7b9      	b.n	80093da <_malloc_r+0x46>
 8009466:	230c      	movs	r3, #12
 8009468:	603b      	str	r3, [r7, #0]
 800946a:	4638      	mov	r0, r7
 800946c:	f000 f9ee 	bl	800984c <__malloc_unlock>
 8009470:	e7a1      	b.n	80093b6 <_malloc_r+0x22>
 8009472:	6025      	str	r5, [r4, #0]
 8009474:	e7de      	b.n	8009434 <_malloc_r+0xa0>
 8009476:	bf00      	nop
 8009478:	20000880 	.word	0x20000880

0800947c <__ssputs_r>:
 800947c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009480:	688e      	ldr	r6, [r1, #8]
 8009482:	429e      	cmp	r6, r3
 8009484:	4682      	mov	sl, r0
 8009486:	460c      	mov	r4, r1
 8009488:	4690      	mov	r8, r2
 800948a:	461f      	mov	r7, r3
 800948c:	d838      	bhi.n	8009500 <__ssputs_r+0x84>
 800948e:	898a      	ldrh	r2, [r1, #12]
 8009490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009494:	d032      	beq.n	80094fc <__ssputs_r+0x80>
 8009496:	6825      	ldr	r5, [r4, #0]
 8009498:	6909      	ldr	r1, [r1, #16]
 800949a:	eba5 0901 	sub.w	r9, r5, r1
 800949e:	6965      	ldr	r5, [r4, #20]
 80094a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094a8:	3301      	adds	r3, #1
 80094aa:	444b      	add	r3, r9
 80094ac:	106d      	asrs	r5, r5, #1
 80094ae:	429d      	cmp	r5, r3
 80094b0:	bf38      	it	cc
 80094b2:	461d      	movcc	r5, r3
 80094b4:	0553      	lsls	r3, r2, #21
 80094b6:	d531      	bpl.n	800951c <__ssputs_r+0xa0>
 80094b8:	4629      	mov	r1, r5
 80094ba:	f7ff ff6b 	bl	8009394 <_malloc_r>
 80094be:	4606      	mov	r6, r0
 80094c0:	b950      	cbnz	r0, 80094d8 <__ssputs_r+0x5c>
 80094c2:	230c      	movs	r3, #12
 80094c4:	f8ca 3000 	str.w	r3, [sl]
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ce:	81a3      	strh	r3, [r4, #12]
 80094d0:	f04f 30ff 	mov.w	r0, #4294967295
 80094d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d8:	6921      	ldr	r1, [r4, #16]
 80094da:	464a      	mov	r2, r9
 80094dc:	f7ff fa08 	bl	80088f0 <memcpy>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ea:	81a3      	strh	r3, [r4, #12]
 80094ec:	6126      	str	r6, [r4, #16]
 80094ee:	6165      	str	r5, [r4, #20]
 80094f0:	444e      	add	r6, r9
 80094f2:	eba5 0509 	sub.w	r5, r5, r9
 80094f6:	6026      	str	r6, [r4, #0]
 80094f8:	60a5      	str	r5, [r4, #8]
 80094fa:	463e      	mov	r6, r7
 80094fc:	42be      	cmp	r6, r7
 80094fe:	d900      	bls.n	8009502 <__ssputs_r+0x86>
 8009500:	463e      	mov	r6, r7
 8009502:	6820      	ldr	r0, [r4, #0]
 8009504:	4632      	mov	r2, r6
 8009506:	4641      	mov	r1, r8
 8009508:	f000 f980 	bl	800980c <memmove>
 800950c:	68a3      	ldr	r3, [r4, #8]
 800950e:	1b9b      	subs	r3, r3, r6
 8009510:	60a3      	str	r3, [r4, #8]
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	4433      	add	r3, r6
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	2000      	movs	r0, #0
 800951a:	e7db      	b.n	80094d4 <__ssputs_r+0x58>
 800951c:	462a      	mov	r2, r5
 800951e:	f000 f99b 	bl	8009858 <_realloc_r>
 8009522:	4606      	mov	r6, r0
 8009524:	2800      	cmp	r0, #0
 8009526:	d1e1      	bne.n	80094ec <__ssputs_r+0x70>
 8009528:	6921      	ldr	r1, [r4, #16]
 800952a:	4650      	mov	r0, sl
 800952c:	f7ff fec6 	bl	80092bc <_free_r>
 8009530:	e7c7      	b.n	80094c2 <__ssputs_r+0x46>
	...

08009534 <_svfiprintf_r>:
 8009534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009538:	4698      	mov	r8, r3
 800953a:	898b      	ldrh	r3, [r1, #12]
 800953c:	061b      	lsls	r3, r3, #24
 800953e:	b09d      	sub	sp, #116	; 0x74
 8009540:	4607      	mov	r7, r0
 8009542:	460d      	mov	r5, r1
 8009544:	4614      	mov	r4, r2
 8009546:	d50e      	bpl.n	8009566 <_svfiprintf_r+0x32>
 8009548:	690b      	ldr	r3, [r1, #16]
 800954a:	b963      	cbnz	r3, 8009566 <_svfiprintf_r+0x32>
 800954c:	2140      	movs	r1, #64	; 0x40
 800954e:	f7ff ff21 	bl	8009394 <_malloc_r>
 8009552:	6028      	str	r0, [r5, #0]
 8009554:	6128      	str	r0, [r5, #16]
 8009556:	b920      	cbnz	r0, 8009562 <_svfiprintf_r+0x2e>
 8009558:	230c      	movs	r3, #12
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	e0d1      	b.n	8009706 <_svfiprintf_r+0x1d2>
 8009562:	2340      	movs	r3, #64	; 0x40
 8009564:	616b      	str	r3, [r5, #20]
 8009566:	2300      	movs	r3, #0
 8009568:	9309      	str	r3, [sp, #36]	; 0x24
 800956a:	2320      	movs	r3, #32
 800956c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009570:	f8cd 800c 	str.w	r8, [sp, #12]
 8009574:	2330      	movs	r3, #48	; 0x30
 8009576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009720 <_svfiprintf_r+0x1ec>
 800957a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800957e:	f04f 0901 	mov.w	r9, #1
 8009582:	4623      	mov	r3, r4
 8009584:	469a      	mov	sl, r3
 8009586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800958a:	b10a      	cbz	r2, 8009590 <_svfiprintf_r+0x5c>
 800958c:	2a25      	cmp	r2, #37	; 0x25
 800958e:	d1f9      	bne.n	8009584 <_svfiprintf_r+0x50>
 8009590:	ebba 0b04 	subs.w	fp, sl, r4
 8009594:	d00b      	beq.n	80095ae <_svfiprintf_r+0x7a>
 8009596:	465b      	mov	r3, fp
 8009598:	4622      	mov	r2, r4
 800959a:	4629      	mov	r1, r5
 800959c:	4638      	mov	r0, r7
 800959e:	f7ff ff6d 	bl	800947c <__ssputs_r>
 80095a2:	3001      	adds	r0, #1
 80095a4:	f000 80aa 	beq.w	80096fc <_svfiprintf_r+0x1c8>
 80095a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095aa:	445a      	add	r2, fp
 80095ac:	9209      	str	r2, [sp, #36]	; 0x24
 80095ae:	f89a 3000 	ldrb.w	r3, [sl]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 80a2 	beq.w	80096fc <_svfiprintf_r+0x1c8>
 80095b8:	2300      	movs	r3, #0
 80095ba:	f04f 32ff 	mov.w	r2, #4294967295
 80095be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095c2:	f10a 0a01 	add.w	sl, sl, #1
 80095c6:	9304      	str	r3, [sp, #16]
 80095c8:	9307      	str	r3, [sp, #28]
 80095ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095ce:	931a      	str	r3, [sp, #104]	; 0x68
 80095d0:	4654      	mov	r4, sl
 80095d2:	2205      	movs	r2, #5
 80095d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d8:	4851      	ldr	r0, [pc, #324]	; (8009720 <_svfiprintf_r+0x1ec>)
 80095da:	f7f6 fe09 	bl	80001f0 <memchr>
 80095de:	9a04      	ldr	r2, [sp, #16]
 80095e0:	b9d8      	cbnz	r0, 800961a <_svfiprintf_r+0xe6>
 80095e2:	06d0      	lsls	r0, r2, #27
 80095e4:	bf44      	itt	mi
 80095e6:	2320      	movmi	r3, #32
 80095e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095ec:	0711      	lsls	r1, r2, #28
 80095ee:	bf44      	itt	mi
 80095f0:	232b      	movmi	r3, #43	; 0x2b
 80095f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095f6:	f89a 3000 	ldrb.w	r3, [sl]
 80095fa:	2b2a      	cmp	r3, #42	; 0x2a
 80095fc:	d015      	beq.n	800962a <_svfiprintf_r+0xf6>
 80095fe:	9a07      	ldr	r2, [sp, #28]
 8009600:	4654      	mov	r4, sl
 8009602:	2000      	movs	r0, #0
 8009604:	f04f 0c0a 	mov.w	ip, #10
 8009608:	4621      	mov	r1, r4
 800960a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800960e:	3b30      	subs	r3, #48	; 0x30
 8009610:	2b09      	cmp	r3, #9
 8009612:	d94e      	bls.n	80096b2 <_svfiprintf_r+0x17e>
 8009614:	b1b0      	cbz	r0, 8009644 <_svfiprintf_r+0x110>
 8009616:	9207      	str	r2, [sp, #28]
 8009618:	e014      	b.n	8009644 <_svfiprintf_r+0x110>
 800961a:	eba0 0308 	sub.w	r3, r0, r8
 800961e:	fa09 f303 	lsl.w	r3, r9, r3
 8009622:	4313      	orrs	r3, r2
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	46a2      	mov	sl, r4
 8009628:	e7d2      	b.n	80095d0 <_svfiprintf_r+0x9c>
 800962a:	9b03      	ldr	r3, [sp, #12]
 800962c:	1d19      	adds	r1, r3, #4
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	9103      	str	r1, [sp, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	bfbb      	ittet	lt
 8009636:	425b      	neglt	r3, r3
 8009638:	f042 0202 	orrlt.w	r2, r2, #2
 800963c:	9307      	strge	r3, [sp, #28]
 800963e:	9307      	strlt	r3, [sp, #28]
 8009640:	bfb8      	it	lt
 8009642:	9204      	strlt	r2, [sp, #16]
 8009644:	7823      	ldrb	r3, [r4, #0]
 8009646:	2b2e      	cmp	r3, #46	; 0x2e
 8009648:	d10c      	bne.n	8009664 <_svfiprintf_r+0x130>
 800964a:	7863      	ldrb	r3, [r4, #1]
 800964c:	2b2a      	cmp	r3, #42	; 0x2a
 800964e:	d135      	bne.n	80096bc <_svfiprintf_r+0x188>
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	1d1a      	adds	r2, r3, #4
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	9203      	str	r2, [sp, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	bfb8      	it	lt
 800965c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009660:	3402      	adds	r4, #2
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009730 <_svfiprintf_r+0x1fc>
 8009668:	7821      	ldrb	r1, [r4, #0]
 800966a:	2203      	movs	r2, #3
 800966c:	4650      	mov	r0, sl
 800966e:	f7f6 fdbf 	bl	80001f0 <memchr>
 8009672:	b140      	cbz	r0, 8009686 <_svfiprintf_r+0x152>
 8009674:	2340      	movs	r3, #64	; 0x40
 8009676:	eba0 000a 	sub.w	r0, r0, sl
 800967a:	fa03 f000 	lsl.w	r0, r3, r0
 800967e:	9b04      	ldr	r3, [sp, #16]
 8009680:	4303      	orrs	r3, r0
 8009682:	3401      	adds	r4, #1
 8009684:	9304      	str	r3, [sp, #16]
 8009686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800968a:	4826      	ldr	r0, [pc, #152]	; (8009724 <_svfiprintf_r+0x1f0>)
 800968c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009690:	2206      	movs	r2, #6
 8009692:	f7f6 fdad 	bl	80001f0 <memchr>
 8009696:	2800      	cmp	r0, #0
 8009698:	d038      	beq.n	800970c <_svfiprintf_r+0x1d8>
 800969a:	4b23      	ldr	r3, [pc, #140]	; (8009728 <_svfiprintf_r+0x1f4>)
 800969c:	bb1b      	cbnz	r3, 80096e6 <_svfiprintf_r+0x1b2>
 800969e:	9b03      	ldr	r3, [sp, #12]
 80096a0:	3307      	adds	r3, #7
 80096a2:	f023 0307 	bic.w	r3, r3, #7
 80096a6:	3308      	adds	r3, #8
 80096a8:	9303      	str	r3, [sp, #12]
 80096aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ac:	4433      	add	r3, r6
 80096ae:	9309      	str	r3, [sp, #36]	; 0x24
 80096b0:	e767      	b.n	8009582 <_svfiprintf_r+0x4e>
 80096b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80096b6:	460c      	mov	r4, r1
 80096b8:	2001      	movs	r0, #1
 80096ba:	e7a5      	b.n	8009608 <_svfiprintf_r+0xd4>
 80096bc:	2300      	movs	r3, #0
 80096be:	3401      	adds	r4, #1
 80096c0:	9305      	str	r3, [sp, #20]
 80096c2:	4619      	mov	r1, r3
 80096c4:	f04f 0c0a 	mov.w	ip, #10
 80096c8:	4620      	mov	r0, r4
 80096ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ce:	3a30      	subs	r2, #48	; 0x30
 80096d0:	2a09      	cmp	r2, #9
 80096d2:	d903      	bls.n	80096dc <_svfiprintf_r+0x1a8>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0c5      	beq.n	8009664 <_svfiprintf_r+0x130>
 80096d8:	9105      	str	r1, [sp, #20]
 80096da:	e7c3      	b.n	8009664 <_svfiprintf_r+0x130>
 80096dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80096e0:	4604      	mov	r4, r0
 80096e2:	2301      	movs	r3, #1
 80096e4:	e7f0      	b.n	80096c8 <_svfiprintf_r+0x194>
 80096e6:	ab03      	add	r3, sp, #12
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	462a      	mov	r2, r5
 80096ec:	4b0f      	ldr	r3, [pc, #60]	; (800972c <_svfiprintf_r+0x1f8>)
 80096ee:	a904      	add	r1, sp, #16
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7fc fa0d 	bl	8005b10 <_printf_float>
 80096f6:	1c42      	adds	r2, r0, #1
 80096f8:	4606      	mov	r6, r0
 80096fa:	d1d6      	bne.n	80096aa <_svfiprintf_r+0x176>
 80096fc:	89ab      	ldrh	r3, [r5, #12]
 80096fe:	065b      	lsls	r3, r3, #25
 8009700:	f53f af2c 	bmi.w	800955c <_svfiprintf_r+0x28>
 8009704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009706:	b01d      	add	sp, #116	; 0x74
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970c:	ab03      	add	r3, sp, #12
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	462a      	mov	r2, r5
 8009712:	4b06      	ldr	r3, [pc, #24]	; (800972c <_svfiprintf_r+0x1f8>)
 8009714:	a904      	add	r1, sp, #16
 8009716:	4638      	mov	r0, r7
 8009718:	f7fc fc9e 	bl	8006058 <_printf_i>
 800971c:	e7eb      	b.n	80096f6 <_svfiprintf_r+0x1c2>
 800971e:	bf00      	nop
 8009720:	0800b964 	.word	0x0800b964
 8009724:	0800b96e 	.word	0x0800b96e
 8009728:	08005b11 	.word	0x08005b11
 800972c:	0800947d 	.word	0x0800947d
 8009730:	0800b96a 	.word	0x0800b96a
 8009734:	00000000 	.word	0x00000000

08009738 <nan>:
 8009738:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009740 <nan+0x8>
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	00000000 	.word	0x00000000
 8009744:	7ff80000 	.word	0x7ff80000

08009748 <_sbrk_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4d06      	ldr	r5, [pc, #24]	; (8009764 <_sbrk_r+0x1c>)
 800974c:	2300      	movs	r3, #0
 800974e:	4604      	mov	r4, r0
 8009750:	4608      	mov	r0, r1
 8009752:	602b      	str	r3, [r5, #0]
 8009754:	f7f8 fede 	bl	8002514 <_sbrk>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	d102      	bne.n	8009762 <_sbrk_r+0x1a>
 800975c:	682b      	ldr	r3, [r5, #0]
 800975e:	b103      	cbz	r3, 8009762 <_sbrk_r+0x1a>
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	bd38      	pop	{r3, r4, r5, pc}
 8009764:	20000888 	.word	0x20000888

08009768 <strncmp>:
 8009768:	b510      	push	{r4, lr}
 800976a:	b17a      	cbz	r2, 800978c <strncmp+0x24>
 800976c:	4603      	mov	r3, r0
 800976e:	3901      	subs	r1, #1
 8009770:	1884      	adds	r4, r0, r2
 8009772:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009776:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800977a:	4290      	cmp	r0, r2
 800977c:	d101      	bne.n	8009782 <strncmp+0x1a>
 800977e:	42a3      	cmp	r3, r4
 8009780:	d101      	bne.n	8009786 <strncmp+0x1e>
 8009782:	1a80      	subs	r0, r0, r2
 8009784:	bd10      	pop	{r4, pc}
 8009786:	2800      	cmp	r0, #0
 8009788:	d1f3      	bne.n	8009772 <strncmp+0xa>
 800978a:	e7fa      	b.n	8009782 <strncmp+0x1a>
 800978c:	4610      	mov	r0, r2
 800978e:	e7f9      	b.n	8009784 <strncmp+0x1c>

08009790 <__ascii_wctomb>:
 8009790:	b149      	cbz	r1, 80097a6 <__ascii_wctomb+0x16>
 8009792:	2aff      	cmp	r2, #255	; 0xff
 8009794:	bf85      	ittet	hi
 8009796:	238a      	movhi	r3, #138	; 0x8a
 8009798:	6003      	strhi	r3, [r0, #0]
 800979a:	700a      	strbls	r2, [r1, #0]
 800979c:	f04f 30ff 	movhi.w	r0, #4294967295
 80097a0:	bf98      	it	ls
 80097a2:	2001      	movls	r0, #1
 80097a4:	4770      	bx	lr
 80097a6:	4608      	mov	r0, r1
 80097a8:	4770      	bx	lr
	...

080097ac <__assert_func>:
 80097ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097ae:	4614      	mov	r4, r2
 80097b0:	461a      	mov	r2, r3
 80097b2:	4b09      	ldr	r3, [pc, #36]	; (80097d8 <__assert_func+0x2c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4605      	mov	r5, r0
 80097b8:	68d8      	ldr	r0, [r3, #12]
 80097ba:	b14c      	cbz	r4, 80097d0 <__assert_func+0x24>
 80097bc:	4b07      	ldr	r3, [pc, #28]	; (80097dc <__assert_func+0x30>)
 80097be:	9100      	str	r1, [sp, #0]
 80097c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097c4:	4906      	ldr	r1, [pc, #24]	; (80097e0 <__assert_func+0x34>)
 80097c6:	462b      	mov	r3, r5
 80097c8:	f000 f80e 	bl	80097e8 <fiprintf>
 80097cc:	f000 fa8c 	bl	8009ce8 <abort>
 80097d0:	4b04      	ldr	r3, [pc, #16]	; (80097e4 <__assert_func+0x38>)
 80097d2:	461c      	mov	r4, r3
 80097d4:	e7f3      	b.n	80097be <__assert_func+0x12>
 80097d6:	bf00      	nop
 80097d8:	20000010 	.word	0x20000010
 80097dc:	0800b975 	.word	0x0800b975
 80097e0:	0800b982 	.word	0x0800b982
 80097e4:	0800b9b0 	.word	0x0800b9b0

080097e8 <fiprintf>:
 80097e8:	b40e      	push	{r1, r2, r3}
 80097ea:	b503      	push	{r0, r1, lr}
 80097ec:	4601      	mov	r1, r0
 80097ee:	ab03      	add	r3, sp, #12
 80097f0:	4805      	ldr	r0, [pc, #20]	; (8009808 <fiprintf+0x20>)
 80097f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097f6:	6800      	ldr	r0, [r0, #0]
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	f000 f885 	bl	8009908 <_vfiprintf_r>
 80097fe:	b002      	add	sp, #8
 8009800:	f85d eb04 	ldr.w	lr, [sp], #4
 8009804:	b003      	add	sp, #12
 8009806:	4770      	bx	lr
 8009808:	20000010 	.word	0x20000010

0800980c <memmove>:
 800980c:	4288      	cmp	r0, r1
 800980e:	b510      	push	{r4, lr}
 8009810:	eb01 0402 	add.w	r4, r1, r2
 8009814:	d902      	bls.n	800981c <memmove+0x10>
 8009816:	4284      	cmp	r4, r0
 8009818:	4623      	mov	r3, r4
 800981a:	d807      	bhi.n	800982c <memmove+0x20>
 800981c:	1e43      	subs	r3, r0, #1
 800981e:	42a1      	cmp	r1, r4
 8009820:	d008      	beq.n	8009834 <memmove+0x28>
 8009822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800982a:	e7f8      	b.n	800981e <memmove+0x12>
 800982c:	4402      	add	r2, r0
 800982e:	4601      	mov	r1, r0
 8009830:	428a      	cmp	r2, r1
 8009832:	d100      	bne.n	8009836 <memmove+0x2a>
 8009834:	bd10      	pop	{r4, pc}
 8009836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800983a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800983e:	e7f7      	b.n	8009830 <memmove+0x24>

08009840 <__malloc_lock>:
 8009840:	4801      	ldr	r0, [pc, #4]	; (8009848 <__malloc_lock+0x8>)
 8009842:	f000 bc11 	b.w	800a068 <__retarget_lock_acquire_recursive>
 8009846:	bf00      	nop
 8009848:	2000088c 	.word	0x2000088c

0800984c <__malloc_unlock>:
 800984c:	4801      	ldr	r0, [pc, #4]	; (8009854 <__malloc_unlock+0x8>)
 800984e:	f000 bc0c 	b.w	800a06a <__retarget_lock_release_recursive>
 8009852:	bf00      	nop
 8009854:	2000088c 	.word	0x2000088c

08009858 <_realloc_r>:
 8009858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800985c:	4680      	mov	r8, r0
 800985e:	4614      	mov	r4, r2
 8009860:	460e      	mov	r6, r1
 8009862:	b921      	cbnz	r1, 800986e <_realloc_r+0x16>
 8009864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009868:	4611      	mov	r1, r2
 800986a:	f7ff bd93 	b.w	8009394 <_malloc_r>
 800986e:	b92a      	cbnz	r2, 800987c <_realloc_r+0x24>
 8009870:	f7ff fd24 	bl	80092bc <_free_r>
 8009874:	4625      	mov	r5, r4
 8009876:	4628      	mov	r0, r5
 8009878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800987c:	f000 fc5c 	bl	800a138 <_malloc_usable_size_r>
 8009880:	4284      	cmp	r4, r0
 8009882:	4607      	mov	r7, r0
 8009884:	d802      	bhi.n	800988c <_realloc_r+0x34>
 8009886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800988a:	d812      	bhi.n	80098b2 <_realloc_r+0x5a>
 800988c:	4621      	mov	r1, r4
 800988e:	4640      	mov	r0, r8
 8009890:	f7ff fd80 	bl	8009394 <_malloc_r>
 8009894:	4605      	mov	r5, r0
 8009896:	2800      	cmp	r0, #0
 8009898:	d0ed      	beq.n	8009876 <_realloc_r+0x1e>
 800989a:	42bc      	cmp	r4, r7
 800989c:	4622      	mov	r2, r4
 800989e:	4631      	mov	r1, r6
 80098a0:	bf28      	it	cs
 80098a2:	463a      	movcs	r2, r7
 80098a4:	f7ff f824 	bl	80088f0 <memcpy>
 80098a8:	4631      	mov	r1, r6
 80098aa:	4640      	mov	r0, r8
 80098ac:	f7ff fd06 	bl	80092bc <_free_r>
 80098b0:	e7e1      	b.n	8009876 <_realloc_r+0x1e>
 80098b2:	4635      	mov	r5, r6
 80098b4:	e7df      	b.n	8009876 <_realloc_r+0x1e>

080098b6 <__sfputc_r>:
 80098b6:	6893      	ldr	r3, [r2, #8]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	b410      	push	{r4}
 80098be:	6093      	str	r3, [r2, #8]
 80098c0:	da08      	bge.n	80098d4 <__sfputc_r+0x1e>
 80098c2:	6994      	ldr	r4, [r2, #24]
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	db01      	blt.n	80098cc <__sfputc_r+0x16>
 80098c8:	290a      	cmp	r1, #10
 80098ca:	d103      	bne.n	80098d4 <__sfputc_r+0x1e>
 80098cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098d0:	f000 b94a 	b.w	8009b68 <__swbuf_r>
 80098d4:	6813      	ldr	r3, [r2, #0]
 80098d6:	1c58      	adds	r0, r3, #1
 80098d8:	6010      	str	r0, [r2, #0]
 80098da:	7019      	strb	r1, [r3, #0]
 80098dc:	4608      	mov	r0, r1
 80098de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <__sfputs_r>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	4606      	mov	r6, r0
 80098e8:	460f      	mov	r7, r1
 80098ea:	4614      	mov	r4, r2
 80098ec:	18d5      	adds	r5, r2, r3
 80098ee:	42ac      	cmp	r4, r5
 80098f0:	d101      	bne.n	80098f6 <__sfputs_r+0x12>
 80098f2:	2000      	movs	r0, #0
 80098f4:	e007      	b.n	8009906 <__sfputs_r+0x22>
 80098f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fa:	463a      	mov	r2, r7
 80098fc:	4630      	mov	r0, r6
 80098fe:	f7ff ffda 	bl	80098b6 <__sfputc_r>
 8009902:	1c43      	adds	r3, r0, #1
 8009904:	d1f3      	bne.n	80098ee <__sfputs_r+0xa>
 8009906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009908 <_vfiprintf_r>:
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	460d      	mov	r5, r1
 800990e:	b09d      	sub	sp, #116	; 0x74
 8009910:	4614      	mov	r4, r2
 8009912:	4698      	mov	r8, r3
 8009914:	4606      	mov	r6, r0
 8009916:	b118      	cbz	r0, 8009920 <_vfiprintf_r+0x18>
 8009918:	6983      	ldr	r3, [r0, #24]
 800991a:	b90b      	cbnz	r3, 8009920 <_vfiprintf_r+0x18>
 800991c:	f000 fb06 	bl	8009f2c <__sinit>
 8009920:	4b89      	ldr	r3, [pc, #548]	; (8009b48 <_vfiprintf_r+0x240>)
 8009922:	429d      	cmp	r5, r3
 8009924:	d11b      	bne.n	800995e <_vfiprintf_r+0x56>
 8009926:	6875      	ldr	r5, [r6, #4]
 8009928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800992a:	07d9      	lsls	r1, r3, #31
 800992c:	d405      	bmi.n	800993a <_vfiprintf_r+0x32>
 800992e:	89ab      	ldrh	r3, [r5, #12]
 8009930:	059a      	lsls	r2, r3, #22
 8009932:	d402      	bmi.n	800993a <_vfiprintf_r+0x32>
 8009934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009936:	f000 fb97 	bl	800a068 <__retarget_lock_acquire_recursive>
 800993a:	89ab      	ldrh	r3, [r5, #12]
 800993c:	071b      	lsls	r3, r3, #28
 800993e:	d501      	bpl.n	8009944 <_vfiprintf_r+0x3c>
 8009940:	692b      	ldr	r3, [r5, #16]
 8009942:	b9eb      	cbnz	r3, 8009980 <_vfiprintf_r+0x78>
 8009944:	4629      	mov	r1, r5
 8009946:	4630      	mov	r0, r6
 8009948:	f000 f960 	bl	8009c0c <__swsetup_r>
 800994c:	b1c0      	cbz	r0, 8009980 <_vfiprintf_r+0x78>
 800994e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009950:	07dc      	lsls	r4, r3, #31
 8009952:	d50e      	bpl.n	8009972 <_vfiprintf_r+0x6a>
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	b01d      	add	sp, #116	; 0x74
 800995a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995e:	4b7b      	ldr	r3, [pc, #492]	; (8009b4c <_vfiprintf_r+0x244>)
 8009960:	429d      	cmp	r5, r3
 8009962:	d101      	bne.n	8009968 <_vfiprintf_r+0x60>
 8009964:	68b5      	ldr	r5, [r6, #8]
 8009966:	e7df      	b.n	8009928 <_vfiprintf_r+0x20>
 8009968:	4b79      	ldr	r3, [pc, #484]	; (8009b50 <_vfiprintf_r+0x248>)
 800996a:	429d      	cmp	r5, r3
 800996c:	bf08      	it	eq
 800996e:	68f5      	ldreq	r5, [r6, #12]
 8009970:	e7da      	b.n	8009928 <_vfiprintf_r+0x20>
 8009972:	89ab      	ldrh	r3, [r5, #12]
 8009974:	0598      	lsls	r0, r3, #22
 8009976:	d4ed      	bmi.n	8009954 <_vfiprintf_r+0x4c>
 8009978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800997a:	f000 fb76 	bl	800a06a <__retarget_lock_release_recursive>
 800997e:	e7e9      	b.n	8009954 <_vfiprintf_r+0x4c>
 8009980:	2300      	movs	r3, #0
 8009982:	9309      	str	r3, [sp, #36]	; 0x24
 8009984:	2320      	movs	r3, #32
 8009986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800998a:	f8cd 800c 	str.w	r8, [sp, #12]
 800998e:	2330      	movs	r3, #48	; 0x30
 8009990:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b54 <_vfiprintf_r+0x24c>
 8009994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009998:	f04f 0901 	mov.w	r9, #1
 800999c:	4623      	mov	r3, r4
 800999e:	469a      	mov	sl, r3
 80099a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a4:	b10a      	cbz	r2, 80099aa <_vfiprintf_r+0xa2>
 80099a6:	2a25      	cmp	r2, #37	; 0x25
 80099a8:	d1f9      	bne.n	800999e <_vfiprintf_r+0x96>
 80099aa:	ebba 0b04 	subs.w	fp, sl, r4
 80099ae:	d00b      	beq.n	80099c8 <_vfiprintf_r+0xc0>
 80099b0:	465b      	mov	r3, fp
 80099b2:	4622      	mov	r2, r4
 80099b4:	4629      	mov	r1, r5
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7ff ff94 	bl	80098e4 <__sfputs_r>
 80099bc:	3001      	adds	r0, #1
 80099be:	f000 80aa 	beq.w	8009b16 <_vfiprintf_r+0x20e>
 80099c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c4:	445a      	add	r2, fp
 80099c6:	9209      	str	r2, [sp, #36]	; 0x24
 80099c8:	f89a 3000 	ldrb.w	r3, [sl]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 80a2 	beq.w	8009b16 <_vfiprintf_r+0x20e>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f04f 32ff 	mov.w	r2, #4294967295
 80099d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099dc:	f10a 0a01 	add.w	sl, sl, #1
 80099e0:	9304      	str	r3, [sp, #16]
 80099e2:	9307      	str	r3, [sp, #28]
 80099e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099e8:	931a      	str	r3, [sp, #104]	; 0x68
 80099ea:	4654      	mov	r4, sl
 80099ec:	2205      	movs	r2, #5
 80099ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f2:	4858      	ldr	r0, [pc, #352]	; (8009b54 <_vfiprintf_r+0x24c>)
 80099f4:	f7f6 fbfc 	bl	80001f0 <memchr>
 80099f8:	9a04      	ldr	r2, [sp, #16]
 80099fa:	b9d8      	cbnz	r0, 8009a34 <_vfiprintf_r+0x12c>
 80099fc:	06d1      	lsls	r1, r2, #27
 80099fe:	bf44      	itt	mi
 8009a00:	2320      	movmi	r3, #32
 8009a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a06:	0713      	lsls	r3, r2, #28
 8009a08:	bf44      	itt	mi
 8009a0a:	232b      	movmi	r3, #43	; 0x2b
 8009a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a10:	f89a 3000 	ldrb.w	r3, [sl]
 8009a14:	2b2a      	cmp	r3, #42	; 0x2a
 8009a16:	d015      	beq.n	8009a44 <_vfiprintf_r+0x13c>
 8009a18:	9a07      	ldr	r2, [sp, #28]
 8009a1a:	4654      	mov	r4, sl
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f04f 0c0a 	mov.w	ip, #10
 8009a22:	4621      	mov	r1, r4
 8009a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a28:	3b30      	subs	r3, #48	; 0x30
 8009a2a:	2b09      	cmp	r3, #9
 8009a2c:	d94e      	bls.n	8009acc <_vfiprintf_r+0x1c4>
 8009a2e:	b1b0      	cbz	r0, 8009a5e <_vfiprintf_r+0x156>
 8009a30:	9207      	str	r2, [sp, #28]
 8009a32:	e014      	b.n	8009a5e <_vfiprintf_r+0x156>
 8009a34:	eba0 0308 	sub.w	r3, r0, r8
 8009a38:	fa09 f303 	lsl.w	r3, r9, r3
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	9304      	str	r3, [sp, #16]
 8009a40:	46a2      	mov	sl, r4
 8009a42:	e7d2      	b.n	80099ea <_vfiprintf_r+0xe2>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	1d19      	adds	r1, r3, #4
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	9103      	str	r1, [sp, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	bfbb      	ittet	lt
 8009a50:	425b      	neglt	r3, r3
 8009a52:	f042 0202 	orrlt.w	r2, r2, #2
 8009a56:	9307      	strge	r3, [sp, #28]
 8009a58:	9307      	strlt	r3, [sp, #28]
 8009a5a:	bfb8      	it	lt
 8009a5c:	9204      	strlt	r2, [sp, #16]
 8009a5e:	7823      	ldrb	r3, [r4, #0]
 8009a60:	2b2e      	cmp	r3, #46	; 0x2e
 8009a62:	d10c      	bne.n	8009a7e <_vfiprintf_r+0x176>
 8009a64:	7863      	ldrb	r3, [r4, #1]
 8009a66:	2b2a      	cmp	r3, #42	; 0x2a
 8009a68:	d135      	bne.n	8009ad6 <_vfiprintf_r+0x1ce>
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	1d1a      	adds	r2, r3, #4
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	9203      	str	r2, [sp, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	bfb8      	it	lt
 8009a76:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a7a:	3402      	adds	r4, #2
 8009a7c:	9305      	str	r3, [sp, #20]
 8009a7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b64 <_vfiprintf_r+0x25c>
 8009a82:	7821      	ldrb	r1, [r4, #0]
 8009a84:	2203      	movs	r2, #3
 8009a86:	4650      	mov	r0, sl
 8009a88:	f7f6 fbb2 	bl	80001f0 <memchr>
 8009a8c:	b140      	cbz	r0, 8009aa0 <_vfiprintf_r+0x198>
 8009a8e:	2340      	movs	r3, #64	; 0x40
 8009a90:	eba0 000a 	sub.w	r0, r0, sl
 8009a94:	fa03 f000 	lsl.w	r0, r3, r0
 8009a98:	9b04      	ldr	r3, [sp, #16]
 8009a9a:	4303      	orrs	r3, r0
 8009a9c:	3401      	adds	r4, #1
 8009a9e:	9304      	str	r3, [sp, #16]
 8009aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa4:	482c      	ldr	r0, [pc, #176]	; (8009b58 <_vfiprintf_r+0x250>)
 8009aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aaa:	2206      	movs	r2, #6
 8009aac:	f7f6 fba0 	bl	80001f0 <memchr>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d03f      	beq.n	8009b34 <_vfiprintf_r+0x22c>
 8009ab4:	4b29      	ldr	r3, [pc, #164]	; (8009b5c <_vfiprintf_r+0x254>)
 8009ab6:	bb1b      	cbnz	r3, 8009b00 <_vfiprintf_r+0x1f8>
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	3307      	adds	r3, #7
 8009abc:	f023 0307 	bic.w	r3, r3, #7
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	9303      	str	r3, [sp, #12]
 8009ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac6:	443b      	add	r3, r7
 8009ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aca:	e767      	b.n	800999c <_vfiprintf_r+0x94>
 8009acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	e7a5      	b.n	8009a22 <_vfiprintf_r+0x11a>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	3401      	adds	r4, #1
 8009ada:	9305      	str	r3, [sp, #20]
 8009adc:	4619      	mov	r1, r3
 8009ade:	f04f 0c0a 	mov.w	ip, #10
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae8:	3a30      	subs	r2, #48	; 0x30
 8009aea:	2a09      	cmp	r2, #9
 8009aec:	d903      	bls.n	8009af6 <_vfiprintf_r+0x1ee>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0c5      	beq.n	8009a7e <_vfiprintf_r+0x176>
 8009af2:	9105      	str	r1, [sp, #20]
 8009af4:	e7c3      	b.n	8009a7e <_vfiprintf_r+0x176>
 8009af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009afa:	4604      	mov	r4, r0
 8009afc:	2301      	movs	r3, #1
 8009afe:	e7f0      	b.n	8009ae2 <_vfiprintf_r+0x1da>
 8009b00:	ab03      	add	r3, sp, #12
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	462a      	mov	r2, r5
 8009b06:	4b16      	ldr	r3, [pc, #88]	; (8009b60 <_vfiprintf_r+0x258>)
 8009b08:	a904      	add	r1, sp, #16
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f7fc f800 	bl	8005b10 <_printf_float>
 8009b10:	4607      	mov	r7, r0
 8009b12:	1c78      	adds	r0, r7, #1
 8009b14:	d1d6      	bne.n	8009ac4 <_vfiprintf_r+0x1bc>
 8009b16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b18:	07d9      	lsls	r1, r3, #31
 8009b1a:	d405      	bmi.n	8009b28 <_vfiprintf_r+0x220>
 8009b1c:	89ab      	ldrh	r3, [r5, #12]
 8009b1e:	059a      	lsls	r2, r3, #22
 8009b20:	d402      	bmi.n	8009b28 <_vfiprintf_r+0x220>
 8009b22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b24:	f000 faa1 	bl	800a06a <__retarget_lock_release_recursive>
 8009b28:	89ab      	ldrh	r3, [r5, #12]
 8009b2a:	065b      	lsls	r3, r3, #25
 8009b2c:	f53f af12 	bmi.w	8009954 <_vfiprintf_r+0x4c>
 8009b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b32:	e711      	b.n	8009958 <_vfiprintf_r+0x50>
 8009b34:	ab03      	add	r3, sp, #12
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	462a      	mov	r2, r5
 8009b3a:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <_vfiprintf_r+0x258>)
 8009b3c:	a904      	add	r1, sp, #16
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f7fc fa8a 	bl	8006058 <_printf_i>
 8009b44:	e7e4      	b.n	8009b10 <_vfiprintf_r+0x208>
 8009b46:	bf00      	nop
 8009b48:	0800b9d4 	.word	0x0800b9d4
 8009b4c:	0800b9f4 	.word	0x0800b9f4
 8009b50:	0800b9b4 	.word	0x0800b9b4
 8009b54:	0800b964 	.word	0x0800b964
 8009b58:	0800b96e 	.word	0x0800b96e
 8009b5c:	08005b11 	.word	0x08005b11
 8009b60:	080098e5 	.word	0x080098e5
 8009b64:	0800b96a 	.word	0x0800b96a

08009b68 <__swbuf_r>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	460e      	mov	r6, r1
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	4605      	mov	r5, r0
 8009b70:	b118      	cbz	r0, 8009b7a <__swbuf_r+0x12>
 8009b72:	6983      	ldr	r3, [r0, #24]
 8009b74:	b90b      	cbnz	r3, 8009b7a <__swbuf_r+0x12>
 8009b76:	f000 f9d9 	bl	8009f2c <__sinit>
 8009b7a:	4b21      	ldr	r3, [pc, #132]	; (8009c00 <__swbuf_r+0x98>)
 8009b7c:	429c      	cmp	r4, r3
 8009b7e:	d12b      	bne.n	8009bd8 <__swbuf_r+0x70>
 8009b80:	686c      	ldr	r4, [r5, #4]
 8009b82:	69a3      	ldr	r3, [r4, #24]
 8009b84:	60a3      	str	r3, [r4, #8]
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	071a      	lsls	r2, r3, #28
 8009b8a:	d52f      	bpl.n	8009bec <__swbuf_r+0x84>
 8009b8c:	6923      	ldr	r3, [r4, #16]
 8009b8e:	b36b      	cbz	r3, 8009bec <__swbuf_r+0x84>
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	6820      	ldr	r0, [r4, #0]
 8009b94:	1ac0      	subs	r0, r0, r3
 8009b96:	6963      	ldr	r3, [r4, #20]
 8009b98:	b2f6      	uxtb	r6, r6
 8009b9a:	4283      	cmp	r3, r0
 8009b9c:	4637      	mov	r7, r6
 8009b9e:	dc04      	bgt.n	8009baa <__swbuf_r+0x42>
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f000 f92e 	bl	8009e04 <_fflush_r>
 8009ba8:	bb30      	cbnz	r0, 8009bf8 <__swbuf_r+0x90>
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	60a3      	str	r3, [r4, #8]
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	6022      	str	r2, [r4, #0]
 8009bb6:	701e      	strb	r6, [r3, #0]
 8009bb8:	6963      	ldr	r3, [r4, #20]
 8009bba:	3001      	adds	r0, #1
 8009bbc:	4283      	cmp	r3, r0
 8009bbe:	d004      	beq.n	8009bca <__swbuf_r+0x62>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	07db      	lsls	r3, r3, #31
 8009bc4:	d506      	bpl.n	8009bd4 <__swbuf_r+0x6c>
 8009bc6:	2e0a      	cmp	r6, #10
 8009bc8:	d104      	bne.n	8009bd4 <__swbuf_r+0x6c>
 8009bca:	4621      	mov	r1, r4
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f000 f919 	bl	8009e04 <_fflush_r>
 8009bd2:	b988      	cbnz	r0, 8009bf8 <__swbuf_r+0x90>
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <__swbuf_r+0x9c>)
 8009bda:	429c      	cmp	r4, r3
 8009bdc:	d101      	bne.n	8009be2 <__swbuf_r+0x7a>
 8009bde:	68ac      	ldr	r4, [r5, #8]
 8009be0:	e7cf      	b.n	8009b82 <__swbuf_r+0x1a>
 8009be2:	4b09      	ldr	r3, [pc, #36]	; (8009c08 <__swbuf_r+0xa0>)
 8009be4:	429c      	cmp	r4, r3
 8009be6:	bf08      	it	eq
 8009be8:	68ec      	ldreq	r4, [r5, #12]
 8009bea:	e7ca      	b.n	8009b82 <__swbuf_r+0x1a>
 8009bec:	4621      	mov	r1, r4
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f000 f80c 	bl	8009c0c <__swsetup_r>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d0cb      	beq.n	8009b90 <__swbuf_r+0x28>
 8009bf8:	f04f 37ff 	mov.w	r7, #4294967295
 8009bfc:	e7ea      	b.n	8009bd4 <__swbuf_r+0x6c>
 8009bfe:	bf00      	nop
 8009c00:	0800b9d4 	.word	0x0800b9d4
 8009c04:	0800b9f4 	.word	0x0800b9f4
 8009c08:	0800b9b4 	.word	0x0800b9b4

08009c0c <__swsetup_r>:
 8009c0c:	4b32      	ldr	r3, [pc, #200]	; (8009cd8 <__swsetup_r+0xcc>)
 8009c0e:	b570      	push	{r4, r5, r6, lr}
 8009c10:	681d      	ldr	r5, [r3, #0]
 8009c12:	4606      	mov	r6, r0
 8009c14:	460c      	mov	r4, r1
 8009c16:	b125      	cbz	r5, 8009c22 <__swsetup_r+0x16>
 8009c18:	69ab      	ldr	r3, [r5, #24]
 8009c1a:	b913      	cbnz	r3, 8009c22 <__swsetup_r+0x16>
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f000 f985 	bl	8009f2c <__sinit>
 8009c22:	4b2e      	ldr	r3, [pc, #184]	; (8009cdc <__swsetup_r+0xd0>)
 8009c24:	429c      	cmp	r4, r3
 8009c26:	d10f      	bne.n	8009c48 <__swsetup_r+0x3c>
 8009c28:	686c      	ldr	r4, [r5, #4]
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c30:	0719      	lsls	r1, r3, #28
 8009c32:	d42c      	bmi.n	8009c8e <__swsetup_r+0x82>
 8009c34:	06dd      	lsls	r5, r3, #27
 8009c36:	d411      	bmi.n	8009c5c <__swsetup_r+0x50>
 8009c38:	2309      	movs	r3, #9
 8009c3a:	6033      	str	r3, [r6, #0]
 8009c3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295
 8009c46:	e03e      	b.n	8009cc6 <__swsetup_r+0xba>
 8009c48:	4b25      	ldr	r3, [pc, #148]	; (8009ce0 <__swsetup_r+0xd4>)
 8009c4a:	429c      	cmp	r4, r3
 8009c4c:	d101      	bne.n	8009c52 <__swsetup_r+0x46>
 8009c4e:	68ac      	ldr	r4, [r5, #8]
 8009c50:	e7eb      	b.n	8009c2a <__swsetup_r+0x1e>
 8009c52:	4b24      	ldr	r3, [pc, #144]	; (8009ce4 <__swsetup_r+0xd8>)
 8009c54:	429c      	cmp	r4, r3
 8009c56:	bf08      	it	eq
 8009c58:	68ec      	ldreq	r4, [r5, #12]
 8009c5a:	e7e6      	b.n	8009c2a <__swsetup_r+0x1e>
 8009c5c:	0758      	lsls	r0, r3, #29
 8009c5e:	d512      	bpl.n	8009c86 <__swsetup_r+0x7a>
 8009c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c62:	b141      	cbz	r1, 8009c76 <__swsetup_r+0x6a>
 8009c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c68:	4299      	cmp	r1, r3
 8009c6a:	d002      	beq.n	8009c72 <__swsetup_r+0x66>
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f7ff fb25 	bl	80092bc <_free_r>
 8009c72:	2300      	movs	r3, #0
 8009c74:	6363      	str	r3, [r4, #52]	; 0x34
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c7c:	81a3      	strh	r3, [r4, #12]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	6063      	str	r3, [r4, #4]
 8009c82:	6923      	ldr	r3, [r4, #16]
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	f043 0308 	orr.w	r3, r3, #8
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	6923      	ldr	r3, [r4, #16]
 8009c90:	b94b      	cbnz	r3, 8009ca6 <__swsetup_r+0x9a>
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c9c:	d003      	beq.n	8009ca6 <__swsetup_r+0x9a>
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f000 fa09 	bl	800a0b8 <__smakebuf_r>
 8009ca6:	89a0      	ldrh	r0, [r4, #12]
 8009ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cac:	f010 0301 	ands.w	r3, r0, #1
 8009cb0:	d00a      	beq.n	8009cc8 <__swsetup_r+0xbc>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60a3      	str	r3, [r4, #8]
 8009cb6:	6963      	ldr	r3, [r4, #20]
 8009cb8:	425b      	negs	r3, r3
 8009cba:	61a3      	str	r3, [r4, #24]
 8009cbc:	6923      	ldr	r3, [r4, #16]
 8009cbe:	b943      	cbnz	r3, 8009cd2 <__swsetup_r+0xc6>
 8009cc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cc4:	d1ba      	bne.n	8009c3c <__swsetup_r+0x30>
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	0781      	lsls	r1, r0, #30
 8009cca:	bf58      	it	pl
 8009ccc:	6963      	ldrpl	r3, [r4, #20]
 8009cce:	60a3      	str	r3, [r4, #8]
 8009cd0:	e7f4      	b.n	8009cbc <__swsetup_r+0xb0>
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	e7f7      	b.n	8009cc6 <__swsetup_r+0xba>
 8009cd6:	bf00      	nop
 8009cd8:	20000010 	.word	0x20000010
 8009cdc:	0800b9d4 	.word	0x0800b9d4
 8009ce0:	0800b9f4 	.word	0x0800b9f4
 8009ce4:	0800b9b4 	.word	0x0800b9b4

08009ce8 <abort>:
 8009ce8:	b508      	push	{r3, lr}
 8009cea:	2006      	movs	r0, #6
 8009cec:	f000 fa54 	bl	800a198 <raise>
 8009cf0:	2001      	movs	r0, #1
 8009cf2:	f7f8 fb97 	bl	8002424 <_exit>
	...

08009cf8 <__sflush_r>:
 8009cf8:	898a      	ldrh	r2, [r1, #12]
 8009cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfe:	4605      	mov	r5, r0
 8009d00:	0710      	lsls	r0, r2, #28
 8009d02:	460c      	mov	r4, r1
 8009d04:	d458      	bmi.n	8009db8 <__sflush_r+0xc0>
 8009d06:	684b      	ldr	r3, [r1, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dc05      	bgt.n	8009d18 <__sflush_r+0x20>
 8009d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	dc02      	bgt.n	8009d18 <__sflush_r+0x20>
 8009d12:	2000      	movs	r0, #0
 8009d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d1a:	2e00      	cmp	r6, #0
 8009d1c:	d0f9      	beq.n	8009d12 <__sflush_r+0x1a>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d24:	682f      	ldr	r7, [r5, #0]
 8009d26:	602b      	str	r3, [r5, #0]
 8009d28:	d032      	beq.n	8009d90 <__sflush_r+0x98>
 8009d2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	075a      	lsls	r2, r3, #29
 8009d30:	d505      	bpl.n	8009d3e <__sflush_r+0x46>
 8009d32:	6863      	ldr	r3, [r4, #4]
 8009d34:	1ac0      	subs	r0, r0, r3
 8009d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d38:	b10b      	cbz	r3, 8009d3e <__sflush_r+0x46>
 8009d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d3c:	1ac0      	subs	r0, r0, r3
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4602      	mov	r2, r0
 8009d42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d44:	6a21      	ldr	r1, [r4, #32]
 8009d46:	4628      	mov	r0, r5
 8009d48:	47b0      	blx	r6
 8009d4a:	1c43      	adds	r3, r0, #1
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	d106      	bne.n	8009d5e <__sflush_r+0x66>
 8009d50:	6829      	ldr	r1, [r5, #0]
 8009d52:	291d      	cmp	r1, #29
 8009d54:	d82c      	bhi.n	8009db0 <__sflush_r+0xb8>
 8009d56:	4a2a      	ldr	r2, [pc, #168]	; (8009e00 <__sflush_r+0x108>)
 8009d58:	40ca      	lsrs	r2, r1
 8009d5a:	07d6      	lsls	r6, r2, #31
 8009d5c:	d528      	bpl.n	8009db0 <__sflush_r+0xb8>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	6062      	str	r2, [r4, #4]
 8009d62:	04d9      	lsls	r1, r3, #19
 8009d64:	6922      	ldr	r2, [r4, #16]
 8009d66:	6022      	str	r2, [r4, #0]
 8009d68:	d504      	bpl.n	8009d74 <__sflush_r+0x7c>
 8009d6a:	1c42      	adds	r2, r0, #1
 8009d6c:	d101      	bne.n	8009d72 <__sflush_r+0x7a>
 8009d6e:	682b      	ldr	r3, [r5, #0]
 8009d70:	b903      	cbnz	r3, 8009d74 <__sflush_r+0x7c>
 8009d72:	6560      	str	r0, [r4, #84]	; 0x54
 8009d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d76:	602f      	str	r7, [r5, #0]
 8009d78:	2900      	cmp	r1, #0
 8009d7a:	d0ca      	beq.n	8009d12 <__sflush_r+0x1a>
 8009d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d80:	4299      	cmp	r1, r3
 8009d82:	d002      	beq.n	8009d8a <__sflush_r+0x92>
 8009d84:	4628      	mov	r0, r5
 8009d86:	f7ff fa99 	bl	80092bc <_free_r>
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	6360      	str	r0, [r4, #52]	; 0x34
 8009d8e:	e7c1      	b.n	8009d14 <__sflush_r+0x1c>
 8009d90:	6a21      	ldr	r1, [r4, #32]
 8009d92:	2301      	movs	r3, #1
 8009d94:	4628      	mov	r0, r5
 8009d96:	47b0      	blx	r6
 8009d98:	1c41      	adds	r1, r0, #1
 8009d9a:	d1c7      	bne.n	8009d2c <__sflush_r+0x34>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0c4      	beq.n	8009d2c <__sflush_r+0x34>
 8009da2:	2b1d      	cmp	r3, #29
 8009da4:	d001      	beq.n	8009daa <__sflush_r+0xb2>
 8009da6:	2b16      	cmp	r3, #22
 8009da8:	d101      	bne.n	8009dae <__sflush_r+0xb6>
 8009daa:	602f      	str	r7, [r5, #0]
 8009dac:	e7b1      	b.n	8009d12 <__sflush_r+0x1a>
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	e7ad      	b.n	8009d14 <__sflush_r+0x1c>
 8009db8:	690f      	ldr	r7, [r1, #16]
 8009dba:	2f00      	cmp	r7, #0
 8009dbc:	d0a9      	beq.n	8009d12 <__sflush_r+0x1a>
 8009dbe:	0793      	lsls	r3, r2, #30
 8009dc0:	680e      	ldr	r6, [r1, #0]
 8009dc2:	bf08      	it	eq
 8009dc4:	694b      	ldreq	r3, [r1, #20]
 8009dc6:	600f      	str	r7, [r1, #0]
 8009dc8:	bf18      	it	ne
 8009dca:	2300      	movne	r3, #0
 8009dcc:	eba6 0807 	sub.w	r8, r6, r7
 8009dd0:	608b      	str	r3, [r1, #8]
 8009dd2:	f1b8 0f00 	cmp.w	r8, #0
 8009dd6:	dd9c      	ble.n	8009d12 <__sflush_r+0x1a>
 8009dd8:	6a21      	ldr	r1, [r4, #32]
 8009dda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ddc:	4643      	mov	r3, r8
 8009dde:	463a      	mov	r2, r7
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b0      	blx	r6
 8009de4:	2800      	cmp	r0, #0
 8009de6:	dc06      	bgt.n	8009df6 <__sflush_r+0xfe>
 8009de8:	89a3      	ldrh	r3, [r4, #12]
 8009dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dee:	81a3      	strh	r3, [r4, #12]
 8009df0:	f04f 30ff 	mov.w	r0, #4294967295
 8009df4:	e78e      	b.n	8009d14 <__sflush_r+0x1c>
 8009df6:	4407      	add	r7, r0
 8009df8:	eba8 0800 	sub.w	r8, r8, r0
 8009dfc:	e7e9      	b.n	8009dd2 <__sflush_r+0xda>
 8009dfe:	bf00      	nop
 8009e00:	20400001 	.word	0x20400001

08009e04 <_fflush_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	690b      	ldr	r3, [r1, #16]
 8009e08:	4605      	mov	r5, r0
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	b913      	cbnz	r3, 8009e14 <_fflush_r+0x10>
 8009e0e:	2500      	movs	r5, #0
 8009e10:	4628      	mov	r0, r5
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	b118      	cbz	r0, 8009e1e <_fflush_r+0x1a>
 8009e16:	6983      	ldr	r3, [r0, #24]
 8009e18:	b90b      	cbnz	r3, 8009e1e <_fflush_r+0x1a>
 8009e1a:	f000 f887 	bl	8009f2c <__sinit>
 8009e1e:	4b14      	ldr	r3, [pc, #80]	; (8009e70 <_fflush_r+0x6c>)
 8009e20:	429c      	cmp	r4, r3
 8009e22:	d11b      	bne.n	8009e5c <_fflush_r+0x58>
 8009e24:	686c      	ldr	r4, [r5, #4]
 8009e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0ef      	beq.n	8009e0e <_fflush_r+0xa>
 8009e2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e30:	07d0      	lsls	r0, r2, #31
 8009e32:	d404      	bmi.n	8009e3e <_fflush_r+0x3a>
 8009e34:	0599      	lsls	r1, r3, #22
 8009e36:	d402      	bmi.n	8009e3e <_fflush_r+0x3a>
 8009e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e3a:	f000 f915 	bl	800a068 <__retarget_lock_acquire_recursive>
 8009e3e:	4628      	mov	r0, r5
 8009e40:	4621      	mov	r1, r4
 8009e42:	f7ff ff59 	bl	8009cf8 <__sflush_r>
 8009e46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e48:	07da      	lsls	r2, r3, #31
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	d4e0      	bmi.n	8009e10 <_fflush_r+0xc>
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	059b      	lsls	r3, r3, #22
 8009e52:	d4dd      	bmi.n	8009e10 <_fflush_r+0xc>
 8009e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e56:	f000 f908 	bl	800a06a <__retarget_lock_release_recursive>
 8009e5a:	e7d9      	b.n	8009e10 <_fflush_r+0xc>
 8009e5c:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <_fflush_r+0x70>)
 8009e5e:	429c      	cmp	r4, r3
 8009e60:	d101      	bne.n	8009e66 <_fflush_r+0x62>
 8009e62:	68ac      	ldr	r4, [r5, #8]
 8009e64:	e7df      	b.n	8009e26 <_fflush_r+0x22>
 8009e66:	4b04      	ldr	r3, [pc, #16]	; (8009e78 <_fflush_r+0x74>)
 8009e68:	429c      	cmp	r4, r3
 8009e6a:	bf08      	it	eq
 8009e6c:	68ec      	ldreq	r4, [r5, #12]
 8009e6e:	e7da      	b.n	8009e26 <_fflush_r+0x22>
 8009e70:	0800b9d4 	.word	0x0800b9d4
 8009e74:	0800b9f4 	.word	0x0800b9f4
 8009e78:	0800b9b4 	.word	0x0800b9b4

08009e7c <std>:
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	b510      	push	{r4, lr}
 8009e80:	4604      	mov	r4, r0
 8009e82:	e9c0 3300 	strd	r3, r3, [r0]
 8009e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e8a:	6083      	str	r3, [r0, #8]
 8009e8c:	8181      	strh	r1, [r0, #12]
 8009e8e:	6643      	str	r3, [r0, #100]	; 0x64
 8009e90:	81c2      	strh	r2, [r0, #14]
 8009e92:	6183      	str	r3, [r0, #24]
 8009e94:	4619      	mov	r1, r3
 8009e96:	2208      	movs	r2, #8
 8009e98:	305c      	adds	r0, #92	; 0x5c
 8009e9a:	f7fb fd91 	bl	80059c0 <memset>
 8009e9e:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <std+0x38>)
 8009ea0:	6263      	str	r3, [r4, #36]	; 0x24
 8009ea2:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <std+0x3c>)
 8009ea4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ea6:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <std+0x40>)
 8009ea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <std+0x44>)
 8009eac:	6224      	str	r4, [r4, #32]
 8009eae:	6323      	str	r3, [r4, #48]	; 0x30
 8009eb0:	bd10      	pop	{r4, pc}
 8009eb2:	bf00      	nop
 8009eb4:	0800a1d1 	.word	0x0800a1d1
 8009eb8:	0800a1f3 	.word	0x0800a1f3
 8009ebc:	0800a22b 	.word	0x0800a22b
 8009ec0:	0800a24f 	.word	0x0800a24f

08009ec4 <_cleanup_r>:
 8009ec4:	4901      	ldr	r1, [pc, #4]	; (8009ecc <_cleanup_r+0x8>)
 8009ec6:	f000 b8af 	b.w	800a028 <_fwalk_reent>
 8009eca:	bf00      	nop
 8009ecc:	08009e05 	.word	0x08009e05

08009ed0 <__sfmoreglue>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	2268      	movs	r2, #104	; 0x68
 8009ed4:	1e4d      	subs	r5, r1, #1
 8009ed6:	4355      	muls	r5, r2
 8009ed8:	460e      	mov	r6, r1
 8009eda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ede:	f7ff fa59 	bl	8009394 <_malloc_r>
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	b140      	cbz	r0, 8009ef8 <__sfmoreglue+0x28>
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	e9c0 1600 	strd	r1, r6, [r0]
 8009eec:	300c      	adds	r0, #12
 8009eee:	60a0      	str	r0, [r4, #8]
 8009ef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ef4:	f7fb fd64 	bl	80059c0 <memset>
 8009ef8:	4620      	mov	r0, r4
 8009efa:	bd70      	pop	{r4, r5, r6, pc}

08009efc <__sfp_lock_acquire>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__sfp_lock_acquire+0x8>)
 8009efe:	f000 b8b3 	b.w	800a068 <__retarget_lock_acquire_recursive>
 8009f02:	bf00      	nop
 8009f04:	2000088d 	.word	0x2000088d

08009f08 <__sfp_lock_release>:
 8009f08:	4801      	ldr	r0, [pc, #4]	; (8009f10 <__sfp_lock_release+0x8>)
 8009f0a:	f000 b8ae 	b.w	800a06a <__retarget_lock_release_recursive>
 8009f0e:	bf00      	nop
 8009f10:	2000088d 	.word	0x2000088d

08009f14 <__sinit_lock_acquire>:
 8009f14:	4801      	ldr	r0, [pc, #4]	; (8009f1c <__sinit_lock_acquire+0x8>)
 8009f16:	f000 b8a7 	b.w	800a068 <__retarget_lock_acquire_recursive>
 8009f1a:	bf00      	nop
 8009f1c:	2000088e 	.word	0x2000088e

08009f20 <__sinit_lock_release>:
 8009f20:	4801      	ldr	r0, [pc, #4]	; (8009f28 <__sinit_lock_release+0x8>)
 8009f22:	f000 b8a2 	b.w	800a06a <__retarget_lock_release_recursive>
 8009f26:	bf00      	nop
 8009f28:	2000088e 	.word	0x2000088e

08009f2c <__sinit>:
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	4604      	mov	r4, r0
 8009f30:	f7ff fff0 	bl	8009f14 <__sinit_lock_acquire>
 8009f34:	69a3      	ldr	r3, [r4, #24]
 8009f36:	b11b      	cbz	r3, 8009f40 <__sinit+0x14>
 8009f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f3c:	f7ff bff0 	b.w	8009f20 <__sinit_lock_release>
 8009f40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f44:	6523      	str	r3, [r4, #80]	; 0x50
 8009f46:	4b13      	ldr	r3, [pc, #76]	; (8009f94 <__sinit+0x68>)
 8009f48:	4a13      	ldr	r2, [pc, #76]	; (8009f98 <__sinit+0x6c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f4e:	42a3      	cmp	r3, r4
 8009f50:	bf04      	itt	eq
 8009f52:	2301      	moveq	r3, #1
 8009f54:	61a3      	streq	r3, [r4, #24]
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 f820 	bl	8009f9c <__sfp>
 8009f5c:	6060      	str	r0, [r4, #4]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 f81c 	bl	8009f9c <__sfp>
 8009f64:	60a0      	str	r0, [r4, #8]
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 f818 	bl	8009f9c <__sfp>
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	60e0      	str	r0, [r4, #12]
 8009f70:	2104      	movs	r1, #4
 8009f72:	6860      	ldr	r0, [r4, #4]
 8009f74:	f7ff ff82 	bl	8009e7c <std>
 8009f78:	68a0      	ldr	r0, [r4, #8]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	2109      	movs	r1, #9
 8009f7e:	f7ff ff7d 	bl	8009e7c <std>
 8009f82:	68e0      	ldr	r0, [r4, #12]
 8009f84:	2202      	movs	r2, #2
 8009f86:	2112      	movs	r1, #18
 8009f88:	f7ff ff78 	bl	8009e7c <std>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	61a3      	str	r3, [r4, #24]
 8009f90:	e7d2      	b.n	8009f38 <__sinit+0xc>
 8009f92:	bf00      	nop
 8009f94:	0800b570 	.word	0x0800b570
 8009f98:	08009ec5 	.word	0x08009ec5

08009f9c <__sfp>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	4607      	mov	r7, r0
 8009fa0:	f7ff ffac 	bl	8009efc <__sfp_lock_acquire>
 8009fa4:	4b1e      	ldr	r3, [pc, #120]	; (800a020 <__sfp+0x84>)
 8009fa6:	681e      	ldr	r6, [r3, #0]
 8009fa8:	69b3      	ldr	r3, [r6, #24]
 8009faa:	b913      	cbnz	r3, 8009fb2 <__sfp+0x16>
 8009fac:	4630      	mov	r0, r6
 8009fae:	f7ff ffbd 	bl	8009f2c <__sinit>
 8009fb2:	3648      	adds	r6, #72	; 0x48
 8009fb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	d503      	bpl.n	8009fc4 <__sfp+0x28>
 8009fbc:	6833      	ldr	r3, [r6, #0]
 8009fbe:	b30b      	cbz	r3, 800a004 <__sfp+0x68>
 8009fc0:	6836      	ldr	r6, [r6, #0]
 8009fc2:	e7f7      	b.n	8009fb4 <__sfp+0x18>
 8009fc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fc8:	b9d5      	cbnz	r5, 800a000 <__sfp+0x64>
 8009fca:	4b16      	ldr	r3, [pc, #88]	; (800a024 <__sfp+0x88>)
 8009fcc:	60e3      	str	r3, [r4, #12]
 8009fce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fd2:	6665      	str	r5, [r4, #100]	; 0x64
 8009fd4:	f000 f847 	bl	800a066 <__retarget_lock_init_recursive>
 8009fd8:	f7ff ff96 	bl	8009f08 <__sfp_lock_release>
 8009fdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fe4:	6025      	str	r5, [r4, #0]
 8009fe6:	61a5      	str	r5, [r4, #24]
 8009fe8:	2208      	movs	r2, #8
 8009fea:	4629      	mov	r1, r5
 8009fec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ff0:	f7fb fce6 	bl	80059c0 <memset>
 8009ff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a000:	3468      	adds	r4, #104	; 0x68
 800a002:	e7d9      	b.n	8009fb8 <__sfp+0x1c>
 800a004:	2104      	movs	r1, #4
 800a006:	4638      	mov	r0, r7
 800a008:	f7ff ff62 	bl	8009ed0 <__sfmoreglue>
 800a00c:	4604      	mov	r4, r0
 800a00e:	6030      	str	r0, [r6, #0]
 800a010:	2800      	cmp	r0, #0
 800a012:	d1d5      	bne.n	8009fc0 <__sfp+0x24>
 800a014:	f7ff ff78 	bl	8009f08 <__sfp_lock_release>
 800a018:	230c      	movs	r3, #12
 800a01a:	603b      	str	r3, [r7, #0]
 800a01c:	e7ee      	b.n	8009ffc <__sfp+0x60>
 800a01e:	bf00      	nop
 800a020:	0800b570 	.word	0x0800b570
 800a024:	ffff0001 	.word	0xffff0001

0800a028 <_fwalk_reent>:
 800a028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a02c:	4606      	mov	r6, r0
 800a02e:	4688      	mov	r8, r1
 800a030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a034:	2700      	movs	r7, #0
 800a036:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a03a:	f1b9 0901 	subs.w	r9, r9, #1
 800a03e:	d505      	bpl.n	800a04c <_fwalk_reent+0x24>
 800a040:	6824      	ldr	r4, [r4, #0]
 800a042:	2c00      	cmp	r4, #0
 800a044:	d1f7      	bne.n	800a036 <_fwalk_reent+0xe>
 800a046:	4638      	mov	r0, r7
 800a048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a04c:	89ab      	ldrh	r3, [r5, #12]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d907      	bls.n	800a062 <_fwalk_reent+0x3a>
 800a052:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a056:	3301      	adds	r3, #1
 800a058:	d003      	beq.n	800a062 <_fwalk_reent+0x3a>
 800a05a:	4629      	mov	r1, r5
 800a05c:	4630      	mov	r0, r6
 800a05e:	47c0      	blx	r8
 800a060:	4307      	orrs	r7, r0
 800a062:	3568      	adds	r5, #104	; 0x68
 800a064:	e7e9      	b.n	800a03a <_fwalk_reent+0x12>

0800a066 <__retarget_lock_init_recursive>:
 800a066:	4770      	bx	lr

0800a068 <__retarget_lock_acquire_recursive>:
 800a068:	4770      	bx	lr

0800a06a <__retarget_lock_release_recursive>:
 800a06a:	4770      	bx	lr

0800a06c <__swhatbuf_r>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	460e      	mov	r6, r1
 800a070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a074:	2900      	cmp	r1, #0
 800a076:	b096      	sub	sp, #88	; 0x58
 800a078:	4614      	mov	r4, r2
 800a07a:	461d      	mov	r5, r3
 800a07c:	da08      	bge.n	800a090 <__swhatbuf_r+0x24>
 800a07e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	602a      	str	r2, [r5, #0]
 800a086:	061a      	lsls	r2, r3, #24
 800a088:	d410      	bmi.n	800a0ac <__swhatbuf_r+0x40>
 800a08a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a08e:	e00e      	b.n	800a0ae <__swhatbuf_r+0x42>
 800a090:	466a      	mov	r2, sp
 800a092:	f000 f903 	bl	800a29c <_fstat_r>
 800a096:	2800      	cmp	r0, #0
 800a098:	dbf1      	blt.n	800a07e <__swhatbuf_r+0x12>
 800a09a:	9a01      	ldr	r2, [sp, #4]
 800a09c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0a4:	425a      	negs	r2, r3
 800a0a6:	415a      	adcs	r2, r3
 800a0a8:	602a      	str	r2, [r5, #0]
 800a0aa:	e7ee      	b.n	800a08a <__swhatbuf_r+0x1e>
 800a0ac:	2340      	movs	r3, #64	; 0x40
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	b016      	add	sp, #88	; 0x58
 800a0b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0b8 <__smakebuf_r>:
 800a0b8:	898b      	ldrh	r3, [r1, #12]
 800a0ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0bc:	079d      	lsls	r5, r3, #30
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	d507      	bpl.n	800a0d4 <__smakebuf_r+0x1c>
 800a0c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	6123      	str	r3, [r4, #16]
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	6163      	str	r3, [r4, #20]
 800a0d0:	b002      	add	sp, #8
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	ab01      	add	r3, sp, #4
 800a0d6:	466a      	mov	r2, sp
 800a0d8:	f7ff ffc8 	bl	800a06c <__swhatbuf_r>
 800a0dc:	9900      	ldr	r1, [sp, #0]
 800a0de:	4605      	mov	r5, r0
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7ff f957 	bl	8009394 <_malloc_r>
 800a0e6:	b948      	cbnz	r0, 800a0fc <__smakebuf_r+0x44>
 800a0e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d4ef      	bmi.n	800a0d0 <__smakebuf_r+0x18>
 800a0f0:	f023 0303 	bic.w	r3, r3, #3
 800a0f4:	f043 0302 	orr.w	r3, r3, #2
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	e7e3      	b.n	800a0c4 <__smakebuf_r+0xc>
 800a0fc:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <__smakebuf_r+0x7c>)
 800a0fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	6020      	str	r0, [r4, #0]
 800a104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a108:	81a3      	strh	r3, [r4, #12]
 800a10a:	9b00      	ldr	r3, [sp, #0]
 800a10c:	6163      	str	r3, [r4, #20]
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	6120      	str	r0, [r4, #16]
 800a112:	b15b      	cbz	r3, 800a12c <__smakebuf_r+0x74>
 800a114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a118:	4630      	mov	r0, r6
 800a11a:	f000 f8d1 	bl	800a2c0 <_isatty_r>
 800a11e:	b128      	cbz	r0, 800a12c <__smakebuf_r+0x74>
 800a120:	89a3      	ldrh	r3, [r4, #12]
 800a122:	f023 0303 	bic.w	r3, r3, #3
 800a126:	f043 0301 	orr.w	r3, r3, #1
 800a12a:	81a3      	strh	r3, [r4, #12]
 800a12c:	89a0      	ldrh	r0, [r4, #12]
 800a12e:	4305      	orrs	r5, r0
 800a130:	81a5      	strh	r5, [r4, #12]
 800a132:	e7cd      	b.n	800a0d0 <__smakebuf_r+0x18>
 800a134:	08009ec5 	.word	0x08009ec5

0800a138 <_malloc_usable_size_r>:
 800a138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a13c:	1f18      	subs	r0, r3, #4
 800a13e:	2b00      	cmp	r3, #0
 800a140:	bfbc      	itt	lt
 800a142:	580b      	ldrlt	r3, [r1, r0]
 800a144:	18c0      	addlt	r0, r0, r3
 800a146:	4770      	bx	lr

0800a148 <_raise_r>:
 800a148:	291f      	cmp	r1, #31
 800a14a:	b538      	push	{r3, r4, r5, lr}
 800a14c:	4604      	mov	r4, r0
 800a14e:	460d      	mov	r5, r1
 800a150:	d904      	bls.n	800a15c <_raise_r+0x14>
 800a152:	2316      	movs	r3, #22
 800a154:	6003      	str	r3, [r0, #0]
 800a156:	f04f 30ff 	mov.w	r0, #4294967295
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a15e:	b112      	cbz	r2, 800a166 <_raise_r+0x1e>
 800a160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a164:	b94b      	cbnz	r3, 800a17a <_raise_r+0x32>
 800a166:	4620      	mov	r0, r4
 800a168:	f000 f830 	bl	800a1cc <_getpid_r>
 800a16c:	462a      	mov	r2, r5
 800a16e:	4601      	mov	r1, r0
 800a170:	4620      	mov	r0, r4
 800a172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a176:	f000 b817 	b.w	800a1a8 <_kill_r>
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d00a      	beq.n	800a194 <_raise_r+0x4c>
 800a17e:	1c59      	adds	r1, r3, #1
 800a180:	d103      	bne.n	800a18a <_raise_r+0x42>
 800a182:	2316      	movs	r3, #22
 800a184:	6003      	str	r3, [r0, #0]
 800a186:	2001      	movs	r0, #1
 800a188:	e7e7      	b.n	800a15a <_raise_r+0x12>
 800a18a:	2400      	movs	r4, #0
 800a18c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a190:	4628      	mov	r0, r5
 800a192:	4798      	blx	r3
 800a194:	2000      	movs	r0, #0
 800a196:	e7e0      	b.n	800a15a <_raise_r+0x12>

0800a198 <raise>:
 800a198:	4b02      	ldr	r3, [pc, #8]	; (800a1a4 <raise+0xc>)
 800a19a:	4601      	mov	r1, r0
 800a19c:	6818      	ldr	r0, [r3, #0]
 800a19e:	f7ff bfd3 	b.w	800a148 <_raise_r>
 800a1a2:	bf00      	nop
 800a1a4:	20000010 	.word	0x20000010

0800a1a8 <_kill_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	4d07      	ldr	r5, [pc, #28]	; (800a1c8 <_kill_r+0x20>)
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	4608      	mov	r0, r1
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	f7f8 f925 	bl	8002404 <_kill>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	d102      	bne.n	800a1c4 <_kill_r+0x1c>
 800a1be:	682b      	ldr	r3, [r5, #0]
 800a1c0:	b103      	cbz	r3, 800a1c4 <_kill_r+0x1c>
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	bd38      	pop	{r3, r4, r5, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000888 	.word	0x20000888

0800a1cc <_getpid_r>:
 800a1cc:	f7f8 b912 	b.w	80023f4 <_getpid>

0800a1d0 <__sread>:
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d8:	f000 f894 	bl	800a304 <_read_r>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	bfab      	itete	ge
 800a1e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1e4:	181b      	addge	r3, r3, r0
 800a1e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1ea:	bfac      	ite	ge
 800a1ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1ee:	81a3      	strhlt	r3, [r4, #12]
 800a1f0:	bd10      	pop	{r4, pc}

0800a1f2 <__swrite>:
 800a1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f6:	461f      	mov	r7, r3
 800a1f8:	898b      	ldrh	r3, [r1, #12]
 800a1fa:	05db      	lsls	r3, r3, #23
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	4616      	mov	r6, r2
 800a202:	d505      	bpl.n	800a210 <__swrite+0x1e>
 800a204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a208:	2302      	movs	r3, #2
 800a20a:	2200      	movs	r2, #0
 800a20c:	f000 f868 	bl	800a2e0 <_lseek_r>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	4632      	mov	r2, r6
 800a21e:	463b      	mov	r3, r7
 800a220:	4628      	mov	r0, r5
 800a222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a226:	f000 b817 	b.w	800a258 <_write_r>

0800a22a <__sseek>:
 800a22a:	b510      	push	{r4, lr}
 800a22c:	460c      	mov	r4, r1
 800a22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a232:	f000 f855 	bl	800a2e0 <_lseek_r>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	89a3      	ldrh	r3, [r4, #12]
 800a23a:	bf15      	itete	ne
 800a23c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a23e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a246:	81a3      	strheq	r3, [r4, #12]
 800a248:	bf18      	it	ne
 800a24a:	81a3      	strhne	r3, [r4, #12]
 800a24c:	bd10      	pop	{r4, pc}

0800a24e <__sclose>:
 800a24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a252:	f000 b813 	b.w	800a27c <_close_r>
	...

0800a258 <_write_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d07      	ldr	r5, [pc, #28]	; (800a278 <_write_r+0x20>)
 800a25c:	4604      	mov	r4, r0
 800a25e:	4608      	mov	r0, r1
 800a260:	4611      	mov	r1, r2
 800a262:	2200      	movs	r2, #0
 800a264:	602a      	str	r2, [r5, #0]
 800a266:	461a      	mov	r2, r3
 800a268:	f7f8 f903 	bl	8002472 <_write>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d102      	bne.n	800a276 <_write_r+0x1e>
 800a270:	682b      	ldr	r3, [r5, #0]
 800a272:	b103      	cbz	r3, 800a276 <_write_r+0x1e>
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	20000888 	.word	0x20000888

0800a27c <_close_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d06      	ldr	r5, [pc, #24]	; (800a298 <_close_r+0x1c>)
 800a280:	2300      	movs	r3, #0
 800a282:	4604      	mov	r4, r0
 800a284:	4608      	mov	r0, r1
 800a286:	602b      	str	r3, [r5, #0]
 800a288:	f7f8 f90f 	bl	80024aa <_close>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_close_r+0x1a>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_close_r+0x1a>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	20000888 	.word	0x20000888

0800a29c <_fstat_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d07      	ldr	r5, [pc, #28]	; (800a2bc <_fstat_r+0x20>)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	602b      	str	r3, [r5, #0]
 800a2aa:	f7f8 f90a 	bl	80024c2 <_fstat>
 800a2ae:	1c43      	adds	r3, r0, #1
 800a2b0:	d102      	bne.n	800a2b8 <_fstat_r+0x1c>
 800a2b2:	682b      	ldr	r3, [r5, #0]
 800a2b4:	b103      	cbz	r3, 800a2b8 <_fstat_r+0x1c>
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000888 	.word	0x20000888

0800a2c0 <_isatty_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d06      	ldr	r5, [pc, #24]	; (800a2dc <_isatty_r+0x1c>)
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	602b      	str	r3, [r5, #0]
 800a2cc:	f7f8 f909 	bl	80024e2 <_isatty>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d102      	bne.n	800a2da <_isatty_r+0x1a>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	b103      	cbz	r3, 800a2da <_isatty_r+0x1a>
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	20000888 	.word	0x20000888

0800a2e0 <_lseek_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	4d07      	ldr	r5, [pc, #28]	; (800a300 <_lseek_r+0x20>)
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	4608      	mov	r0, r1
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	602a      	str	r2, [r5, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f7f8 f902 	bl	80024f8 <_lseek>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_lseek_r+0x1e>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_lseek_r+0x1e>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	20000888 	.word	0x20000888

0800a304 <_read_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d07      	ldr	r5, [pc, #28]	; (800a324 <_read_r+0x20>)
 800a308:	4604      	mov	r4, r0
 800a30a:	4608      	mov	r0, r1
 800a30c:	4611      	mov	r1, r2
 800a30e:	2200      	movs	r2, #0
 800a310:	602a      	str	r2, [r5, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	f7f8 f890 	bl	8002438 <_read>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d102      	bne.n	800a322 <_read_r+0x1e>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b103      	cbz	r3, 800a322 <_read_r+0x1e>
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	20000888 	.word	0x20000888

0800a328 <ceilf>:
 800a328:	ee10 3a10 	vmov	r3, s0
 800a32c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a330:	3a7f      	subs	r2, #127	; 0x7f
 800a332:	2a16      	cmp	r2, #22
 800a334:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a338:	dc2a      	bgt.n	800a390 <ceilf+0x68>
 800a33a:	2a00      	cmp	r2, #0
 800a33c:	da11      	bge.n	800a362 <ceilf+0x3a>
 800a33e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a3a4 <ceilf+0x7c>
 800a342:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a346:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34e:	dd05      	ble.n	800a35c <ceilf+0x34>
 800a350:	2b00      	cmp	r3, #0
 800a352:	db23      	blt.n	800a39c <ceilf+0x74>
 800a354:	2900      	cmp	r1, #0
 800a356:	bf18      	it	ne
 800a358:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800a35c:	ee00 3a10 	vmov	s0, r3
 800a360:	4770      	bx	lr
 800a362:	4911      	ldr	r1, [pc, #68]	; (800a3a8 <ceilf+0x80>)
 800a364:	4111      	asrs	r1, r2
 800a366:	420b      	tst	r3, r1
 800a368:	d0fa      	beq.n	800a360 <ceilf+0x38>
 800a36a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a3a4 <ceilf+0x7c>
 800a36e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a372:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37a:	ddef      	ble.n	800a35c <ceilf+0x34>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	bfc2      	ittt	gt
 800a380:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800a384:	fa40 f202 	asrgt.w	r2, r0, r2
 800a388:	189b      	addgt	r3, r3, r2
 800a38a:	ea23 0301 	bic.w	r3, r3, r1
 800a38e:	e7e5      	b.n	800a35c <ceilf+0x34>
 800a390:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a394:	d3e4      	bcc.n	800a360 <ceilf+0x38>
 800a396:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a39a:	4770      	bx	lr
 800a39c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3a0:	e7dc      	b.n	800a35c <ceilf+0x34>
 800a3a2:	bf00      	nop
 800a3a4:	7149f2ca 	.word	0x7149f2ca
 800a3a8:	007fffff 	.word	0x007fffff

0800a3ac <_init>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	bf00      	nop
 800a3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b2:	bc08      	pop	{r3}
 800a3b4:	469e      	mov	lr, r3
 800a3b6:	4770      	bx	lr

0800a3b8 <_fini>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	bf00      	nop
 800a3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3be:	bc08      	pop	{r3}
 800a3c0:	469e      	mov	lr, r3
 800a3c2:	4770      	bx	lr
